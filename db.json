{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/css/noscript.styl","path":"css/noscript.styl","modified":0,"renderable":1},{"_id":"themes/next/source/font/HarmonyOS_Sans_Bold.ttf","path":"font/HarmonyOS_Sans_Bold.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/font/HarmonyOS_Sans_Bold.woff","path":"font/HarmonyOS_Sans_Bold.woff","modified":0,"renderable":1},{"_id":"themes/next/source/font/HarmonyOS_Sans_Regular.ttf","path":"font/HarmonyOS_Sans_Regular.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/font/HarmonyOS_Sans_Regular.woff","path":"font/HarmonyOS_Sans_Regular.woff","modified":0,"renderable":1},{"_id":"themes/next/source/js/bookmark.js","path":"js/bookmark.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/comments-buttons.js","path":"js/comments-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/comments.js","path":"js/comments.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/config.js","path":"js/config.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/next-boot.js","path":"js/next-boot.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/pjax.js","path":"js/pjax.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/schedule.js","path":"js/schedule.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.png","path":"images/avatar.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/background.jpg","path":"images/background.jpg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo-algolia-nebula-blue-full.svg","path":"images/logo-algolia-nebula-blue-full.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/fancybox.js","path":"js/third-party/fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/rating.js","path":"js/third-party/rating.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/quicklink.js","path":"js/third-party/quicklink.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/pace.js","path":"js/third-party/pace.js","modified":0,"renderable":1},{"_id":"themes/next/source/images/material/color0A59F7.png","path":"images/material/color0A59F7.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/material/SamsarA.png","path":"images/material/SamsarA.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/material/colorF1F3F5.png","path":"images/material/colorF1F3F5.png","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/changyan.js","path":"js/third-party/comments/changyan.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/disqus.js","path":"js/third-party/comments/disqus.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/disqusjs.js","path":"js/third-party/comments/disqusjs.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/gitalk.js","path":"js/third-party/comments/gitalk.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/isso.js","path":"js/third-party/comments/isso.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/livere.js","path":"js/third-party/comments/livere.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/utterances.js","path":"js/third-party/comments/utterances.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/analytics/baidu-analytics.js","path":"js/third-party/analytics/baidu-analytics.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/analytics/google-analytics.js","path":"js/third-party/analytics/google-analytics.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/analytics/growingio.js","path":"js/third-party/analytics/growingio.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/chat/chatra.js","path":"js/third-party/chat/chatra.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/chat/gitter.js","path":"js/third-party/chat/gitter.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/chat/tidio.js","path":"js/third-party/chat/tidio.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/math/mathjax.js","path":"js/third-party/math/mathjax.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/math/katex.js","path":"js/third-party/math/katex.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/search/algolia-search.js","path":"js/third-party/search/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/search/local-search.js","path":"js/third-party/search/local-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/statistics/firestore.js","path":"js/third-party/statistics/firestore.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/statistics/lean-analytics.js","path":"js/third-party/statistics/lean-analytics.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/tags/mermaid.js","path":"js/third-party/tags/mermaid.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/tags/pdf.js","path":"js/third-party/tags/pdf.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/CF438E-The-Child-and-Binary-Tree-简易题解.md","hash":"06a4789cbb367f0b9df33519e40a76de980c185a","modified":1644817135582},{"_id":"source/_posts/CF487E-Tourists-简易题解.md","hash":"b0311ada6ef3854e1267baa172e8d1e2b97bff68","modified":1644742455612},{"_id":"source/_posts/FhqTreap各种操作模板大赏.md","hash":"d5bfe3faa798d4525ff503d53953b81423841697","modified":1644761159128},{"_id":"source/_posts/Codeforces-Round-536-Div-2-己亥年农历新年赛-简略题解.md","hash":"ccf0eacb06dfe79393989413993e44984646ed0f","modified":1644761209047},{"_id":"source/_posts/SCOI2016-Day1初略题解.md","hash":"c66a83b7ff56496e4b6e11a66c03738993aa7873","modified":1644743844812},{"_id":"source/_posts/OI中常见的线性代数矩阵问题.md","hash":"5a144425f23f47a42da7e5c37f92531915c43bcd","modified":1644811560321},{"_id":"source/_posts/CF888G-Xor-MST-简易题解.md","hash":"810e2d90cabeb9a8d0261a604c6a2a92cbd0cfd2","modified":1644746850121},{"_id":"source/_posts/SCOI2016-Day2初略题解.md","hash":"79d781e143c5695c07bf5bff60e2aa82262f6bdb","modified":1644759628683},{"_id":"source/_posts/Splay各种操作模板大赏.md","hash":"c5b53791df62dab4ffb02bc4f3fa2acb1133656b","modified":1644760810196},{"_id":"source/_posts/SDOI2016-生成魔咒-简易题解.md","hash":"6d9173e54cf7deed8a23b938aabbadc50c75409a","modified":1644761298476},{"_id":"source/_posts/hello-world.md","hash":"103396d467311e3c120132953c2fe4009e57980d","modified":1644833509356},{"_id":"source/_posts/tarjian算法的运用.md","hash":"261fc7ba81cbf2d00873a0e1af21a33567dc5667","modified":1644758627569},{"_id":"source/_posts/关于DP的优化.md","hash":"9982760019ae2ae5af10c20de66caa2e41a02b2f","modified":1644759484161},{"_id":"source/_posts/后缀自动机.md","hash":"481a7385d998e7f13afef75fddf3ce80fac83f54","modified":1644760410003},{"_id":"source/_posts/关于整型异或的线性基.md","hash":"10c92f188e5b461a5f0a8480cb21b8e01a1b8e2c","modified":1644809174775},{"_id":"source/_posts/多项式全家桶.md","hash":"f17930ed6fec0f8b7fa19fc2ee18df4b7ce778a0","modified":1644816761478},{"_id":"source/_posts/扩展中国剩余定理.md","hash":"096a596140399144be4fb1364c5718c3d349c97a","modified":1644809938616},{"_id":"source/_posts/导数和牛顿迭代.md","hash":"23281d3220689f217ba30e2f3fb015e6bfd92c98","modified":1644815234999},{"_id":"source/_posts/拉格朗日插值法.md","hash":"25660157c1d45631d397905bd9e61da030684505","modified":1644809228682},{"_id":"source/_posts/最短路-生成树和生成树形图相关.md","hash":"f3163e96be7d4023c902cb6667d6332d73814b5d","modified":1644755826549},{"_id":"source/_posts/树分治.md","hash":"1ba7b8ad92a8f741f66455ea68300c53f0eb7df7","modified":1644757450698},{"_id":"source/_posts/求多项式卷积的变换.md","hash":"5a117fbcd85675e5aa97db47fdee7990e5d2c9c8","modified":1644816977830},{"_id":"source/_posts/洛谷-P4883-mzf的考验-简易题解-fhq-treap.md","hash":"75fb6c2b3fff7e82b5c7e478af109f5ed333845e","modified":1644759630615},{"_id":"source/_posts/洛谷P1110-BZOJ1058-ZJOI2007-报表统计.md","hash":"e24f9553839cf90e684eef11239402e4fbe7b428","modified":1644742489862},{"_id":"source/_posts/由CRT合并引入的各种扩展求余和同余问题.md","hash":"98437795767c08111c520b1f8e695b2181db02c0","modified":1644817052540},{"_id":"source/_posts/线性筛.md","hash":"9b835594fcbde569c13eca64babb3150da3df557","modified":1644812087289},{"_id":"source/_posts/网络流-费用流和二分图匹配模板.md","hash":"18a5637b11c75c3862c55b31421bb6d19c9d0553","modified":1644758176474},{"_id":"source/_posts/莫比乌斯反演与杜教筛.md","hash":"525c2949e0e4a91bbed586b3670d359919417cf4","modified":1644816900769},{"_id":"source/_posts/莫比乌斯反演经典例题回顾.md","hash":"9058a6896e1fe664846fae3adb39419405360723","modified":1644813359763},{"_id":"source/_posts/超低能解读群论.md","hash":"da8e9618fb18cfb52db180d4e870e663c5d87767","modified":1644811132208},{"_id":"source/_posts/轻量字符串算法-KMP-AC自动机模板-和Manachar.md","hash":"f8903ba291d5d01043128a349899f83eb60de45b","modified":1644759960319},{"_id":"source/about/index.md","hash":"eb4ea2290a3500d677bc337da5f2f806496cff25","modified":1644753230707},{"_id":"source/categories/index.md","hash":"d4ad99e659d0f3326dad8af8895bd01a9602b2f0","modified":1644660394919},{"_id":"source/archives/index.md","hash":"dea431b5bc915cdc93f0852b0e09f6a249b02a60","modified":1644660629913},{"_id":"source/tags/index.md","hash":"6f680a2d0cec04226d2a8db89c94dd2a1c45b270","modified":1644659984186},{"_id":"source/contentimg/beatheart.html","hash":"2916154d53db3b9ada841647b298e2e4e5a8f294","modified":1644808320855},{"_id":"themes/next/.editorconfig","hash":"8570735a8d8d034a3a175afd1dd40b39140b3e6a","modified":1644297722000},{"_id":"themes/next/.gitattributes","hash":"ec43734985e1cafd53d88ded3020103f7416123c","modified":1644297722000},{"_id":"themes/next/.gitignore","hash":"417520c4dbbeab9c7e3ab10d944da0886366a0ee","modified":1644297722000},{"_id":"themes/next/.eslintrc.json","hash":"9c0762486f24a8c5e60f8b6c875e4c4728942649","modified":1644297722000},{"_id":"themes/next/_config.yml","hash":"299cd7b806b2ab1829ee1d1b7dd2ed7441279e66","modified":1646745919041},{"_id":"themes/next/.stylintrc","hash":"2cf4d637b56d8eb423f59656a11f6403aa90f550","modified":1644297722000},{"_id":"themes/next/LICENSE.md","hash":"68fc9a03d50fd4b5ea97092b05967d1819dea2c4","modified":1644297722000},{"_id":"themes/next/_vendors.yml","hash":"0a1212a43ef3ffaa7d6986534469bcd58512d4bd","modified":1644297722000},{"_id":"themes/next/README.md","hash":"fab15a85d9d8d90ecd8879525b9b74fb1c197978","modified":1644297722000},{"_id":"themes/next/renovate.json","hash":"cb29cc16e61b0b8a6dac34657d76822ae29ad5aa","modified":1644297722000},{"_id":"themes/next/crowdin.yml","hash":"e026078448c77dcdd9ef50256bb6635a8f83dca6","modified":1644297722000},{"_id":"themes/next/package.json","hash":"18b0af669754282feeb290503072ef91eeedb10d","modified":1644297722000},{"_id":"themes/next/.githooks/install.js","hash":"4d77dbddf2eac1f3fc78f151d12ed22208ed655b","modified":1644297722000},{"_id":"themes/next/.githooks/pre-commit","hash":"f473eac1aaaa96c947d67988bbed140bbab1a821","modified":1644297722000},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"21cbff565a0445d3a880fff1ee417e309740a9ab","modified":1644297722000},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"330656d93b6c03df9fb1f2f0e3534c971969473b","modified":1644297722000},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"3e9fbb78e3dee0ca1dc886d0c28b0148ba0ca499","modified":1644297722000},{"_id":"themes/next/.github/config.yml","hash":"7984e665e9de481a0e0e51fca5668337713f810b","modified":1644297722000},{"_id":"themes/next/.github/issue_label_bot.yaml","hash":"fca600ddef6f80c5e61aeed21722d191e5606e5b","modified":1644297722000},{"_id":"themes/next/.github/release-drafter.yml","hash":"423275ec021104b263cd88776936a8c8d6872b66","modified":1644297722000},{"_id":"themes/next/.github/label-commenter-config.yml","hash":"1097fc47beeacfc1edb0248c27b17bf64bde3565","modified":1644297722000},{"_id":"themes/next/languages/ar.yml","hash":"bca66db21c015dbd32970d8708b898518a773e1e","modified":1644297722000},{"_id":"themes/next/languages/bn.yml","hash":"b5e2a35eb6fff56b6e32ce479e63b6fc5e44d5cb","modified":1644297722000},{"_id":"themes/next/languages/de.yml","hash":"4be7b8b76c81bf1853eb36d2e874b17546a0e792","modified":1644297722000},{"_id":"themes/next/languages/es.yml","hash":"b813da5aed9d73b809133db4dfb08f90ec56afd9","modified":1644297722000},{"_id":"themes/next/.github/labeler.yml","hash":"5c4bc2bd561e6d9b33ee118cc12218c5de46f72d","modified":1644297722000},{"_id":"themes/next/languages/en.yml","hash":"814d81c27fed736055ee300e0a6505b26ff4313c","modified":1644297722000},{"_id":"themes/next/languages/fa.yml","hash":"6456d40dd42f44101d9d6e7054e9884e9163f948","modified":1644297722000},{"_id":"themes/next/languages/fr.yml","hash":"b15dc05afdc94de02e5d3fee4f8d3dc5594dd37e","modified":1644297722000},{"_id":"themes/next/languages/id.yml","hash":"14e794db4eca36b257994d81eb513e61d1edcbd6","modified":1644297722000},{"_id":"themes/next/languages/it.yml","hash":"c1eeab4992c76bfd436bb205ce58b1cfeef55ee6","modified":1644297722000},{"_id":"themes/next/languages/nl.yml","hash":"ecb8e39c6225f3c068a5fdd569ee7dafd5c41a1f","modified":1644297722000},{"_id":"themes/next/languages/ko.yml","hash":"6387357ac2dd498e8b8d630d27050a59180d7e8f","modified":1644297722000},{"_id":"themes/next/languages/default.yml","hash":"814d81c27fed736055ee300e0a6505b26ff4313c","modified":1644297722000},{"_id":"themes/next/languages/pt.yml","hash":"63a3e1e728ba5e6e22150de7331bb8a654f34960","modified":1644297722000},{"_id":"themes/next/languages/pt-BR.yml","hash":"a1f27b3a592fc58f17d247f5563ff4a90a3da5f2","modified":1644297722000},{"_id":"themes/next/languages/si.yml","hash":"615d18d044f44df476d6bfbf73f7b0edc2632168","modified":1644297722000},{"_id":"themes/next/languages/ru.yml","hash":"8c2b6361f2de17561c1a3eede2bf47b4e2ba6ce5","modified":1644297722000},{"_id":"themes/next/languages/ja.yml","hash":"d48c4157e0e02e847aac7b513580d3364c81948c","modified":1644297722000},{"_id":"themes/next/languages/tk.yml","hash":"519239e35c3bda7b62b00ff5d34644f45b16fe6a","modified":1644297722000},{"_id":"themes/next/languages/tr.yml","hash":"0bebba73d6f06c7dad61f80c0d7ad5f6f1791a01","modified":1644297722000},{"_id":"themes/next/languages/vi.yml","hash":"c669c34da544a563ceae3e196addc9df6a78e024","modified":1644297722000},{"_id":"themes/next/languages/zh-HK.yml","hash":"f195bb0502ffe66e850077a1af1033455ea65f93","modified":1644297722000},{"_id":"themes/next/languages/zh-CN.yml","hash":"5a3ab21210304efef736e96bad254f789f42c567","modified":1644297722000},{"_id":"themes/next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1644297722000},{"_id":"themes/next/languages/zh-TW.yml","hash":"92256b90028de9a1e79c6bc0e5885b93e7fb4b17","modified":1644297722000},{"_id":"themes/next/languages/uk.yml","hash":"7dd24580c0865c5a7bc4d391855045366a598936","modified":1644297722000},{"_id":"themes/next/docs/AUTHORS.md","hash":"a648823121563c34a177ae91f5a774b5e29f01a0","modified":1644297722000},{"_id":"themes/next/docs/LICENSE.txt","hash":"f5b14f791b7cfa1d16da981d929152e088a5d1b8","modified":1644297722000},{"_id":"themes/next/layout/archive.njk","hash":"d759f4d2cf5ddc6875ea250113a00662c1caf6d1","modified":1644297722000},{"_id":"themes/next/layout/category.njk","hash":"c68b7343d0f8145010f93351908cc36ef6212ec1","modified":1644297722000},{"_id":"themes/next/layout/_layout.njk","hash":"20e4160cd0deb4fa272cc3aed0f43520b3cf4a9c","modified":1644590748943},{"_id":"themes/next/layout/post.njk","hash":"6abeb85fb3e4c382ed4bb6049b12a807e6226e67","modified":1644297722000},{"_id":"themes/next/layout/index.njk","hash":"dd63e488ae8cc144335a5958acedf6a16edd7a92","modified":1644297722000},{"_id":"themes/next/layout/page.njk","hash":"6c40aa438c658eb7f0cd0f6a759f18b43e7e8f93","modified":1644297722000},{"_id":"themes/next/test/index.js","hash":"6bf0289846538be3e9a63809af98f00e1fbdd90b","modified":1644297722000},{"_id":"themes/next/.github/ISSUE_TEMPLATE/config.yml","hash":"c40ae7903b6cc99f94c9d45ac7ba8c2850bb1309","modified":1644297722000},{"_id":"themes/next/.github/ISSUE_TEMPLATE/other.md","hash":"8cc5b5c116f6a052865a324512362f145d699202","modified":1644297722000},{"_id":"themes/next/layout/tag.njk","hash":"9e16ba20c28a7f2c6bc75aa427f48122301a30aa","modified":1644297722000},{"_id":"themes/next/.github/ISSUE_TEMPLATE/bug-report.md","hash":"fc4dce84ed9a5d21d3a8833ff6d776c46f876115","modified":1644297722000},{"_id":"themes/next/.github/ISSUE_TEMPLATE/feature-request.md","hash":"4ecac91716eac59d7c2bc53cf6e95612d44da97b","modified":1644297722000},{"_id":"themes/next/.github/workflows/label-commenter.yml","hash":"44405477660289d4ed9beba1d054b15bb67bba06","modified":1644297722000},{"_id":"themes/next/.github/workflows/lock.yml","hash":"e48d1ced9a673d3f0911a700d3e68c0f4ca79263","modified":1644297722000},{"_id":"themes/next/.github/workflows/linter.yml","hash":"276a91c7179926f410c784c99fa635dc0a016c2d","modified":1644297722000},{"_id":"themes/next/.github/workflows/stale.yml","hash":"0feb3e1afd1b2dca9dbc7811ce4cf5520e2d186c","modified":1644297722000},{"_id":"themes/next/.github/workflows/labeler.yml","hash":"8b73c439dc796be141d521a4546bcfb7a5485534","modified":1644297722000},{"_id":"themes/next/.github/workflows/release-drafter.yml","hash":"4f3af81009cb922be91f718a67425377515ea69d","modified":1644297722000},{"_id":"themes/next/.github/workflows/tester.yml","hash":"22aaaa3eba1a7ebcf0f78417fd9a7113ee7b6c6c","modified":1644297722000},{"_id":"themes/next/docs/ru/README.md","hash":"87edab5a3eb7577a409c01df3f1631de40f8956f","modified":1644297722000},{"_id":"themes/next/layout/_macro/post-collapse.njk","hash":"1a30d751871dabfa80940042ddb1f77d07d830b9","modified":1644297722000},{"_id":"themes/next/layout/_macro/post.njk","hash":"d0ed41b9b05254e19d051b5f91fdcaa125ee7ca6","modified":1644757629815},{"_id":"themes/next/layout/_macro/sidebar.njk","hash":"eb786e8b35e354287cda345c524cd35ec955f692","modified":1644587029088},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"7a06d443f374bd1e84294067a0ac796afd9fbe60","modified":1644297722000},{"_id":"themes/next/docs/zh-CN/README.md","hash":"02bafc6ee86263790603861e356596f0c916e392","modified":1644297722000},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"a089f7a8368ab0b7d7b9b7ec0ac3767a453435df","modified":1644297722000},{"_id":"themes/next/layout/_third-party/fancybox.njk","hash":"844559f46e2ff1c8be234d5763703106e2072a7b","modified":1644297722000},{"_id":"themes/next/layout/_third-party/index.njk","hash":"d41eeb262978e34de4679d8971a9e7ac5d90ecbc","modified":1644297722000},{"_id":"themes/next/layout/_third-party/pace.njk","hash":"d7ad5714079f7f65446f880baf14722435ca9061","modified":1644297722000},{"_id":"themes/next/layout/_third-party/rating.njk","hash":"1bcdbc7fde26d6d9ef4e7fa43ffcff5a9506b20e","modified":1644297722000},{"_id":"themes/next/layout/_partials/comments.njk","hash":"c12f8a7497596441503f2541d2f746f2ee7dd594","modified":1644297722000},{"_id":"themes/next/layout/_third-party/quicklink.njk","hash":"0efed71ed530447718c4ea5bbd5fc8695b0b0d5f","modified":1644297722000},{"_id":"themes/next/layout/_partials/footer.njk","hash":"19713f472972caac33ae5fbcfe9105da61257de4","modified":1644297722000},{"_id":"themes/next/layout/_partials/languages.njk","hash":"e43f22198cccb5f6e306b1ce0d28d12a4fb891f8","modified":1644297722000},{"_id":"themes/next/layout/_partials/pagination.njk","hash":"9876dbfc15713c7a47d4bcaa301f4757bd978269","modified":1644297722000},{"_id":"themes/next/layout/_scripts/index.njk","hash":"6668878a0f9a1166c6a879755f54a08d942da870","modified":1644297722000},{"_id":"themes/next/scripts/tags/button.js","hash":"c6ad2ed544fbb25ecb5d820c36e76302504271b7","modified":1644297722000},{"_id":"themes/next/scripts/tags/caniuse.js","hash":"935a311142a409c1896b3ae3f01fe7a9e2db1134","modified":1644297722000},{"_id":"themes/next/layout/_partials/widgets.njk","hash":"25ba849c46bae14762ea069bb7ae85cad22074c5","modified":1644650214276},{"_id":"themes/next/layout/_scripts/vendors.njk","hash":"be80b9fe415a9a09d74c28e230995fd292dfc123","modified":1644297722000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"92c19d796bdb3320df9caea59bf52df7a95d9da9","modified":1644297722000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"9ed799c329abf830f623689d7e136991256a24ca","modified":1644297722000},{"_id":"themes/next/scripts/tags/label.js","hash":"8a73348186113bae0a51ea2f891c1bb882fab05a","modified":1644297722000},{"_id":"themes/next/scripts/tags/link-grid.js","hash":"18a483c2d5afd701f6080ffdddf2d1321370336c","modified":1644297722000},{"_id":"themes/next/scripts/tags/index.js","hash":"17f9451ce1f10f78437f52218757d38d4e1591b0","modified":1644297722000},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"4fb01ca650fa8b256b8d48f50dc1b18350bd3d6d","modified":1644297722000},{"_id":"themes/next/scripts/tags/note.js","hash":"7b94ddb46b7d4b0fe815f2fbe4bd375f07f55363","modified":1644297722000},{"_id":"themes/next/scripts/tags/pdf.js","hash":"344636b6fd7e27e8831c1e194039afc0d61931cd","modified":1644297722000},{"_id":"themes/next/scripts/tags/video.js","hash":"2ee926448583be8f95af1f2884ae2c9c4830151d","modified":1644297722000},{"_id":"themes/next/scripts/tags/tabs.js","hash":"0eabe51da40b4b13e16419c8fe02452d9a4fef73","modified":1644297722000},{"_id":"themes/next/scripts/events/index.js","hash":"1ce12eda88fa5df7e76ec7b78b8463fc6618410c","modified":1644297722000},{"_id":"themes/next/scripts/filters/default-injects.js","hash":"872f01cb10e422a648ea505436532e776e92926b","modified":1644297722000},{"_id":"themes/next/scripts/filters/locals.js","hash":"9eb5310664759931287dd28ea39165dfb67f12ed","modified":1644297722000},{"_id":"themes/next/scripts/filters/minify.js","hash":"3abdcb715562414063e0fb3eeb6244ce59c477e0","modified":1644297722000},{"_id":"themes/next/scripts/filters/post.js","hash":"ab8bb12e4d55640b1ac4252514468ce37ebcb0b0","modified":1644297722000},{"_id":"themes/next/scripts/helpers/font.js","hash":"3394185a7f0393c16ce52c8028f90da3e9239c55","modified":1644297722000},{"_id":"themes/next/scripts/helpers/engine.js","hash":"a2ae21ec522c9afd2a8c70f660a586ed0d8b97dc","modified":1644297722000},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"a11b71ba0c5012e2cdcab31c15439156b215563e","modified":1644297722000},{"_id":"themes/next/scripts/helpers/next-config.js","hash":"9a07f2d979fc8fe0c5e07d48304187b9b03ea7ff","modified":1644297722000},{"_id":"themes/next/scripts/helpers/next-vendors.js","hash":"afdd6a188a74c188f0dd154fac70efd4080ca262","modified":1644297722000},{"_id":"themes/next/source/css/_colors.styl","hash":"3c6798c10cc220d83481cb3f3782e78558cee789","modified":1644297722000},{"_id":"themes/next/source/css/_mixins.styl","hash":"32d31cb5a155681c19f5ad0bb56dcb08429f93ef","modified":1644672778673},{"_id":"themes/next/source/css/noscript.styl","hash":"76bba5d7916e9930e68215a0fce3a7d81c44510f","modified":1644297722000},{"_id":"themes/next/source/css/main.styl","hash":"e7e7cf017726e381b43c2f3ddc386a858f24b996","modified":1644579699473},{"_id":"themes/next/source/js/bookmark.js","hash":"0f563ffbf05fad30e854e413ab17ff7164ab5a53","modified":1644297722000},{"_id":"themes/next/source/font/HarmonyOS_Sans_Regular.woff","hash":"663556d3299f7f31696d8e5c7c10ecadcafd2221","modified":1644596758159},{"_id":"themes/next/source/js/comments-buttons.js","hash":"1a7344440321713426a0b2ab17e276b5bdf85ade","modified":1644297722000},{"_id":"themes/next/source/js/comments.js","hash":"66ae2e26ea36a41b72c638ea8b220296638ae952","modified":1644297722000},{"_id":"themes/next/source/js/config.js","hash":"4c4ebbe3b3f3841a26f9d5af6d0ba8bc6da01c54","modified":1644297722000},{"_id":"themes/next/source/js/pjax.js","hash":"919f5281c4a04d11cfd94573ecf57b3dbabd3cc8","modified":1644297722000},{"_id":"themes/next/source/js/next-boot.js","hash":"48497e2156a10155dc42311633a110c9685692c9","modified":1644297722000},{"_id":"themes/next/source/js/motion.js","hash":"6d4bd07a6f8e1b4083119dca0acb5b289533b619","modified":1644297722000},{"_id":"themes/next/source/js/schedule.js","hash":"2b43e2d576a308289880befc27580dbb2aa34439","modified":1644297722000},{"_id":"themes/next/source/js/utils.js","hash":"e447160d342b1f93df5214b6a733441039ced439","modified":1644297722000},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"67f2d82aafddd73606e90ceeefd9d6a3253c92e8","modified":1644650781273},{"_id":"themes/next/source/images/avatar.gif","hash":"2dbc3e2f2d624b2ca1afe6edc2ca17307f1950c8","modified":1644297722000},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"b56c9464fa4e299b1207131e3c6041c07d1191d0","modified":1644650848064},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"4f113cda3c80799a3be656e496a199bb5e0a87a0","modified":1644650865317},{"_id":"themes/next/source/images/logo-algolia-nebula-blue-full.svg","hash":"b85e274207b1392782476a0430feac98db1e7da0","modified":1644297722000},{"_id":"themes/next/test/validate/index.js","hash":"5a95ccc8598667535bd022e988055c0e019f3670","modified":1644297722000},{"_id":"themes/next/test/helpers/index.js","hash":"63ba28afed697f7b3574436b1133b8ecc9c0c357","modified":1644297722000},{"_id":"themes/next/test/helpers/next-url.js","hash":"a91d880cb75e0a8e65a7be4c7362b2c8ebfb7c4f","modified":1644297722000},{"_id":"themes/next/test/helpers/font.js","hash":"342ef3c6fd2dcca2a8802a516ed6d7f389fd2ca2","modified":1644297722000},{"_id":"themes/next/test/tags/button.js","hash":"48f2aa4c513e9e24bd6a811410520b74cd7ea88b","modified":1644297722000},{"_id":"themes/next/test/tags/caniuse.js","hash":"aa5e728445caeaf7c2ccd0f3fcb2cad0c93ca6d1","modified":1644297722000},{"_id":"themes/next/test/tags/group-pictures.js","hash":"5c68ae0184f9da6e00ba199f2554d503d8e6da71","modified":1644297722000},{"_id":"themes/next/test/tags/center-quote.js","hash":"7667342fd1a1417eaf6a254012b84ae40e8d13dd","modified":1644297722000},{"_id":"themes/next/test/tags/index.js","hash":"e8779e54f0979b221858f8bb74dd081bb503b910","modified":1644297722000},{"_id":"themes/next/test/tags/label.js","hash":"4ebf3698c258ca978b997acbdd0dece44069c09d","modified":1644297722000},{"_id":"themes/next/test/tags/link-grid.js","hash":"43d298fafb7c45a874b766d443843bd26346e689","modified":1644297722000},{"_id":"themes/next/test/tags/note.js","hash":"3dcfcd65bf9f326972ea7571fdb1444200f5d07e","modified":1644297722000},{"_id":"themes/next/test/tags/mermaid.js","hash":"ab77be5f3c6d9a57c7b9dda6decf1906a736fef9","modified":1644297722000},{"_id":"themes/next/test/tags/pdf.js","hash":"fd6ea5123560a90f7e7c1eface23dbe1455db25f","modified":1644297722000},{"_id":"themes/next/test/tags/tabs.js","hash":"d63722919f9da2e44d6b952801e10a2915ea9c12","modified":1644297722000},{"_id":"themes/next/test/tags/video.js","hash":"b796fc4dceb20a30e730c322bb5474c0162464cc","modified":1644297722000},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.njk","hash":"d89066ff53879693f023e540d59c86137172c529","modified":1644297722000},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.njk","hash":"6215309aee028dcb734452beec448c5afb6c63fc","modified":1644297722000},{"_id":"themes/next/layout/_third-party/analytics/cloudflare.njk","hash":"c978e9efd472c4825f93b83524b11f1c4f7efaab","modified":1644297722000},{"_id":"themes/next/layout/_third-party/analytics/growingio.njk","hash":"8afaa772c390bd9d53a5cff9645ac3168334eb98","modified":1644297722000},{"_id":"themes/next/layout/_third-party/analytics/index.njk","hash":"45477a04cf2b3c077061c8c3ada216c1ae288e0e","modified":1644297722000},{"_id":"themes/next/layout/_third-party/analytics/microsoft-clarity.njk","hash":"09ffc0b1175e9c11b9329cf8b398123418d7b0eb","modified":1644297722000},{"_id":"themes/next/layout/_third-party/chat/tidio.njk","hash":"02aab857c27fc103216029be991688b12a73a525","modified":1644297722000},{"_id":"themes/next/layout/_third-party/chat/gitter.njk","hash":"f8cc14b7aa949999a1faaeb7855e2f20b59a386d","modified":1644297722000},{"_id":"themes/next/layout/_third-party/chat/chatra.njk","hash":"d7263fca16d0278ccf1f6aa1c6df6902a6344a09","modified":1644297722000},{"_id":"themes/next/layout/_third-party/comments/changyan.njk","hash":"d1c950f8fbdf85e7a3eae5463767a89e858e8220","modified":1644297722000},{"_id":"themes/next/layout/_third-party/comments/disqus.njk","hash":"9375b19a89b7fa9474e558d085af5448d4c5c50c","modified":1644297722000},{"_id":"themes/next/layout/_third-party/comments/gitalk.njk","hash":"b63b7e2ede0d3e66e732fa1a06bda9b19e1e85d4","modified":1644297722000},{"_id":"themes/next/layout/_third-party/comments/isso.njk","hash":"64cc3bdaf644fd32c0d0a247f29f5b6904da9af3","modified":1644297722000},{"_id":"themes/next/layout/_third-party/comments/livere.njk","hash":"3b13b09fba84ec6000886890a6710736a2b8fafe","modified":1644297722000},{"_id":"themes/next/layout/_third-party/comments/disqusjs.njk","hash":"0749cb6902baecdfd01f779a2a2513f6d2f6a823","modified":1644297722000},{"_id":"themes/next/layout/_third-party/comments/utterances.njk","hash":"5a94032bc3512a10ad4328fc19ec07b819a1d687","modified":1644297722000},{"_id":"themes/next/layout/_third-party/math/katex.njk","hash":"d82c24136bbd3443b85f07f5579845833b594684","modified":1644297722000},{"_id":"themes/next/layout/_third-party/search/algolia-search.njk","hash":"24ed76e0c72a25ac152820c750a05826a706b6f4","modified":1644297722000},{"_id":"themes/next/layout/_third-party/search/localsearch.njk","hash":"e45ea3542cdc9ed7ec8447b5e6f35df4c5e82758","modified":1644297722000},{"_id":"themes/next/layout/_third-party/math/mathjax.njk","hash":"3677017fd4572b158311f5f5d870590ab25184e0","modified":1644297722000},{"_id":"themes/next/layout/_third-party/math/index.njk","hash":"abf37fc55aa86702118e8fdf5bf2d389dd589aa0","modified":1644297722000},{"_id":"themes/next/layout/_third-party/statistics/busuanzi-counter.njk","hash":"a4bc501da0f22f7e420f0ca47e83988ce90b1368","modified":1644297722000},{"_id":"themes/next/layout/_third-party/statistics/firestore.njk","hash":"d32ebe94560fa95824478ebbff531bffc47b194d","modified":1644297722000},{"_id":"themes/next/layout/_third-party/statistics/index.njk","hash":"568ddf7955d11d93fb5e842b403a7ac8b1b7fdb1","modified":1644297722000},{"_id":"themes/next/layout/_third-party/statistics/lean-analytics.njk","hash":"2446e748cdc102c78492216319ac02148db7daf6","modified":1644297722000},{"_id":"themes/next/layout/_third-party/tags/mermaid.njk","hash":"099e031f52fb8e47b3af5b2684737efc9e643ee7","modified":1644297722000},{"_id":"themes/next/layout/_partials/header/menu-item.njk","hash":"b46f412c0b4f775fd329d50357f722f5d7c1a3ba","modified":1644297722000},{"_id":"themes/next/layout/_partials/header/index.njk","hash":"650de421a8ce4cf685428ffbe0087ff84cbd1356","modified":1644297722000},{"_id":"themes/next/layout/_third-party/tags/pdf.njk","hash":"2c81984cc4f5123103460442f6e046f5b6c97127","modified":1644297722000},{"_id":"themes/next/layout/_partials/header/brand.njk","hash":"aff4613756456be26415febc668860fdab8d33c5","modified":1644297722000},{"_id":"themes/next/layout/_partials/head/head-unique.njk","hash":"0682a52927c331eee17f190984ec3b25ee84f305","modified":1644297722000},{"_id":"themes/next/layout/_partials/header/sub-menu.njk","hash":"75a158a5b54a3a76ee6590f5e0e2dd4a9f0be869","modified":1644297722000},{"_id":"themes/next/layout/_partials/header/menu.njk","hash":"8561e4125b227e5134cb058e2a76fb2e5233ca29","modified":1644297722000},{"_id":"themes/next/layout/_partials/page/breadcrumb.njk","hash":"edb3bb6d644b7407673c5ef3a426a244e98fcf89","modified":1644297722000},{"_id":"themes/next/layout/_partials/head/head.njk","hash":"0ba2bf0266f1fcb8edbd961869f8521b29685c56","modified":1644297722000},{"_id":"themes/next/layout/_partials/page/categories.njk","hash":"17156d99941f28a225951ffdcfa9a115e20dc2d2","modified":1644297722000},{"_id":"themes/next/layout/_partials/page/schedule.njk","hash":"ca2ccf3cf1874c45712f192ad45dea96fbd9920d","modified":1644297722000},{"_id":"themes/next/layout/_partials/page/tags.njk","hash":"a18d1598e36cc72f2b0b24c3cc3c5990dfaa3254","modified":1644297722000},{"_id":"themes/next/layout/_partials/page/page-header.njk","hash":"7ed4f102a1825195cff8d7995bf9219f323a9034","modified":1644297722000},{"_id":"themes/next/layout/_partials/search/algolia-search.njk","hash":"efb2b6f19df02ba5ae623a1f274fff52aed21e6f","modified":1644297722000},{"_id":"themes/next/layout/_partials/search/index.njk","hash":"8f6f256ab3b351ffc80f1f3f1d9834e9a7cfac31","modified":1644297722000},{"_id":"themes/next/layout/_partials/search/localsearch.njk","hash":"661f7acae43f0be694266323320f977d84119abe","modified":1644297722000},{"_id":"themes/next/layout/_partials/post/post-followme.njk","hash":"154df0bb323c332d8c25343f258ee865e5553423","modified":1644297722000},{"_id":"themes/next/layout/_partials/post/post-copyright.njk","hash":"133942922e34abae9e4de7ea5591d77c0caa4b37","modified":1644297722000},{"_id":"themes/next/layout/_partials/post/post-footer.njk","hash":"bde2c7356d9362972bde41cc206d5816f8ed714d","modified":1644297722000},{"_id":"themes/next/layout/_partials/post/post-meta.njk","hash":"9fa47e4fb342811da590ee4adc91cf81118c0a39","modified":1644297722000},{"_id":"themes/next/layout/_partials/post/post-related.njk","hash":"57eca76cfbbe9a65bc2a77f1deebf003ed335673","modified":1644297722000},{"_id":"themes/next/layout/_partials/sidebar/site-overview.njk","hash":"3d8591bb92df77ceb9d5b07bc76da1ca89e5bd76","modified":1644297722000},{"_id":"themes/next/layout/_partials/post/post-reward.njk","hash":"002b51d0cae3f2e2e008bdc58be90c728282de5b","modified":1644297722000},{"_id":"themes/next/scripts/filters/comment/changyan.js","hash":"7fa8701c86485b2fe7324e017101a32417902397","modified":1644297722000},{"_id":"themes/next/scripts/filters/comment/common.js","hash":"2486f3e0150c753e5f3af1a3665d074704b8ee2c","modified":1644297722000},{"_id":"themes/next/scripts/filters/comment/default-config.js","hash":"93ee5f9109dad885dc38c49bcee630c10f9dce6e","modified":1644297722000},{"_id":"themes/next/scripts/filters/comment/disqus.js","hash":"7f71d6b271ba65ff333d5682e7575711d368c0d2","modified":1644297722000},{"_id":"themes/next/scripts/filters/comment/disqusjs.js","hash":"135b87d151055eefdbc711d9e704b112b3214a84","modified":1644297722000},{"_id":"themes/next/scripts/filters/comment/gitalk.js","hash":"7bb7dafdd7f6bca8464b54e17e552ce7f1714195","modified":1644297722000},{"_id":"themes/next/scripts/filters/comment/isso.js","hash":"ff8b5b5145220a17d0ecd9508ba9bd2d3b2da47d","modified":1644297722000},{"_id":"themes/next/scripts/filters/comment/utterances.js","hash":"d3bded697bc32dace689d2a6dfb6eb7514169d15","modified":1644297722000},{"_id":"themes/next/scripts/filters/comment/livere.js","hash":"5a07d8bb52bc1d51a624ca8db54be144566c306b","modified":1644297722000},{"_id":"themes/next/scripts/events/lib/config.js","hash":"c8b59b404f5d2a0b3b5cd1a6c9a10af5f30e43b5","modified":1644297722000},{"_id":"themes/next/scripts/events/lib/highlight.js","hash":"6aec7b2c38c50989a23bfaa0d560e75c7f553e12","modified":1644297722000},{"_id":"themes/next/scripts/events/lib/utils.js","hash":"672dce0632af589b7fe47fa45c2094fa013885f7","modified":1644297722000},{"_id":"themes/next/scripts/events/lib/vendors.js","hash":"299664182f502447c07301461db99bfd6993fdac","modified":1644297722000},{"_id":"themes/next/scripts/events/lib/injects.js","hash":"d987709267a1bc6e5014411e9983d7c49c102c16","modified":1644297722000},{"_id":"themes/next/source/css/_my/mycss.styl","hash":"4e7107c073bd1a68c0d2db92d4bed67373f7cdc0","modified":1644758398979},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"96e0a7c2a65ce68215e17e369085b2ea2f1334f2","modified":1644297722000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"e1fbf169b9b6a194b518240cbd06ec3c48b83d61","modified":1644297722000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"e3be898f5ebcf435a26542653a9297ff2c71aeb0","modified":1644297722000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"e209c96ff3dc8317d65f152bec718ce19602764b","modified":1644586096577},{"_id":"themes/next/source/css/_variables/base.styl","hash":"163c7441d777bee87042d475e6ce0fde199add28","modified":1644663006640},{"_id":"themes/next/source/js/schemes/muse.js","hash":"9a836d2bcc3defe4bd1ee51f5f4eb7006ebdd41b","modified":1644297722000},{"_id":"themes/next/source/js/third-party/fancybox.js","hash":"c098d14e65dd170537134358d4b8359ad0539c2c","modified":1644297722000},{"_id":"themes/next/source/js/third-party/quicklink.js","hash":"eed02e6fced8e5a653077205d4d4d7834ca71472","modified":1644297722000},{"_id":"themes/next/source/js/third-party/pace.js","hash":"0ef04218b93561ba4d0ff420d556c3d90a756d32","modified":1644297722000},{"_id":"themes/next/source/js/third-party/rating.js","hash":"4e92c2d107ba47b47826829f9668030d5ea9bfb8","modified":1644297722000},{"_id":"themes/next/source/images/material/color0A59F7.png","hash":"e56104e21eeeb58289ab5b2a31e27aac07c659b3","modified":1644833040312},{"_id":"themes/next/source/images/material/colorF1F3F5.png","hash":"230d31c5aa80ebdd4652a0cc98320b670cd48c65","modified":1644833043813},{"_id":"themes/next/source/css/_common/components/index.styl","hash":"fe1868f47681e00a33a96199302be85377282f63","modified":1644297722000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"bab653bcf226311381e8411a0492202f1bf1fce9","modified":1644592538940},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"d0a7c99095f490b0d2ed6b1be43d435960798cec","modified":1644297722000},{"_id":"themes/next/source/css/_common/scaffolding/buttons.styl","hash":"1c3c1faa1dfc81ba370dd1543a4fd80467b05e1f","modified":1644674371408},{"_id":"themes/next/source/css/_common/scaffolding/comments.styl","hash":"e4fecc889ba3317a64e9abba5842c79dff9b7827","modified":1644297722000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"b56367ea676ea8e8783ea89cd4ab150c7da7a060","modified":1644297722000},{"_id":"themes/next/source/css/_common/scaffolding/index.styl","hash":"523fb7b653b87ae37fc91fc8813e4ffad87b0d7e","modified":1644297722000},{"_id":"themes/next/source/css/_common/scaffolding/pagination.styl","hash":"b5c7782368889fa9fd93807d28ff2daf270e3703","modified":1644297722000},{"_id":"themes/next/source/css/_common/components/reading-progress.styl","hash":"90a86045a33c1bae49fc2f6fa1e1b53170c7f77b","modified":1644297722000},{"_id":"themes/next/source/css/_common/scaffolding/toggles.styl","hash":"572a41499391677d84b16d8dbd6a996a3d5ce041","modified":1644297722000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"e840b23d33023e6d45e018f6e84b683dd56efd8d","modified":1644297722000},{"_id":"themes/next/source/css/_common/outline/index.styl","hash":"8e34df131830d4fa3725e4590a672ba1cf1903e5","modified":1644297722000},{"_id":"themes/next/source/css/_common/outline/mobile.styl","hash":"7f7114118d3ce0e9c2aef32eb661967003c78fdc","modified":1644671858689},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"fd49b521d67eaccc629f77b4e095cb7310327565","modified":1644297722000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"2a17f83f8f555e052885fe9df3c59287230a9955","modified":1644571567643},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"4817e77577896ab5c0da434549917ee703a3f4cf","modified":1644297722000},{"_id":"themes/next/source/css/_schemes/Mist/_layout.styl","hash":"5604ac1e161099a4d3e5657d53507268866dc717","modified":1644297722000},{"_id":"themes/next/source/css/_schemes/Muse/_header.styl","hash":"06080fd963c904d96c00eff098a284e337953013","modified":1644297722000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"de8087039b986d11a3595cfbf77f8055f8dbb1a9","modified":1644571551190},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expand.styl","hash":"7ac4c406c6719ff2e916cbeb12e31dcd69ace2fb","modified":1644674334468},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"ab16a3dcdc0393b9b582ef59dcc13db9320e917c","modified":1644297722000},{"_id":"themes/next/source/css/_schemes/Muse/_sidebar.styl","hash":"944364893bd7160d954c10ba931af641c91515a4","modified":1644297722000},{"_id":"themes/next/source/css/_schemes/Muse/_sub-menu.styl","hash":"c48ccd8d6651fe1a01faff8f01179456d39ba9b1","modified":1644571536093},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"82a29572dd90451f75358a2ee2522b87304a0bb8","modified":1644297722000},{"_id":"themes/next/source/css/_schemes/Pisces/_header.styl","hash":"b741ab96e73370711c63a6581159f2ea8b5bfa1b","modified":1644578317779},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"6eee86c8f0175d6c09e434053516cd8556f78d44","modified":1644297722000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"90ebcc4cc269958efa7017fff25fa4d0b98aef34","modified":1644592921149},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"72dc825c50357402c342d62ab60fc0c478ab6bc1","modified":1644571739150},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"778ed2ad5643b93970c95626b325defeb586733f","modified":1644571506545},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"8000075b227749a7495eaf417cac6ccfbe441580","modified":1644297722000},{"_id":"themes/next/source/js/third-party/comments/changyan.js","hash":"260d1a77d6a3bb33a579d3e4cca1997003e799b5","modified":1644297722000},{"_id":"themes/next/source/js/third-party/comments/disqusjs.js","hash":"b6c58f098473b526d6a3cd35655caf34b77f7cff","modified":1644297722000},{"_id":"themes/next/source/js/third-party/comments/isso.js","hash":"753a873b6f566aff5ba77ca23f91b78eb880ca64","modified":1644297722000},{"_id":"themes/next/source/js/third-party/comments/livere.js","hash":"2247d88c934c765c43013337860774aaa99f0b31","modified":1644297722000},{"_id":"themes/next/source/js/third-party/comments/disqus.js","hash":"e1cc671b0d524864fd445e3ab4ade9ee6d07e565","modified":1644297722000},{"_id":"themes/next/source/js/third-party/comments/gitalk.js","hash":"0ec038cf83e8ec067534f16a54041e47a3c1e59a","modified":1644297722000},{"_id":"themes/next/source/js/third-party/comments/utterances.js","hash":"f67f90eb03e284c82da2b8cf2f1e31801813c16d","modified":1644297722000},{"_id":"themes/next/source/js/third-party/analytics/baidu-analytics.js","hash":"f629acc46ff40c071ffd31b77d5c7616f0fdd778","modified":1644297722000},{"_id":"themes/next/source/js/third-party/analytics/growingio.js","hash":"78dd3cf04082b7dbe6246e404b2aa8e726922402","modified":1644297722000},{"_id":"themes/next/source/js/third-party/chat/chatra.js","hash":"c32180522788c10e51df1803aa6842ef0432ddc9","modified":1644297722000},{"_id":"themes/next/source/js/third-party/analytics/google-analytics.js","hash":"59684383385059dc4f8a1ff85dbbeb703bcdbcb5","modified":1644297722000},{"_id":"themes/next/source/js/third-party/chat/gitter.js","hash":"cc38c94125f90dadde11b5ebac7d8bf99a1a08a2","modified":1644297722000},{"_id":"themes/next/source/js/third-party/chat/tidio.js","hash":"b0079f6a4601e06ca6fe46e83a2f5af553e9bc3c","modified":1644297722000},{"_id":"themes/next/source/js/third-party/math/mathjax.js","hash":"5c749b9c1c3bb738122d0516211ecff6496d4907","modified":1644297722000},{"_id":"themes/next/source/js/third-party/search/algolia-search.js","hash":"ac401e3736d56a3c9cb85ab885744cce0b813c55","modified":1644297722000},{"_id":"themes/next/source/js/third-party/math/katex.js","hash":"83c54ee536e487a1031783443fe0cb63b1b4767e","modified":1644297722000},{"_id":"themes/next/source/js/third-party/search/local-search.js","hash":"45c485f82258d246f37deb66884bd2643323ef3a","modified":1644297722000},{"_id":"themes/next/source/js/third-party/statistics/firestore.js","hash":"0960f16107ed61452fb0dffc6ed22dc143de34ef","modified":1644297722000},{"_id":"themes/next/source/js/third-party/statistics/lean-analytics.js","hash":"5a928990856b8e456f0663cf3b6b406733672e39","modified":1644297722000},{"_id":"themes/next/source/js/third-party/tags/mermaid.js","hash":"3dc4628efa6debd6490fc0ebddff2424a7b319d8","modified":1644297722000},{"_id":"themes/next/source/js/third-party/tags/pdf.js","hash":"af78c22f0e61c8c8aa8794e585e0d632c6d4fcb8","modified":1644297722000},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"8afdc311c6b8db121758371f95cf1c5e77354f42","modified":1644297722000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"b6e2eb1550a7845cb2adf86081a4ab6c7bde1e68","modified":1644297722000},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"6b816c2511242ee503fb5f34cd3e4dcdafc06b85","modified":1644297722000},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"1a81d1a71fcf0699629ce6e72dfd0a15f3a2dd0a","modified":1644297722000},{"_id":"themes/next/source/css/_common/components/pages/index.styl","hash":"7504dbc5c70262b048143b2c37d2b5aa2809afa2","modified":1644297722000},{"_id":"themes/next/source/css/_common/components/post/index.styl","hash":"d0805a763176b3c0003967401644f41dfe3bc9e8","modified":1644297722000},{"_id":"themes/next/source/css/_common/components/post/post-body.styl","hash":"ea351936d71e0b6259febac3d7d56d1be6927bf9","modified":1644297722000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"ec37a36e94ba791663607a5022f763915778578f","modified":1644297722000},{"_id":"themes/next/source/css/_common/components/post/post-footer.styl","hash":"1d284f3ea03ba9b4feb76b375e539a8e0bccf1c3","modified":1644297722000},{"_id":"themes/next/source/css/_common/components/post/post-followme.styl","hash":"fc1a7bac6493f24aa50665574f37f3dd954f210c","modified":1644297722000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"aa366d37389760c8595529b850f461569577a1c5","modified":1644297722000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"9ac6f477177264c26a46e8333b8456720a0444dc","modified":1644297722000},{"_id":"themes/next/source/css/_common/components/post/post-header.styl","hash":"7ad2df8d47b4495909ddaa39f4ea5c04092a5059","modified":1644672044871},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"07cff69f2d57e6321595f64c16d8b763dc88df6a","modified":1644297722000},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"b6677dc2a2368084ab82bb4f145ac79e5966c150","modified":1644297722000},{"_id":"themes/next/source/css/_common/components/third-party/disqusjs.styl","hash":"c2326ee3e8b724d99c24a818ddee32813ea5bf89","modified":1644297722000},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"070737d101e7cd58e997e8c7af09958268c43a21","modified":1644297722000},{"_id":"themes/next/source/css/_common/components/third-party/index.styl","hash":"979486a41a81f2a9fd8b0b87c4f87d6416c68c7d","modified":1644297722000},{"_id":"themes/next/source/css/_common/components/third-party/gitter.styl","hash":"35104dc6883a61c31e0e368dac8ac2f697be62fe","modified":1644297722000},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"9d995eb4871a6c273d9d51558676a1fdabf69e72","modified":1644297722000},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"41ed817e1eb64078074e245e771446ee041e5790","modified":1644297722000},{"_id":"themes/next/source/css/_common/components/third-party/search.styl","hash":"f0b68d319bc2e85eb511def3e7a89b4edb3eb09e","modified":1644674163032},{"_id":"themes/next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"83ee4993710fc8daa1c8dbfccd5d5091fd244c30","modified":1644297722000},{"_id":"themes/next/source/css/_common/components/third-party/utterances.styl","hash":"56d90ae0559caa55b75f3c300ff2711f9ed65fc4","modified":1644297722000},{"_id":"themes/next/source/css/_common/scaffolding/highlight/index.styl","hash":"f2328caa94645836e06fb39a6a9c9a84ed68a8b5","modified":1644297722000},{"_id":"themes/next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"d6418fd2bbfba7b73ddf11ec62db9637fdf5d8af","modified":1644297722000},{"_id":"themes/next/source/css/_common/scaffolding/tags/index.styl","hash":"3f76c73a891bbc10679753e702feba9e8a5ffdd2","modified":1644297722000},{"_id":"themes/next/source/css/_common/outline/footer/index.styl","hash":"1bded8d145d4cba91c1a03a87199fbc7e73d1811","modified":1644669145514},{"_id":"themes/next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"393ff96234e4196b569d4b11496774eb78e147de","modified":1644297722000},{"_id":"themes/next/source/css/_common/scaffolding/tags/label.styl","hash":"debee14539272fbe3835a7d3853af2230baa3501","modified":1644297722000},{"_id":"themes/next/source/css/_common/scaffolding/tags/link-grid.styl","hash":"7f8a7345e6537a62cd9e9a94c8f7065b541d9b04","modified":1644297722000},{"_id":"themes/next/source/css/_common/scaffolding/tags/mermaid.styl","hash":"48d35dba575a7c9e8845b16652e76b7d4a4646de","modified":1644297722000},{"_id":"themes/next/source/css/_common/scaffolding/tags/pdf.styl","hash":"b6654a1d7cf82577d8263faffee8af3ad4a5c0e8","modified":1644297722000},{"_id":"themes/next/source/css/_common/outline/header/bookmark.styl","hash":"e74f4bb47a101b014ee2a1783c87f3b87323f9a0","modified":1644297722000},{"_id":"themes/next/source/css/_common/scaffolding/tags/note.styl","hash":"d27fbf7799695295dd5860a161a13ac4d90c5ba4","modified":1644297722000},{"_id":"themes/next/source/css/_common/scaffolding/tags/tabs.styl","hash":"477e909150f835db166eb849e5c6033a4212148f","modified":1644672068696},{"_id":"themes/next/source/css/_common/outline/header/github-banner.styl","hash":"38c64c2d04e46848382bfa246a0e9c508294767b","modified":1644297722000},{"_id":"themes/next/source/css/_common/outline/header/index.styl","hash":"650ed4ad6df1b6ff04647e7b6d568304e4d3ed2e","modified":1644297722000},{"_id":"themes/next/source/css/_common/outline/header/menu.styl","hash":"6d02f39f71a9b5074c78ba65eebfc39a56137867","modified":1644579946594},{"_id":"themes/next/source/css/_common/outline/header/site-meta.styl","hash":"759e582d34d08e3386c55d87a835a9523608619f","modified":1644297722000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"52fc98b1435129eb3edb9293ced9e507741f1350","modified":1644297722000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"5b38ac4a0f1ade0e681aff0e3366c481d9cf3dcd","modified":1644297722000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"9950c3188a28e1c63b5498b7bdcd14b12ace3e28","modified":1644297722000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"b926e368f702f8686aaa2eb98d3d2e533418958c","modified":1644297722000},{"_id":"themes/next/source/css/_common/outline/header/site-nav.styl","hash":"bf3ad8b4268f763a1e26377681644887694bc009","modified":1644297722000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-dimmer.styl","hash":"fbdb63c6a8887d19b7137325ba7d6806f728139c","modified":1644297722000},{"_id":"themes/next/source/css/_common/outline/sidebar/index.styl","hash":"cee43480eba028c37d51cb620c2d81486aa24e01","modified":1644297722000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"ee94a1a27090ad24e3ed579093088d97ff96d77d","modified":1644585749863},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"3103b81fc76b59e1e2c161e2c484625c770ed66f","modified":1644297722000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"021a37cf178440cc341940a299d3bca359996c6b","modified":1644297722000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1644297722000},{"_id":"themes/next/source/css/_common/outline/sidebar/site-state.styl","hash":"26dd0adfcb1db6df29c6090c8d7e9b5a43583fb0","modified":1644297722000},{"_id":"themes/next/source/font/HarmonyOS_Sans_Bold.woff","hash":"91cda4b43adf62a7faebf67e6a058afc2e0a42db","modified":1644596755863},{"_id":"themes/next/source/font/HarmonyOS_Sans_Bold.ttf","hash":"24ecae3d602aa62d6834b7b7c8ddd686f0ffe2f5","modified":1622200948000},{"_id":"themes/next/source/font/HarmonyOS_Sans_Regular.ttf","hash":"8bea06ce4d7b4196f5e5f60b5580bdb1519ff560","modified":1622200948000},{"_id":"themes/next/source/images/material/SamsarA.png","hash":"749d5c62782cb3c9217c823869cc8d6d687492cb","modified":1644832030761},{"_id":"themes/next/source/images/logo.svg","hash":"15d2bddf1667e930b5caa49353259258cf5ee632","modified":1644651394429},{"_id":"themes/next/source/images/avatar.png","hash":"5a07f4d8c155c3748a4042bc496d27d4cee8938b","modified":1644495796056},{"_id":"themes/next/source/images/background.jpg","hash":"1663e0b546238855d533638682716135b62df1fe","modified":1644568141725},{"_id":"public/search.xml","hash":"86d12f355ef913de2c5072341aa80c2b90a35791","modified":1646746096024},{"_id":"public/categories/index.html","hash":"6ba07a544d29de612c640434052f7ae7d43f59f7","modified":1646746096024},{"_id":"public/about/index.html","hash":"f4258b328f70775a5e11bd420b0be687b8de52d5","modified":1646746096024},{"_id":"public/contentimg/beatheart.html","hash":"3a447986facfcd5d4bfbc7d4fa6060ae661ccde8","modified":1646746096024},{"_id":"public/page/6/index.html","hash":"68013473befe08fa2d774d89c1877fe69ffd380a","modified":1646746096024},{"_id":"public/archives/page/4/index.html","hash":"e1398c0fc4186163cd3ab4776de3152128f6b4eb","modified":1646746096024},{"_id":"public/archives/2019/page/2/index.html","hash":"29c191cfd8b768879c424e45ce339095d4152abb","modified":1646746096024},{"_id":"public/archives/2019/01/index.html","hash":"c4741d67e462a25bd545bbff9d0bbf72f9510ca8","modified":1646746096024},{"_id":"public/archives/2019/03/index.html","hash":"76ed0845227a5bb58c06f12da6b086c1507cc66f","modified":1646746096024},{"_id":"public/archives/2019/02/index.html","hash":"b36894174641a7c9dde9afadf8e9b948974a727f","modified":1646746096024},{"_id":"public/archives/2019/04/index.html","hash":"5b9ad659850e71890845302a0f90ea7cce6e1cfc","modified":1646746096024},{"_id":"public/archives/2022/index.html","hash":"536ae2f8fa2c2dfc77f08de392e922965264efb0","modified":1646746096024},{"_id":"public/archives/2022/02/index.html","hash":"05254233d5eb4b2ca8ebbfee292b923f68b3b664","modified":1646746096024},{"_id":"public/tags/字符串/index.html","hash":"a20609c26fc453dc158dbbc8977b3f16ea803e01","modified":1646746096024},{"_id":"public/tags/数据结构/page/2/index.html","hash":"70ab6df3079e1fe77558a5d782e4bf77916da7f9","modified":1646746096024},{"_id":"public/tags/平衡树/index.html","hash":"661a92e8b630d7dfe8d3e87b97e4c3889787f208","modified":1646746096024},{"_id":"public/tags/Fhq-Treap/index.html","hash":"3346b5a7613052dfee774e2f71a4eeed04bf7965","modified":1646746096024},{"_id":"public/tags/DP/index.html","hash":"9660f752d403dcbc7035351376078344b2cf36d6","modified":1646746096024},{"_id":"public/tags/多项式/index.html","hash":"ec8e13b04b09e43dc97f7f522c507db869428ac5","modified":1646746096024},{"_id":"public/tags/生成函数/index.html","hash":"868c4f7ddc8d8287aa8b336bbc48cb44d5562e65","modified":1646746096024},{"_id":"public/tags/图论/index.html","hash":"13184d0d28df0cfb6484efc32c48c9eec82c41b2","modified":1646746096024},{"_id":"public/tags/圆方树/index.html","hash":"7efa647443b2611c3315a11d22ae72024baf23d5","modified":1646746096024},{"_id":"public/tags/矩阵乘法/index.html","hash":"799867f77f3e2833b6bed1acdb3a97f06a429c78","modified":1646746096024},{"_id":"public/tags/矩阵求逆/index.html","hash":"7110f845467031e2b18b92306c70f48ac60b4864","modified":1646746096024},{"_id":"public/tags/高斯消元/index.html","hash":"951772da2c494c72714c1f6ce9ea325155c289c4","modified":1646746096024},{"_id":"public/tags/修勾勾/index.html","hash":"04a4c6158221b52d5cf95f5eccff608687bf39b6","modified":1646746096024},{"_id":"public/tags/暴力模拟/index.html","hash":"3b3e5888f5e0360180223f317cbbfb5f29026154","modified":1646746096024},{"_id":"public/tags/贪心/index.html","hash":"6bd2f602910a9f4bd941b3d034643f98a10af562","modified":1646746096024},{"_id":"public/tags/动态规划/index.html","hash":"33ff97af2dbb843bbde59316fce2cbec50c63794","modified":1646746096024},{"_id":"public/tags/index.html","hash":"60ac35d4505966d1635cf67cb31d41381b39107c","modified":1646746096024},{"_id":"public/archives/index.html","hash":"44644a2f65e09df70e17c5e946634bafd59c542a","modified":1646746096024},{"_id":"public/2022/02/14/hello-world/index.html","hash":"5230f7a234a47b399d0247c16030f0b809808ee2","modified":1646746096024},{"_id":"public/2019/04/03/多项式全家桶/index.html","hash":"9127d20318d35740beaef003af04f6701cda00c7","modified":1646746096024},{"_id":"public/2019/03/20/CF487E-Tourists-简易题解/index.html","hash":"b5bf470082baaf01d000cad6d7f174661b6b9614","modified":1646746096024},{"_id":"public/2019/03/12/洛谷P1110-BZOJ1058-ZJOI2007-报表统计/index.html","hash":"34053f7425ec77f943432eee50a909b93d0334d7","modified":1646746096024},{"_id":"public/2019/03/12/SDOI2016-生成魔咒-简易题解/index.html","hash":"a583f367fdce6d18f42a6f821be7662906db4831","modified":1646746096024},{"_id":"public/2019/03/12/洛谷-P4883-mzf的考验-简易题解-fhq-treap/index.html","hash":"eca5c42a8802cd502546ee65baed298182322ef5","modified":1646746096024},{"_id":"public/2019/02/26/CF888G-Xor-MST-简易题解/index.html","hash":"afaa40cfb101e10712b366556338c74257e9dc98","modified":1646746096024},{"_id":"public/2019/02/23/CF438E-The-Child-and-Binary-Tree-简易题解/index.html","hash":"9a01525b62d7e4fb1f15584f3785bed598b07fb4","modified":1646746096024},{"_id":"public/2019/02/15/SCOI2016-Day2初略题解/index.html","hash":"6d2e25005f3b014a715823364507a84496fc8f79","modified":1646746096024},{"_id":"public/2019/02/15/Codeforces-Round-536-Div-2-己亥年农历新年赛-简略题解/index.html","hash":"21a4adf02d64d83f30975eae6941395d08be5126","modified":1646746096024},{"_id":"public/2019/02/13/SCOI2016-Day1初略题解/index.html","hash":"006b7fbcf61ba2fb125c565dfb263d80d53d20e0","modified":1646746096024},{"_id":"public/2019/01/05/Splay各种操作模板大赏/index.html","hash":"f2bd02f00c27097639436030c9d8d35cd0cb314d","modified":1646746096024},{"_id":"public/2019/01/03/树分治/index.html","hash":"a5d16cddaba3cb75937c424afbeffd97d8355901","modified":1646746096024},{"_id":"public/2019/01/06/FhqTreap各种操作模板大赏/index.html","hash":"ec84c961e98153b93ac2c51ceea88c861fb10189","modified":1646746096024},{"_id":"public/2019/01/02/tarjian算法的运用/index.html","hash":"c75ed820c633d94e49bdd1e63b04e4807c5f9738","modified":1646746096024},{"_id":"public/2018/12/31/网络流-费用流和二分图匹配模板/index.html","hash":"33fac6c962cb8452fe4164deaad403259ed60ddd","modified":1646746096024},{"_id":"public/2018/12/30/导数和牛顿迭代/index.html","hash":"42251aab71fb6376ef157aaa6fbd4d7a35d82522","modified":1646746096024},{"_id":"public/2018/12/30/由CRT合并引入的各种扩展求余和同余问题/index.html","hash":"3013a37b483ee153211df83254cde51c749507a7","modified":1646746096024},{"_id":"public/2018/12/30/线性筛/index.html","hash":"614aa0417482545fdca33e2817c349c721425e00","modified":1646746096024},{"_id":"public/2018/12/30/莫比乌斯反演与杜教筛/index.html","hash":"e1c6511fb6a2871377a606fa8b786d021f212727","modified":1646746096024},{"_id":"public/2018/12/30/超低能解读群论/index.html","hash":"b355a15476fed1e5a6f8ae8d8eb67606d26204ec","modified":1646746096024},{"_id":"public/2018/12/30/莫比乌斯反演经典例题回顾/index.html","hash":"0214241c163b5c4c6ed9257bae551a0beb3245a0","modified":1646746096024},{"_id":"public/2018/12/29/扩展中国剩余定理/index.html","hash":"db69d76ba0c561873c212ce5846ec7a709c56e63","modified":1646746096024},{"_id":"public/2018/12/29/求多项式卷积的变换/index.html","hash":"b34c6be7c4aea00ad7cebd659ac4d485b685337b","modified":1646746096024},{"_id":"public/2018/12/29/拉格朗日插值法/index.html","hash":"51532626fbf372ac468b5f3248871bdbe8df5882","modified":1646746096024},{"_id":"public/2018/12/29/关于整型异或的线性基/index.html","hash":"43108ca21d401b1f546b8ca016bbccbcfab05738","modified":1646746096024},{"_id":"public/2018/12/29/后缀自动机/index.html","hash":"3c54453294ee299ba2c3049966dc9bc0a838814d","modified":1646746096024},{"_id":"public/2018/12/29/轻量字符串算法-KMP-AC自动机模板-和Manachar/index.html","hash":"09bc9113bf377d03bca37a97db4331976d318816","modified":1646746096024},{"_id":"public/2018/12/29/关于DP的优化/index.html","hash":"a2dd961badcc6d858069219f8c471daf5c99cdf9","modified":1646746096024},{"_id":"public/2018/12/29/OI中常见的线性代数矩阵问题/index.html","hash":"fa9cb2b85e43df9ff07d467044dc2d62fbc193fb","modified":1646746096024},{"_id":"public/2018/12/29/最短路-生成树和生成树形图相关/index.html","hash":"2d9622c5847d2ec1195c3a758f606bf26f06f9b3","modified":1646746096024},{"_id":"public/index.html","hash":"c88de5aac5c80f9c1aa89660aaa042685191899d","modified":1646746096024},{"_id":"public/page/2/index.html","hash":"a7db81c91fe4bf4310207cc98fb273730c5b86a7","modified":1646746096024},{"_id":"public/page/3/index.html","hash":"9217715fa7cf65d89fcae80089c5a48f97475838","modified":1646746096024},{"_id":"public/page/4/index.html","hash":"e8909df4660409dc1c9a6de23c6823f007b40c2c","modified":1646746096024},{"_id":"public/page/5/index.html","hash":"c7787047ace053884a07552d17d8c0e95a2c5584","modified":1646746096024},{"_id":"public/archives/page/2/index.html","hash":"9efdadc6a2b01e92b4fcdb2d582c00d5f9e1602e","modified":1646746096024},{"_id":"public/archives/page/3/index.html","hash":"9c864f09ddcaad59d3d716a308ea0a58d976dc98","modified":1646746096024},{"_id":"public/archives/2018/index.html","hash":"011af82dd6f7d1cf8f578de2d40d4db672d5e762","modified":1646746096024},{"_id":"public/archives/2018/page/2/index.html","hash":"a02a6345c70a02312c5d9dc85658649c4193dd3a","modified":1646746096024},{"_id":"public/archives/2018/12/index.html","hash":"d887b076536747b9c189e26a8fc82d68dfe90511","modified":1646746096024},{"_id":"public/archives/2019/index.html","hash":"896fc565064b0ba5dbe18b658c5c5907f0550564","modified":1646746096024},{"_id":"public/archives/2018/12/page/2/index.html","hash":"cc43f422f9c07ac0059874e65a63324309033100","modified":1646746096024},{"_id":"public/tags/OI/index.html","hash":"7c1f256b97dd64b13071fc62bda0e699389444eb","modified":1646746096024},{"_id":"public/tags/OI/page/2/index.html","hash":"a6b91614317ae51251b141e1da57ffd911dea0fe","modified":1646746096024},{"_id":"public/tags/OI/page/3/index.html","hash":"26d55dc8a47fa7eb1c79f95218444e762da61d26","modified":1646746096024},{"_id":"public/tags/数据结构/index.html","hash":"88b49c186ff2bb927c53020103e8a02499fd0944","modified":1646746096024},{"_id":"public/tags/数学/index.html","hash":"fef603286fd095ddef9c6b529294ac1329485826","modified":1646746096024},{"_id":"public/tags/并查集/index.html","hash":"15ee28acf56ca1d9ca235b2e992134a105bff92b","modified":1646746096024},{"_id":"public/tags/Trie树/index.html","hash":"2585061d8dcbebd64a5fa53331234520473b1fc4","modified":1646746096024},{"_id":"public/tags/异或/index.html","hash":"604a102a439d6c7c316e85842d1e03416bbb19c6","modified":1646746096024},{"_id":"public/tags/线性基/index.html","hash":"18910308708ef42c0f0bc242439b2e2689ee72b0","modified":1646746096024},{"_id":"public/tags/计算几何/index.html","hash":"12cf497a044af0cd61de7314561d0151a27af4fa","modified":1646746096024},{"_id":"public/tags/凸壳/index.html","hash":"75dfcc2aad7b0b5d9ec2aeac0ebe16150eedb3df","modified":1646746096024},{"_id":"public/tags/主席树/index.html","hash":"c0459e90c0174a90108ac2a86d55a5adf2ee7be6","modified":1646746096024},{"_id":"public/tags/数形结合/index.html","hash":"e695f202ad463761312f21c5a39c45c6878d41d8","modified":1646746096024},{"_id":"public/tags/后缀自动机/index.html","hash":"20bf6963b89d0c10f45c1014525cd19cfed7e0b4","modified":1646746096024},{"_id":"public/tags/Splay/index.html","hash":"0de528873a3ba8ca07ef9fd22f7d85d3408b1ea4","modified":1646746096024},{"_id":"public/tags/Tarjian/index.html","hash":"874287036cc0de780796c15d3e27a42e86aa6939","modified":1646746096024},{"_id":"public/tags/连通分量/index.html","hash":"e02a4dcfc96604ef6b0e114808b0771b2bb5d272","modified":1646746096024},{"_id":"public/tags/割点/index.html","hash":"d60416f2f889cbb6ca4d1073beca226462012e16","modified":1646746096024},{"_id":"public/tags/单调队列/index.html","hash":"1d96ce3bcf1b093de9b5529b2db700dda8a540f1","modified":1646746096024},{"_id":"public/tags/斜率优化/index.html","hash":"3104b805626536ed2d30e3c7de1c08acf9b47d13","modified":1646746096024},{"_id":"public/tags/WQS二分/index.html","hash":"1f28fb86669d213fe2f309a7a215bb0943a001ca","modified":1646746096024},{"_id":"public/tags/NTT/index.html","hash":"502842ecd173828c50ae99edc8fcc152640c4775","modified":1646746096024},{"_id":"public/tags/多项式卷积/index.html","hash":"ecd28eba9b6cb7e921fa070df2ce54d2a6a7ac0a","modified":1646746096024},{"_id":"public/tags/多项式求逆/index.html","hash":"99f4040ff1f81b2cb01abff08858c6d70f59c23d","modified":1646746096024},{"_id":"public/tags/多项式求导/index.html","hash":"adf7406165226d9525cdafa99e1509598ceb2540","modified":1646746096024},{"_id":"public/tags/多项式求积/index.html","hash":"441444c78fcca471a2fd70ef9da55f257429f327","modified":1646746096024},{"_id":"public/tags/多项式复合逆/index.html","hash":"0a65a60265a720c5256522add7604dba58f29c68","modified":1646746096024},{"_id":"public/tags/多项式ln/index.html","hash":"7fddc61fd46b03564b2edb25330fea11225241af","modified":1646746096024},{"_id":"public/tags/多项式exp/index.html","hash":"d64d5d2a01b15ca76f1c2242a695582f0ff5a123","modified":1646746096024},{"_id":"public/tags/CRT/index.html","hash":"93516f18ab838977fb6311a04a5ed200443deb99","modified":1646746096024},{"_id":"public/tags/exCRT/index.html","hash":"f184ac7b6dc725ad1cce9f6643a16d4d1e391c47","modified":1646746096024},{"_id":"public/tags/牛顿迭代/index.html","hash":"8e00ea0525b3ea2ca42c9da5bf779844741410c9","modified":1646746096024},{"_id":"public/tags/最短路/index.html","hash":"ef2a974ff36010332ec1648980be725dd5bbfcef","modified":1646746096024},{"_id":"public/tags/拉格朗日插值法/index.html","hash":"1ac1771bbf6d805ba391ddfec39fb81ca3632602","modified":1646746096024},{"_id":"public/tags/生成树形图/index.html","hash":"9eb36ead80e176cd691965c2937381d130f5617b","modified":1646746096024},{"_id":"public/tags/FFT/index.html","hash":"ae06fd900930f655fab30be3ffa0d86f526d3ea8","modified":1646746096024},{"_id":"public/tags/FWT/index.html","hash":"47424681ee2e19dc1a82b5714118f75cd85a06df","modified":1646746096024},{"_id":"public/tags/MTT/index.html","hash":"b36d6837f6a4daa48f1b03d800b42ad476c7f2fa","modified":1646746096024},{"_id":"public/tags/树链剖分/index.html","hash":"bdca63d4596c06e96ac726f16a565aab95a4a18a","modified":1646746096024},{"_id":"public/tags/边分治/index.html","hash":"ae82c6c09e21b785ca95c9985f2b8a76eca5d7fb","modified":1646746096024},{"_id":"public/tags/点分治/index.html","hash":"5313d5438cbd4321792fd038c070d2f47e0f088b","modified":1646746096024},{"_id":"public/tags/Lucas/index.html","hash":"62274e341e0df3ec4be18bb3b6e4135967a7f949","modified":1646746096024},{"_id":"public/tags/exLucas/index.html","hash":"5dc23fd6a7762432bd89968da41ce50651f798c3","modified":1646746096024},{"_id":"public/tags/Euler/index.html","hash":"ad3d50d666a78e60de51833ae29b8c84a7acfbdd","modified":1646746096024},{"_id":"public/tags/exEuler/index.html","hash":"fcaed566e7fadb57cc23515d1640bcac73eb6048","modified":1646746096024},{"_id":"public/tags/BSGS/index.html","hash":"9aa41691fa2a6a385eba2a4d771ee4d986931731","modified":1646746096024},{"_id":"public/tags/exBSGS/index.html","hash":"da5d91aa9b559f150d43fc0b7537c38e7c3d9719","modified":1646746096024},{"_id":"public/tags/任意模数NTT/index.html","hash":"430ddc8b6104611fad40636102819ba46cb53512","modified":1646746096024},{"_id":"public/tags/网络流/index.html","hash":"d8aaa8bcc6323873fb1c1001cdadba342d3023ec","modified":1646746096024},{"_id":"public/tags/费用流/index.html","hash":"d1b582410cdce8d731636088a1e39420b8c53e3c","modified":1646746096024},{"_id":"public/tags/线性筛/index.html","hash":"dc0798e66845f423274ddd54c07e38930cabb6d6","modified":1646746096024},{"_id":"public/tags/莫比乌斯反演/index.html","hash":"03082947d6b4fb9a43f8a633644903d3685e59e2","modified":1646746096024},{"_id":"public/tags/杜教筛/index.html","hash":"542ce47b7e21483eaccf250164e39c1014009972","modified":1646746096024},{"_id":"public/tags/群论/index.html","hash":"dc6cbe3e51b666452d3fb6d6aa076fa85dca866e","modified":1646746096024},{"_id":"public/tags/KMP/index.html","hash":"8c33d55a1767ea3e92f9880f59e50997502bd4e4","modified":1646746096024},{"_id":"public/tags/AC自动机/index.html","hash":"2c4ea58bdb73dbb33ff77b457ac0e0e4cc20592b","modified":1646746096024},{"_id":"public/tags/Manachar/index.html","hash":"2e75cb4fa9f5c3caaa566e8557fa6783429c313d","modified":1646746096024},{"_id":"public/categories/杂谈/index.html","hash":"8535a59060e7e447e5b6984d18f1d9e9d9ef175c","modified":1646746096024},{"_id":"public/categories/学习笔记/index.html","hash":"15fb2dfb72968b7bfeb1e211316fefd6a0f0af1e","modified":1646746096024},{"_id":"public/categories/学习笔记/page/2/index.html","hash":"2e3f851017ae3884ddcb3c21bac2d8c5aa9d0ec4","modified":1646746096024},{"_id":"public/categories/题解/index.html","hash":"466425aa2df3d49eff99e7fbf4bde4c4158c3df3","modified":1646746096024},{"_id":"public/images/apple-touch-icon-next.png","hash":"67f2d82aafddd73606e90ceeefd9d6a3253c92e8","modified":1646746096024},{"_id":"public/font/HarmonyOS_Sans_Regular.woff","hash":"663556d3299f7f31696d8e5c7c10ecadcafd2221","modified":1646746096024},{"_id":"public/images/avatar.gif","hash":"2dbc3e2f2d624b2ca1afe6edc2ca17307f1950c8","modified":1646746096024},{"_id":"public/images/favicon-32x32-next.png","hash":"4f113cda3c80799a3be656e496a199bb5e0a87a0","modified":1646746096024},{"_id":"public/images/logo-algolia-nebula-blue-full.svg","hash":"b85e274207b1392782476a0430feac98db1e7da0","modified":1646746096024},{"_id":"public/images/material/color0A59F7.png","hash":"e56104e21eeeb58289ab5b2a31e27aac07c659b3","modified":1646746096024},{"_id":"public/images/favicon-16x16-next.png","hash":"b56c9464fa4e299b1207131e3c6041c07d1191d0","modified":1646746096024},{"_id":"public/images/material/colorF1F3F5.png","hash":"230d31c5aa80ebdd4652a0cc98320b670cd48c65","modified":1646746096024},{"_id":"public/font/HarmonyOS_Sans_Bold.woff","hash":"91cda4b43adf62a7faebf67e6a058afc2e0a42db","modified":1646746096024},{"_id":"public/js/bookmark.js","hash":"0f563ffbf05fad30e854e413ab17ff7164ab5a53","modified":1646746096024},{"_id":"public/js/motion.js","hash":"6d4bd07a6f8e1b4083119dca0acb5b289533b619","modified":1646746096024},{"_id":"public/js/config.js","hash":"4c4ebbe3b3f3841a26f9d5af6d0ba8bc6da01c54","modified":1646746096024},{"_id":"public/js/comments.js","hash":"66ae2e26ea36a41b72c638ea8b220296638ae952","modified":1646746096024},{"_id":"public/css/noscript.css","hash":"54d14cd43dc297950a4a8d39ec9644dd5fc3499f","modified":1646746096024},{"_id":"public/js/next-boot.js","hash":"48497e2156a10155dc42311633a110c9685692c9","modified":1646746096024},{"_id":"public/js/comments-buttons.js","hash":"1a7344440321713426a0b2ab17e276b5bdf85ade","modified":1646746096024},{"_id":"public/js/pjax.js","hash":"919f5281c4a04d11cfd94573ecf57b3dbabd3cc8","modified":1646746096024},{"_id":"public/js/schemes/muse.js","hash":"9a836d2bcc3defe4bd1ee51f5f4eb7006ebdd41b","modified":1646746096024},{"_id":"public/js/schedule.js","hash":"2b43e2d576a308289880befc27580dbb2aa34439","modified":1646746096024},{"_id":"public/js/third-party/rating.js","hash":"4e92c2d107ba47b47826829f9668030d5ea9bfb8","modified":1646746096024},{"_id":"public/js/third-party/quicklink.js","hash":"eed02e6fced8e5a653077205d4d4d7834ca71472","modified":1646746096024},{"_id":"public/js/third-party/fancybox.js","hash":"c098d14e65dd170537134358d4b8359ad0539c2c","modified":1646746096024},{"_id":"public/js/utils.js","hash":"e447160d342b1f93df5214b6a733441039ced439","modified":1646746096024},{"_id":"public/js/third-party/pace.js","hash":"0ef04218b93561ba4d0ff420d556c3d90a756d32","modified":1646746096024},{"_id":"public/js/third-party/comments/disqus.js","hash":"e1cc671b0d524864fd445e3ab4ade9ee6d07e565","modified":1646746096024},{"_id":"public/js/third-party/comments/changyan.js","hash":"260d1a77d6a3bb33a579d3e4cca1997003e799b5","modified":1646746096024},{"_id":"public/js/third-party/comments/disqusjs.js","hash":"b6c58f098473b526d6a3cd35655caf34b77f7cff","modified":1646746096024},{"_id":"public/js/third-party/comments/utterances.js","hash":"f67f90eb03e284c82da2b8cf2f1e31801813c16d","modified":1646746096024},{"_id":"public/js/third-party/comments/isso.js","hash":"753a873b6f566aff5ba77ca23f91b78eb880ca64","modified":1646746096024},{"_id":"public/js/third-party/comments/gitalk.js","hash":"0ec038cf83e8ec067534f16a54041e47a3c1e59a","modified":1646746096024},{"_id":"public/js/third-party/comments/livere.js","hash":"2247d88c934c765c43013337860774aaa99f0b31","modified":1646746096024},{"_id":"public/js/third-party/analytics/baidu-analytics.js","hash":"f629acc46ff40c071ffd31b77d5c7616f0fdd778","modified":1646746096024},{"_id":"public/js/third-party/analytics/growingio.js","hash":"78dd3cf04082b7dbe6246e404b2aa8e726922402","modified":1646746096024},{"_id":"public/js/third-party/analytics/google-analytics.js","hash":"59684383385059dc4f8a1ff85dbbeb703bcdbcb5","modified":1646746096024},{"_id":"public/js/third-party/chat/gitter.js","hash":"cc38c94125f90dadde11b5ebac7d8bf99a1a08a2","modified":1646746096024},{"_id":"public/js/third-party/chat/chatra.js","hash":"c32180522788c10e51df1803aa6842ef0432ddc9","modified":1646746096024},{"_id":"public/js/third-party/math/katex.js","hash":"83c54ee536e487a1031783443fe0cb63b1b4767e","modified":1646746096024},{"_id":"public/js/third-party/chat/tidio.js","hash":"b0079f6a4601e06ca6fe46e83a2f5af553e9bc3c","modified":1646746096024},{"_id":"public/js/third-party/math/mathjax.js","hash":"5c749b9c1c3bb738122d0516211ecff6496d4907","modified":1646746096024},{"_id":"public/js/third-party/search/algolia-search.js","hash":"ac401e3736d56a3c9cb85ab885744cce0b813c55","modified":1646746096024},{"_id":"public/js/third-party/statistics/lean-analytics.js","hash":"5a928990856b8e456f0663cf3b6b406733672e39","modified":1646746096024},{"_id":"public/js/third-party/search/local-search.js","hash":"45c485f82258d246f37deb66884bd2643323ef3a","modified":1646746096024},{"_id":"public/js/third-party/statistics/firestore.js","hash":"0960f16107ed61452fb0dffc6ed22dc143de34ef","modified":1646746096024},{"_id":"public/js/third-party/tags/mermaid.js","hash":"3dc4628efa6debd6490fc0ebddff2424a7b319d8","modified":1646746096024},{"_id":"public/js/third-party/tags/pdf.js","hash":"af78c22f0e61c8c8aa8794e585e0d632c6d4fcb8","modified":1646746096024},{"_id":"public/css/main.css","hash":"0322335f4b1bfbf696512990dacd6fcec2fbe0a9","modified":1646746096024},{"_id":"public/font/HarmonyOS_Sans_Bold.ttf","hash":"24ecae3d602aa62d6834b7b7c8ddd686f0ffe2f5","modified":1646746096024},{"_id":"public/font/HarmonyOS_Sans_Regular.ttf","hash":"8bea06ce4d7b4196f5e5f60b5580bdb1519ff560","modified":1646746096024},{"_id":"public/images/material/SamsarA.png","hash":"749d5c62782cb3c9217c823869cc8d6d687492cb","modified":1646746096024},{"_id":"public/images/logo.svg","hash":"15d2bddf1667e930b5caa49353259258cf5ee632","modified":1646746096024},{"_id":"public/images/avatar.png","hash":"5a07f4d8c155c3748a4042bc496d27d4cee8938b","modified":1646746096024},{"_id":"public/images/background.jpg","hash":"1663e0b546238855d533638682716135b62df1fe","modified":1646746096024}],"Category":[{"name":"学习笔记","_id":"cl0i63w5q0004u4gbfriyccn7"},{"name":"题解","_id":"cl0i63w5u000cu4gbffio3e3d"},{"name":"杂谈","_id":"cl0i63w62000tu4gb1u1q532d"}],"Data":[],"Page":[{"title":"分类","date":"2022-02-12T10:05:37.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"title: 分类\ndate: 2022-02-12 18:05:37\ntype: \"categories\"\n---\n","updated":"2022-02-12T10:06:34.919Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cl0i63w5j0000u4gbhkp7fvzz","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"关于","date":"2022-02-12T10:08:52.000Z","type":"about","_content":"\n# 周道\n\n<style>\n  .heart {\n    margin: auto;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    left: 0;\n    background-color: pink;\n    height: 50px;\n    width: 50px;\n    transform: rotate(-45deg);\n    animation-name: beat;\n    animation-duration: 1s;\n    animation-iteration-count: infinite;\n  }\n  .heart:after {\n    background-color: pink;\n    content: \"\";\n    border-radius: 50%;\n    position: absolute;\n    width: 50px;\n    height: 50px;\n    top: 0px;\n    left: 25px;\n  }\n  .heart:before {\n    background-color: pink;\n    content: \"\";\n    border-radius: 50%;\n    position: absolute;\n    width: 50px;\n    height: 50px;\n    top: -25px;\n    left: 0px;\n  }\n\n  @keyframes backdiv {\n    50% {\n      background: #ffe6f2;\n    }\n  }\n\n  @keyframes beat {\n    0% {\n      transform: scale(1) rotate(-45deg);\n    }\n    50% {\n      transform: scale(0.6) rotate(-45deg);\n    }\n  }\n\n</style>\n<div class=\"heart\"></div>","source":"about/index.md","raw":"title: 关于\ndate: 2022-02-12 18:08:52\ntype: \"about\"\n---\n\n# 周道\n\n<style>\n  .heart {\n    margin: auto;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    left: 0;\n    background-color: pink;\n    height: 50px;\n    width: 50px;\n    transform: rotate(-45deg);\n    animation-name: beat;\n    animation-duration: 1s;\n    animation-iteration-count: infinite;\n  }\n  .heart:after {\n    background-color: pink;\n    content: \"\";\n    border-radius: 50%;\n    position: absolute;\n    width: 50px;\n    height: 50px;\n    top: 0px;\n    left: 25px;\n  }\n  .heart:before {\n    background-color: pink;\n    content: \"\";\n    border-radius: 50%;\n    position: absolute;\n    width: 50px;\n    height: 50px;\n    top: -25px;\n    left: 0px;\n  }\n\n  @keyframes backdiv {\n    50% {\n      background: #ffe6f2;\n    }\n  }\n\n  @keyframes beat {\n    0% {\n      transform: scale(1) rotate(-45deg);\n    }\n    50% {\n      transform: scale(0.6) rotate(-45deg);\n    }\n  }\n\n</style>\n<div class=\"heart\"></div>","updated":"2022-02-13T11:53:50.707Z","path":"about/index.html","comments":1,"layout":"page","_id":"cl0i63w5o0002u4gb37di0s8d","content":"<h1 id=\"周道\"><a href=\"#周道\" class=\"headerlink\" title=\"周道\"></a>周道</h1><p><style><br>  .heart {<br>    margin: auto;<br>    top: 0;<br>    right: 0;<br>    bottom: 0;<br>    left: 0;<br>    background-color: pink;<br>    height: 50px;<br>    width: 50px;<br>    transform: rotate(-45deg);<br>    animation-name: beat;<br>    animation-duration: 1s;<br>    animation-iteration-count: infinite;<br>  }<br>  .heart:after {<br>    background-color: pink;<br>    content: “”;<br>    border-radius: 50%;<br>    position: absolute;<br>    width: 50px;<br>    height: 50px;<br>    top: 0px;<br>    left: 25px;<br>  }<br>  .heart:before {<br>    background-color: pink;<br>    content: “”;<br>    border-radius: 50%;<br>    position: absolute;<br>    width: 50px;<br>    height: 50px;<br>    top: -25px;<br>    left: 0px;<br>  }</p>\n<p>  @keyframes backdiv {<br>    50% {<br>      background: #ffe6f2;<br>    }<br>  }</p>\n<p>  @keyframes beat {<br>    0% {<br>      transform: scale(1) rotate(-45deg);<br>    }<br>    50% {<br>      transform: scale(0.6) rotate(-45deg);<br>    }<br>  }</p>\n<p>&lt;/style&gt;</p>\n<div class=\"heart\"></div>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"周道\"><a href=\"#周道\" class=\"headerlink\" title=\"周道\"></a>周道</h1><p><style><br>  .heart {<br>    margin: auto;<br>    top: 0;<br>    right: 0;<br>    bottom: 0;<br>    left: 0;<br>    background-color: pink;<br>    height: 50px;<br>    width: 50px;<br>    transform: rotate(-45deg);<br>    animation-name: beat;<br>    animation-duration: 1s;<br>    animation-iteration-count: infinite;<br>  }<br>  .heart:after {<br>    background-color: pink;<br>    content: “”;<br>    border-radius: 50%;<br>    position: absolute;<br>    width: 50px;<br>    height: 50px;<br>    top: 0px;<br>    left: 25px;<br>  }<br>  .heart:before {<br>    background-color: pink;<br>    content: “”;<br>    border-radius: 50%;<br>    position: absolute;<br>    width: 50px;<br>    height: 50px;<br>    top: -25px;<br>    left: 0px;<br>  }</p>\n<p>  @keyframes backdiv {<br>    50% {<br>      background: #ffe6f2;<br>    }<br>  }</p>\n<p>  @keyframes beat {<br>    0% {<br>      transform: scale(1) rotate(-45deg);<br>    }<br>    50% {<br>      transform: scale(0.6) rotate(-45deg);<br>    }<br>  }</p>\n<p>&lt;/style&gt;</p>\n<div class=\"heart\"></div>"},{"title":"标签","date":"2022-02-12T09:56:54.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"title: 标签\ndate: 2022-02-12 17:56:54\ntype: \"tags\"\ncomments: false\n---","updated":"2022-02-12T09:59:44.186Z","path":"tags/index.html","layout":"page","_id":"cl0i63w5r0006u4gb5y4e5oa1","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"归档","date":"2022-02-12T10:08:21.000Z","type":"archives","_content":"","source":"archives/index.md","raw":"title: 归档\ndate: 2022-02-12 18:08:21\ntype: \"archives\"\n---\n","updated":"2022-02-12T10:10:29.913Z","path":"archives/index.html","comments":1,"layout":"page","_id":"cl0i63w5s0008u4gb050agvpm","content":"","site":{"data":{}},"excerpt":"","more":""},{"_content":"<style>\n\n  .back {\n    border-radius: 35px;\n    position: fixed;\n    padding: 0;\n    margin: 0;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background: white;\n    animation-name: backdiv;\n    animation-duration: 1s; \n    animation-iteration-count: infinite;\n  }\n\n  .heart {\n    position: absolute;\n    margin: auto;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    left: 0;\n    background-color: pink;\n    height: 100px;\n    width: 100px;\n    transform: rotate(-45deg);\n    animation-name: beat;\n    animation-duration: 1s;\n    animation-iteration-count: infinite;\n    box-shadow: 0.15rem 0.15rem 2rem rgba(34,34,34,0.3);\n    box-shadow: 0.15rem 0.15rem 2rem rgba(34,34,34,0.3);\n  }\n  .heart:after {\n    background-color: pink;\n    content: \"\";\n    border-radius: 50%;\n    position: absolute;\n    width: 100px;\n    height: 100px;\n    top: 0px;\n    left: 50px;\n  }\n  .heart:before {\n    background-color: pink;\n    content: \"\";\n    border-radius: 50%;\n    position: absolute;\n    width: 100px;\n    height: 100px;\n    top: -50px;\n    left: 0px;\n  }\n\n  @keyframes backdiv {\n    50% {\n      background: #ffe6f2;\n    }\n  }\n\n  @keyframes beat {\n    0% {\n      transform: scale(1) rotate(-45deg);\n    }\n    50% {\n      transform: scale(0.6) rotate(-45deg);\n      box-shadow: 0.15rem 0.15rem 1rem rgba(34,34,34,0.15);\n      box-shadow: 0.15rem 0.15rem 1rem rgba(34,34,34,0.15);\n    }\n  }\n</style>\n<div class=\"back\"></div>\n<div class=\"heart\"></div>\n","source":"contentimg/beatheart.html","raw":"<style>\n\n  .back {\n    border-radius: 35px;\n    position: fixed;\n    padding: 0;\n    margin: 0;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background: white;\n    animation-name: backdiv;\n    animation-duration: 1s; \n    animation-iteration-count: infinite;\n  }\n\n  .heart {\n    position: absolute;\n    margin: auto;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    left: 0;\n    background-color: pink;\n    height: 100px;\n    width: 100px;\n    transform: rotate(-45deg);\n    animation-name: beat;\n    animation-duration: 1s;\n    animation-iteration-count: infinite;\n    box-shadow: 0.15rem 0.15rem 2rem rgba(34,34,34,0.3);\n    box-shadow: 0.15rem 0.15rem 2rem rgba(34,34,34,0.3);\n  }\n  .heart:after {\n    background-color: pink;\n    content: \"\";\n    border-radius: 50%;\n    position: absolute;\n    width: 100px;\n    height: 100px;\n    top: 0px;\n    left: 50px;\n  }\n  .heart:before {\n    background-color: pink;\n    content: \"\";\n    border-radius: 50%;\n    position: absolute;\n    width: 100px;\n    height: 100px;\n    top: -50px;\n    left: 0px;\n  }\n\n  @keyframes backdiv {\n    50% {\n      background: #ffe6f2;\n    }\n  }\n\n  @keyframes beat {\n    0% {\n      transform: scale(1) rotate(-45deg);\n    }\n    50% {\n      transform: scale(0.6) rotate(-45deg);\n      box-shadow: 0.15rem 0.15rem 1rem rgba(34,34,34,0.15);\n      box-shadow: 0.15rem 0.15rem 1rem rgba(34,34,34,0.15);\n    }\n  }\n</style>\n<div class=\"back\"></div>\n<div class=\"heart\"></div>\n","date":"2022-02-14T03:12:00.855Z","updated":"2022-02-14T03:12:00.855Z","path":"contentimg/beatheart.html","title":"","comments":1,"layout":"page","_id":"cl0i63w5t000au4gb846p5688","content":"<style>\n\n  .back {\n    border-radius: 35px;\n    position: fixed;\n    padding: 0;\n    margin: 0;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background: white;\n    animation-name: backdiv;\n    animation-duration: 1s; \n    animation-iteration-count: infinite;\n  }\n\n  .heart {\n    position: absolute;\n    margin: auto;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    left: 0;\n    background-color: pink;\n    height: 100px;\n    width: 100px;\n    transform: rotate(-45deg);\n    animation-name: beat;\n    animation-duration: 1s;\n    animation-iteration-count: infinite;\n    box-shadow: 0.15rem 0.15rem 2rem rgba(34,34,34,0.3);\n    box-shadow: 0.15rem 0.15rem 2rem rgba(34,34,34,0.3);\n  }\n  .heart:after {\n    background-color: pink;\n    content: \"\";\n    border-radius: 50%;\n    position: absolute;\n    width: 100px;\n    height: 100px;\n    top: 0px;\n    left: 50px;\n  }\n  .heart:before {\n    background-color: pink;\n    content: \"\";\n    border-radius: 50%;\n    position: absolute;\n    width: 100px;\n    height: 100px;\n    top: -50px;\n    left: 0px;\n  }\n\n  @keyframes backdiv {\n    50% {\n      background: #ffe6f2;\n    }\n  }\n\n  @keyframes beat {\n    0% {\n      transform: scale(1) rotate(-45deg);\n    }\n    50% {\n      transform: scale(0.6) rotate(-45deg);\n      box-shadow: 0.15rem 0.15rem 1rem rgba(34,34,34,0.15);\n      box-shadow: 0.15rem 0.15rem 1rem rgba(34,34,34,0.15);\n    }\n  }\n</style>\n<div class=\"back\"></div>\n<div class=\"heart\"></div>\n","site":{"data":{}},"excerpt":"","more":"<style>\n\n  .back {\n    border-radius: 35px;\n    position: fixed;\n    padding: 0;\n    margin: 0;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background: white;\n    animation-name: backdiv;\n    animation-duration: 1s; \n    animation-iteration-count: infinite;\n  }\n\n  .heart {\n    position: absolute;\n    margin: auto;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    left: 0;\n    background-color: pink;\n    height: 100px;\n    width: 100px;\n    transform: rotate(-45deg);\n    animation-name: beat;\n    animation-duration: 1s;\n    animation-iteration-count: infinite;\n    box-shadow: 0.15rem 0.15rem 2rem rgba(34,34,34,0.3);\n    box-shadow: 0.15rem 0.15rem 2rem rgba(34,34,34,0.3);\n  }\n  .heart:after {\n    background-color: pink;\n    content: \"\";\n    border-radius: 50%;\n    position: absolute;\n    width: 100px;\n    height: 100px;\n    top: 0px;\n    left: 50px;\n  }\n  .heart:before {\n    background-color: pink;\n    content: \"\";\n    border-radius: 50%;\n    position: absolute;\n    width: 100px;\n    height: 100px;\n    top: -50px;\n    left: 0px;\n  }\n\n  @keyframes backdiv {\n    50% {\n      background: #ffe6f2;\n    }\n  }\n\n  @keyframes beat {\n    0% {\n      transform: scale(1) rotate(-45deg);\n    }\n    50% {\n      transform: scale(0.6) rotate(-45deg);\n      box-shadow: 0.15rem 0.15rem 1rem rgba(34,34,34,0.15);\n      box-shadow: 0.15rem 0.15rem 1rem rgba(34,34,34,0.15);\n    }\n  }\n</style>\n<div class=\"back\"></div>\n<div class=\"heart\"></div>\n"}],"Post":[{"title":"FhqTreap各种操作模板大赏","date":"2019-01-06T10:19:42.000Z","mathjax":true,"_content":"\n$\\ \\ \\ \\ \\ \\ \\ \\,$关于Splay操作的复习笔记：\n\n$\\ \\ \\ \\ \\ \\ \\ \\,$一些平衡树操作和都是一样的，详见[【Splay各种操作模板大赏】](/2019/01/05/Splay各种操作模板大赏/)。\n\n<!-- more-->\n\n## 结构\n``` cpp\nstruct fhq_Treap{\n\t#define lson ls[rt]\n\t#define rson rs[rt]\n  \tint size[N],key[N],sum[N],val[N];\n  \tint ls[N],rs[N],cnt;\n  \tint root;\n  \tbool lazy[N];\n}\n```\n 1. $\\tt root$ ：根；\n 2. $\\tt cnt$ ：下标大小；\n 3. $\\tt key[]$ ：关键值；\n 4. $\\tt ls[]\\&rs[]$ ：左右儿子；\n 5. $\\tt sum[]$ ：子树权值；\n 6. $\\tt val[]$ ：节点权值；\n 7. $\\tt size[]$ ：节点大小；\n 8. $\\tt lazy[]$ ：下传标记。\n\n## 基本操作\n- 手写随机($Rand$)\n``` cpp\nint Rand(){\n    static int seed=233;\n    return seed=int(seed*48271LL%20020207);\n}\n```\n- 标记上传 ($pushup$)\n``` cpp\nvoid pushup(int rt){\n\tsize[rt]=size[lson]+size[rson]+1;\n\tsum[rt]=sum[lson]+sum[rson]+val[rt];\n}\n```\n- 标记下传 ($pushdown$)，根据情况会不一样\n``` cpp\nvoid pushdown(int rt){\n  \tif(!lazy[rt])return;\n    swap(lson,rson);\n    lazy[lson]^=1;lazy[rson]^=1;\n    lazy[rt]=0;\n}\n```\n- 分裂($split$)\n``` cpp\n//权值\nvoid split(int rt,int x,int &a,int &b){\n    if(!rt) a=0,b=0;\n    else{\n    \tpushdown(rt);\n      \tif(val[rt]<=x)a=rt,split(rson,x,rs[a],b);\n      \telse b=rt,split(lson,x,a,ls[b]);\n      \tpushup(rt);\n    }\n}\n//位置\nvoid split(int rt,int x,int &a,int &b){\n    if(!rt) a=0,b=0;\n    else{\n    \tpushdown(rt);\n    \tif(size[ls[rt]]<x)a=rt,split(rson,x-size[ls[rt]]-1,rs[a],b);\n      \telse b=rt,split(lson,x,a,ls[b]);\n      \tpushup(rt);\n    }\n}\n```\n- 合并($merge$)\n``` cpp\nint merge(int x,int y){\n    if(!x||!y) return x+y;\n    if(key[x]<key[y]){pushdown(x);rs[x]=merge(rs[x],y);pushup(x);return x;}\n    else {pushdown(y);ls[y]=merge(x,ls[y]);pushup(y);return y;}\n}\n```\n\n## 修改\n- 新建节点 ($newnode$)\n``` cpp\nint newnode(int v){\n  \tsum[++cnt]=val[cnt]=v;size[cnt]=1;key[cnt]=Rand();\n  \treturn cnt;\n}\n```\n- 插入($Insert$)\n``` cpp\nvoid Insert(int x,int v){\n    int a,b;\n    split(root,x,a,b);\n    int rt=newnode(v);\n    root=merge(merge(a,rt),b);\n}\n```\n- 删除($Delete$)\n``` cpp\nvoid Delete(int x){\n    int a,b,c;\n    split(root,x,a,b);split(a,x-1,a,c);\n    c=merge(ls[c],rs[c]);\n    root=merge(merge(a,c),b);\n}\n```\n- 区间修改（翻转）($revse$)\n``` cpp\nvoid Reverse(int l,int r){\n    int x,y,z;\n    split(root,r,x,z);\n    split(x,l-1,x,y);\n    lazy[y]^=1;\n    root=merge(merge(x,y),z);\n}\n```\n\n## 询问\n- 查找排名第k的值($QueryRank$)\n``` cpp\nint QueryRank(int x){\n    int rt=root;\n    while(rt){\n      \tif(x==size[lson]+1)return val[rt];\n      \tif(size[lson]>=x)rt=lson;\n      \telse x-=size[lson]+1,rt=rson;\n    }\n}\n```\n\n- 查找某个值的排名($Rank$)\n``` cpp\nint Rank(int x){\n    int rt=root,res=1;\n    while(rt){\n    \tif(val[rt]>=x)rt=lson;\n    \telse res+=size[lson]+1,rt=rson;\n  \t}\n  \treturn res;\n}\n```\n- 前驱($Numpre$)\n``` cpp\nint Numpre(int x){return QueryRank(Rank(x)-1);}\n```\n- 后继($Numnex$)\n``` cpp\nint Numnex(int x){return QueryRank(Rank(x+1));}\n```\n- 区间查询（权值和）($Numnex$)\n``` cpp\nlong long Query(int l,int r){\n    int x,y,z;\n    split(root,r,x,z);\n    split(x,l-1,x,y);\n    long long ans=sum[y];\n    root=merge(merge(x,y),z);\n    return ans;\n}\n```\n\n## 两个模板题：\n- [P3369 【模板】普通平衡树](https://www.luogu.org/problemnew/show/P3369)\n``` cpp\n// luogu-judger-enable-o2\n#include<algorithm>\n#include<iostream>\n#include<cstdlib>\n#include<cstring>\n#include<cctype>\n#include<cstdio>\n#include<vector>\n#include<string>\n#include<queue>\n#include<stack>\n#include<cmath>\n#include<map>\n#include<set>\nusing namespace std;\nconst int inf=0x7fffffff;\nconst double eps=1e-10;\nconst double pi=acos(-1.0);\n//char buf[1<<15],*S=buf,*T=buf;\n//char getch(){return S==T&&(T=(S=buf)+fread(buf,1,1<<15,stdin),S==T)?0:*S++;}\ninline int read(){\n    int x=0,f=1;char ch;ch=getchar();\n    while(ch<'0'||ch>'9'){if(ch=='-') f=0;ch=getchar();}\n    while(ch>='0'&&ch<='9'){x=(x<<1)+(x<<3)+(ch&15);ch=getchar();}\n    if(f)return x;else return -x;\n}\nconst int N=1e5+10;\nstruct fhq_Treap{\n    #define lson ls[rt]\n    #define rson rs[rt]\n  int Rand(){\n    static int seed=233;\n    return seed=int(seed*48271LL%20020207);\n  }\n  int size[N],key[N],val[N];\n  int ls[N],rs[N],cnt,sum[N];\n  int root;\n  bool lazy[N];\n  void pushup(int rt){\n        size[rt]=size[lson]+size[rson]+1;\n        sum[rt]=sum[lson]+sum[rson]+val[rt];\n    }\n  int clone(int b){\n  \t++cnt;\n    size[cnt]=size[b];key[cnt]=key[b];val[cnt]=val[b];\n    ls[cnt]=ls[b];rs[cnt]=rs[b],lazy[cnt]=lazy[b];sum[cnt]=sum[b];\n    return cnt;\n  }\n  void pushdown(int rt) {\n    if(!lazy[rt])return;\n    swap(lson,rson);\n    lazy[lson]^=1;lazy[rson]^=1;\n    lazy[rt]=0;\n  }\n  int merge(int x,int y){\n    if(!x||!y) return x+y;\n    if(key[x]<key[y]){pushdown(x);rs[x]=merge(rs[x],y);pushup(x);return x;}\n    else {pushdown(y);ls[y]=merge(x,ls[y]);pushup(y);return y;}\n  }\n  //权值\n  void split(int rt,int x,int &a,int &b){\n    if(!rt) a=0,b=0;\n    else{\n    \tpushdown(rt);\n      if(val[rt]<=x)a=rt,split(rson,x,rs[a],b);\n      else b=rt,split(lson,x,a,ls[b]);\n      pushup(rt);\n    }\n  }\n  void Insert(int x){\n    int a,b;\n    split(root,x,a,b);\n    val[++cnt]=x;size[cnt]=1;key[cnt]=Rand();\n    root=merge(merge(a,cnt),b);\n  }\n  void Delete(int x){\n    int a,b,c;\n    split(root,x,a,b);split(a,x-1,a,c);\n    c=merge(ls[c],rs[c]);\n    root=merge(merge(a,c),b);\n  }\n  int Rank(int x){\n    int rt=root,res=1;\n    while(rt){\n    \tif(val[rt]>=x)rt=lson;\n    \telse res+=size[lson]+1,rt=rson;\n  \t}\n  \treturn res;\n  }\n  int QueryRank(int x){\n    int rt=root;\n    while(rt){\n      if(x==size[lson]+1)return val[rt];\n      if(size[lson]>=x)rt=lson;\n      else x-=size[lson]+1,rt=rson;\n    }\n  }\n  int Numpre(int x){return QueryRank(Rank(x)-1);}\n  int Numnex(int x){return QueryRank(Rank(x+1));}\n  void Reverse(int l,int r){\n    int x,y,z;\n    split(root,r,x,z);\n    split(x,l-1,x,y);\n    lazy[y]^=1;\n    root=merge(merge(x,y),z);\n  }\n  long long Query(int l,int r){\n    int x,y,z;\n    split(root,r,x,z);\n    split(x,l-1,x,y);\n    long long ans=sum[y];\n    root=merge(merge(x,y),z);\n    return ans;\n  }\n}Fhq;\n\nint main()\n{\n  int n=read();\n  while(n--){\n    int opt=read(),x=read();\n    if(opt==1){Fhq.Insert(x);continue;}\n    if(opt==2){Fhq.Delete(x);continue;}\n    if(opt==3){printf(\"%d\\n\",Fhq.Rank(x));continue;}\n    if(opt==4){printf(\"%d\\n\",Fhq.QueryRank(x));continue;}\n    if(opt==5){printf(\"%d\\n\",Fhq.Numpre(x));continue;}\n    if(opt==6){printf(\"%d\\n\",Fhq.Numnex(x));continue;}\n  }\n  return 0;\n}\n```\n- [P3391 【模板】文艺平衡树（Splay）](https://www.luogu.org/problemnew/show/P3391)\n``` cpp\n#include<algorithm>\n#include<iostream>\n#include<cstdlib>\n#include<cstring>\n#include<cctype>\n#include<cstdio>\n#include<vector>\n#include<string>\n#include<queue>\n#include<stack>\n#include<cmath>\n#include<map>\n#include<set>\nusing namespace std;\nconst int inf=0x7fffffff;\nconst double eps=1e-10;\nconst double pi=acos(-1.0);\n//char buf[1<<15],*S=buf,*T=buf;\n//char getch(){return S==T&&(T=(S=buf)+fread(buf,1,1<<15,stdin),S==T)?0:*S++;}\ninline int read(){\n\tint x=0,f=1;char ch;ch=getchar();\n\twhile(ch<'0'||ch>'9'){if(ch=='-') f=0;ch=getchar();}\n\twhile(ch>='0'&&ch<='9'){x=(x<<1)+(x<<3)+(ch&15);ch=getchar();}\n\tif(f)return x;else return -x;\n}\nconst int N=1e5+10;\nint a[N],n,m;\nstruct fhq_Treap{\n\t#define lson ls[rt]\n\t#define rson rs[rt]\n  int Rand(){\n    static int seed=233;\n    return seed=int(seed*48271LL%20020207);\n  }\n  int size[N],key[N],val[N],w[N];\n  int ls[N],rs[N],cnt;\n  int root;\n  bool lazy[N];\n  void pushup(int rt){\n\t\tsize[rt]=size[lson]+size[rson]+1;\n\t}\n  void pushdown(int rt) {\n    if(!lazy[rt])return;\n    swap(lson,rson);\n    lazy[lson]^=1;lazy[rson]^=1;\n    lazy[rt]=0;\n  }\n  int merge(int x,int y){\n    if(!x||!y) return x+y;\n    if(key[x]<key[y]){pushdown(x);rs[x]=merge(rs[x],y);pushup(x);return x;}\n    else {pushdown(y);ls[y]=merge(x,ls[y]);pushup(y);return y;}\n  }\n  //位置\n  void split(int rt,int x,int &a,int &b){\n    if(!rt) a=0,b=0;\n    else{\n    \tpushdown(rt);\n    \tif(size[ls[rt]]<x)a=rt,split(rson,x-size[ls[rt]]-1,rs[a],b);\n      else b=rt,split(lson,x,a,ls[b]);\n      pushup(rt);\n    }\n  }\n\tvoid Insert(int x,int v){\n    int a,b;\n    split(root,x,a,b);++cnt;\n    val[cnt]=v;size[cnt]=1;key[cnt]=Rand();\n    root=merge(merge(a,cnt),b);\n  }\n  void Reverse(int l,int r){\n    int x,y,z;\n    split(root,r,x,z);\n    split(x,l-1,x,y);\n    lazy[y]^=1;\n    root=merge(merge(x,y),z);\n  }\n}Fhq;\nvoid write(int rt){\n  Fhq.pushdown(rt);\n  if(Fhq.lson)write(Fhq.lson);\n  printf(\"%d \",Fhq.val[rt]);\n  if(Fhq.rson)write(Fhq.rson); \n}\nint main()\n{\n  n=read();m=read();\n \tfor(int i=1;i<=n;i++)Fhq.Insert(i-1,i);\n \twhile(m--){\n    int l=read(),r=read();\n  \tFhq.Reverse(l,r);\n  }\n  write(Fhq.root);\n  printf(\"\\n\");\n\treturn 0;\n}\n\n```\n","source":"_posts/FhqTreap各种操作模板大赏.md","raw":"---\ntitle: 'FhqTreap各种操作模板大赏'\ndate: 2019-01-06 18:19:42\ncategories:\n- 学习笔记\ntags:\n- OI\n- 字符串\n- 数据结构\n- 平衡树\n- Fhq_Treap\nmathjax: true\n---\n\n$\\ \\ \\ \\ \\ \\ \\ \\,$关于Splay操作的复习笔记：\n\n$\\ \\ \\ \\ \\ \\ \\ \\,$一些平衡树操作和都是一样的，详见[【Splay各种操作模板大赏】](/2019/01/05/Splay各种操作模板大赏/)。\n\n<!-- more-->\n\n## 结构\n``` cpp\nstruct fhq_Treap{\n\t#define lson ls[rt]\n\t#define rson rs[rt]\n  \tint size[N],key[N],sum[N],val[N];\n  \tint ls[N],rs[N],cnt;\n  \tint root;\n  \tbool lazy[N];\n}\n```\n 1. $\\tt root$ ：根；\n 2. $\\tt cnt$ ：下标大小；\n 3. $\\tt key[]$ ：关键值；\n 4. $\\tt ls[]\\&rs[]$ ：左右儿子；\n 5. $\\tt sum[]$ ：子树权值；\n 6. $\\tt val[]$ ：节点权值；\n 7. $\\tt size[]$ ：节点大小；\n 8. $\\tt lazy[]$ ：下传标记。\n\n## 基本操作\n- 手写随机($Rand$)\n``` cpp\nint Rand(){\n    static int seed=233;\n    return seed=int(seed*48271LL%20020207);\n}\n```\n- 标记上传 ($pushup$)\n``` cpp\nvoid pushup(int rt){\n\tsize[rt]=size[lson]+size[rson]+1;\n\tsum[rt]=sum[lson]+sum[rson]+val[rt];\n}\n```\n- 标记下传 ($pushdown$)，根据情况会不一样\n``` cpp\nvoid pushdown(int rt){\n  \tif(!lazy[rt])return;\n    swap(lson,rson);\n    lazy[lson]^=1;lazy[rson]^=1;\n    lazy[rt]=0;\n}\n```\n- 分裂($split$)\n``` cpp\n//权值\nvoid split(int rt,int x,int &a,int &b){\n    if(!rt) a=0,b=0;\n    else{\n    \tpushdown(rt);\n      \tif(val[rt]<=x)a=rt,split(rson,x,rs[a],b);\n      \telse b=rt,split(lson,x,a,ls[b]);\n      \tpushup(rt);\n    }\n}\n//位置\nvoid split(int rt,int x,int &a,int &b){\n    if(!rt) a=0,b=0;\n    else{\n    \tpushdown(rt);\n    \tif(size[ls[rt]]<x)a=rt,split(rson,x-size[ls[rt]]-1,rs[a],b);\n      \telse b=rt,split(lson,x,a,ls[b]);\n      \tpushup(rt);\n    }\n}\n```\n- 合并($merge$)\n``` cpp\nint merge(int x,int y){\n    if(!x||!y) return x+y;\n    if(key[x]<key[y]){pushdown(x);rs[x]=merge(rs[x],y);pushup(x);return x;}\n    else {pushdown(y);ls[y]=merge(x,ls[y]);pushup(y);return y;}\n}\n```\n\n## 修改\n- 新建节点 ($newnode$)\n``` cpp\nint newnode(int v){\n  \tsum[++cnt]=val[cnt]=v;size[cnt]=1;key[cnt]=Rand();\n  \treturn cnt;\n}\n```\n- 插入($Insert$)\n``` cpp\nvoid Insert(int x,int v){\n    int a,b;\n    split(root,x,a,b);\n    int rt=newnode(v);\n    root=merge(merge(a,rt),b);\n}\n```\n- 删除($Delete$)\n``` cpp\nvoid Delete(int x){\n    int a,b,c;\n    split(root,x,a,b);split(a,x-1,a,c);\n    c=merge(ls[c],rs[c]);\n    root=merge(merge(a,c),b);\n}\n```\n- 区间修改（翻转）($revse$)\n``` cpp\nvoid Reverse(int l,int r){\n    int x,y,z;\n    split(root,r,x,z);\n    split(x,l-1,x,y);\n    lazy[y]^=1;\n    root=merge(merge(x,y),z);\n}\n```\n\n## 询问\n- 查找排名第k的值($QueryRank$)\n``` cpp\nint QueryRank(int x){\n    int rt=root;\n    while(rt){\n      \tif(x==size[lson]+1)return val[rt];\n      \tif(size[lson]>=x)rt=lson;\n      \telse x-=size[lson]+1,rt=rson;\n    }\n}\n```\n\n- 查找某个值的排名($Rank$)\n``` cpp\nint Rank(int x){\n    int rt=root,res=1;\n    while(rt){\n    \tif(val[rt]>=x)rt=lson;\n    \telse res+=size[lson]+1,rt=rson;\n  \t}\n  \treturn res;\n}\n```\n- 前驱($Numpre$)\n``` cpp\nint Numpre(int x){return QueryRank(Rank(x)-1);}\n```\n- 后继($Numnex$)\n``` cpp\nint Numnex(int x){return QueryRank(Rank(x+1));}\n```\n- 区间查询（权值和）($Numnex$)\n``` cpp\nlong long Query(int l,int r){\n    int x,y,z;\n    split(root,r,x,z);\n    split(x,l-1,x,y);\n    long long ans=sum[y];\n    root=merge(merge(x,y),z);\n    return ans;\n}\n```\n\n## 两个模板题：\n- [P3369 【模板】普通平衡树](https://www.luogu.org/problemnew/show/P3369)\n``` cpp\n// luogu-judger-enable-o2\n#include<algorithm>\n#include<iostream>\n#include<cstdlib>\n#include<cstring>\n#include<cctype>\n#include<cstdio>\n#include<vector>\n#include<string>\n#include<queue>\n#include<stack>\n#include<cmath>\n#include<map>\n#include<set>\nusing namespace std;\nconst int inf=0x7fffffff;\nconst double eps=1e-10;\nconst double pi=acos(-1.0);\n//char buf[1<<15],*S=buf,*T=buf;\n//char getch(){return S==T&&(T=(S=buf)+fread(buf,1,1<<15,stdin),S==T)?0:*S++;}\ninline int read(){\n    int x=0,f=1;char ch;ch=getchar();\n    while(ch<'0'||ch>'9'){if(ch=='-') f=0;ch=getchar();}\n    while(ch>='0'&&ch<='9'){x=(x<<1)+(x<<3)+(ch&15);ch=getchar();}\n    if(f)return x;else return -x;\n}\nconst int N=1e5+10;\nstruct fhq_Treap{\n    #define lson ls[rt]\n    #define rson rs[rt]\n  int Rand(){\n    static int seed=233;\n    return seed=int(seed*48271LL%20020207);\n  }\n  int size[N],key[N],val[N];\n  int ls[N],rs[N],cnt,sum[N];\n  int root;\n  bool lazy[N];\n  void pushup(int rt){\n        size[rt]=size[lson]+size[rson]+1;\n        sum[rt]=sum[lson]+sum[rson]+val[rt];\n    }\n  int clone(int b){\n  \t++cnt;\n    size[cnt]=size[b];key[cnt]=key[b];val[cnt]=val[b];\n    ls[cnt]=ls[b];rs[cnt]=rs[b],lazy[cnt]=lazy[b];sum[cnt]=sum[b];\n    return cnt;\n  }\n  void pushdown(int rt) {\n    if(!lazy[rt])return;\n    swap(lson,rson);\n    lazy[lson]^=1;lazy[rson]^=1;\n    lazy[rt]=0;\n  }\n  int merge(int x,int y){\n    if(!x||!y) return x+y;\n    if(key[x]<key[y]){pushdown(x);rs[x]=merge(rs[x],y);pushup(x);return x;}\n    else {pushdown(y);ls[y]=merge(x,ls[y]);pushup(y);return y;}\n  }\n  //权值\n  void split(int rt,int x,int &a,int &b){\n    if(!rt) a=0,b=0;\n    else{\n    \tpushdown(rt);\n      if(val[rt]<=x)a=rt,split(rson,x,rs[a],b);\n      else b=rt,split(lson,x,a,ls[b]);\n      pushup(rt);\n    }\n  }\n  void Insert(int x){\n    int a,b;\n    split(root,x,a,b);\n    val[++cnt]=x;size[cnt]=1;key[cnt]=Rand();\n    root=merge(merge(a,cnt),b);\n  }\n  void Delete(int x){\n    int a,b,c;\n    split(root,x,a,b);split(a,x-1,a,c);\n    c=merge(ls[c],rs[c]);\n    root=merge(merge(a,c),b);\n  }\n  int Rank(int x){\n    int rt=root,res=1;\n    while(rt){\n    \tif(val[rt]>=x)rt=lson;\n    \telse res+=size[lson]+1,rt=rson;\n  \t}\n  \treturn res;\n  }\n  int QueryRank(int x){\n    int rt=root;\n    while(rt){\n      if(x==size[lson]+1)return val[rt];\n      if(size[lson]>=x)rt=lson;\n      else x-=size[lson]+1,rt=rson;\n    }\n  }\n  int Numpre(int x){return QueryRank(Rank(x)-1);}\n  int Numnex(int x){return QueryRank(Rank(x+1));}\n  void Reverse(int l,int r){\n    int x,y,z;\n    split(root,r,x,z);\n    split(x,l-1,x,y);\n    lazy[y]^=1;\n    root=merge(merge(x,y),z);\n  }\n  long long Query(int l,int r){\n    int x,y,z;\n    split(root,r,x,z);\n    split(x,l-1,x,y);\n    long long ans=sum[y];\n    root=merge(merge(x,y),z);\n    return ans;\n  }\n}Fhq;\n\nint main()\n{\n  int n=read();\n  while(n--){\n    int opt=read(),x=read();\n    if(opt==1){Fhq.Insert(x);continue;}\n    if(opt==2){Fhq.Delete(x);continue;}\n    if(opt==3){printf(\"%d\\n\",Fhq.Rank(x));continue;}\n    if(opt==4){printf(\"%d\\n\",Fhq.QueryRank(x));continue;}\n    if(opt==5){printf(\"%d\\n\",Fhq.Numpre(x));continue;}\n    if(opt==6){printf(\"%d\\n\",Fhq.Numnex(x));continue;}\n  }\n  return 0;\n}\n```\n- [P3391 【模板】文艺平衡树（Splay）](https://www.luogu.org/problemnew/show/P3391)\n``` cpp\n#include<algorithm>\n#include<iostream>\n#include<cstdlib>\n#include<cstring>\n#include<cctype>\n#include<cstdio>\n#include<vector>\n#include<string>\n#include<queue>\n#include<stack>\n#include<cmath>\n#include<map>\n#include<set>\nusing namespace std;\nconst int inf=0x7fffffff;\nconst double eps=1e-10;\nconst double pi=acos(-1.0);\n//char buf[1<<15],*S=buf,*T=buf;\n//char getch(){return S==T&&(T=(S=buf)+fread(buf,1,1<<15,stdin),S==T)?0:*S++;}\ninline int read(){\n\tint x=0,f=1;char ch;ch=getchar();\n\twhile(ch<'0'||ch>'9'){if(ch=='-') f=0;ch=getchar();}\n\twhile(ch>='0'&&ch<='9'){x=(x<<1)+(x<<3)+(ch&15);ch=getchar();}\n\tif(f)return x;else return -x;\n}\nconst int N=1e5+10;\nint a[N],n,m;\nstruct fhq_Treap{\n\t#define lson ls[rt]\n\t#define rson rs[rt]\n  int Rand(){\n    static int seed=233;\n    return seed=int(seed*48271LL%20020207);\n  }\n  int size[N],key[N],val[N],w[N];\n  int ls[N],rs[N],cnt;\n  int root;\n  bool lazy[N];\n  void pushup(int rt){\n\t\tsize[rt]=size[lson]+size[rson]+1;\n\t}\n  void pushdown(int rt) {\n    if(!lazy[rt])return;\n    swap(lson,rson);\n    lazy[lson]^=1;lazy[rson]^=1;\n    lazy[rt]=0;\n  }\n  int merge(int x,int y){\n    if(!x||!y) return x+y;\n    if(key[x]<key[y]){pushdown(x);rs[x]=merge(rs[x],y);pushup(x);return x;}\n    else {pushdown(y);ls[y]=merge(x,ls[y]);pushup(y);return y;}\n  }\n  //位置\n  void split(int rt,int x,int &a,int &b){\n    if(!rt) a=0,b=0;\n    else{\n    \tpushdown(rt);\n    \tif(size[ls[rt]]<x)a=rt,split(rson,x-size[ls[rt]]-1,rs[a],b);\n      else b=rt,split(lson,x,a,ls[b]);\n      pushup(rt);\n    }\n  }\n\tvoid Insert(int x,int v){\n    int a,b;\n    split(root,x,a,b);++cnt;\n    val[cnt]=v;size[cnt]=1;key[cnt]=Rand();\n    root=merge(merge(a,cnt),b);\n  }\n  void Reverse(int l,int r){\n    int x,y,z;\n    split(root,r,x,z);\n    split(x,l-1,x,y);\n    lazy[y]^=1;\n    root=merge(merge(x,y),z);\n  }\n}Fhq;\nvoid write(int rt){\n  Fhq.pushdown(rt);\n  if(Fhq.lson)write(Fhq.lson);\n  printf(\"%d \",Fhq.val[rt]);\n  if(Fhq.rson)write(Fhq.rson); \n}\nint main()\n{\n  n=read();m=read();\n \tfor(int i=1;i<=n;i++)Fhq.Insert(i-1,i);\n \twhile(m--){\n    int l=read(),r=read();\n  \tFhq.Reverse(l,r);\n  }\n  write(Fhq.root);\n  printf(\"\\n\");\n\treturn 0;\n}\n\n```\n","slug":"FhqTreap各种操作模板大赏","published":1,"updated":"2022-02-13T14:05:59.128Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0i63w5m0001u4gbep7qhe4g","content":"<p>$\\ \\ \\ \\ \\ \\ \\ \\,$关于Splay操作的复习笔记：</p>\n<p>$\\ \\ \\ \\ \\ \\ \\ \\,$一些平衡树操作和都是一样的，详见<a href=\"/2019/01/05/Splay各种操作模板大赏/\">【Splay各种操作模板大赏】</a>。</p>\n<span id=\"more\"></span>\n<h2 id=\"结构\"><a href=\"#结构\" class=\"headerlink\" title=\"结构\"></a>结构</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">fhq_Treap</span>&#123;</span><br><span class=\"line\">\t<span class=\"meta\">#<span class=\"keyword\">define</span> lson ls[rt]</span></span><br><span class=\"line\">\t<span class=\"meta\">#<span class=\"keyword\">define</span> rson rs[rt]</span></span><br><span class=\"line\">  \t<span class=\"type\">int</span> size[N],key[N],sum[N],val[N];</span><br><span class=\"line\">  \t<span class=\"type\">int</span> ls[N],rs[N],cnt;</span><br><span class=\"line\">  \t<span class=\"type\">int</span> root;</span><br><span class=\"line\">  \t<span class=\"type\">bool</span> lazy[N];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol>\n<li>$\\tt root$ ：根；</li>\n<li>$\\tt cnt$ ：下标大小；</li>\n<li>$\\tt key[]$ ：关键值；</li>\n<li>$\\tt ls[]\\&amp;rs[]$ ：左右儿子；</li>\n<li>$\\tt sum[]$ ：子树权值；</li>\n<li>$\\tt val[]$ ：节点权值；</li>\n<li>$\\tt size[]$ ：节点大小；</li>\n<li>$\\tt lazy[]$ ：下传标记。</li>\n</ol>\n<h2 id=\"基本操作\"><a href=\"#基本操作\" class=\"headerlink\" title=\"基本操作\"></a>基本操作</h2><ul>\n<li>手写随机($Rand$)<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">Rand</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">static</span> <span class=\"type\">int</span> seed=<span class=\"number\">233</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> seed=<span class=\"built_in\">int</span>(seed*<span class=\"number\">48271LL</span>%<span class=\"number\">20020207</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>标记上传 ($pushup$)<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">pushup</span><span class=\"params\">(<span class=\"type\">int</span> rt)</span></span>&#123;</span><br><span class=\"line\">\tsize[rt]=size[lson]+size[rson]+<span class=\"number\">1</span>;</span><br><span class=\"line\">\tsum[rt]=sum[lson]+sum[rson]+val[rt];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>标记下传 ($pushdown$)，根据情况会不一样<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">pushdown</span><span class=\"params\">(<span class=\"type\">int</span> rt)</span></span>&#123;</span><br><span class=\"line\">  \t<span class=\"keyword\">if</span>(!lazy[rt])<span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"built_in\">swap</span>(lson,rson);</span><br><span class=\"line\">    lazy[lson]^=<span class=\"number\">1</span>;lazy[rson]^=<span class=\"number\">1</span>;</span><br><span class=\"line\">    lazy[rt]=<span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>分裂($split$)<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//权值</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">split</span><span class=\"params\">(<span class=\"type\">int</span> rt,<span class=\"type\">int</span> x,<span class=\"type\">int</span> &amp;a,<span class=\"type\">int</span> &amp;b)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!rt) a=<span class=\"number\">0</span>,b=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    \t<span class=\"built_in\">pushdown</span>(rt);</span><br><span class=\"line\">      \t<span class=\"keyword\">if</span>(val[rt]&lt;=x)a=rt,<span class=\"built_in\">split</span>(rson,x,rs[a],b);</span><br><span class=\"line\">      \t<span class=\"keyword\">else</span> b=rt,<span class=\"built_in\">split</span>(lson,x,a,ls[b]);</span><br><span class=\"line\">      \t<span class=\"built_in\">pushup</span>(rt);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//位置</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">split</span><span class=\"params\">(<span class=\"type\">int</span> rt,<span class=\"type\">int</span> x,<span class=\"type\">int</span> &amp;a,<span class=\"type\">int</span> &amp;b)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!rt) a=<span class=\"number\">0</span>,b=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    \t<span class=\"built_in\">pushdown</span>(rt);</span><br><span class=\"line\">    \t<span class=\"keyword\">if</span>(size[ls[rt]]&lt;x)a=rt,<span class=\"built_in\">split</span>(rson,x-size[ls[rt]]<span class=\"number\">-1</span>,rs[a],b);</span><br><span class=\"line\">      \t<span class=\"keyword\">else</span> b=rt,<span class=\"built_in\">split</span>(lson,x,a,ls[b]);</span><br><span class=\"line\">      \t<span class=\"built_in\">pushup</span>(rt);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>合并($merge$)<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">merge</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> y)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!x||!y) <span class=\"keyword\">return</span> x+y;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(key[x]&lt;key[y])&#123;<span class=\"built_in\">pushdown</span>(x);rs[x]=<span class=\"built_in\">merge</span>(rs[x],y);<span class=\"built_in\">pushup</span>(x);<span class=\"keyword\">return</span> x;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;<span class=\"built_in\">pushdown</span>(y);ls[y]=<span class=\"built_in\">merge</span>(x,ls[y]);<span class=\"built_in\">pushup</span>(y);<span class=\"keyword\">return</span> y;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"修改\"><a href=\"#修改\" class=\"headerlink\" title=\"修改\"></a>修改</h2><ul>\n<li>新建节点 ($newnode$)<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">newnode</span><span class=\"params\">(<span class=\"type\">int</span> v)</span></span>&#123;</span><br><span class=\"line\">  \tsum[++cnt]=val[cnt]=v;size[cnt]=<span class=\"number\">1</span>;key[cnt]=<span class=\"built_in\">Rand</span>();</span><br><span class=\"line\">  \t<span class=\"keyword\">return</span> cnt;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>插入($Insert$)<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Insert</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> v)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> a,b;</span><br><span class=\"line\">    <span class=\"built_in\">split</span>(root,x,a,b);</span><br><span class=\"line\">    <span class=\"type\">int</span> rt=<span class=\"built_in\">newnode</span>(v);</span><br><span class=\"line\">    root=<span class=\"built_in\">merge</span>(<span class=\"built_in\">merge</span>(a,rt),b);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>删除($Delete$)<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Delete</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> a,b,c;</span><br><span class=\"line\">    <span class=\"built_in\">split</span>(root,x,a,b);<span class=\"built_in\">split</span>(a,x<span class=\"number\">-1</span>,a,c);</span><br><span class=\"line\">    c=<span class=\"built_in\">merge</span>(ls[c],rs[c]);</span><br><span class=\"line\">    root=<span class=\"built_in\">merge</span>(<span class=\"built_in\">merge</span>(a,c),b);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>区间修改（翻转）($revse$)<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Reverse</span><span class=\"params\">(<span class=\"type\">int</span> l,<span class=\"type\">int</span> r)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> x,y,z;</span><br><span class=\"line\">    <span class=\"built_in\">split</span>(root,r,x,z);</span><br><span class=\"line\">    <span class=\"built_in\">split</span>(x,l<span class=\"number\">-1</span>,x,y);</span><br><span class=\"line\">    lazy[y]^=<span class=\"number\">1</span>;</span><br><span class=\"line\">    root=<span class=\"built_in\">merge</span>(<span class=\"built_in\">merge</span>(x,y),z);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"询问\"><a href=\"#询问\" class=\"headerlink\" title=\"询问\"></a>询问</h2><ul>\n<li><p>查找排名第k的值($QueryRank$)</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">QueryRank</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> rt=root;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(rt)&#123;</span><br><span class=\"line\">      \t<span class=\"keyword\">if</span>(x==size[lson]+<span class=\"number\">1</span>)<span class=\"keyword\">return</span> val[rt];</span><br><span class=\"line\">      \t<span class=\"keyword\">if</span>(size[lson]&gt;=x)rt=lson;</span><br><span class=\"line\">      \t<span class=\"keyword\">else</span> x-=size[lson]+<span class=\"number\">1</span>,rt=rson;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查找某个值的排名($Rank$)</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">Rank</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> rt=root,res=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(rt)&#123;</span><br><span class=\"line\">    \t<span class=\"keyword\">if</span>(val[rt]&gt;=x)rt=lson;</span><br><span class=\"line\">    \t<span class=\"keyword\">else</span> res+=size[lson]+<span class=\"number\">1</span>,rt=rson;</span><br><span class=\"line\">  \t&#125;</span><br><span class=\"line\">  \t<span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>前驱($Numpre$)<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">Numpre</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span>&#123;<span class=\"keyword\">return</span> <span class=\"built_in\">QueryRank</span>(<span class=\"built_in\">Rank</span>(x)<span class=\"number\">-1</span>);&#125;</span><br></pre></td></tr></table></figure></li>\n<li>后继($Numnex$)<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">Numnex</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span>&#123;<span class=\"keyword\">return</span> <span class=\"built_in\">QueryRank</span>(<span class=\"built_in\">Rank</span>(x+<span class=\"number\">1</span>));&#125;</span><br></pre></td></tr></table></figure></li>\n<li>区间查询（权值和）($Numnex$)<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"title\">Query</span><span class=\"params\">(<span class=\"type\">int</span> l,<span class=\"type\">int</span> r)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> x,y,z;</span><br><span class=\"line\">    <span class=\"built_in\">split</span>(root,r,x,z);</span><br><span class=\"line\">    <span class=\"built_in\">split</span>(x,l<span class=\"number\">-1</span>,x,y);</span><br><span class=\"line\">    <span class=\"type\">long</span> <span class=\"type\">long</span> ans=sum[y];</span><br><span class=\"line\">    root=<span class=\"built_in\">merge</span>(<span class=\"built_in\">merge</span>(x,y),z);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"两个模板题：\"><a href=\"#两个模板题：\" class=\"headerlink\" title=\"两个模板题：\"></a>两个模板题：</h2><ul>\n<li><a href=\"https://www.luogu.org/problemnew/show/P3369\">P3369 【模板】普通平衡树</a><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// luogu-judger-enable-o2</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdlib&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cctype&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;stack&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;map&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;set&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> inf=<span class=\"number\">0x7fffffff</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">double</span> eps=<span class=\"number\">1e-10</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">double</span> pi=<span class=\"built_in\">acos</span>(<span class=\"number\">-1.0</span>);</span><br><span class=\"line\"><span class=\"comment\">//char buf[1&lt;&lt;15],*S=buf,*T=buf;</span></span><br><span class=\"line\"><span class=\"comment\">//char getch()&#123;return S==T&amp;&amp;(T=(S=buf)+fread(buf,1,1&lt;&lt;15,stdin),S==T)?0:*S++;&#125;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">int</span> <span class=\"title\">read</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> x=<span class=\"number\">0</span>,f=<span class=\"number\">1</span>;<span class=\"type\">char</span> ch;ch=<span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(ch&lt;<span class=\"string\">&#x27;0&#x27;</span>||ch&gt;<span class=\"string\">&#x27;9&#x27;</span>)&#123;<span class=\"keyword\">if</span>(ch==<span class=\"string\">&#x27;-&#x27;</span>) f=<span class=\"number\">0</span>;ch=<span class=\"built_in\">getchar</span>();&#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(ch&gt;=<span class=\"string\">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class=\"string\">&#x27;9&#x27;</span>)&#123;x=(x&lt;&lt;<span class=\"number\">1</span>)+(x&lt;&lt;<span class=\"number\">3</span>)+(ch&amp;<span class=\"number\">15</span>);ch=<span class=\"built_in\">getchar</span>();&#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(f)<span class=\"keyword\">return</span> x;<span class=\"keyword\">else</span> <span class=\"keyword\">return</span> -x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">1e5</span>+<span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">fhq_Treap</span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"keyword\">define</span> lson ls[rt]</span></span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"keyword\">define</span> rson rs[rt]</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">Rand</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">static</span> <span class=\"type\">int</span> seed=<span class=\"number\">233</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> seed=<span class=\"built_in\">int</span>(seed*<span class=\"number\">48271LL</span>%<span class=\"number\">20020207</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"type\">int</span> size[N],key[N],val[N];</span><br><span class=\"line\">  <span class=\"type\">int</span> ls[N],rs[N],cnt,sum[N];</span><br><span class=\"line\">  <span class=\"type\">int</span> root;</span><br><span class=\"line\">  <span class=\"type\">bool</span> lazy[N];</span><br><span class=\"line\">  <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">pushup</span><span class=\"params\">(<span class=\"type\">int</span> rt)</span></span>&#123;</span><br><span class=\"line\">        size[rt]=size[lson]+size[rson]+<span class=\"number\">1</span>;</span><br><span class=\"line\">        sum[rt]=sum[lson]+sum[rson]+val[rt];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">clone</span><span class=\"params\">(<span class=\"type\">int</span> b)</span></span>&#123;</span><br><span class=\"line\">  \t++cnt;</span><br><span class=\"line\">    size[cnt]=size[b];key[cnt]=key[b];val[cnt]=val[b];</span><br><span class=\"line\">    ls[cnt]=ls[b];rs[cnt]=rs[b],lazy[cnt]=lazy[b];sum[cnt]=sum[b];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> cnt;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">pushdown</span><span class=\"params\">(<span class=\"type\">int</span> rt)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!lazy[rt])<span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"built_in\">swap</span>(lson,rson);</span><br><span class=\"line\">    lazy[lson]^=<span class=\"number\">1</span>;lazy[rson]^=<span class=\"number\">1</span>;</span><br><span class=\"line\">    lazy[rt]=<span class=\"number\">0</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">merge</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> y)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!x||!y) <span class=\"keyword\">return</span> x+y;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(key[x]&lt;key[y])&#123;<span class=\"built_in\">pushdown</span>(x);rs[x]=<span class=\"built_in\">merge</span>(rs[x],y);<span class=\"built_in\">pushup</span>(x);<span class=\"keyword\">return</span> x;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;<span class=\"built_in\">pushdown</span>(y);ls[y]=<span class=\"built_in\">merge</span>(x,ls[y]);<span class=\"built_in\">pushup</span>(y);<span class=\"keyword\">return</span> y;&#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">//权值</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">split</span><span class=\"params\">(<span class=\"type\">int</span> rt,<span class=\"type\">int</span> x,<span class=\"type\">int</span> &amp;a,<span class=\"type\">int</span> &amp;b)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!rt) a=<span class=\"number\">0</span>,b=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    \t<span class=\"built_in\">pushdown</span>(rt);</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(val[rt]&lt;=x)a=rt,<span class=\"built_in\">split</span>(rson,x,rs[a],b);</span><br><span class=\"line\">      <span class=\"keyword\">else</span> b=rt,<span class=\"built_in\">split</span>(lson,x,a,ls[b]);</span><br><span class=\"line\">      <span class=\"built_in\">pushup</span>(rt);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Insert</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> a,b;</span><br><span class=\"line\">    <span class=\"built_in\">split</span>(root,x,a,b);</span><br><span class=\"line\">    val[++cnt]=x;size[cnt]=<span class=\"number\">1</span>;key[cnt]=<span class=\"built_in\">Rand</span>();</span><br><span class=\"line\">    root=<span class=\"built_in\">merge</span>(<span class=\"built_in\">merge</span>(a,cnt),b);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Delete</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> a,b,c;</span><br><span class=\"line\">    <span class=\"built_in\">split</span>(root,x,a,b);<span class=\"built_in\">split</span>(a,x<span class=\"number\">-1</span>,a,c);</span><br><span class=\"line\">    c=<span class=\"built_in\">merge</span>(ls[c],rs[c]);</span><br><span class=\"line\">    root=<span class=\"built_in\">merge</span>(<span class=\"built_in\">merge</span>(a,c),b);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">Rank</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> rt=root,res=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(rt)&#123;</span><br><span class=\"line\">    \t<span class=\"keyword\">if</span>(val[rt]&gt;=x)rt=lson;</span><br><span class=\"line\">    \t<span class=\"keyword\">else</span> res+=size[lson]+<span class=\"number\">1</span>,rt=rson;</span><br><span class=\"line\">  \t&#125;</span><br><span class=\"line\">  \t<span class=\"keyword\">return</span> res;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">QueryRank</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> rt=root;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(rt)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(x==size[lson]+<span class=\"number\">1</span>)<span class=\"keyword\">return</span> val[rt];</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(size[lson]&gt;=x)rt=lson;</span><br><span class=\"line\">      <span class=\"keyword\">else</span> x-=size[lson]+<span class=\"number\">1</span>,rt=rson;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">Numpre</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span>&#123;<span class=\"keyword\">return</span> <span class=\"built_in\">QueryRank</span>(<span class=\"built_in\">Rank</span>(x)<span class=\"number\">-1</span>);&#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">Numnex</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span>&#123;<span class=\"keyword\">return</span> <span class=\"built_in\">QueryRank</span>(<span class=\"built_in\">Rank</span>(x+<span class=\"number\">1</span>));&#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Reverse</span><span class=\"params\">(<span class=\"type\">int</span> l,<span class=\"type\">int</span> r)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> x,y,z;</span><br><span class=\"line\">    <span class=\"built_in\">split</span>(root,r,x,z);</span><br><span class=\"line\">    <span class=\"built_in\">split</span>(x,l<span class=\"number\">-1</span>,x,y);</span><br><span class=\"line\">    lazy[y]^=<span class=\"number\">1</span>;</span><br><span class=\"line\">    root=<span class=\"built_in\">merge</span>(<span class=\"built_in\">merge</span>(x,y),z);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"title\">Query</span><span class=\"params\">(<span class=\"type\">int</span> l,<span class=\"type\">int</span> r)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> x,y,z;</span><br><span class=\"line\">    <span class=\"built_in\">split</span>(root,r,x,z);</span><br><span class=\"line\">    <span class=\"built_in\">split</span>(x,l<span class=\"number\">-1</span>,x,y);</span><br><span class=\"line\">    <span class=\"type\">long</span> <span class=\"type\">long</span> ans=sum[y];</span><br><span class=\"line\">    root=<span class=\"built_in\">merge</span>(<span class=\"built_in\">merge</span>(x,y),z);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;Fhq;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"type\">int</span> n=<span class=\"built_in\">read</span>();</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(n--)&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> opt=<span class=\"built_in\">read</span>(),x=<span class=\"built_in\">read</span>();</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(opt==<span class=\"number\">1</span>)&#123;Fhq.<span class=\"built_in\">Insert</span>(x);<span class=\"keyword\">continue</span>;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(opt==<span class=\"number\">2</span>)&#123;Fhq.<span class=\"built_in\">Delete</span>(x);<span class=\"keyword\">continue</span>;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(opt==<span class=\"number\">3</span>)&#123;<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>,Fhq.<span class=\"built_in\">Rank</span>(x));<span class=\"keyword\">continue</span>;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(opt==<span class=\"number\">4</span>)&#123;<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>,Fhq.<span class=\"built_in\">QueryRank</span>(x));<span class=\"keyword\">continue</span>;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(opt==<span class=\"number\">5</span>)&#123;<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>,Fhq.<span class=\"built_in\">Numpre</span>(x));<span class=\"keyword\">continue</span>;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(opt==<span class=\"number\">6</span>)&#123;<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>,Fhq.<span class=\"built_in\">Numnex</span>(x));<span class=\"keyword\">continue</span>;&#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><a href=\"https://www.luogu.org/problemnew/show/P3391\">P3391 【模板】文艺平衡树（Splay）</a><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdlib&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cctype&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;stack&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;map&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;set&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> inf=<span class=\"number\">0x7fffffff</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">double</span> eps=<span class=\"number\">1e-10</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">double</span> pi=<span class=\"built_in\">acos</span>(<span class=\"number\">-1.0</span>);</span><br><span class=\"line\"><span class=\"comment\">//char buf[1&lt;&lt;15],*S=buf,*T=buf;</span></span><br><span class=\"line\"><span class=\"comment\">//char getch()&#123;return S==T&amp;&amp;(T=(S=buf)+fread(buf,1,1&lt;&lt;15,stdin),S==T)?0:*S++;&#125;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">int</span> <span class=\"title\">read</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> x=<span class=\"number\">0</span>,f=<span class=\"number\">1</span>;<span class=\"type\">char</span> ch;ch=<span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(ch&lt;<span class=\"string\">&#x27;0&#x27;</span>||ch&gt;<span class=\"string\">&#x27;9&#x27;</span>)&#123;<span class=\"keyword\">if</span>(ch==<span class=\"string\">&#x27;-&#x27;</span>) f=<span class=\"number\">0</span>;ch=<span class=\"built_in\">getchar</span>();&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(ch&gt;=<span class=\"string\">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class=\"string\">&#x27;9&#x27;</span>)&#123;x=(x&lt;&lt;<span class=\"number\">1</span>)+(x&lt;&lt;<span class=\"number\">3</span>)+(ch&amp;<span class=\"number\">15</span>);ch=<span class=\"built_in\">getchar</span>();&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(f)<span class=\"keyword\">return</span> x;<span class=\"keyword\">else</span> <span class=\"keyword\">return</span> -x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">1e5</span>+<span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> a[N],n,m;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">fhq_Treap</span>&#123;</span><br><span class=\"line\">\t<span class=\"meta\">#<span class=\"keyword\">define</span> lson ls[rt]</span></span><br><span class=\"line\">\t<span class=\"meta\">#<span class=\"keyword\">define</span> rson rs[rt]</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">Rand</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">static</span> <span class=\"type\">int</span> seed=<span class=\"number\">233</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> seed=<span class=\"built_in\">int</span>(seed*<span class=\"number\">48271LL</span>%<span class=\"number\">20020207</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"type\">int</span> size[N],key[N],val[N],w[N];</span><br><span class=\"line\">  <span class=\"type\">int</span> ls[N],rs[N],cnt;</span><br><span class=\"line\">  <span class=\"type\">int</span> root;</span><br><span class=\"line\">  <span class=\"type\">bool</span> lazy[N];</span><br><span class=\"line\">  <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">pushup</span><span class=\"params\">(<span class=\"type\">int</span> rt)</span></span>&#123;</span><br><span class=\"line\">\t\tsize[rt]=size[lson]+size[rson]+<span class=\"number\">1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">pushdown</span><span class=\"params\">(<span class=\"type\">int</span> rt)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!lazy[rt])<span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"built_in\">swap</span>(lson,rson);</span><br><span class=\"line\">    lazy[lson]^=<span class=\"number\">1</span>;lazy[rson]^=<span class=\"number\">1</span>;</span><br><span class=\"line\">    lazy[rt]=<span class=\"number\">0</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">merge</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> y)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!x||!y) <span class=\"keyword\">return</span> x+y;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(key[x]&lt;key[y])&#123;<span class=\"built_in\">pushdown</span>(x);rs[x]=<span class=\"built_in\">merge</span>(rs[x],y);<span class=\"built_in\">pushup</span>(x);<span class=\"keyword\">return</span> x;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;<span class=\"built_in\">pushdown</span>(y);ls[y]=<span class=\"built_in\">merge</span>(x,ls[y]);<span class=\"built_in\">pushup</span>(y);<span class=\"keyword\">return</span> y;&#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">//位置</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">split</span><span class=\"params\">(<span class=\"type\">int</span> rt,<span class=\"type\">int</span> x,<span class=\"type\">int</span> &amp;a,<span class=\"type\">int</span> &amp;b)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!rt) a=<span class=\"number\">0</span>,b=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    \t<span class=\"built_in\">pushdown</span>(rt);</span><br><span class=\"line\">    \t<span class=\"keyword\">if</span>(size[ls[rt]]&lt;x)a=rt,<span class=\"built_in\">split</span>(rson,x-size[ls[rt]]<span class=\"number\">-1</span>,rs[a],b);</span><br><span class=\"line\">      <span class=\"keyword\">else</span> b=rt,<span class=\"built_in\">split</span>(lson,x,a,ls[b]);</span><br><span class=\"line\">      <span class=\"built_in\">pushup</span>(rt);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Insert</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> v)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> a,b;</span><br><span class=\"line\">    <span class=\"built_in\">split</span>(root,x,a,b);++cnt;</span><br><span class=\"line\">    val[cnt]=v;size[cnt]=<span class=\"number\">1</span>;key[cnt]=<span class=\"built_in\">Rand</span>();</span><br><span class=\"line\">    root=<span class=\"built_in\">merge</span>(<span class=\"built_in\">merge</span>(a,cnt),b);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Reverse</span><span class=\"params\">(<span class=\"type\">int</span> l,<span class=\"type\">int</span> r)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> x,y,z;</span><br><span class=\"line\">    <span class=\"built_in\">split</span>(root,r,x,z);</span><br><span class=\"line\">    <span class=\"built_in\">split</span>(x,l<span class=\"number\">-1</span>,x,y);</span><br><span class=\"line\">    lazy[y]^=<span class=\"number\">1</span>;</span><br><span class=\"line\">    root=<span class=\"built_in\">merge</span>(<span class=\"built_in\">merge</span>(x,y),z);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;Fhq;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">write</span><span class=\"params\">(<span class=\"type\">int</span> rt)</span></span>&#123;</span><br><span class=\"line\">  Fhq.<span class=\"built_in\">pushdown</span>(rt);</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(Fhq.lson)<span class=\"built_in\">write</span>(Fhq.lson);</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d &quot;</span>,Fhq.val[rt]);</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(Fhq.rson)<span class=\"built_in\">write</span>(Fhq.rson); </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  n=<span class=\"built_in\">read</span>();m=<span class=\"built_in\">read</span>();</span><br><span class=\"line\"> \t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)Fhq.<span class=\"built_in\">Insert</span>(i<span class=\"number\">-1</span>,i);</span><br><span class=\"line\"> \t<span class=\"keyword\">while</span>(m--)&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> l=<span class=\"built_in\">read</span>(),r=<span class=\"built_in\">read</span>();</span><br><span class=\"line\">  \tFhq.<span class=\"built_in\">Reverse</span>(l,r);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">write</span>(Fhq.root);</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>$\\ \\ \\ \\ \\ \\ \\ \\,$关于Splay操作的复习笔记：</p>\n<p>$\\ \\ \\ \\ \\ \\ \\ \\,$一些平衡树操作和都是一样的，详见<a href=\"/2019/01/05/Splay各种操作模板大赏/\">【Splay各种操作模板大赏】</a>。</p>","more":"<h2 id=\"结构\"><a href=\"#结构\" class=\"headerlink\" title=\"结构\"></a>结构</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">fhq_Treap</span>&#123;</span><br><span class=\"line\">\t<span class=\"meta\">#<span class=\"keyword\">define</span> lson ls[rt]</span></span><br><span class=\"line\">\t<span class=\"meta\">#<span class=\"keyword\">define</span> rson rs[rt]</span></span><br><span class=\"line\">  \t<span class=\"type\">int</span> size[N],key[N],sum[N],val[N];</span><br><span class=\"line\">  \t<span class=\"type\">int</span> ls[N],rs[N],cnt;</span><br><span class=\"line\">  \t<span class=\"type\">int</span> root;</span><br><span class=\"line\">  \t<span class=\"type\">bool</span> lazy[N];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol>\n<li>$\\tt root$ ：根；</li>\n<li>$\\tt cnt$ ：下标大小；</li>\n<li>$\\tt key[]$ ：关键值；</li>\n<li>$\\tt ls[]\\&amp;rs[]$ ：左右儿子；</li>\n<li>$\\tt sum[]$ ：子树权值；</li>\n<li>$\\tt val[]$ ：节点权值；</li>\n<li>$\\tt size[]$ ：节点大小；</li>\n<li>$\\tt lazy[]$ ：下传标记。</li>\n</ol>\n<h2 id=\"基本操作\"><a href=\"#基本操作\" class=\"headerlink\" title=\"基本操作\"></a>基本操作</h2><ul>\n<li>手写随机($Rand$)<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">Rand</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">static</span> <span class=\"type\">int</span> seed=<span class=\"number\">233</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> seed=<span class=\"built_in\">int</span>(seed*<span class=\"number\">48271LL</span>%<span class=\"number\">20020207</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>标记上传 ($pushup$)<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">pushup</span><span class=\"params\">(<span class=\"type\">int</span> rt)</span></span>&#123;</span><br><span class=\"line\">\tsize[rt]=size[lson]+size[rson]+<span class=\"number\">1</span>;</span><br><span class=\"line\">\tsum[rt]=sum[lson]+sum[rson]+val[rt];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>标记下传 ($pushdown$)，根据情况会不一样<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">pushdown</span><span class=\"params\">(<span class=\"type\">int</span> rt)</span></span>&#123;</span><br><span class=\"line\">  \t<span class=\"keyword\">if</span>(!lazy[rt])<span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"built_in\">swap</span>(lson,rson);</span><br><span class=\"line\">    lazy[lson]^=<span class=\"number\">1</span>;lazy[rson]^=<span class=\"number\">1</span>;</span><br><span class=\"line\">    lazy[rt]=<span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>分裂($split$)<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//权值</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">split</span><span class=\"params\">(<span class=\"type\">int</span> rt,<span class=\"type\">int</span> x,<span class=\"type\">int</span> &amp;a,<span class=\"type\">int</span> &amp;b)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!rt) a=<span class=\"number\">0</span>,b=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    \t<span class=\"built_in\">pushdown</span>(rt);</span><br><span class=\"line\">      \t<span class=\"keyword\">if</span>(val[rt]&lt;=x)a=rt,<span class=\"built_in\">split</span>(rson,x,rs[a],b);</span><br><span class=\"line\">      \t<span class=\"keyword\">else</span> b=rt,<span class=\"built_in\">split</span>(lson,x,a,ls[b]);</span><br><span class=\"line\">      \t<span class=\"built_in\">pushup</span>(rt);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//位置</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">split</span><span class=\"params\">(<span class=\"type\">int</span> rt,<span class=\"type\">int</span> x,<span class=\"type\">int</span> &amp;a,<span class=\"type\">int</span> &amp;b)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!rt) a=<span class=\"number\">0</span>,b=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    \t<span class=\"built_in\">pushdown</span>(rt);</span><br><span class=\"line\">    \t<span class=\"keyword\">if</span>(size[ls[rt]]&lt;x)a=rt,<span class=\"built_in\">split</span>(rson,x-size[ls[rt]]<span class=\"number\">-1</span>,rs[a],b);</span><br><span class=\"line\">      \t<span class=\"keyword\">else</span> b=rt,<span class=\"built_in\">split</span>(lson,x,a,ls[b]);</span><br><span class=\"line\">      \t<span class=\"built_in\">pushup</span>(rt);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>合并($merge$)<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">merge</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> y)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!x||!y) <span class=\"keyword\">return</span> x+y;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(key[x]&lt;key[y])&#123;<span class=\"built_in\">pushdown</span>(x);rs[x]=<span class=\"built_in\">merge</span>(rs[x],y);<span class=\"built_in\">pushup</span>(x);<span class=\"keyword\">return</span> x;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;<span class=\"built_in\">pushdown</span>(y);ls[y]=<span class=\"built_in\">merge</span>(x,ls[y]);<span class=\"built_in\">pushup</span>(y);<span class=\"keyword\">return</span> y;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"修改\"><a href=\"#修改\" class=\"headerlink\" title=\"修改\"></a>修改</h2><ul>\n<li>新建节点 ($newnode$)<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">newnode</span><span class=\"params\">(<span class=\"type\">int</span> v)</span></span>&#123;</span><br><span class=\"line\">  \tsum[++cnt]=val[cnt]=v;size[cnt]=<span class=\"number\">1</span>;key[cnt]=<span class=\"built_in\">Rand</span>();</span><br><span class=\"line\">  \t<span class=\"keyword\">return</span> cnt;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>插入($Insert$)<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Insert</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> v)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> a,b;</span><br><span class=\"line\">    <span class=\"built_in\">split</span>(root,x,a,b);</span><br><span class=\"line\">    <span class=\"type\">int</span> rt=<span class=\"built_in\">newnode</span>(v);</span><br><span class=\"line\">    root=<span class=\"built_in\">merge</span>(<span class=\"built_in\">merge</span>(a,rt),b);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>删除($Delete$)<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Delete</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> a,b,c;</span><br><span class=\"line\">    <span class=\"built_in\">split</span>(root,x,a,b);<span class=\"built_in\">split</span>(a,x<span class=\"number\">-1</span>,a,c);</span><br><span class=\"line\">    c=<span class=\"built_in\">merge</span>(ls[c],rs[c]);</span><br><span class=\"line\">    root=<span class=\"built_in\">merge</span>(<span class=\"built_in\">merge</span>(a,c),b);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>区间修改（翻转）($revse$)<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Reverse</span><span class=\"params\">(<span class=\"type\">int</span> l,<span class=\"type\">int</span> r)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> x,y,z;</span><br><span class=\"line\">    <span class=\"built_in\">split</span>(root,r,x,z);</span><br><span class=\"line\">    <span class=\"built_in\">split</span>(x,l<span class=\"number\">-1</span>,x,y);</span><br><span class=\"line\">    lazy[y]^=<span class=\"number\">1</span>;</span><br><span class=\"line\">    root=<span class=\"built_in\">merge</span>(<span class=\"built_in\">merge</span>(x,y),z);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"询问\"><a href=\"#询问\" class=\"headerlink\" title=\"询问\"></a>询问</h2><ul>\n<li><p>查找排名第k的值($QueryRank$)</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">QueryRank</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> rt=root;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(rt)&#123;</span><br><span class=\"line\">      \t<span class=\"keyword\">if</span>(x==size[lson]+<span class=\"number\">1</span>)<span class=\"keyword\">return</span> val[rt];</span><br><span class=\"line\">      \t<span class=\"keyword\">if</span>(size[lson]&gt;=x)rt=lson;</span><br><span class=\"line\">      \t<span class=\"keyword\">else</span> x-=size[lson]+<span class=\"number\">1</span>,rt=rson;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查找某个值的排名($Rank$)</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">Rank</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> rt=root,res=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(rt)&#123;</span><br><span class=\"line\">    \t<span class=\"keyword\">if</span>(val[rt]&gt;=x)rt=lson;</span><br><span class=\"line\">    \t<span class=\"keyword\">else</span> res+=size[lson]+<span class=\"number\">1</span>,rt=rson;</span><br><span class=\"line\">  \t&#125;</span><br><span class=\"line\">  \t<span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>前驱($Numpre$)<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">Numpre</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span>&#123;<span class=\"keyword\">return</span> <span class=\"built_in\">QueryRank</span>(<span class=\"built_in\">Rank</span>(x)<span class=\"number\">-1</span>);&#125;</span><br></pre></td></tr></table></figure></li>\n<li>后继($Numnex$)<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">Numnex</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span>&#123;<span class=\"keyword\">return</span> <span class=\"built_in\">QueryRank</span>(<span class=\"built_in\">Rank</span>(x+<span class=\"number\">1</span>));&#125;</span><br></pre></td></tr></table></figure></li>\n<li>区间查询（权值和）($Numnex$)<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"title\">Query</span><span class=\"params\">(<span class=\"type\">int</span> l,<span class=\"type\">int</span> r)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> x,y,z;</span><br><span class=\"line\">    <span class=\"built_in\">split</span>(root,r,x,z);</span><br><span class=\"line\">    <span class=\"built_in\">split</span>(x,l<span class=\"number\">-1</span>,x,y);</span><br><span class=\"line\">    <span class=\"type\">long</span> <span class=\"type\">long</span> ans=sum[y];</span><br><span class=\"line\">    root=<span class=\"built_in\">merge</span>(<span class=\"built_in\">merge</span>(x,y),z);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"两个模板题：\"><a href=\"#两个模板题：\" class=\"headerlink\" title=\"两个模板题：\"></a>两个模板题：</h2><ul>\n<li><a href=\"https://www.luogu.org/problemnew/show/P3369\">P3369 【模板】普通平衡树</a><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// luogu-judger-enable-o2</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdlib&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cctype&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;stack&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;map&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;set&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> inf=<span class=\"number\">0x7fffffff</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">double</span> eps=<span class=\"number\">1e-10</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">double</span> pi=<span class=\"built_in\">acos</span>(<span class=\"number\">-1.0</span>);</span><br><span class=\"line\"><span class=\"comment\">//char buf[1&lt;&lt;15],*S=buf,*T=buf;</span></span><br><span class=\"line\"><span class=\"comment\">//char getch()&#123;return S==T&amp;&amp;(T=(S=buf)+fread(buf,1,1&lt;&lt;15,stdin),S==T)?0:*S++;&#125;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">int</span> <span class=\"title\">read</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> x=<span class=\"number\">0</span>,f=<span class=\"number\">1</span>;<span class=\"type\">char</span> ch;ch=<span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(ch&lt;<span class=\"string\">&#x27;0&#x27;</span>||ch&gt;<span class=\"string\">&#x27;9&#x27;</span>)&#123;<span class=\"keyword\">if</span>(ch==<span class=\"string\">&#x27;-&#x27;</span>) f=<span class=\"number\">0</span>;ch=<span class=\"built_in\">getchar</span>();&#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(ch&gt;=<span class=\"string\">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class=\"string\">&#x27;9&#x27;</span>)&#123;x=(x&lt;&lt;<span class=\"number\">1</span>)+(x&lt;&lt;<span class=\"number\">3</span>)+(ch&amp;<span class=\"number\">15</span>);ch=<span class=\"built_in\">getchar</span>();&#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(f)<span class=\"keyword\">return</span> x;<span class=\"keyword\">else</span> <span class=\"keyword\">return</span> -x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">1e5</span>+<span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">fhq_Treap</span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"keyword\">define</span> lson ls[rt]</span></span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"keyword\">define</span> rson rs[rt]</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">Rand</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">static</span> <span class=\"type\">int</span> seed=<span class=\"number\">233</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> seed=<span class=\"built_in\">int</span>(seed*<span class=\"number\">48271LL</span>%<span class=\"number\">20020207</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"type\">int</span> size[N],key[N],val[N];</span><br><span class=\"line\">  <span class=\"type\">int</span> ls[N],rs[N],cnt,sum[N];</span><br><span class=\"line\">  <span class=\"type\">int</span> root;</span><br><span class=\"line\">  <span class=\"type\">bool</span> lazy[N];</span><br><span class=\"line\">  <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">pushup</span><span class=\"params\">(<span class=\"type\">int</span> rt)</span></span>&#123;</span><br><span class=\"line\">        size[rt]=size[lson]+size[rson]+<span class=\"number\">1</span>;</span><br><span class=\"line\">        sum[rt]=sum[lson]+sum[rson]+val[rt];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">clone</span><span class=\"params\">(<span class=\"type\">int</span> b)</span></span>&#123;</span><br><span class=\"line\">  \t++cnt;</span><br><span class=\"line\">    size[cnt]=size[b];key[cnt]=key[b];val[cnt]=val[b];</span><br><span class=\"line\">    ls[cnt]=ls[b];rs[cnt]=rs[b],lazy[cnt]=lazy[b];sum[cnt]=sum[b];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> cnt;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">pushdown</span><span class=\"params\">(<span class=\"type\">int</span> rt)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!lazy[rt])<span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"built_in\">swap</span>(lson,rson);</span><br><span class=\"line\">    lazy[lson]^=<span class=\"number\">1</span>;lazy[rson]^=<span class=\"number\">1</span>;</span><br><span class=\"line\">    lazy[rt]=<span class=\"number\">0</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">merge</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> y)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!x||!y) <span class=\"keyword\">return</span> x+y;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(key[x]&lt;key[y])&#123;<span class=\"built_in\">pushdown</span>(x);rs[x]=<span class=\"built_in\">merge</span>(rs[x],y);<span class=\"built_in\">pushup</span>(x);<span class=\"keyword\">return</span> x;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;<span class=\"built_in\">pushdown</span>(y);ls[y]=<span class=\"built_in\">merge</span>(x,ls[y]);<span class=\"built_in\">pushup</span>(y);<span class=\"keyword\">return</span> y;&#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">//权值</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">split</span><span class=\"params\">(<span class=\"type\">int</span> rt,<span class=\"type\">int</span> x,<span class=\"type\">int</span> &amp;a,<span class=\"type\">int</span> &amp;b)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!rt) a=<span class=\"number\">0</span>,b=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    \t<span class=\"built_in\">pushdown</span>(rt);</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(val[rt]&lt;=x)a=rt,<span class=\"built_in\">split</span>(rson,x,rs[a],b);</span><br><span class=\"line\">      <span class=\"keyword\">else</span> b=rt,<span class=\"built_in\">split</span>(lson,x,a,ls[b]);</span><br><span class=\"line\">      <span class=\"built_in\">pushup</span>(rt);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Insert</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> a,b;</span><br><span class=\"line\">    <span class=\"built_in\">split</span>(root,x,a,b);</span><br><span class=\"line\">    val[++cnt]=x;size[cnt]=<span class=\"number\">1</span>;key[cnt]=<span class=\"built_in\">Rand</span>();</span><br><span class=\"line\">    root=<span class=\"built_in\">merge</span>(<span class=\"built_in\">merge</span>(a,cnt),b);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Delete</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> a,b,c;</span><br><span class=\"line\">    <span class=\"built_in\">split</span>(root,x,a,b);<span class=\"built_in\">split</span>(a,x<span class=\"number\">-1</span>,a,c);</span><br><span class=\"line\">    c=<span class=\"built_in\">merge</span>(ls[c],rs[c]);</span><br><span class=\"line\">    root=<span class=\"built_in\">merge</span>(<span class=\"built_in\">merge</span>(a,c),b);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">Rank</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> rt=root,res=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(rt)&#123;</span><br><span class=\"line\">    \t<span class=\"keyword\">if</span>(val[rt]&gt;=x)rt=lson;</span><br><span class=\"line\">    \t<span class=\"keyword\">else</span> res+=size[lson]+<span class=\"number\">1</span>,rt=rson;</span><br><span class=\"line\">  \t&#125;</span><br><span class=\"line\">  \t<span class=\"keyword\">return</span> res;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">QueryRank</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> rt=root;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(rt)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(x==size[lson]+<span class=\"number\">1</span>)<span class=\"keyword\">return</span> val[rt];</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(size[lson]&gt;=x)rt=lson;</span><br><span class=\"line\">      <span class=\"keyword\">else</span> x-=size[lson]+<span class=\"number\">1</span>,rt=rson;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">Numpre</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span>&#123;<span class=\"keyword\">return</span> <span class=\"built_in\">QueryRank</span>(<span class=\"built_in\">Rank</span>(x)<span class=\"number\">-1</span>);&#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">Numnex</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span>&#123;<span class=\"keyword\">return</span> <span class=\"built_in\">QueryRank</span>(<span class=\"built_in\">Rank</span>(x+<span class=\"number\">1</span>));&#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Reverse</span><span class=\"params\">(<span class=\"type\">int</span> l,<span class=\"type\">int</span> r)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> x,y,z;</span><br><span class=\"line\">    <span class=\"built_in\">split</span>(root,r,x,z);</span><br><span class=\"line\">    <span class=\"built_in\">split</span>(x,l<span class=\"number\">-1</span>,x,y);</span><br><span class=\"line\">    lazy[y]^=<span class=\"number\">1</span>;</span><br><span class=\"line\">    root=<span class=\"built_in\">merge</span>(<span class=\"built_in\">merge</span>(x,y),z);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"title\">Query</span><span class=\"params\">(<span class=\"type\">int</span> l,<span class=\"type\">int</span> r)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> x,y,z;</span><br><span class=\"line\">    <span class=\"built_in\">split</span>(root,r,x,z);</span><br><span class=\"line\">    <span class=\"built_in\">split</span>(x,l<span class=\"number\">-1</span>,x,y);</span><br><span class=\"line\">    <span class=\"type\">long</span> <span class=\"type\">long</span> ans=sum[y];</span><br><span class=\"line\">    root=<span class=\"built_in\">merge</span>(<span class=\"built_in\">merge</span>(x,y),z);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;Fhq;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"type\">int</span> n=<span class=\"built_in\">read</span>();</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(n--)&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> opt=<span class=\"built_in\">read</span>(),x=<span class=\"built_in\">read</span>();</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(opt==<span class=\"number\">1</span>)&#123;Fhq.<span class=\"built_in\">Insert</span>(x);<span class=\"keyword\">continue</span>;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(opt==<span class=\"number\">2</span>)&#123;Fhq.<span class=\"built_in\">Delete</span>(x);<span class=\"keyword\">continue</span>;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(opt==<span class=\"number\">3</span>)&#123;<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>,Fhq.<span class=\"built_in\">Rank</span>(x));<span class=\"keyword\">continue</span>;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(opt==<span class=\"number\">4</span>)&#123;<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>,Fhq.<span class=\"built_in\">QueryRank</span>(x));<span class=\"keyword\">continue</span>;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(opt==<span class=\"number\">5</span>)&#123;<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>,Fhq.<span class=\"built_in\">Numpre</span>(x));<span class=\"keyword\">continue</span>;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(opt==<span class=\"number\">6</span>)&#123;<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>,Fhq.<span class=\"built_in\">Numnex</span>(x));<span class=\"keyword\">continue</span>;&#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><a href=\"https://www.luogu.org/problemnew/show/P3391\">P3391 【模板】文艺平衡树（Splay）</a><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdlib&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cctype&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;stack&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;map&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;set&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> inf=<span class=\"number\">0x7fffffff</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">double</span> eps=<span class=\"number\">1e-10</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">double</span> pi=<span class=\"built_in\">acos</span>(<span class=\"number\">-1.0</span>);</span><br><span class=\"line\"><span class=\"comment\">//char buf[1&lt;&lt;15],*S=buf,*T=buf;</span></span><br><span class=\"line\"><span class=\"comment\">//char getch()&#123;return S==T&amp;&amp;(T=(S=buf)+fread(buf,1,1&lt;&lt;15,stdin),S==T)?0:*S++;&#125;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">int</span> <span class=\"title\">read</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> x=<span class=\"number\">0</span>,f=<span class=\"number\">1</span>;<span class=\"type\">char</span> ch;ch=<span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(ch&lt;<span class=\"string\">&#x27;0&#x27;</span>||ch&gt;<span class=\"string\">&#x27;9&#x27;</span>)&#123;<span class=\"keyword\">if</span>(ch==<span class=\"string\">&#x27;-&#x27;</span>) f=<span class=\"number\">0</span>;ch=<span class=\"built_in\">getchar</span>();&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(ch&gt;=<span class=\"string\">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class=\"string\">&#x27;9&#x27;</span>)&#123;x=(x&lt;&lt;<span class=\"number\">1</span>)+(x&lt;&lt;<span class=\"number\">3</span>)+(ch&amp;<span class=\"number\">15</span>);ch=<span class=\"built_in\">getchar</span>();&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(f)<span class=\"keyword\">return</span> x;<span class=\"keyword\">else</span> <span class=\"keyword\">return</span> -x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">1e5</span>+<span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> a[N],n,m;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">fhq_Treap</span>&#123;</span><br><span class=\"line\">\t<span class=\"meta\">#<span class=\"keyword\">define</span> lson ls[rt]</span></span><br><span class=\"line\">\t<span class=\"meta\">#<span class=\"keyword\">define</span> rson rs[rt]</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">Rand</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">static</span> <span class=\"type\">int</span> seed=<span class=\"number\">233</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> seed=<span class=\"built_in\">int</span>(seed*<span class=\"number\">48271LL</span>%<span class=\"number\">20020207</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"type\">int</span> size[N],key[N],val[N],w[N];</span><br><span class=\"line\">  <span class=\"type\">int</span> ls[N],rs[N],cnt;</span><br><span class=\"line\">  <span class=\"type\">int</span> root;</span><br><span class=\"line\">  <span class=\"type\">bool</span> lazy[N];</span><br><span class=\"line\">  <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">pushup</span><span class=\"params\">(<span class=\"type\">int</span> rt)</span></span>&#123;</span><br><span class=\"line\">\t\tsize[rt]=size[lson]+size[rson]+<span class=\"number\">1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">pushdown</span><span class=\"params\">(<span class=\"type\">int</span> rt)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!lazy[rt])<span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"built_in\">swap</span>(lson,rson);</span><br><span class=\"line\">    lazy[lson]^=<span class=\"number\">1</span>;lazy[rson]^=<span class=\"number\">1</span>;</span><br><span class=\"line\">    lazy[rt]=<span class=\"number\">0</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">merge</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> y)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!x||!y) <span class=\"keyword\">return</span> x+y;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(key[x]&lt;key[y])&#123;<span class=\"built_in\">pushdown</span>(x);rs[x]=<span class=\"built_in\">merge</span>(rs[x],y);<span class=\"built_in\">pushup</span>(x);<span class=\"keyword\">return</span> x;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;<span class=\"built_in\">pushdown</span>(y);ls[y]=<span class=\"built_in\">merge</span>(x,ls[y]);<span class=\"built_in\">pushup</span>(y);<span class=\"keyword\">return</span> y;&#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">//位置</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">split</span><span class=\"params\">(<span class=\"type\">int</span> rt,<span class=\"type\">int</span> x,<span class=\"type\">int</span> &amp;a,<span class=\"type\">int</span> &amp;b)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!rt) a=<span class=\"number\">0</span>,b=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    \t<span class=\"built_in\">pushdown</span>(rt);</span><br><span class=\"line\">    \t<span class=\"keyword\">if</span>(size[ls[rt]]&lt;x)a=rt,<span class=\"built_in\">split</span>(rson,x-size[ls[rt]]<span class=\"number\">-1</span>,rs[a],b);</span><br><span class=\"line\">      <span class=\"keyword\">else</span> b=rt,<span class=\"built_in\">split</span>(lson,x,a,ls[b]);</span><br><span class=\"line\">      <span class=\"built_in\">pushup</span>(rt);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Insert</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> v)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> a,b;</span><br><span class=\"line\">    <span class=\"built_in\">split</span>(root,x,a,b);++cnt;</span><br><span class=\"line\">    val[cnt]=v;size[cnt]=<span class=\"number\">1</span>;key[cnt]=<span class=\"built_in\">Rand</span>();</span><br><span class=\"line\">    root=<span class=\"built_in\">merge</span>(<span class=\"built_in\">merge</span>(a,cnt),b);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Reverse</span><span class=\"params\">(<span class=\"type\">int</span> l,<span class=\"type\">int</span> r)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> x,y,z;</span><br><span class=\"line\">    <span class=\"built_in\">split</span>(root,r,x,z);</span><br><span class=\"line\">    <span class=\"built_in\">split</span>(x,l<span class=\"number\">-1</span>,x,y);</span><br><span class=\"line\">    lazy[y]^=<span class=\"number\">1</span>;</span><br><span class=\"line\">    root=<span class=\"built_in\">merge</span>(<span class=\"built_in\">merge</span>(x,y),z);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;Fhq;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">write</span><span class=\"params\">(<span class=\"type\">int</span> rt)</span></span>&#123;</span><br><span class=\"line\">  Fhq.<span class=\"built_in\">pushdown</span>(rt);</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(Fhq.lson)<span class=\"built_in\">write</span>(Fhq.lson);</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d &quot;</span>,Fhq.val[rt]);</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(Fhq.rson)<span class=\"built_in\">write</span>(Fhq.rson); </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  n=<span class=\"built_in\">read</span>();m=<span class=\"built_in\">read</span>();</span><br><span class=\"line\"> \t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)Fhq.<span class=\"built_in\">Insert</span>(i<span class=\"number\">-1</span>,i);</span><br><span class=\"line\"> \t<span class=\"keyword\">while</span>(m--)&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> l=<span class=\"built_in\">read</span>(),r=<span class=\"built_in\">read</span>();</span><br><span class=\"line\">  \tFhq.<span class=\"built_in\">Reverse</span>(l,r);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">write</span>(Fhq.root);</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</li>\n</ul>"},{"title":"【CF438E】 The Child and Binary Tree 简易题解","date":"2019-02-23T01:33:03.000Z","mathjax":true,"_content":"题目传送门：[【CF438E】 The Child and Binary Tree](https://www.luogu.com.cn/problem/CF438E)\n\n<!-- more -->\n\n## 引入\n\n$\\ \\ \\ \\ \\ \\ \\,$给你 $n$ 和 $m$，和大小为 $n$ 的集合 $C$。\n\n$\\ \\ \\ \\ \\ \\ \\,$需要你统计点权在集合 $C$ 内，且点权之和分别为 $[1,m]$ 的二叉树个数。\n\n## 解法\n$\\ \\ \\ \\ \\ \\ \\,$根据题目，我们可以想到$DP$公式求解：\n\n$\n f(n)= \n \\begin{cases} \n 1, & \\text {$(n=0)$} \\\\ \n\\sum_{i=1}^{n}g(i)\\sum_{j=0}^{n-i}f(j)\\cdot f(n-i-j), & \\text{$(n > 0)$}\n  \\end{cases} \n $\n\n$\\ \\ \\ \\ \\ \\ \\,$其中：\n\n- $f(i)$意思是且点权之和 $i$ 的二叉树个数。\n- $g(i)$意思是集合 $C$ 中是否含有元素 $i$，既 $g(i)=[i\\in C]$ 。\n\n$\\ \\ \\ \\ \\ \\ \\,$怎么得到这个公式的就不说了，还是比较显然的 ~~（雾~~ 。但是很明显复杂度过不去。我们把它们写成生成函数会好一些 ~~（计数题套路？）~~：\n\n$\\ \\ \\ \\ \\ \\ \\,$令函数 $F$ 为序列 $f(x)$ 的生成函数，函数 $G$ 为序列 $g(x)$的生成函数。\n\n$\\ \\ \\ \\ \\ \\ \\,$可以得到：\n\n$F=G*F^2+1$\n\n$\\ \\ \\ \\ \\ \\ \\,$解得：\n\n$F=\\frac{2}{1\\pm\\sqrt{1-4G}}$\n\n$\\ \\ \\ \\ \\ \\ \\,$那么是加号还是减号啊？已知$F_0=1$。而题目保证 $(1\\leq c_i \\leq 10^5)$，所以有$G_0=0$。那么带入可以得到应该是取加号。\n\n$\\ \\ \\ \\ \\ \\ \\,$所以说只需要求出多项式$\\frac{2}{1+\\sqrt{1-4G}}$的$[1,m]$项就好了。\n\n$\\ \\ \\ \\ \\ \\ \\,$格式挺清新的，需要求逆和开根，模板直接往上套就好了呢：[【多项式的操作大赏】](4000/2019/04/03/多项式全家桶/)。我写的开根比较麻烦，还要写 $\\ln$ 和 $\\exp$，然后 $\\ln$ 还要写求积分和求导。所以说……基本上……所有模板都用到了。\n\n## 代码\n\n``` cpp\n#include<algorithm>\n#include<iostream>\n#include<cstdlib>\n#include<cstring>\n#include<cctype>\n#include<cstdio>\n#include<vector>\n#include<string>\n#include<queue>\n#include<stack>\n#include<cmath>\n#include<map>\n#include<set>\nusing namespace std;\nconst int inf=0x7fffffff;\nconst double eps=1e-10;\nconst double pi=acos(-1.0);\n//char buf[1<<15],*S=buf,*T=buf;\n//char getch(){return S==T&&(T=(S=buf)+fread(buf,1,1<<15,stdin),S==T)?0:*S++;}\ninline int read(){\n\tint x=0,f=1;char ch;ch=getchar();\n\twhile(ch<'0'||ch>'9'){if(ch=='-') f=0;ch=getchar();}\n\twhile(ch>='0'&&ch<='9'){x=(x<<1)+(x<<3)+(ch&15);ch=getchar();}\n\tif(f)return x;else return -x;\n}\nconst int mod=998244353,mod_g=3,N=1600000;\nint R[N];\nint power(int a,int b){\n  \tint ans=1;\n  \tfor(;b;b>>=1,a=1ll*a*a%mod)\n\tif(b&1)ans=1ll*ans*a%mod;\n  \treturn ans;\n}\n#define Inv(x) power(x,mod-2)\nint Polynomial_init(int n){\n\tint len;for(len=1;len<=n;len<<=1);\n\treturn len;\n}\nvoid NTT(int *a,int f,int la){\n\tint n=la;\n  \tfor(int i=0;i<n;i++)if(i<R[i])swap(a[i],a[R[i]]);\n  \tfor(int i=1;i<n;i<<=1){\n    \tint gn=power(mod_g,(mod-1)/(i<<1));\n    \tfor(int j=0;j<n;j+=(i<<1)){\n      \t\tint g=1;\n      \t\tfor(int k=0;k<i;k++,g=1ll*g*gn%mod){\n\t        \tint x=a[j+k],y=1ll*g*a[i+j+k]%mod;\n\t        \ta[j+k]=(x+y)%mod;a[i+j+k]=(x-y+mod)%mod;\n\t      \t}\n    \t} \n  \t}\n  \tif(f==-1){\n   \t\treverse(a+1,a+n);\n    \tint inv=Inv(n);\n    \tfor(int i=0;i<n;i++)a[i]=1ll*a[i]*inv%mod;\n  \t}\n}\nint Convolution(int *a,int *b,int la,int lb){\n\tint n=la,m=lb;\n\tint L=0;for(m+=n,n=1;n<m;n<<=1)L++;\n\tfor(int i=0;i<n;i++)R[i]=(R[i>>1]>>1)|((i&1)<<(L-1));\n\tNTT(a,1,n);NTT(b,1,n);\n\tfor(int i=0;i<=n;i++)a[i]=1ll*a[i]*b[i]%mod;\n\tNTT(a,-1,n);\n\treturn m;\n}\nint C[N];\nvoid Inverse(int *a,int *b,int len){\n  \tif(len==1){b[0]=Inv(a[0]);return;}\n  \tInverse(a,b,(len+1)>>1);\n  \tint L=0,n=1;\n  \tfor(;n<(len<<1);n<<=1)L++;\n  \tfor(int i=1;i<n;i++)R[i]=(R[i>>1]>>1)|((i&1)<<(L-1));\n  \tfor(int i=0;i<len;i++)C[i]=a[i];\n  \tfor(int i=len;i<n;i++)C[i]=0;\n  \tNTT(C,1,n);NTT(b,1,n);\n  \tfor(int i=0;i<=n;i++)b[i]=1ll*(2ll-1ll*C[i]*b[i]%mod+mod)%mod*b[i]%mod;\n  \tNTT(b,-1,n);\n  \tfor(int i=len;i<n;i++)b[i]=0;\n}\nvoid Derivation(int *a,int *b,int n){\n\tfor(int i=1;i<n;i++)\n  \tb[i-1]=1ll*i*a[i]%mod;\n\tb[n-1]=0;\n}\nvoid Integral(int *a,int *b,int n){\n\tfor(int i=1;i<n;i++)\n  \tb[i]=1ll*Inv(i)*a[i-1]%mod;\n\tb[0]=0;\n}\nint A[N],B[N];\nvoid Logarithmic(int *a,int *b,int len){\n\tmemset(A,0,sizeof(A));\n\tmemset(B,0,sizeof(B));\n  \tDerivation(a,A,len);\n  \tmemset(C,0,sizeof(C));\n  \tInverse(a,B,len);\n  \tConvolution(A,B,len,len);\n  \tIntegral(A,b,len);\n}\nint D[N];\nvoid Exponential(int *a,int *b,int len){\n  \tif(len==1){b[0]=1;return;}\n  \tExponential(a,b,len>>1),Logarithmic(b,D,len);\n  \tD[0]=(1ll*a[0]+1ll-D[0]+mod)%mod;\n  \tfor(int i=1;i<len;++i) D[i]=(1ll*a[i]-D[i]+mod)%mod;\n  \tConvolution(b,D,len<<1,len<<1);\n  \tfor(int i=len;i<(len<<1);++i) b[i]=D[i]=0;\n}\nint E[N];\nvoid Kth_root(int *a,int *b,int len,int k){\n\tLogarithmic(a,E,len);\n\tfor(int i=1;i<=len;i++)E[i]=499122177ll*E[i]%mod;\n\tExponential(E,b,len);\n}\nint n,m,F[N],G[N];\nint main()\n{\n\tn=read();m=read();\n  \tfor(int i=1;i<=n;++i)++G[read()];\n  \tint len=Polynomial_init(m);\n  \tfor(int i=0;i<len;++i)G[i]=(mod-(4ll*G[i]%mod))%mod;\n  \t++G[0];\n  \tKth_root(G,F,len,2);\n  \tfor(int i=0;i<len;++i)G[i]=0;\n  \tF[0]=(F[0]+1)%mod;\n  \tInverse(F,G,len);\n  \tfor(int i=0;i<=m;++i)G[i]=(2ll*G[i])%mod;\n  \tfor(int i=1;i<=m;++i)printf(\"%d\\n\",G[i]);\n\treturn 0;\n}\n\n```\n","source":"_posts/CF438E-The-Child-and-Binary-Tree-简易题解.md","raw":"---\ntitle: '【CF438E】 The Child and Binary Tree 简易题解'\ndate: 2019-02-23 09:33:03\ncategories:\n- 题解\ntags:\n- OI\n- DP\n- 多项式\n- 生成函数\nmathjax: true\n---\n题目传送门：[【CF438E】 The Child and Binary Tree](https://www.luogu.com.cn/problem/CF438E)\n\n<!-- more -->\n\n## 引入\n\n$\\ \\ \\ \\ \\ \\ \\,$给你 $n$ 和 $m$，和大小为 $n$ 的集合 $C$。\n\n$\\ \\ \\ \\ \\ \\ \\,$需要你统计点权在集合 $C$ 内，且点权之和分别为 $[1,m]$ 的二叉树个数。\n\n## 解法\n$\\ \\ \\ \\ \\ \\ \\,$根据题目，我们可以想到$DP$公式求解：\n\n$\n f(n)= \n \\begin{cases} \n 1, & \\text {$(n=0)$} \\\\ \n\\sum_{i=1}^{n}g(i)\\sum_{j=0}^{n-i}f(j)\\cdot f(n-i-j), & \\text{$(n > 0)$}\n  \\end{cases} \n $\n\n$\\ \\ \\ \\ \\ \\ \\,$其中：\n\n- $f(i)$意思是且点权之和 $i$ 的二叉树个数。\n- $g(i)$意思是集合 $C$ 中是否含有元素 $i$，既 $g(i)=[i\\in C]$ 。\n\n$\\ \\ \\ \\ \\ \\ \\,$怎么得到这个公式的就不说了，还是比较显然的 ~~（雾~~ 。但是很明显复杂度过不去。我们把它们写成生成函数会好一些 ~~（计数题套路？）~~：\n\n$\\ \\ \\ \\ \\ \\ \\,$令函数 $F$ 为序列 $f(x)$ 的生成函数，函数 $G$ 为序列 $g(x)$的生成函数。\n\n$\\ \\ \\ \\ \\ \\ \\,$可以得到：\n\n$F=G*F^2+1$\n\n$\\ \\ \\ \\ \\ \\ \\,$解得：\n\n$F=\\frac{2}{1\\pm\\sqrt{1-4G}}$\n\n$\\ \\ \\ \\ \\ \\ \\,$那么是加号还是减号啊？已知$F_0=1$。而题目保证 $(1\\leq c_i \\leq 10^5)$，所以有$G_0=0$。那么带入可以得到应该是取加号。\n\n$\\ \\ \\ \\ \\ \\ \\,$所以说只需要求出多项式$\\frac{2}{1+\\sqrt{1-4G}}$的$[1,m]$项就好了。\n\n$\\ \\ \\ \\ \\ \\ \\,$格式挺清新的，需要求逆和开根，模板直接往上套就好了呢：[【多项式的操作大赏】](4000/2019/04/03/多项式全家桶/)。我写的开根比较麻烦，还要写 $\\ln$ 和 $\\exp$，然后 $\\ln$ 还要写求积分和求导。所以说……基本上……所有模板都用到了。\n\n## 代码\n\n``` cpp\n#include<algorithm>\n#include<iostream>\n#include<cstdlib>\n#include<cstring>\n#include<cctype>\n#include<cstdio>\n#include<vector>\n#include<string>\n#include<queue>\n#include<stack>\n#include<cmath>\n#include<map>\n#include<set>\nusing namespace std;\nconst int inf=0x7fffffff;\nconst double eps=1e-10;\nconst double pi=acos(-1.0);\n//char buf[1<<15],*S=buf,*T=buf;\n//char getch(){return S==T&&(T=(S=buf)+fread(buf,1,1<<15,stdin),S==T)?0:*S++;}\ninline int read(){\n\tint x=0,f=1;char ch;ch=getchar();\n\twhile(ch<'0'||ch>'9'){if(ch=='-') f=0;ch=getchar();}\n\twhile(ch>='0'&&ch<='9'){x=(x<<1)+(x<<3)+(ch&15);ch=getchar();}\n\tif(f)return x;else return -x;\n}\nconst int mod=998244353,mod_g=3,N=1600000;\nint R[N];\nint power(int a,int b){\n  \tint ans=1;\n  \tfor(;b;b>>=1,a=1ll*a*a%mod)\n\tif(b&1)ans=1ll*ans*a%mod;\n  \treturn ans;\n}\n#define Inv(x) power(x,mod-2)\nint Polynomial_init(int n){\n\tint len;for(len=1;len<=n;len<<=1);\n\treturn len;\n}\nvoid NTT(int *a,int f,int la){\n\tint n=la;\n  \tfor(int i=0;i<n;i++)if(i<R[i])swap(a[i],a[R[i]]);\n  \tfor(int i=1;i<n;i<<=1){\n    \tint gn=power(mod_g,(mod-1)/(i<<1));\n    \tfor(int j=0;j<n;j+=(i<<1)){\n      \t\tint g=1;\n      \t\tfor(int k=0;k<i;k++,g=1ll*g*gn%mod){\n\t        \tint x=a[j+k],y=1ll*g*a[i+j+k]%mod;\n\t        \ta[j+k]=(x+y)%mod;a[i+j+k]=(x-y+mod)%mod;\n\t      \t}\n    \t} \n  \t}\n  \tif(f==-1){\n   \t\treverse(a+1,a+n);\n    \tint inv=Inv(n);\n    \tfor(int i=0;i<n;i++)a[i]=1ll*a[i]*inv%mod;\n  \t}\n}\nint Convolution(int *a,int *b,int la,int lb){\n\tint n=la,m=lb;\n\tint L=0;for(m+=n,n=1;n<m;n<<=1)L++;\n\tfor(int i=0;i<n;i++)R[i]=(R[i>>1]>>1)|((i&1)<<(L-1));\n\tNTT(a,1,n);NTT(b,1,n);\n\tfor(int i=0;i<=n;i++)a[i]=1ll*a[i]*b[i]%mod;\n\tNTT(a,-1,n);\n\treturn m;\n}\nint C[N];\nvoid Inverse(int *a,int *b,int len){\n  \tif(len==1){b[0]=Inv(a[0]);return;}\n  \tInverse(a,b,(len+1)>>1);\n  \tint L=0,n=1;\n  \tfor(;n<(len<<1);n<<=1)L++;\n  \tfor(int i=1;i<n;i++)R[i]=(R[i>>1]>>1)|((i&1)<<(L-1));\n  \tfor(int i=0;i<len;i++)C[i]=a[i];\n  \tfor(int i=len;i<n;i++)C[i]=0;\n  \tNTT(C,1,n);NTT(b,1,n);\n  \tfor(int i=0;i<=n;i++)b[i]=1ll*(2ll-1ll*C[i]*b[i]%mod+mod)%mod*b[i]%mod;\n  \tNTT(b,-1,n);\n  \tfor(int i=len;i<n;i++)b[i]=0;\n}\nvoid Derivation(int *a,int *b,int n){\n\tfor(int i=1;i<n;i++)\n  \tb[i-1]=1ll*i*a[i]%mod;\n\tb[n-1]=0;\n}\nvoid Integral(int *a,int *b,int n){\n\tfor(int i=1;i<n;i++)\n  \tb[i]=1ll*Inv(i)*a[i-1]%mod;\n\tb[0]=0;\n}\nint A[N],B[N];\nvoid Logarithmic(int *a,int *b,int len){\n\tmemset(A,0,sizeof(A));\n\tmemset(B,0,sizeof(B));\n  \tDerivation(a,A,len);\n  \tmemset(C,0,sizeof(C));\n  \tInverse(a,B,len);\n  \tConvolution(A,B,len,len);\n  \tIntegral(A,b,len);\n}\nint D[N];\nvoid Exponential(int *a,int *b,int len){\n  \tif(len==1){b[0]=1;return;}\n  \tExponential(a,b,len>>1),Logarithmic(b,D,len);\n  \tD[0]=(1ll*a[0]+1ll-D[0]+mod)%mod;\n  \tfor(int i=1;i<len;++i) D[i]=(1ll*a[i]-D[i]+mod)%mod;\n  \tConvolution(b,D,len<<1,len<<1);\n  \tfor(int i=len;i<(len<<1);++i) b[i]=D[i]=0;\n}\nint E[N];\nvoid Kth_root(int *a,int *b,int len,int k){\n\tLogarithmic(a,E,len);\n\tfor(int i=1;i<=len;i++)E[i]=499122177ll*E[i]%mod;\n\tExponential(E,b,len);\n}\nint n,m,F[N],G[N];\nint main()\n{\n\tn=read();m=read();\n  \tfor(int i=1;i<=n;++i)++G[read()];\n  \tint len=Polynomial_init(m);\n  \tfor(int i=0;i<len;++i)G[i]=(mod-(4ll*G[i]%mod))%mod;\n  \t++G[0];\n  \tKth_root(G,F,len,2);\n  \tfor(int i=0;i<len;++i)G[i]=0;\n  \tF[0]=(F[0]+1)%mod;\n  \tInverse(F,G,len);\n  \tfor(int i=0;i<=m;++i)G[i]=(2ll*G[i])%mod;\n  \tfor(int i=1;i<=m;++i)printf(\"%d\\n\",G[i]);\n\treturn 0;\n}\n\n```\n","slug":"CF438E-The-Child-and-Binary-Tree-简易题解","published":1,"updated":"2022-02-14T05:38:55.582Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0i63w5o0003u4gbf301bb0n","content":"<p>题目传送门：<a href=\"https://www.luogu.com.cn/problem/CF438E\">【CF438E】 The Child and Binary Tree</a></p>\n<span id=\"more\"></span>\n<h2 id=\"引入\"><a href=\"#引入\" class=\"headerlink\" title=\"引入\"></a>引入</h2><p>$\\ \\ \\ \\ \\ \\ \\,$给你 $n$ 和 $m$，和大小为 $n$ 的集合 $C$。</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$需要你统计点权在集合 $C$ 内，且点权之和分别为 $[1,m]$ 的二叉树个数。</p>\n<h2 id=\"解法\"><a href=\"#解法\" class=\"headerlink\" title=\"解法\"></a>解法</h2><p>$\\ \\ \\ \\ \\ \\ \\,$根据题目，我们可以想到$DP$公式求解：</p>\n<p>$<br> f(n)=<br> \\begin{cases}<br> 1, &amp; \\text {$(n=0)$} \\\\<br>\\sum_{i=1}^{n}g(i)\\sum_{j=0}^{n-i}f(j)\\cdot f(n-i-j), &amp; \\text{$(n &gt; 0)$}<br>  \\end{cases}<br> $</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$其中：</p>\n<ul>\n<li>$f(i)$意思是且点权之和 $i$ 的二叉树个数。</li>\n<li>$g(i)$意思是集合 $C$ 中是否含有元素 $i$，既 $g(i)=[i\\in C]$ 。</li>\n</ul>\n<p>$\\ \\ \\ \\ \\ \\ \\,$怎么得到这个公式的就不说了，还是比较显然的 <del>（雾</del> 。但是很明显复杂度过不去。我们把它们写成生成函数会好一些 <del>（计数题套路？）</del>：</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$令函数 $F$ 为序列 $f(x)$ 的生成函数，函数 $G$ 为序列 $g(x)$的生成函数。</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$可以得到：</p>\n<p>$F=G*F^2+1$</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$解得：</p>\n<p>$F=\\frac{2}{1\\pm\\sqrt{1-4G}}$</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$那么是加号还是减号啊？已知$F_0=1$。而题目保证 $(1\\leq c_i \\leq 10^5)$，所以有$G_0=0$。那么带入可以得到应该是取加号。</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$所以说只需要求出多项式$\\frac{2}{1+\\sqrt{1-4G}}$的$[1,m]$项就好了。</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$格式挺清新的，需要求逆和开根，模板直接往上套就好了呢：<a href=\"4000/2019/04/03/多项式全家桶/\">【多项式的操作大赏】</a>。我写的开根比较麻烦，还要写 $\\ln$ 和 $\\exp$，然后 $\\ln$ 还要写求积分和求导。所以说……基本上……所有模板都用到了。</p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdlib&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cctype&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;stack&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;map&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;set&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> inf=<span class=\"number\">0x7fffffff</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">double</span> eps=<span class=\"number\">1e-10</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">double</span> pi=<span class=\"built_in\">acos</span>(<span class=\"number\">-1.0</span>);</span><br><span class=\"line\"><span class=\"comment\">//char buf[1&lt;&lt;15],*S=buf,*T=buf;</span></span><br><span class=\"line\"><span class=\"comment\">//char getch()&#123;return S==T&amp;&amp;(T=(S=buf)+fread(buf,1,1&lt;&lt;15,stdin),S==T)?0:*S++;&#125;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">int</span> <span class=\"title\">read</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> x=<span class=\"number\">0</span>,f=<span class=\"number\">1</span>;<span class=\"type\">char</span> ch;ch=<span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(ch&lt;<span class=\"string\">&#x27;0&#x27;</span>||ch&gt;<span class=\"string\">&#x27;9&#x27;</span>)&#123;<span class=\"keyword\">if</span>(ch==<span class=\"string\">&#x27;-&#x27;</span>) f=<span class=\"number\">0</span>;ch=<span class=\"built_in\">getchar</span>();&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(ch&gt;=<span class=\"string\">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class=\"string\">&#x27;9&#x27;</span>)&#123;x=(x&lt;&lt;<span class=\"number\">1</span>)+(x&lt;&lt;<span class=\"number\">3</span>)+(ch&amp;<span class=\"number\">15</span>);ch=<span class=\"built_in\">getchar</span>();&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(f)<span class=\"keyword\">return</span> x;<span class=\"keyword\">else</span> <span class=\"keyword\">return</span> -x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> mod=<span class=\"number\">998244353</span>,mod_g=<span class=\"number\">3</span>,N=<span class=\"number\">1600000</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> R[N];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">power</span><span class=\"params\">(<span class=\"type\">int</span> a,<span class=\"type\">int</span> b)</span></span>&#123;</span><br><span class=\"line\">  \t<span class=\"type\">int</span> ans=<span class=\"number\">1</span>;</span><br><span class=\"line\">  \t<span class=\"keyword\">for</span>(;b;b&gt;&gt;=<span class=\"number\">1</span>,a=<span class=\"number\">1ll</span>*a*a%mod)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(b&amp;<span class=\"number\">1</span>)ans=<span class=\"number\">1ll</span>*ans*a%mod;</span><br><span class=\"line\">  \t<span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> Inv(x) power(x,mod-2)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">Polynomial_init</span><span class=\"params\">(<span class=\"type\">int</span> n)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> len;<span class=\"keyword\">for</span>(len=<span class=\"number\">1</span>;len&lt;=n;len&lt;&lt;=<span class=\"number\">1</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> len;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">NTT</span><span class=\"params\">(<span class=\"type\">int</span> *a,<span class=\"type\">int</span> f,<span class=\"type\">int</span> la)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> n=la;</span><br><span class=\"line\">  \t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)<span class=\"keyword\">if</span>(i&lt;R[i])<span class=\"built_in\">swap</span>(a[i],a[R[i]]);</span><br><span class=\"line\">  \t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;n;i&lt;&lt;=<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">    \t<span class=\"type\">int</span> gn=<span class=\"built_in\">power</span>(mod_g,(mod<span class=\"number\">-1</span>)/(i&lt;&lt;<span class=\"number\">1</span>));</span><br><span class=\"line\">    \t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">0</span>;j&lt;n;j+=(i&lt;&lt;<span class=\"number\">1</span>))&#123;</span><br><span class=\"line\">      \t\t<span class=\"type\">int</span> g=<span class=\"number\">1</span>;</span><br><span class=\"line\">      \t\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> k=<span class=\"number\">0</span>;k&lt;i;k++,g=<span class=\"number\">1ll</span>*g*gn%mod)&#123;</span><br><span class=\"line\">\t        \t<span class=\"type\">int</span> x=a[j+k],y=<span class=\"number\">1ll</span>*g*a[i+j+k]%mod;</span><br><span class=\"line\">\t        \ta[j+k]=(x+y)%mod;a[i+j+k]=(x-y+mod)%mod;</span><br><span class=\"line\">\t      \t&#125;</span><br><span class=\"line\">    \t&#125; </span><br><span class=\"line\">  \t&#125;</span><br><span class=\"line\">  \t<span class=\"keyword\">if</span>(f==<span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">   \t\t<span class=\"built_in\">reverse</span>(a+<span class=\"number\">1</span>,a+n);</span><br><span class=\"line\">    \t<span class=\"type\">int</span> inv=<span class=\"built_in\">Inv</span>(n);</span><br><span class=\"line\">    \t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)a[i]=<span class=\"number\">1ll</span>*a[i]*inv%mod;</span><br><span class=\"line\">  \t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">Convolution</span><span class=\"params\">(<span class=\"type\">int</span> *a,<span class=\"type\">int</span> *b,<span class=\"type\">int</span> la,<span class=\"type\">int</span> lb)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> n=la,m=lb;</span><br><span class=\"line\">\t<span class=\"type\">int</span> L=<span class=\"number\">0</span>;<span class=\"keyword\">for</span>(m+=n,n=<span class=\"number\">1</span>;n&lt;m;n&lt;&lt;=<span class=\"number\">1</span>)L++;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)R[i]=(R[i&gt;&gt;<span class=\"number\">1</span>]&gt;&gt;<span class=\"number\">1</span>)|((i&amp;<span class=\"number\">1</span>)&lt;&lt;(L<span class=\"number\">-1</span>));</span><br><span class=\"line\">\t<span class=\"built_in\">NTT</span>(a,<span class=\"number\">1</span>,n);<span class=\"built_in\">NTT</span>(b,<span class=\"number\">1</span>,n);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;=n;i++)a[i]=<span class=\"number\">1ll</span>*a[i]*b[i]%mod;</span><br><span class=\"line\">\t<span class=\"built_in\">NTT</span>(a,<span class=\"number\">-1</span>,n);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> m;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> C[N];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Inverse</span><span class=\"params\">(<span class=\"type\">int</span> *a,<span class=\"type\">int</span> *b,<span class=\"type\">int</span> len)</span></span>&#123;</span><br><span class=\"line\">  \t<span class=\"keyword\">if</span>(len==<span class=\"number\">1</span>)&#123;b[<span class=\"number\">0</span>]=<span class=\"built_in\">Inv</span>(a[<span class=\"number\">0</span>]);<span class=\"keyword\">return</span>;&#125;</span><br><span class=\"line\">  \t<span class=\"built_in\">Inverse</span>(a,b,(len+<span class=\"number\">1</span>)&gt;&gt;<span class=\"number\">1</span>);</span><br><span class=\"line\">  \t<span class=\"type\">int</span> L=<span class=\"number\">0</span>,n=<span class=\"number\">1</span>;</span><br><span class=\"line\">  \t<span class=\"keyword\">for</span>(;n&lt;(len&lt;&lt;<span class=\"number\">1</span>);n&lt;&lt;=<span class=\"number\">1</span>)L++;</span><br><span class=\"line\">  \t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;n;i++)R[i]=(R[i&gt;&gt;<span class=\"number\">1</span>]&gt;&gt;<span class=\"number\">1</span>)|((i&amp;<span class=\"number\">1</span>)&lt;&lt;(L<span class=\"number\">-1</span>));</span><br><span class=\"line\">  \t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;len;i++)C[i]=a[i];</span><br><span class=\"line\">  \t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=len;i&lt;n;i++)C[i]=<span class=\"number\">0</span>;</span><br><span class=\"line\">  \t<span class=\"built_in\">NTT</span>(C,<span class=\"number\">1</span>,n);<span class=\"built_in\">NTT</span>(b,<span class=\"number\">1</span>,n);</span><br><span class=\"line\">  \t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;=n;i++)b[i]=<span class=\"number\">1ll</span>*(<span class=\"number\">2ll</span><span class=\"number\">-1ll</span>*C[i]*b[i]%mod+mod)%mod*b[i]%mod;</span><br><span class=\"line\">  \t<span class=\"built_in\">NTT</span>(b,<span class=\"number\">-1</span>,n);</span><br><span class=\"line\">  \t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=len;i&lt;n;i++)b[i]=<span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Derivation</span><span class=\"params\">(<span class=\"type\">int</span> *a,<span class=\"type\">int</span> *b,<span class=\"type\">int</span> n)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;n;i++)</span><br><span class=\"line\">  \tb[i<span class=\"number\">-1</span>]=<span class=\"number\">1ll</span>*i*a[i]%mod;</span><br><span class=\"line\">\tb[n<span class=\"number\">-1</span>]=<span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Integral</span><span class=\"params\">(<span class=\"type\">int</span> *a,<span class=\"type\">int</span> *b,<span class=\"type\">int</span> n)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;n;i++)</span><br><span class=\"line\">  \tb[i]=<span class=\"number\">1ll</span>*<span class=\"built_in\">Inv</span>(i)*a[i<span class=\"number\">-1</span>]%mod;</span><br><span class=\"line\">\tb[<span class=\"number\">0</span>]=<span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> A[N],B[N];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Logarithmic</span><span class=\"params\">(<span class=\"type\">int</span> *a,<span class=\"type\">int</span> *b,<span class=\"type\">int</span> len)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">memset</span>(A,<span class=\"number\">0</span>,<span class=\"built_in\">sizeof</span>(A));</span><br><span class=\"line\">\t<span class=\"built_in\">memset</span>(B,<span class=\"number\">0</span>,<span class=\"built_in\">sizeof</span>(B));</span><br><span class=\"line\">  \t<span class=\"built_in\">Derivation</span>(a,A,len);</span><br><span class=\"line\">  \t<span class=\"built_in\">memset</span>(C,<span class=\"number\">0</span>,<span class=\"built_in\">sizeof</span>(C));</span><br><span class=\"line\">  \t<span class=\"built_in\">Inverse</span>(a,B,len);</span><br><span class=\"line\">  \t<span class=\"built_in\">Convolution</span>(A,B,len,len);</span><br><span class=\"line\">  \t<span class=\"built_in\">Integral</span>(A,b,len);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> D[N];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Exponential</span><span class=\"params\">(<span class=\"type\">int</span> *a,<span class=\"type\">int</span> *b,<span class=\"type\">int</span> len)</span></span>&#123;</span><br><span class=\"line\">  \t<span class=\"keyword\">if</span>(len==<span class=\"number\">1</span>)&#123;b[<span class=\"number\">0</span>]=<span class=\"number\">1</span>;<span class=\"keyword\">return</span>;&#125;</span><br><span class=\"line\">  \t<span class=\"built_in\">Exponential</span>(a,b,len&gt;&gt;<span class=\"number\">1</span>),<span class=\"built_in\">Logarithmic</span>(b,D,len);</span><br><span class=\"line\">  \tD[<span class=\"number\">0</span>]=(<span class=\"number\">1ll</span>*a[<span class=\"number\">0</span>]+<span class=\"number\">1ll</span>-D[<span class=\"number\">0</span>]+mod)%mod;</span><br><span class=\"line\">  \t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;len;++i) D[i]=(<span class=\"number\">1ll</span>*a[i]-D[i]+mod)%mod;</span><br><span class=\"line\">  \t<span class=\"built_in\">Convolution</span>(b,D,len&lt;&lt;<span class=\"number\">1</span>,len&lt;&lt;<span class=\"number\">1</span>);</span><br><span class=\"line\">  \t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=len;i&lt;(len&lt;&lt;<span class=\"number\">1</span>);++i) b[i]=D[i]=<span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> E[N];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Kth_root</span><span class=\"params\">(<span class=\"type\">int</span> *a,<span class=\"type\">int</span> *b,<span class=\"type\">int</span> len,<span class=\"type\">int</span> k)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">Logarithmic</span>(a,E,len);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=len;i++)E[i]=<span class=\"number\">499122177ll</span>*E[i]%mod;</span><br><span class=\"line\">\t<span class=\"built_in\">Exponential</span>(E,b,len);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> n,m,F[N],G[N];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tn=<span class=\"built_in\">read</span>();m=<span class=\"built_in\">read</span>();</span><br><span class=\"line\">  \t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i)++G[<span class=\"built_in\">read</span>()];</span><br><span class=\"line\">  \t<span class=\"type\">int</span> len=<span class=\"built_in\">Polynomial_init</span>(m);</span><br><span class=\"line\">  \t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;len;++i)G[i]=(mod-(<span class=\"number\">4ll</span>*G[i]%mod))%mod;</span><br><span class=\"line\">  \t++G[<span class=\"number\">0</span>];</span><br><span class=\"line\">  \t<span class=\"built_in\">Kth_root</span>(G,F,len,<span class=\"number\">2</span>);</span><br><span class=\"line\">  \t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;len;++i)G[i]=<span class=\"number\">0</span>;</span><br><span class=\"line\">  \tF[<span class=\"number\">0</span>]=(F[<span class=\"number\">0</span>]+<span class=\"number\">1</span>)%mod;</span><br><span class=\"line\">  \t<span class=\"built_in\">Inverse</span>(F,G,len);</span><br><span class=\"line\">  \t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;=m;++i)G[i]=(<span class=\"number\">2ll</span>*G[i])%mod;</span><br><span class=\"line\">  \t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=m;++i)<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>,G[i]);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>题目传送门：<a href=\"https://www.luogu.com.cn/problem/CF438E\">【CF438E】 The Child and Binary Tree</a></p>","more":"<h2 id=\"引入\"><a href=\"#引入\" class=\"headerlink\" title=\"引入\"></a>引入</h2><p>$\\ \\ \\ \\ \\ \\ \\,$给你 $n$ 和 $m$，和大小为 $n$ 的集合 $C$。</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$需要你统计点权在集合 $C$ 内，且点权之和分别为 $[1,m]$ 的二叉树个数。</p>\n<h2 id=\"解法\"><a href=\"#解法\" class=\"headerlink\" title=\"解法\"></a>解法</h2><p>$\\ \\ \\ \\ \\ \\ \\,$根据题目，我们可以想到$DP$公式求解：</p>\n<p>$<br> f(n)=<br> \\begin{cases}<br> 1, &amp; \\text {$(n=0)$} \\\\<br>\\sum_{i=1}^{n}g(i)\\sum_{j=0}^{n-i}f(j)\\cdot f(n-i-j), &amp; \\text{$(n &gt; 0)$}<br>  \\end{cases}<br> $</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$其中：</p>\n<ul>\n<li>$f(i)$意思是且点权之和 $i$ 的二叉树个数。</li>\n<li>$g(i)$意思是集合 $C$ 中是否含有元素 $i$，既 $g(i)=[i\\in C]$ 。</li>\n</ul>\n<p>$\\ \\ \\ \\ \\ \\ \\,$怎么得到这个公式的就不说了，还是比较显然的 <del>（雾</del> 。但是很明显复杂度过不去。我们把它们写成生成函数会好一些 <del>（计数题套路？）</del>：</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$令函数 $F$ 为序列 $f(x)$ 的生成函数，函数 $G$ 为序列 $g(x)$的生成函数。</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$可以得到：</p>\n<p>$F=G*F^2+1$</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$解得：</p>\n<p>$F=\\frac{2}{1\\pm\\sqrt{1-4G}}$</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$那么是加号还是减号啊？已知$F_0=1$。而题目保证 $(1\\leq c_i \\leq 10^5)$，所以有$G_0=0$。那么带入可以得到应该是取加号。</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$所以说只需要求出多项式$\\frac{2}{1+\\sqrt{1-4G}}$的$[1,m]$项就好了。</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$格式挺清新的，需要求逆和开根，模板直接往上套就好了呢：<a href=\"4000/2019/04/03/多项式全家桶/\">【多项式的操作大赏】</a>。我写的开根比较麻烦，还要写 $\\ln$ 和 $\\exp$，然后 $\\ln$ 还要写求积分和求导。所以说……基本上……所有模板都用到了。</p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdlib&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cctype&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;stack&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;map&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;set&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> inf=<span class=\"number\">0x7fffffff</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">double</span> eps=<span class=\"number\">1e-10</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">double</span> pi=<span class=\"built_in\">acos</span>(<span class=\"number\">-1.0</span>);</span><br><span class=\"line\"><span class=\"comment\">//char buf[1&lt;&lt;15],*S=buf,*T=buf;</span></span><br><span class=\"line\"><span class=\"comment\">//char getch()&#123;return S==T&amp;&amp;(T=(S=buf)+fread(buf,1,1&lt;&lt;15,stdin),S==T)?0:*S++;&#125;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">int</span> <span class=\"title\">read</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> x=<span class=\"number\">0</span>,f=<span class=\"number\">1</span>;<span class=\"type\">char</span> ch;ch=<span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(ch&lt;<span class=\"string\">&#x27;0&#x27;</span>||ch&gt;<span class=\"string\">&#x27;9&#x27;</span>)&#123;<span class=\"keyword\">if</span>(ch==<span class=\"string\">&#x27;-&#x27;</span>) f=<span class=\"number\">0</span>;ch=<span class=\"built_in\">getchar</span>();&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(ch&gt;=<span class=\"string\">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class=\"string\">&#x27;9&#x27;</span>)&#123;x=(x&lt;&lt;<span class=\"number\">1</span>)+(x&lt;&lt;<span class=\"number\">3</span>)+(ch&amp;<span class=\"number\">15</span>);ch=<span class=\"built_in\">getchar</span>();&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(f)<span class=\"keyword\">return</span> x;<span class=\"keyword\">else</span> <span class=\"keyword\">return</span> -x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> mod=<span class=\"number\">998244353</span>,mod_g=<span class=\"number\">3</span>,N=<span class=\"number\">1600000</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> R[N];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">power</span><span class=\"params\">(<span class=\"type\">int</span> a,<span class=\"type\">int</span> b)</span></span>&#123;</span><br><span class=\"line\">  \t<span class=\"type\">int</span> ans=<span class=\"number\">1</span>;</span><br><span class=\"line\">  \t<span class=\"keyword\">for</span>(;b;b&gt;&gt;=<span class=\"number\">1</span>,a=<span class=\"number\">1ll</span>*a*a%mod)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(b&amp;<span class=\"number\">1</span>)ans=<span class=\"number\">1ll</span>*ans*a%mod;</span><br><span class=\"line\">  \t<span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> Inv(x) power(x,mod-2)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">Polynomial_init</span><span class=\"params\">(<span class=\"type\">int</span> n)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> len;<span class=\"keyword\">for</span>(len=<span class=\"number\">1</span>;len&lt;=n;len&lt;&lt;=<span class=\"number\">1</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> len;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">NTT</span><span class=\"params\">(<span class=\"type\">int</span> *a,<span class=\"type\">int</span> f,<span class=\"type\">int</span> la)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> n=la;</span><br><span class=\"line\">  \t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)<span class=\"keyword\">if</span>(i&lt;R[i])<span class=\"built_in\">swap</span>(a[i],a[R[i]]);</span><br><span class=\"line\">  \t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;n;i&lt;&lt;=<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">    \t<span class=\"type\">int</span> gn=<span class=\"built_in\">power</span>(mod_g,(mod<span class=\"number\">-1</span>)/(i&lt;&lt;<span class=\"number\">1</span>));</span><br><span class=\"line\">    \t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">0</span>;j&lt;n;j+=(i&lt;&lt;<span class=\"number\">1</span>))&#123;</span><br><span class=\"line\">      \t\t<span class=\"type\">int</span> g=<span class=\"number\">1</span>;</span><br><span class=\"line\">      \t\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> k=<span class=\"number\">0</span>;k&lt;i;k++,g=<span class=\"number\">1ll</span>*g*gn%mod)&#123;</span><br><span class=\"line\">\t        \t<span class=\"type\">int</span> x=a[j+k],y=<span class=\"number\">1ll</span>*g*a[i+j+k]%mod;</span><br><span class=\"line\">\t        \ta[j+k]=(x+y)%mod;a[i+j+k]=(x-y+mod)%mod;</span><br><span class=\"line\">\t      \t&#125;</span><br><span class=\"line\">    \t&#125; </span><br><span class=\"line\">  \t&#125;</span><br><span class=\"line\">  \t<span class=\"keyword\">if</span>(f==<span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">   \t\t<span class=\"built_in\">reverse</span>(a+<span class=\"number\">1</span>,a+n);</span><br><span class=\"line\">    \t<span class=\"type\">int</span> inv=<span class=\"built_in\">Inv</span>(n);</span><br><span class=\"line\">    \t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)a[i]=<span class=\"number\">1ll</span>*a[i]*inv%mod;</span><br><span class=\"line\">  \t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">Convolution</span><span class=\"params\">(<span class=\"type\">int</span> *a,<span class=\"type\">int</span> *b,<span class=\"type\">int</span> la,<span class=\"type\">int</span> lb)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> n=la,m=lb;</span><br><span class=\"line\">\t<span class=\"type\">int</span> L=<span class=\"number\">0</span>;<span class=\"keyword\">for</span>(m+=n,n=<span class=\"number\">1</span>;n&lt;m;n&lt;&lt;=<span class=\"number\">1</span>)L++;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)R[i]=(R[i&gt;&gt;<span class=\"number\">1</span>]&gt;&gt;<span class=\"number\">1</span>)|((i&amp;<span class=\"number\">1</span>)&lt;&lt;(L<span class=\"number\">-1</span>));</span><br><span class=\"line\">\t<span class=\"built_in\">NTT</span>(a,<span class=\"number\">1</span>,n);<span class=\"built_in\">NTT</span>(b,<span class=\"number\">1</span>,n);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;=n;i++)a[i]=<span class=\"number\">1ll</span>*a[i]*b[i]%mod;</span><br><span class=\"line\">\t<span class=\"built_in\">NTT</span>(a,<span class=\"number\">-1</span>,n);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> m;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> C[N];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Inverse</span><span class=\"params\">(<span class=\"type\">int</span> *a,<span class=\"type\">int</span> *b,<span class=\"type\">int</span> len)</span></span>&#123;</span><br><span class=\"line\">  \t<span class=\"keyword\">if</span>(len==<span class=\"number\">1</span>)&#123;b[<span class=\"number\">0</span>]=<span class=\"built_in\">Inv</span>(a[<span class=\"number\">0</span>]);<span class=\"keyword\">return</span>;&#125;</span><br><span class=\"line\">  \t<span class=\"built_in\">Inverse</span>(a,b,(len+<span class=\"number\">1</span>)&gt;&gt;<span class=\"number\">1</span>);</span><br><span class=\"line\">  \t<span class=\"type\">int</span> L=<span class=\"number\">0</span>,n=<span class=\"number\">1</span>;</span><br><span class=\"line\">  \t<span class=\"keyword\">for</span>(;n&lt;(len&lt;&lt;<span class=\"number\">1</span>);n&lt;&lt;=<span class=\"number\">1</span>)L++;</span><br><span class=\"line\">  \t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;n;i++)R[i]=(R[i&gt;&gt;<span class=\"number\">1</span>]&gt;&gt;<span class=\"number\">1</span>)|((i&amp;<span class=\"number\">1</span>)&lt;&lt;(L<span class=\"number\">-1</span>));</span><br><span class=\"line\">  \t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;len;i++)C[i]=a[i];</span><br><span class=\"line\">  \t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=len;i&lt;n;i++)C[i]=<span class=\"number\">0</span>;</span><br><span class=\"line\">  \t<span class=\"built_in\">NTT</span>(C,<span class=\"number\">1</span>,n);<span class=\"built_in\">NTT</span>(b,<span class=\"number\">1</span>,n);</span><br><span class=\"line\">  \t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;=n;i++)b[i]=<span class=\"number\">1ll</span>*(<span class=\"number\">2ll</span><span class=\"number\">-1ll</span>*C[i]*b[i]%mod+mod)%mod*b[i]%mod;</span><br><span class=\"line\">  \t<span class=\"built_in\">NTT</span>(b,<span class=\"number\">-1</span>,n);</span><br><span class=\"line\">  \t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=len;i&lt;n;i++)b[i]=<span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Derivation</span><span class=\"params\">(<span class=\"type\">int</span> *a,<span class=\"type\">int</span> *b,<span class=\"type\">int</span> n)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;n;i++)</span><br><span class=\"line\">  \tb[i<span class=\"number\">-1</span>]=<span class=\"number\">1ll</span>*i*a[i]%mod;</span><br><span class=\"line\">\tb[n<span class=\"number\">-1</span>]=<span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Integral</span><span class=\"params\">(<span class=\"type\">int</span> *a,<span class=\"type\">int</span> *b,<span class=\"type\">int</span> n)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;n;i++)</span><br><span class=\"line\">  \tb[i]=<span class=\"number\">1ll</span>*<span class=\"built_in\">Inv</span>(i)*a[i<span class=\"number\">-1</span>]%mod;</span><br><span class=\"line\">\tb[<span class=\"number\">0</span>]=<span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> A[N],B[N];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Logarithmic</span><span class=\"params\">(<span class=\"type\">int</span> *a,<span class=\"type\">int</span> *b,<span class=\"type\">int</span> len)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">memset</span>(A,<span class=\"number\">0</span>,<span class=\"built_in\">sizeof</span>(A));</span><br><span class=\"line\">\t<span class=\"built_in\">memset</span>(B,<span class=\"number\">0</span>,<span class=\"built_in\">sizeof</span>(B));</span><br><span class=\"line\">  \t<span class=\"built_in\">Derivation</span>(a,A,len);</span><br><span class=\"line\">  \t<span class=\"built_in\">memset</span>(C,<span class=\"number\">0</span>,<span class=\"built_in\">sizeof</span>(C));</span><br><span class=\"line\">  \t<span class=\"built_in\">Inverse</span>(a,B,len);</span><br><span class=\"line\">  \t<span class=\"built_in\">Convolution</span>(A,B,len,len);</span><br><span class=\"line\">  \t<span class=\"built_in\">Integral</span>(A,b,len);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> D[N];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Exponential</span><span class=\"params\">(<span class=\"type\">int</span> *a,<span class=\"type\">int</span> *b,<span class=\"type\">int</span> len)</span></span>&#123;</span><br><span class=\"line\">  \t<span class=\"keyword\">if</span>(len==<span class=\"number\">1</span>)&#123;b[<span class=\"number\">0</span>]=<span class=\"number\">1</span>;<span class=\"keyword\">return</span>;&#125;</span><br><span class=\"line\">  \t<span class=\"built_in\">Exponential</span>(a,b,len&gt;&gt;<span class=\"number\">1</span>),<span class=\"built_in\">Logarithmic</span>(b,D,len);</span><br><span class=\"line\">  \tD[<span class=\"number\">0</span>]=(<span class=\"number\">1ll</span>*a[<span class=\"number\">0</span>]+<span class=\"number\">1ll</span>-D[<span class=\"number\">0</span>]+mod)%mod;</span><br><span class=\"line\">  \t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;len;++i) D[i]=(<span class=\"number\">1ll</span>*a[i]-D[i]+mod)%mod;</span><br><span class=\"line\">  \t<span class=\"built_in\">Convolution</span>(b,D,len&lt;&lt;<span class=\"number\">1</span>,len&lt;&lt;<span class=\"number\">1</span>);</span><br><span class=\"line\">  \t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=len;i&lt;(len&lt;&lt;<span class=\"number\">1</span>);++i) b[i]=D[i]=<span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> E[N];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Kth_root</span><span class=\"params\">(<span class=\"type\">int</span> *a,<span class=\"type\">int</span> *b,<span class=\"type\">int</span> len,<span class=\"type\">int</span> k)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">Logarithmic</span>(a,E,len);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=len;i++)E[i]=<span class=\"number\">499122177ll</span>*E[i]%mod;</span><br><span class=\"line\">\t<span class=\"built_in\">Exponential</span>(E,b,len);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> n,m,F[N],G[N];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tn=<span class=\"built_in\">read</span>();m=<span class=\"built_in\">read</span>();</span><br><span class=\"line\">  \t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i)++G[<span class=\"built_in\">read</span>()];</span><br><span class=\"line\">  \t<span class=\"type\">int</span> len=<span class=\"built_in\">Polynomial_init</span>(m);</span><br><span class=\"line\">  \t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;len;++i)G[i]=(mod-(<span class=\"number\">4ll</span>*G[i]%mod))%mod;</span><br><span class=\"line\">  \t++G[<span class=\"number\">0</span>];</span><br><span class=\"line\">  \t<span class=\"built_in\">Kth_root</span>(G,F,len,<span class=\"number\">2</span>);</span><br><span class=\"line\">  \t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;len;++i)G[i]=<span class=\"number\">0</span>;</span><br><span class=\"line\">  \tF[<span class=\"number\">0</span>]=(F[<span class=\"number\">0</span>]+<span class=\"number\">1</span>)%mod;</span><br><span class=\"line\">  \t<span class=\"built_in\">Inverse</span>(F,G,len);</span><br><span class=\"line\">  \t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;=m;++i)G[i]=(<span class=\"number\">2ll</span>*G[i])%mod;</span><br><span class=\"line\">  \t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=m;++i)<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>,G[i]);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>"},{"title":"【CF487E】 Tourists 简易题解","date":"2019-03-20T01:49:00.000Z","mathjax":true,"_content":"题目传送门：[【CF487E】 Tourists](https://www.luogu.com.cn/problem/CF487E)\n\n<!-- more -->\n\n## 题目大意\n\n$\\ \\ \\ \\ \\ \\ \\,$ 给你 $n$ 个点和 $m$条边的无向图，没有自环，没有重边，每个点上面有点权。\n\n$\\ \\ \\ \\ \\ \\ \\,$ 每次可能有两种操作：修改一个点的点权，或者询问两个点之间的路径上最小可能的点权是多少。\n\n## 想法\n$\\ \\ \\ \\ \\ \\ \\,$有一个很显然的贪心想法，询问的时候肯定优先走较小权值路径，也就是在有分叉（点双）的时候走较小权值的那一侧，而只有可能最小的会造成贡献。\n\n$\\ \\ \\ \\ \\ \\ \\,$所以说我们可以尝试将每个点双之间建一个堆，记录最小的点权。\n\n$\\ \\ \\ \\ \\ \\ \\,$也就是建出一棵圆方树，方点上面一个堆，记录与他向连的圆点的权值最小值。\n\n$\\ \\ \\ \\ \\ \\ \\,$每次询问就只需要考虑经过唯一路径上面 **圆点点权** 和 **方点堆顶** 的最小值就行了，这个可以用树链剖分搞。\n\n$\\ \\ \\ \\ \\ \\ \\,$然后考虑修改，便是修改与这个 **圆点** 相连的方点上面的堆就好了，删除原来的点权，加入新点权。但是这样子我们不能保证其复杂度，要是圆方树建成一个菊花图就会 $T$ 飞了。\n\n$\\ \\ \\ \\ \\ \\ \\,$我们再考虑一下，我们树链剖分往上跳的时候，其实已经计算过  **走过的方点** 的父亲了（圆点），会有计算重复的地方。所以说 **方点的堆** 里面不需要记录其父亲的权值，换句话说，对于一个圆点，他的值只需要被他的 **方点父亲** 的堆记录，这样子每次修改，只需要修改他父亲的，加上线段树和堆的复杂度也不过一次 $O(\\log n)$。\n\n$\\ \\ \\ \\ \\ \\ \\,$但是每次询问的是两个圆点，其$LCA$有可能是方点，这个时候少计算了一个 **方点$LCA$** 的父亲，需要注意加入判断一下。~~（第一个样第一次例询问输出为2有可能就是这样死的）~~\n\n$\\ \\ \\ \\ \\ \\ \\,$然后就是 **圆方树+树链剖分+线段树+可删堆** 套模板了，可删堆我是用 $fhq\\_Treap$ 实现的，所以说代码比较丑。\n\n$\\ \\ \\ \\ \\ \\ \\,$预处理复杂度$O(n\\log n)$，修改操作复杂度$O(\\log n)$，询问操作复杂度$O(\\log^2 n)$。\n\n## 代码\n\n``` cpp\n#include<algorithm>\n#include<iostream>\n#include<cstdlib>\n#include<cstring>\n#include<cctype>\n#include<cstdio>\n#include<vector>\n#include<string>\n#include<queue>\n#include<stack>\n#include<cmath>\n#include<ctime>\n#include<map>\n#include<set>\nusing namespace std;\nconst int inf=0x3f3f3f3f;\nconst double eps=1e-10;\nconst double pi=acos(-1.0);\n//char buf[1<<15],*S=buf,*T=buf;\n//char getch(){return S==T&&(T=(S=buf)+fread(buf,1,1<<15,stdin),S==T)?0:*S++;}\ninline int read(){\n\tint x=0,f=1;char ch;ch=getchar();\n\twhile(ch<'0'||ch>'9'){if(ch=='-') f=0;ch=getchar();}\n\twhile(ch>='0'&&ch<='9'){x=(x<<1)+(x<<3)+(ch&15);ch=getchar();}\n\tif(f)return x;else return -x;\n}\nconst int N=4e5+200;\nvector<int> G[N],E[N];\nvoid add_E(int x,int y){E[x].push_back(y);E[y].push_back(x);}\nvoid add_G(int x,int y){G[x].push_back(y);G[y].push_back(x);}\nint sta[N],top,Size;\nint tim,dfn[N],low[N];\nvoid tarjan(int u){\n  \tdfn[u]=low[u]=++tim;\n  \tsta[++top]=u;\n  \tfor(auto v:E[u]){\n    \tif(dfn[v]) low[u]=min(low[u],dfn[v]);\n    \telse{\n      \t\ttarjan(v),low[u]=min(low[u],low[v]);\n      \t\tif(low[v]>=dfn[u]){\n        \t\t++Size;int p;\n        \t\twhile((p=sta[top])!=v)add_G(p,Size),top--;\n        \t\tp=sta[top],add_G(p,Size),top--;\n        \t\tadd_G(u,Size);\n      \t\t}\n    \t}\n  \t}\n}\n\nstruct node{int ls,rs,key,size,val;}T[N<<1];\n#define lson T[rt].ls\n#define rson T[rt].rs\nint node_cnt;\nqueue<int>Rub;\nint newnode(int x){\n\tint rt;\n\tif(!Rub.empty())rt=Rub.front(),Rub.pop();\n\telse rt=++node_cnt;\n\tlson=rson=0;\n\tT[rt].key=rand();T[rt].val=x;T[rt].size=1;\n\treturn rt;\n}\nstruct fhq_Treap{\n\tint root;\n\tvoid pushup(int rt){T[rt].size=T[lson].size+T[rson].size+1;}\n\tint merge(int a,int b){\n\t\tif(!a||!b)return a|b;\n\t\tif(T[a].key<T[b].key){T[a].rs=merge(T[a].rs,b);pushup(a);return a;}\n\t\telse{T[b].ls=merge(a,T[b].ls);pushup(b);return b;}\n\t}\n\tvoid split(int rt,int x,int &a,int &b){\n\t\tif(!rt){a=b=0;return;}\n\t\tif(T[rt].val<=x){a=rt;split(rson,x,rson,b);}\n\t\telse{b=rt;split(lson,x,a,lson);}\n\t\tpushup(rt);\n\t}\n\tvoid Insert(int x){\n\t\tint a,b;\n\t\tsplit(root,x,a,b);\n\t\tint rt=newnode(x);\n\t\troot=merge(merge(a,rt),b);\n\t}\n\tvoid Delete(int x){\n\t\tint a,b,c;\n\t\tsplit(root,x,a,c);\n\t\tsplit(a,x-1,a,b);\n\t\tb=merge(T[b].ls,T[b].rs);\n\t\troot=merge(merge(a,b),c);\n\t}\n\tint Min(){\n\t\tint rt=root;\n\t\twhile(lson)rt=lson;\n\t\treturn T[rt].val;\n\t}\n}Treap[N];\n\nint pos[N],w[N];\nstruct Segment_Tree{\n  \t#define Lson l,mid,rt<<1\n  \t#define Rson mid+1,r,rt<<1|1\n  \tint sum[N<<2];\n  \tvoid pushup(int rt){sum[rt]=min(sum[rt<<1],sum[rt<<1|1]);}\n  \tvoid build(int l,int r,int rt){\n  \t\tif(l==r){sum[rt]=w[pos[l]];return;}\n  \t\tint mid=(l+r)>>1;\n  \t\tbuild(Lson);build(Rson);\n  \t\tpushup(rt);\n\t}\n  \tvoid Update(int id,int c,int l,int r,int rt){\n    \tif(l==r){sum[rt]=c;return;}\n    \tint mid=(l+r)>>1;\n    \tif(id<=mid)Update(id,c,Lson);\n    \telse Update(id,c,Rson);\n\t\tpushup(rt);\n  \t}\n  \tint Query(int L,int R,int l,int r,int rt){\n    \tif(L<=l&&r<=R)return sum[rt];\n    \tint ret=1e9,mid=(l+r)>>1;\n    \tif(L<=mid)ret=min(ret,Query(L,R,Lson));\n    \tif(R>mid)ret=min(ret,Query(L,R,Rson));\n    \treturn ret;\n  \t}\n}Seg;\n\nint n,m,Q;\nstruct Tree_Chain_Dissection{\n\tint idx[N];\n\tint deep[N],fa[N],son[N],size[N];\n\tint cnt,top[N];\n\tint dfs1(int u,int f,int dep){\n\t\tdeep[u]=dep;fa[u]=f;size[u]=1;\n\t\tTreap[fa[u]].Insert(w[u]);\n\t\tint maxson=-1;\n\t  \tfor(auto v:G[u])if(v!=f){\n\t\t  \tsize[u]+=dfs1(v,u,dep+1);\n\t\t  \tif(size[v]>maxson)maxson=size[v],son[u]=v;\n\t\t}\n\t\treturn size[u];\n\t}\n\tvoid dfs2(int u,int topf){\n\t\tidx[u]=++cnt;top[u]=topf;\n\t\tpos[cnt]=u;\n\t\tif(!son[u])return;\n\t\tdfs2(son[u],topf);\n\t  \tfor(auto v:G[u])if(!idx[v])dfs2(v,v);\n\t}\n\tvoid init(){\n\t\tdfs1(1,0,1);\n\t\tdfs2(1,1);\n\t  \tfor(int i=n+1;i<=Size;++i)w[i]=Treap[i].Min();\n\t\tSeg.build(1,Size,1);\n\t}\n\tvoid Update(int u,int val){\n\t  \tif(fa[u]){\n\t    \tTreap[fa[u]].Delete(w[u]);\n\t    \tTreap[fa[u]].Insert(val);\n\t    \tSeg.Update(idx[fa[u]],Treap[fa[u]].Min(),1,Size,1);\n\t  \t}\n\t  \tw[u]=val;\n\t\tSeg.Update(idx[u],val,1,Size,1);\n\t}\n\tint Query(int x,int y){\n\t  \tint ans=inf;\n\t  \twhile(top[x]!=top[y]){\n\t    \tif(deep[top[x]]<deep[top[y]])swap(x,y);\n\t    \tans=min(ans,Seg.Query(idx[top[x]],idx[x],1,Size,1));\n\t    \tx=fa[top[x]];\n\t  \t}\n\t \tif(deep[x]>deep[y])swap(x,y);\n\t  \tans=min(ans,Seg.Query(idx[x],idx[y],1,Size,1));\n    \tif(x<=n)return ans;\n    \telse return min(ans,w[fa[x]]);\n\t}\n}TCD;\n\nchar op[2];\nint a,b;\n\nint main()\n{\n\tsrand(time(NULL));\n\tSize=n=read();m=read();Q=read();w[0]=inf;\n  \tfor(int i=1;i<=n;++i)w[i]=read();\n  \tfor(int i=1,a,b;i<=m;++i)\n\ta=read(),b=read(),add_E(a,b);\n  \ttarjan(1);\n  \tTCD.init();\n  \twhile(Q--){\n    \tscanf(\"%s\",op);a=read(),b=read();\n    \tif(op[0]=='C')TCD.Update(a,b);\n    \tif(op[0]=='A')printf(\"%d\\n\",TCD.Query(a,b));\n  \t}\n\treturn 0;\n}\n\n\n```\n","source":"_posts/CF487E-Tourists-简易题解.md","raw":"---\ntitle: '【CF487E】 Tourists 简易题解'\ndate: 2019-03-20 09:49:00\ncategories:\n- 题解\ntags:\n- OI\n- 图论\n- 圆方树\nmathjax: true\n---\n题目传送门：[【CF487E】 Tourists](https://www.luogu.com.cn/problem/CF487E)\n\n<!-- more -->\n\n## 题目大意\n\n$\\ \\ \\ \\ \\ \\ \\,$ 给你 $n$ 个点和 $m$条边的无向图，没有自环，没有重边，每个点上面有点权。\n\n$\\ \\ \\ \\ \\ \\ \\,$ 每次可能有两种操作：修改一个点的点权，或者询问两个点之间的路径上最小可能的点权是多少。\n\n## 想法\n$\\ \\ \\ \\ \\ \\ \\,$有一个很显然的贪心想法，询问的时候肯定优先走较小权值路径，也就是在有分叉（点双）的时候走较小权值的那一侧，而只有可能最小的会造成贡献。\n\n$\\ \\ \\ \\ \\ \\ \\,$所以说我们可以尝试将每个点双之间建一个堆，记录最小的点权。\n\n$\\ \\ \\ \\ \\ \\ \\,$也就是建出一棵圆方树，方点上面一个堆，记录与他向连的圆点的权值最小值。\n\n$\\ \\ \\ \\ \\ \\ \\,$每次询问就只需要考虑经过唯一路径上面 **圆点点权** 和 **方点堆顶** 的最小值就行了，这个可以用树链剖分搞。\n\n$\\ \\ \\ \\ \\ \\ \\,$然后考虑修改，便是修改与这个 **圆点** 相连的方点上面的堆就好了，删除原来的点权，加入新点权。但是这样子我们不能保证其复杂度，要是圆方树建成一个菊花图就会 $T$ 飞了。\n\n$\\ \\ \\ \\ \\ \\ \\,$我们再考虑一下，我们树链剖分往上跳的时候，其实已经计算过  **走过的方点** 的父亲了（圆点），会有计算重复的地方。所以说 **方点的堆** 里面不需要记录其父亲的权值，换句话说，对于一个圆点，他的值只需要被他的 **方点父亲** 的堆记录，这样子每次修改，只需要修改他父亲的，加上线段树和堆的复杂度也不过一次 $O(\\log n)$。\n\n$\\ \\ \\ \\ \\ \\ \\,$但是每次询问的是两个圆点，其$LCA$有可能是方点，这个时候少计算了一个 **方点$LCA$** 的父亲，需要注意加入判断一下。~~（第一个样第一次例询问输出为2有可能就是这样死的）~~\n\n$\\ \\ \\ \\ \\ \\ \\,$然后就是 **圆方树+树链剖分+线段树+可删堆** 套模板了，可删堆我是用 $fhq\\_Treap$ 实现的，所以说代码比较丑。\n\n$\\ \\ \\ \\ \\ \\ \\,$预处理复杂度$O(n\\log n)$，修改操作复杂度$O(\\log n)$，询问操作复杂度$O(\\log^2 n)$。\n\n## 代码\n\n``` cpp\n#include<algorithm>\n#include<iostream>\n#include<cstdlib>\n#include<cstring>\n#include<cctype>\n#include<cstdio>\n#include<vector>\n#include<string>\n#include<queue>\n#include<stack>\n#include<cmath>\n#include<ctime>\n#include<map>\n#include<set>\nusing namespace std;\nconst int inf=0x3f3f3f3f;\nconst double eps=1e-10;\nconst double pi=acos(-1.0);\n//char buf[1<<15],*S=buf,*T=buf;\n//char getch(){return S==T&&(T=(S=buf)+fread(buf,1,1<<15,stdin),S==T)?0:*S++;}\ninline int read(){\n\tint x=0,f=1;char ch;ch=getchar();\n\twhile(ch<'0'||ch>'9'){if(ch=='-') f=0;ch=getchar();}\n\twhile(ch>='0'&&ch<='9'){x=(x<<1)+(x<<3)+(ch&15);ch=getchar();}\n\tif(f)return x;else return -x;\n}\nconst int N=4e5+200;\nvector<int> G[N],E[N];\nvoid add_E(int x,int y){E[x].push_back(y);E[y].push_back(x);}\nvoid add_G(int x,int y){G[x].push_back(y);G[y].push_back(x);}\nint sta[N],top,Size;\nint tim,dfn[N],low[N];\nvoid tarjan(int u){\n  \tdfn[u]=low[u]=++tim;\n  \tsta[++top]=u;\n  \tfor(auto v:E[u]){\n    \tif(dfn[v]) low[u]=min(low[u],dfn[v]);\n    \telse{\n      \t\ttarjan(v),low[u]=min(low[u],low[v]);\n      \t\tif(low[v]>=dfn[u]){\n        \t\t++Size;int p;\n        \t\twhile((p=sta[top])!=v)add_G(p,Size),top--;\n        \t\tp=sta[top],add_G(p,Size),top--;\n        \t\tadd_G(u,Size);\n      \t\t}\n    \t}\n  \t}\n}\n\nstruct node{int ls,rs,key,size,val;}T[N<<1];\n#define lson T[rt].ls\n#define rson T[rt].rs\nint node_cnt;\nqueue<int>Rub;\nint newnode(int x){\n\tint rt;\n\tif(!Rub.empty())rt=Rub.front(),Rub.pop();\n\telse rt=++node_cnt;\n\tlson=rson=0;\n\tT[rt].key=rand();T[rt].val=x;T[rt].size=1;\n\treturn rt;\n}\nstruct fhq_Treap{\n\tint root;\n\tvoid pushup(int rt){T[rt].size=T[lson].size+T[rson].size+1;}\n\tint merge(int a,int b){\n\t\tif(!a||!b)return a|b;\n\t\tif(T[a].key<T[b].key){T[a].rs=merge(T[a].rs,b);pushup(a);return a;}\n\t\telse{T[b].ls=merge(a,T[b].ls);pushup(b);return b;}\n\t}\n\tvoid split(int rt,int x,int &a,int &b){\n\t\tif(!rt){a=b=0;return;}\n\t\tif(T[rt].val<=x){a=rt;split(rson,x,rson,b);}\n\t\telse{b=rt;split(lson,x,a,lson);}\n\t\tpushup(rt);\n\t}\n\tvoid Insert(int x){\n\t\tint a,b;\n\t\tsplit(root,x,a,b);\n\t\tint rt=newnode(x);\n\t\troot=merge(merge(a,rt),b);\n\t}\n\tvoid Delete(int x){\n\t\tint a,b,c;\n\t\tsplit(root,x,a,c);\n\t\tsplit(a,x-1,a,b);\n\t\tb=merge(T[b].ls,T[b].rs);\n\t\troot=merge(merge(a,b),c);\n\t}\n\tint Min(){\n\t\tint rt=root;\n\t\twhile(lson)rt=lson;\n\t\treturn T[rt].val;\n\t}\n}Treap[N];\n\nint pos[N],w[N];\nstruct Segment_Tree{\n  \t#define Lson l,mid,rt<<1\n  \t#define Rson mid+1,r,rt<<1|1\n  \tint sum[N<<2];\n  \tvoid pushup(int rt){sum[rt]=min(sum[rt<<1],sum[rt<<1|1]);}\n  \tvoid build(int l,int r,int rt){\n  \t\tif(l==r){sum[rt]=w[pos[l]];return;}\n  \t\tint mid=(l+r)>>1;\n  \t\tbuild(Lson);build(Rson);\n  \t\tpushup(rt);\n\t}\n  \tvoid Update(int id,int c,int l,int r,int rt){\n    \tif(l==r){sum[rt]=c;return;}\n    \tint mid=(l+r)>>1;\n    \tif(id<=mid)Update(id,c,Lson);\n    \telse Update(id,c,Rson);\n\t\tpushup(rt);\n  \t}\n  \tint Query(int L,int R,int l,int r,int rt){\n    \tif(L<=l&&r<=R)return sum[rt];\n    \tint ret=1e9,mid=(l+r)>>1;\n    \tif(L<=mid)ret=min(ret,Query(L,R,Lson));\n    \tif(R>mid)ret=min(ret,Query(L,R,Rson));\n    \treturn ret;\n  \t}\n}Seg;\n\nint n,m,Q;\nstruct Tree_Chain_Dissection{\n\tint idx[N];\n\tint deep[N],fa[N],son[N],size[N];\n\tint cnt,top[N];\n\tint dfs1(int u,int f,int dep){\n\t\tdeep[u]=dep;fa[u]=f;size[u]=1;\n\t\tTreap[fa[u]].Insert(w[u]);\n\t\tint maxson=-1;\n\t  \tfor(auto v:G[u])if(v!=f){\n\t\t  \tsize[u]+=dfs1(v,u,dep+1);\n\t\t  \tif(size[v]>maxson)maxson=size[v],son[u]=v;\n\t\t}\n\t\treturn size[u];\n\t}\n\tvoid dfs2(int u,int topf){\n\t\tidx[u]=++cnt;top[u]=topf;\n\t\tpos[cnt]=u;\n\t\tif(!son[u])return;\n\t\tdfs2(son[u],topf);\n\t  \tfor(auto v:G[u])if(!idx[v])dfs2(v,v);\n\t}\n\tvoid init(){\n\t\tdfs1(1,0,1);\n\t\tdfs2(1,1);\n\t  \tfor(int i=n+1;i<=Size;++i)w[i]=Treap[i].Min();\n\t\tSeg.build(1,Size,1);\n\t}\n\tvoid Update(int u,int val){\n\t  \tif(fa[u]){\n\t    \tTreap[fa[u]].Delete(w[u]);\n\t    \tTreap[fa[u]].Insert(val);\n\t    \tSeg.Update(idx[fa[u]],Treap[fa[u]].Min(),1,Size,1);\n\t  \t}\n\t  \tw[u]=val;\n\t\tSeg.Update(idx[u],val,1,Size,1);\n\t}\n\tint Query(int x,int y){\n\t  \tint ans=inf;\n\t  \twhile(top[x]!=top[y]){\n\t    \tif(deep[top[x]]<deep[top[y]])swap(x,y);\n\t    \tans=min(ans,Seg.Query(idx[top[x]],idx[x],1,Size,1));\n\t    \tx=fa[top[x]];\n\t  \t}\n\t \tif(deep[x]>deep[y])swap(x,y);\n\t  \tans=min(ans,Seg.Query(idx[x],idx[y],1,Size,1));\n    \tif(x<=n)return ans;\n    \telse return min(ans,w[fa[x]]);\n\t}\n}TCD;\n\nchar op[2];\nint a,b;\n\nint main()\n{\n\tsrand(time(NULL));\n\tSize=n=read();m=read();Q=read();w[0]=inf;\n  \tfor(int i=1;i<=n;++i)w[i]=read();\n  \tfor(int i=1,a,b;i<=m;++i)\n\ta=read(),b=read(),add_E(a,b);\n  \ttarjan(1);\n  \tTCD.init();\n  \twhile(Q--){\n    \tscanf(\"%s\",op);a=read(),b=read();\n    \tif(op[0]=='C')TCD.Update(a,b);\n    \tif(op[0]=='A')printf(\"%d\\n\",TCD.Query(a,b));\n  \t}\n\treturn 0;\n}\n\n\n```\n","slug":"CF487E-Tourists-简易题解","published":1,"updated":"2022-02-13T08:54:15.612Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0i63w5s0007u4gb6k37bxlk","content":"<p>题目传送门：<a href=\"https://www.luogu.com.cn/problem/CF487E\">【CF487E】 Tourists</a></p>\n<span id=\"more\"></span>\n<h2 id=\"题目大意\"><a href=\"#题目大意\" class=\"headerlink\" title=\"题目大意\"></a>题目大意</h2><p>$\\ \\ \\ \\ \\ \\ \\,$ 给你 $n$ 个点和 $m$条边的无向图，没有自环，没有重边，每个点上面有点权。</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$ 每次可能有两种操作：修改一个点的点权，或者询问两个点之间的路径上最小可能的点权是多少。</p>\n<h2 id=\"想法\"><a href=\"#想法\" class=\"headerlink\" title=\"想法\"></a>想法</h2><p>$\\ \\ \\ \\ \\ \\ \\,$有一个很显然的贪心想法，询问的时候肯定优先走较小权值路径，也就是在有分叉（点双）的时候走较小权值的那一侧，而只有可能最小的会造成贡献。</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$所以说我们可以尝试将每个点双之间建一个堆，记录最小的点权。</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$也就是建出一棵圆方树，方点上面一个堆，记录与他向连的圆点的权值最小值。</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$每次询问就只需要考虑经过唯一路径上面 <strong>圆点点权</strong> 和 <strong>方点堆顶</strong> 的最小值就行了，这个可以用树链剖分搞。</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$然后考虑修改，便是修改与这个 <strong>圆点</strong> 相连的方点上面的堆就好了，删除原来的点权，加入新点权。但是这样子我们不能保证其复杂度，要是圆方树建成一个菊花图就会 $T$ 飞了。</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$我们再考虑一下，我们树链剖分往上跳的时候，其实已经计算过  <strong>走过的方点</strong> 的父亲了（圆点），会有计算重复的地方。所以说 <strong>方点的堆</strong> 里面不需要记录其父亲的权值，换句话说，对于一个圆点，他的值只需要被他的 <strong>方点父亲</strong> 的堆记录，这样子每次修改，只需要修改他父亲的，加上线段树和堆的复杂度也不过一次 $O(\\log n)$。</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$但是每次询问的是两个圆点，其$LCA$有可能是方点，这个时候少计算了一个 <strong>方点$LCA$</strong> 的父亲，需要注意加入判断一下。<del>（第一个样第一次例询问输出为2有可能就是这样死的）</del></p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$然后就是 <strong>圆方树+树链剖分+线段树+可删堆</strong> 套模板了，可删堆我是用 $fhq_Treap$ 实现的，所以说代码比较丑。</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$预处理复杂度$O(n\\log n)$，修改操作复杂度$O(\\log n)$，询问操作复杂度$O(\\log^2 n)$。</p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdlib&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cctype&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;stack&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;ctime&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;map&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;set&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> inf=<span class=\"number\">0x3f3f3f3f</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">double</span> eps=<span class=\"number\">1e-10</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">double</span> pi=<span class=\"built_in\">acos</span>(<span class=\"number\">-1.0</span>);</span><br><span class=\"line\"><span class=\"comment\">//char buf[1&lt;&lt;15],*S=buf,*T=buf;</span></span><br><span class=\"line\"><span class=\"comment\">//char getch()&#123;return S==T&amp;&amp;(T=(S=buf)+fread(buf,1,1&lt;&lt;15,stdin),S==T)?0:*S++;&#125;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">int</span> <span class=\"title\">read</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> x=<span class=\"number\">0</span>,f=<span class=\"number\">1</span>;<span class=\"type\">char</span> ch;ch=<span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(ch&lt;<span class=\"string\">&#x27;0&#x27;</span>||ch&gt;<span class=\"string\">&#x27;9&#x27;</span>)&#123;<span class=\"keyword\">if</span>(ch==<span class=\"string\">&#x27;-&#x27;</span>) f=<span class=\"number\">0</span>;ch=<span class=\"built_in\">getchar</span>();&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(ch&gt;=<span class=\"string\">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class=\"string\">&#x27;9&#x27;</span>)&#123;x=(x&lt;&lt;<span class=\"number\">1</span>)+(x&lt;&lt;<span class=\"number\">3</span>)+(ch&amp;<span class=\"number\">15</span>);ch=<span class=\"built_in\">getchar</span>();&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(f)<span class=\"keyword\">return</span> x;<span class=\"keyword\">else</span> <span class=\"keyword\">return</span> -x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">4e5</span>+<span class=\"number\">200</span>;</span><br><span class=\"line\">vector&lt;<span class=\"type\">int</span>&gt; G[N],E[N];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">add_E</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> y)</span></span>&#123;E[x].<span class=\"built_in\">push_back</span>(y);E[y].<span class=\"built_in\">push_back</span>(x);&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">add_G</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> y)</span></span>&#123;G[x].<span class=\"built_in\">push_back</span>(y);G[y].<span class=\"built_in\">push_back</span>(x);&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> sta[N],top,Size;</span><br><span class=\"line\"><span class=\"type\">int</span> tim,dfn[N],low[N];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">tarjan</span><span class=\"params\">(<span class=\"type\">int</span> u)</span></span>&#123;</span><br><span class=\"line\">  \tdfn[u]=low[u]=++tim;</span><br><span class=\"line\">  \tsta[++top]=u;</span><br><span class=\"line\">  \t<span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> v:E[u])&#123;</span><br><span class=\"line\">    \t<span class=\"keyword\">if</span>(dfn[v]) low[u]=<span class=\"built_in\">min</span>(low[u],dfn[v]);</span><br><span class=\"line\">    \t<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">      \t\t<span class=\"built_in\">tarjan</span>(v),low[u]=<span class=\"built_in\">min</span>(low[u],low[v]);</span><br><span class=\"line\">      \t\t<span class=\"keyword\">if</span>(low[v]&gt;=dfn[u])&#123;</span><br><span class=\"line\">        \t\t++Size;<span class=\"type\">int</span> p;</span><br><span class=\"line\">        \t\t<span class=\"keyword\">while</span>((p=sta[top])!=v)<span class=\"built_in\">add_G</span>(p,Size),top--;</span><br><span class=\"line\">        \t\tp=sta[top],<span class=\"built_in\">add_G</span>(p,Size),top--;</span><br><span class=\"line\">        \t\t<span class=\"built_in\">add_G</span>(u,Size);</span><br><span class=\"line\">      \t\t&#125;</span><br><span class=\"line\">    \t&#125;</span><br><span class=\"line\">  \t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">node</span>&#123;<span class=\"type\">int</span> ls,rs,key,size,val;&#125;T[N&lt;&lt;<span class=\"number\">1</span>];</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> lson T[rt].ls</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> rson T[rt].rs</span></span><br><span class=\"line\"><span class=\"type\">int</span> node_cnt;</span><br><span class=\"line\">queue&lt;<span class=\"type\">int</span>&gt;Rub;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">newnode</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> rt;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(!Rub.<span class=\"built_in\">empty</span>())rt=Rub.<span class=\"built_in\">front</span>(),Rub.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> rt=++node_cnt;</span><br><span class=\"line\">\tlson=rson=<span class=\"number\">0</span>;</span><br><span class=\"line\">\tT[rt].key=<span class=\"built_in\">rand</span>();T[rt].val=x;T[rt].size=<span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> rt;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">fhq_Treap</span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> root;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">pushup</span><span class=\"params\">(<span class=\"type\">int</span> rt)</span></span>&#123;T[rt].size=T[lson].size+T[rson].size+<span class=\"number\">1</span>;&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">merge</span><span class=\"params\">(<span class=\"type\">int</span> a,<span class=\"type\">int</span> b)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(!a||!b)<span class=\"keyword\">return</span> a|b;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(T[a].key&lt;T[b].key)&#123;T[a].rs=<span class=\"built_in\">merge</span>(T[a].rs,b);<span class=\"built_in\">pushup</span>(a);<span class=\"keyword\">return</span> a;&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span>&#123;T[b].ls=<span class=\"built_in\">merge</span>(a,T[b].ls);<span class=\"built_in\">pushup</span>(b);<span class=\"keyword\">return</span> b;&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">split</span><span class=\"params\">(<span class=\"type\">int</span> rt,<span class=\"type\">int</span> x,<span class=\"type\">int</span> &amp;a,<span class=\"type\">int</span> &amp;b)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(!rt)&#123;a=b=<span class=\"number\">0</span>;<span class=\"keyword\">return</span>;&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(T[rt].val&lt;=x)&#123;a=rt;<span class=\"built_in\">split</span>(rson,x,rson,b);&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span>&#123;b=rt;<span class=\"built_in\">split</span>(lson,x,a,lson);&#125;</span><br><span class=\"line\">\t\t<span class=\"built_in\">pushup</span>(rt);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Insert</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> a,b;</span><br><span class=\"line\">\t\t<span class=\"built_in\">split</span>(root,x,a,b);</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> rt=<span class=\"built_in\">newnode</span>(x);</span><br><span class=\"line\">\t\troot=<span class=\"built_in\">merge</span>(<span class=\"built_in\">merge</span>(a,rt),b);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Delete</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> a,b,c;</span><br><span class=\"line\">\t\t<span class=\"built_in\">split</span>(root,x,a,c);</span><br><span class=\"line\">\t\t<span class=\"built_in\">split</span>(a,x<span class=\"number\">-1</span>,a,b);</span><br><span class=\"line\">\t\tb=<span class=\"built_in\">merge</span>(T[b].ls,T[b].rs);</span><br><span class=\"line\">\t\troot=<span class=\"built_in\">merge</span>(<span class=\"built_in\">merge</span>(a,b),c);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">Min</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> rt=root;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(lson)rt=lson;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> T[rt].val;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;Treap[N];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> pos[N],w[N];</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Segment_Tree</span>&#123;</span><br><span class=\"line\">  \t<span class=\"meta\">#<span class=\"keyword\">define</span> Lson l,mid,rt&lt;&lt;1</span></span><br><span class=\"line\">  \t<span class=\"meta\">#<span class=\"keyword\">define</span> Rson mid+1,r,rt&lt;&lt;1|1</span></span><br><span class=\"line\">  \t<span class=\"type\">int</span> sum[N&lt;&lt;<span class=\"number\">2</span>];</span><br><span class=\"line\">  \t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">pushup</span><span class=\"params\">(<span class=\"type\">int</span> rt)</span></span>&#123;sum[rt]=<span class=\"built_in\">min</span>(sum[rt&lt;&lt;<span class=\"number\">1</span>],sum[rt&lt;&lt;<span class=\"number\">1</span>|<span class=\"number\">1</span>]);&#125;</span><br><span class=\"line\">  \t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">build</span><span class=\"params\">(<span class=\"type\">int</span> l,<span class=\"type\">int</span> r,<span class=\"type\">int</span> rt)</span></span>&#123;</span><br><span class=\"line\">  \t\t<span class=\"keyword\">if</span>(l==r)&#123;sum[rt]=w[pos[l]];<span class=\"keyword\">return</span>;&#125;</span><br><span class=\"line\">  \t\t<span class=\"type\">int</span> mid=(l+r)&gt;&gt;<span class=\"number\">1</span>;</span><br><span class=\"line\">  \t\t<span class=\"built_in\">build</span>(Lson);<span class=\"built_in\">build</span>(Rson);</span><br><span class=\"line\">  \t\t<span class=\"built_in\">pushup</span>(rt);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">  \t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Update</span><span class=\"params\">(<span class=\"type\">int</span> id,<span class=\"type\">int</span> c,<span class=\"type\">int</span> l,<span class=\"type\">int</span> r,<span class=\"type\">int</span> rt)</span></span>&#123;</span><br><span class=\"line\">    \t<span class=\"keyword\">if</span>(l==r)&#123;sum[rt]=c;<span class=\"keyword\">return</span>;&#125;</span><br><span class=\"line\">    \t<span class=\"type\">int</span> mid=(l+r)&gt;&gt;<span class=\"number\">1</span>;</span><br><span class=\"line\">    \t<span class=\"keyword\">if</span>(id&lt;=mid)<span class=\"built_in\">Update</span>(id,c,Lson);</span><br><span class=\"line\">    \t<span class=\"keyword\">else</span> <span class=\"built_in\">Update</span>(id,c,Rson);</span><br><span class=\"line\">\t\t<span class=\"built_in\">pushup</span>(rt);</span><br><span class=\"line\">  \t&#125;</span><br><span class=\"line\">  \t<span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">Query</span><span class=\"params\">(<span class=\"type\">int</span> L,<span class=\"type\">int</span> R,<span class=\"type\">int</span> l,<span class=\"type\">int</span> r,<span class=\"type\">int</span> rt)</span></span>&#123;</span><br><span class=\"line\">    \t<span class=\"keyword\">if</span>(L&lt;=l&amp;&amp;r&lt;=R)<span class=\"keyword\">return</span> sum[rt];</span><br><span class=\"line\">    \t<span class=\"type\">int</span> ret=<span class=\"number\">1e9</span>,mid=(l+r)&gt;&gt;<span class=\"number\">1</span>;</span><br><span class=\"line\">    \t<span class=\"keyword\">if</span>(L&lt;=mid)ret=<span class=\"built_in\">min</span>(ret,<span class=\"built_in\">Query</span>(L,R,Lson));</span><br><span class=\"line\">    \t<span class=\"keyword\">if</span>(R&gt;mid)ret=<span class=\"built_in\">min</span>(ret,<span class=\"built_in\">Query</span>(L,R,Rson));</span><br><span class=\"line\">    \t<span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">  \t&#125;</span><br><span class=\"line\">&#125;Seg;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> n,m,Q;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Tree_Chain_Dissection</span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> idx[N];</span><br><span class=\"line\">\t<span class=\"type\">int</span> deep[N],fa[N],son[N],size[N];</span><br><span class=\"line\">\t<span class=\"type\">int</span> cnt,top[N];</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">dfs1</span><span class=\"params\">(<span class=\"type\">int</span> u,<span class=\"type\">int</span> f,<span class=\"type\">int</span> dep)</span></span>&#123;</span><br><span class=\"line\">\t\tdeep[u]=dep;fa[u]=f;size[u]=<span class=\"number\">1</span>;</span><br><span class=\"line\">\t\tTreap[fa[u]].<span class=\"built_in\">Insert</span>(w[u]);</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> maxson=<span class=\"number\">-1</span>;</span><br><span class=\"line\">\t  \t<span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> v:G[u])<span class=\"keyword\">if</span>(v!=f)&#123;</span><br><span class=\"line\">\t\t  \tsize[u]+=<span class=\"built_in\">dfs1</span>(v,u,dep+<span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t  \t<span class=\"keyword\">if</span>(size[v]&gt;maxson)maxson=size[v],son[u]=v;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> size[u];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">dfs2</span><span class=\"params\">(<span class=\"type\">int</span> u,<span class=\"type\">int</span> topf)</span></span>&#123;</span><br><span class=\"line\">\t\tidx[u]=++cnt;top[u]=topf;</span><br><span class=\"line\">\t\tpos[cnt]=u;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(!son[u])<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t<span class=\"built_in\">dfs2</span>(son[u],topf);</span><br><span class=\"line\">\t  \t<span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> v:G[u])<span class=\"keyword\">if</span>(!idx[v])<span class=\"built_in\">dfs2</span>(v,v);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">dfs1</span>(<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t<span class=\"built_in\">dfs2</span>(<span class=\"number\">1</span>,<span class=\"number\">1</span>);</span><br><span class=\"line\">\t  \t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=n+<span class=\"number\">1</span>;i&lt;=Size;++i)w[i]=Treap[i].<span class=\"built_in\">Min</span>();</span><br><span class=\"line\">\t\tSeg.<span class=\"built_in\">build</span>(<span class=\"number\">1</span>,Size,<span class=\"number\">1</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Update</span><span class=\"params\">(<span class=\"type\">int</span> u,<span class=\"type\">int</span> val)</span></span>&#123;</span><br><span class=\"line\">\t  \t<span class=\"keyword\">if</span>(fa[u])&#123;</span><br><span class=\"line\">\t    \tTreap[fa[u]].<span class=\"built_in\">Delete</span>(w[u]);</span><br><span class=\"line\">\t    \tTreap[fa[u]].<span class=\"built_in\">Insert</span>(val);</span><br><span class=\"line\">\t    \tSeg.<span class=\"built_in\">Update</span>(idx[fa[u]],Treap[fa[u]].<span class=\"built_in\">Min</span>(),<span class=\"number\">1</span>,Size,<span class=\"number\">1</span>);</span><br><span class=\"line\">\t  \t&#125;</span><br><span class=\"line\">\t  \tw[u]=val;</span><br><span class=\"line\">\t\tSeg.<span class=\"built_in\">Update</span>(idx[u],val,<span class=\"number\">1</span>,Size,<span class=\"number\">1</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">Query</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> y)</span></span>&#123;</span><br><span class=\"line\">\t  \t<span class=\"type\">int</span> ans=inf;</span><br><span class=\"line\">\t  \t<span class=\"keyword\">while</span>(top[x]!=top[y])&#123;</span><br><span class=\"line\">\t    \t<span class=\"keyword\">if</span>(deep[top[x]]&lt;deep[top[y]])<span class=\"built_in\">swap</span>(x,y);</span><br><span class=\"line\">\t    \tans=<span class=\"built_in\">min</span>(ans,Seg.<span class=\"built_in\">Query</span>(idx[top[x]],idx[x],<span class=\"number\">1</span>,Size,<span class=\"number\">1</span>));</span><br><span class=\"line\">\t    \tx=fa[top[x]];</span><br><span class=\"line\">\t  \t&#125;</span><br><span class=\"line\">\t \t<span class=\"keyword\">if</span>(deep[x]&gt;deep[y])<span class=\"built_in\">swap</span>(x,y);</span><br><span class=\"line\">\t  \tans=<span class=\"built_in\">min</span>(ans,Seg.<span class=\"built_in\">Query</span>(idx[x],idx[y],<span class=\"number\">1</span>,Size,<span class=\"number\">1</span>));</span><br><span class=\"line\">    \t<span class=\"keyword\">if</span>(x&lt;=n)<span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    \t<span class=\"keyword\">else</span> <span class=\"keyword\">return</span> <span class=\"built_in\">min</span>(ans,w[fa[x]]);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;TCD;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">char</span> op[<span class=\"number\">2</span>];</span><br><span class=\"line\"><span class=\"type\">int</span> a,b;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">srand</span>(<span class=\"built_in\">time</span>(<span class=\"literal\">NULL</span>));</span><br><span class=\"line\">\tSize=n=<span class=\"built_in\">read</span>();m=<span class=\"built_in\">read</span>();Q=<span class=\"built_in\">read</span>();w[<span class=\"number\">0</span>]=inf;</span><br><span class=\"line\">  \t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i)w[i]=<span class=\"built_in\">read</span>();</span><br><span class=\"line\">  \t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>,a,b;i&lt;=m;++i)</span><br><span class=\"line\">\ta=<span class=\"built_in\">read</span>(),b=<span class=\"built_in\">read</span>(),<span class=\"built_in\">add_E</span>(a,b);</span><br><span class=\"line\">  \t<span class=\"built_in\">tarjan</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">  \tTCD.<span class=\"built_in\">init</span>();</span><br><span class=\"line\">  \t<span class=\"keyword\">while</span>(Q--)&#123;</span><br><span class=\"line\">    \t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%s&quot;</span>,op);a=<span class=\"built_in\">read</span>(),b=<span class=\"built_in\">read</span>();</span><br><span class=\"line\">    \t<span class=\"keyword\">if</span>(op[<span class=\"number\">0</span>]==<span class=\"string\">&#x27;C&#x27;</span>)TCD.<span class=\"built_in\">Update</span>(a,b);</span><br><span class=\"line\">    \t<span class=\"keyword\">if</span>(op[<span class=\"number\">0</span>]==<span class=\"string\">&#x27;A&#x27;</span>)<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>,TCD.<span class=\"built_in\">Query</span>(a,b));</span><br><span class=\"line\">  \t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>题目传送门：<a href=\"https://www.luogu.com.cn/problem/CF487E\">【CF487E】 Tourists</a></p>","more":"<h2 id=\"题目大意\"><a href=\"#题目大意\" class=\"headerlink\" title=\"题目大意\"></a>题目大意</h2><p>$\\ \\ \\ \\ \\ \\ \\,$ 给你 $n$ 个点和 $m$条边的无向图，没有自环，没有重边，每个点上面有点权。</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$ 每次可能有两种操作：修改一个点的点权，或者询问两个点之间的路径上最小可能的点权是多少。</p>\n<h2 id=\"想法\"><a href=\"#想法\" class=\"headerlink\" title=\"想法\"></a>想法</h2><p>$\\ \\ \\ \\ \\ \\ \\,$有一个很显然的贪心想法，询问的时候肯定优先走较小权值路径，也就是在有分叉（点双）的时候走较小权值的那一侧，而只有可能最小的会造成贡献。</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$所以说我们可以尝试将每个点双之间建一个堆，记录最小的点权。</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$也就是建出一棵圆方树，方点上面一个堆，记录与他向连的圆点的权值最小值。</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$每次询问就只需要考虑经过唯一路径上面 <strong>圆点点权</strong> 和 <strong>方点堆顶</strong> 的最小值就行了，这个可以用树链剖分搞。</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$然后考虑修改，便是修改与这个 <strong>圆点</strong> 相连的方点上面的堆就好了，删除原来的点权，加入新点权。但是这样子我们不能保证其复杂度，要是圆方树建成一个菊花图就会 $T$ 飞了。</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$我们再考虑一下，我们树链剖分往上跳的时候，其实已经计算过  <strong>走过的方点</strong> 的父亲了（圆点），会有计算重复的地方。所以说 <strong>方点的堆</strong> 里面不需要记录其父亲的权值，换句话说，对于一个圆点，他的值只需要被他的 <strong>方点父亲</strong> 的堆记录，这样子每次修改，只需要修改他父亲的，加上线段树和堆的复杂度也不过一次 $O(\\log n)$。</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$但是每次询问的是两个圆点，其$LCA$有可能是方点，这个时候少计算了一个 <strong>方点$LCA$</strong> 的父亲，需要注意加入判断一下。<del>（第一个样第一次例询问输出为2有可能就是这样死的）</del></p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$然后就是 <strong>圆方树+树链剖分+线段树+可删堆</strong> 套模板了，可删堆我是用 $fhq_Treap$ 实现的，所以说代码比较丑。</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$预处理复杂度$O(n\\log n)$，修改操作复杂度$O(\\log n)$，询问操作复杂度$O(\\log^2 n)$。</p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdlib&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cctype&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;stack&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;ctime&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;map&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;set&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> inf=<span class=\"number\">0x3f3f3f3f</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">double</span> eps=<span class=\"number\">1e-10</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">double</span> pi=<span class=\"built_in\">acos</span>(<span class=\"number\">-1.0</span>);</span><br><span class=\"line\"><span class=\"comment\">//char buf[1&lt;&lt;15],*S=buf,*T=buf;</span></span><br><span class=\"line\"><span class=\"comment\">//char getch()&#123;return S==T&amp;&amp;(T=(S=buf)+fread(buf,1,1&lt;&lt;15,stdin),S==T)?0:*S++;&#125;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">int</span> <span class=\"title\">read</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> x=<span class=\"number\">0</span>,f=<span class=\"number\">1</span>;<span class=\"type\">char</span> ch;ch=<span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(ch&lt;<span class=\"string\">&#x27;0&#x27;</span>||ch&gt;<span class=\"string\">&#x27;9&#x27;</span>)&#123;<span class=\"keyword\">if</span>(ch==<span class=\"string\">&#x27;-&#x27;</span>) f=<span class=\"number\">0</span>;ch=<span class=\"built_in\">getchar</span>();&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(ch&gt;=<span class=\"string\">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class=\"string\">&#x27;9&#x27;</span>)&#123;x=(x&lt;&lt;<span class=\"number\">1</span>)+(x&lt;&lt;<span class=\"number\">3</span>)+(ch&amp;<span class=\"number\">15</span>);ch=<span class=\"built_in\">getchar</span>();&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(f)<span class=\"keyword\">return</span> x;<span class=\"keyword\">else</span> <span class=\"keyword\">return</span> -x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">4e5</span>+<span class=\"number\">200</span>;</span><br><span class=\"line\">vector&lt;<span class=\"type\">int</span>&gt; G[N],E[N];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">add_E</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> y)</span></span>&#123;E[x].<span class=\"built_in\">push_back</span>(y);E[y].<span class=\"built_in\">push_back</span>(x);&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">add_G</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> y)</span></span>&#123;G[x].<span class=\"built_in\">push_back</span>(y);G[y].<span class=\"built_in\">push_back</span>(x);&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> sta[N],top,Size;</span><br><span class=\"line\"><span class=\"type\">int</span> tim,dfn[N],low[N];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">tarjan</span><span class=\"params\">(<span class=\"type\">int</span> u)</span></span>&#123;</span><br><span class=\"line\">  \tdfn[u]=low[u]=++tim;</span><br><span class=\"line\">  \tsta[++top]=u;</span><br><span class=\"line\">  \t<span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> v:E[u])&#123;</span><br><span class=\"line\">    \t<span class=\"keyword\">if</span>(dfn[v]) low[u]=<span class=\"built_in\">min</span>(low[u],dfn[v]);</span><br><span class=\"line\">    \t<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">      \t\t<span class=\"built_in\">tarjan</span>(v),low[u]=<span class=\"built_in\">min</span>(low[u],low[v]);</span><br><span class=\"line\">      \t\t<span class=\"keyword\">if</span>(low[v]&gt;=dfn[u])&#123;</span><br><span class=\"line\">        \t\t++Size;<span class=\"type\">int</span> p;</span><br><span class=\"line\">        \t\t<span class=\"keyword\">while</span>((p=sta[top])!=v)<span class=\"built_in\">add_G</span>(p,Size),top--;</span><br><span class=\"line\">        \t\tp=sta[top],<span class=\"built_in\">add_G</span>(p,Size),top--;</span><br><span class=\"line\">        \t\t<span class=\"built_in\">add_G</span>(u,Size);</span><br><span class=\"line\">      \t\t&#125;</span><br><span class=\"line\">    \t&#125;</span><br><span class=\"line\">  \t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">node</span>&#123;<span class=\"type\">int</span> ls,rs,key,size,val;&#125;T[N&lt;&lt;<span class=\"number\">1</span>];</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> lson T[rt].ls</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> rson T[rt].rs</span></span><br><span class=\"line\"><span class=\"type\">int</span> node_cnt;</span><br><span class=\"line\">queue&lt;<span class=\"type\">int</span>&gt;Rub;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">newnode</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> rt;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(!Rub.<span class=\"built_in\">empty</span>())rt=Rub.<span class=\"built_in\">front</span>(),Rub.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> rt=++node_cnt;</span><br><span class=\"line\">\tlson=rson=<span class=\"number\">0</span>;</span><br><span class=\"line\">\tT[rt].key=<span class=\"built_in\">rand</span>();T[rt].val=x;T[rt].size=<span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> rt;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">fhq_Treap</span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> root;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">pushup</span><span class=\"params\">(<span class=\"type\">int</span> rt)</span></span>&#123;T[rt].size=T[lson].size+T[rson].size+<span class=\"number\">1</span>;&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">merge</span><span class=\"params\">(<span class=\"type\">int</span> a,<span class=\"type\">int</span> b)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(!a||!b)<span class=\"keyword\">return</span> a|b;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(T[a].key&lt;T[b].key)&#123;T[a].rs=<span class=\"built_in\">merge</span>(T[a].rs,b);<span class=\"built_in\">pushup</span>(a);<span class=\"keyword\">return</span> a;&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span>&#123;T[b].ls=<span class=\"built_in\">merge</span>(a,T[b].ls);<span class=\"built_in\">pushup</span>(b);<span class=\"keyword\">return</span> b;&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">split</span><span class=\"params\">(<span class=\"type\">int</span> rt,<span class=\"type\">int</span> x,<span class=\"type\">int</span> &amp;a,<span class=\"type\">int</span> &amp;b)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(!rt)&#123;a=b=<span class=\"number\">0</span>;<span class=\"keyword\">return</span>;&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(T[rt].val&lt;=x)&#123;a=rt;<span class=\"built_in\">split</span>(rson,x,rson,b);&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span>&#123;b=rt;<span class=\"built_in\">split</span>(lson,x,a,lson);&#125;</span><br><span class=\"line\">\t\t<span class=\"built_in\">pushup</span>(rt);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Insert</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> a,b;</span><br><span class=\"line\">\t\t<span class=\"built_in\">split</span>(root,x,a,b);</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> rt=<span class=\"built_in\">newnode</span>(x);</span><br><span class=\"line\">\t\troot=<span class=\"built_in\">merge</span>(<span class=\"built_in\">merge</span>(a,rt),b);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Delete</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> a,b,c;</span><br><span class=\"line\">\t\t<span class=\"built_in\">split</span>(root,x,a,c);</span><br><span class=\"line\">\t\t<span class=\"built_in\">split</span>(a,x<span class=\"number\">-1</span>,a,b);</span><br><span class=\"line\">\t\tb=<span class=\"built_in\">merge</span>(T[b].ls,T[b].rs);</span><br><span class=\"line\">\t\troot=<span class=\"built_in\">merge</span>(<span class=\"built_in\">merge</span>(a,b),c);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">Min</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> rt=root;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(lson)rt=lson;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> T[rt].val;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;Treap[N];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> pos[N],w[N];</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Segment_Tree</span>&#123;</span><br><span class=\"line\">  \t<span class=\"meta\">#<span class=\"keyword\">define</span> Lson l,mid,rt&lt;&lt;1</span></span><br><span class=\"line\">  \t<span class=\"meta\">#<span class=\"keyword\">define</span> Rson mid+1,r,rt&lt;&lt;1|1</span></span><br><span class=\"line\">  \t<span class=\"type\">int</span> sum[N&lt;&lt;<span class=\"number\">2</span>];</span><br><span class=\"line\">  \t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">pushup</span><span class=\"params\">(<span class=\"type\">int</span> rt)</span></span>&#123;sum[rt]=<span class=\"built_in\">min</span>(sum[rt&lt;&lt;<span class=\"number\">1</span>],sum[rt&lt;&lt;<span class=\"number\">1</span>|<span class=\"number\">1</span>]);&#125;</span><br><span class=\"line\">  \t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">build</span><span class=\"params\">(<span class=\"type\">int</span> l,<span class=\"type\">int</span> r,<span class=\"type\">int</span> rt)</span></span>&#123;</span><br><span class=\"line\">  \t\t<span class=\"keyword\">if</span>(l==r)&#123;sum[rt]=w[pos[l]];<span class=\"keyword\">return</span>;&#125;</span><br><span class=\"line\">  \t\t<span class=\"type\">int</span> mid=(l+r)&gt;&gt;<span class=\"number\">1</span>;</span><br><span class=\"line\">  \t\t<span class=\"built_in\">build</span>(Lson);<span class=\"built_in\">build</span>(Rson);</span><br><span class=\"line\">  \t\t<span class=\"built_in\">pushup</span>(rt);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">  \t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Update</span><span class=\"params\">(<span class=\"type\">int</span> id,<span class=\"type\">int</span> c,<span class=\"type\">int</span> l,<span class=\"type\">int</span> r,<span class=\"type\">int</span> rt)</span></span>&#123;</span><br><span class=\"line\">    \t<span class=\"keyword\">if</span>(l==r)&#123;sum[rt]=c;<span class=\"keyword\">return</span>;&#125;</span><br><span class=\"line\">    \t<span class=\"type\">int</span> mid=(l+r)&gt;&gt;<span class=\"number\">1</span>;</span><br><span class=\"line\">    \t<span class=\"keyword\">if</span>(id&lt;=mid)<span class=\"built_in\">Update</span>(id,c,Lson);</span><br><span class=\"line\">    \t<span class=\"keyword\">else</span> <span class=\"built_in\">Update</span>(id,c,Rson);</span><br><span class=\"line\">\t\t<span class=\"built_in\">pushup</span>(rt);</span><br><span class=\"line\">  \t&#125;</span><br><span class=\"line\">  \t<span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">Query</span><span class=\"params\">(<span class=\"type\">int</span> L,<span class=\"type\">int</span> R,<span class=\"type\">int</span> l,<span class=\"type\">int</span> r,<span class=\"type\">int</span> rt)</span></span>&#123;</span><br><span class=\"line\">    \t<span class=\"keyword\">if</span>(L&lt;=l&amp;&amp;r&lt;=R)<span class=\"keyword\">return</span> sum[rt];</span><br><span class=\"line\">    \t<span class=\"type\">int</span> ret=<span class=\"number\">1e9</span>,mid=(l+r)&gt;&gt;<span class=\"number\">1</span>;</span><br><span class=\"line\">    \t<span class=\"keyword\">if</span>(L&lt;=mid)ret=<span class=\"built_in\">min</span>(ret,<span class=\"built_in\">Query</span>(L,R,Lson));</span><br><span class=\"line\">    \t<span class=\"keyword\">if</span>(R&gt;mid)ret=<span class=\"built_in\">min</span>(ret,<span class=\"built_in\">Query</span>(L,R,Rson));</span><br><span class=\"line\">    \t<span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">  \t&#125;</span><br><span class=\"line\">&#125;Seg;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> n,m,Q;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Tree_Chain_Dissection</span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> idx[N];</span><br><span class=\"line\">\t<span class=\"type\">int</span> deep[N],fa[N],son[N],size[N];</span><br><span class=\"line\">\t<span class=\"type\">int</span> cnt,top[N];</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">dfs1</span><span class=\"params\">(<span class=\"type\">int</span> u,<span class=\"type\">int</span> f,<span class=\"type\">int</span> dep)</span></span>&#123;</span><br><span class=\"line\">\t\tdeep[u]=dep;fa[u]=f;size[u]=<span class=\"number\">1</span>;</span><br><span class=\"line\">\t\tTreap[fa[u]].<span class=\"built_in\">Insert</span>(w[u]);</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> maxson=<span class=\"number\">-1</span>;</span><br><span class=\"line\">\t  \t<span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> v:G[u])<span class=\"keyword\">if</span>(v!=f)&#123;</span><br><span class=\"line\">\t\t  \tsize[u]+=<span class=\"built_in\">dfs1</span>(v,u,dep+<span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t  \t<span class=\"keyword\">if</span>(size[v]&gt;maxson)maxson=size[v],son[u]=v;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> size[u];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">dfs2</span><span class=\"params\">(<span class=\"type\">int</span> u,<span class=\"type\">int</span> topf)</span></span>&#123;</span><br><span class=\"line\">\t\tidx[u]=++cnt;top[u]=topf;</span><br><span class=\"line\">\t\tpos[cnt]=u;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(!son[u])<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t<span class=\"built_in\">dfs2</span>(son[u],topf);</span><br><span class=\"line\">\t  \t<span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> v:G[u])<span class=\"keyword\">if</span>(!idx[v])<span class=\"built_in\">dfs2</span>(v,v);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">dfs1</span>(<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t<span class=\"built_in\">dfs2</span>(<span class=\"number\">1</span>,<span class=\"number\">1</span>);</span><br><span class=\"line\">\t  \t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=n+<span class=\"number\">1</span>;i&lt;=Size;++i)w[i]=Treap[i].<span class=\"built_in\">Min</span>();</span><br><span class=\"line\">\t\tSeg.<span class=\"built_in\">build</span>(<span class=\"number\">1</span>,Size,<span class=\"number\">1</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Update</span><span class=\"params\">(<span class=\"type\">int</span> u,<span class=\"type\">int</span> val)</span></span>&#123;</span><br><span class=\"line\">\t  \t<span class=\"keyword\">if</span>(fa[u])&#123;</span><br><span class=\"line\">\t    \tTreap[fa[u]].<span class=\"built_in\">Delete</span>(w[u]);</span><br><span class=\"line\">\t    \tTreap[fa[u]].<span class=\"built_in\">Insert</span>(val);</span><br><span class=\"line\">\t    \tSeg.<span class=\"built_in\">Update</span>(idx[fa[u]],Treap[fa[u]].<span class=\"built_in\">Min</span>(),<span class=\"number\">1</span>,Size,<span class=\"number\">1</span>);</span><br><span class=\"line\">\t  \t&#125;</span><br><span class=\"line\">\t  \tw[u]=val;</span><br><span class=\"line\">\t\tSeg.<span class=\"built_in\">Update</span>(idx[u],val,<span class=\"number\">1</span>,Size,<span class=\"number\">1</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">Query</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> y)</span></span>&#123;</span><br><span class=\"line\">\t  \t<span class=\"type\">int</span> ans=inf;</span><br><span class=\"line\">\t  \t<span class=\"keyword\">while</span>(top[x]!=top[y])&#123;</span><br><span class=\"line\">\t    \t<span class=\"keyword\">if</span>(deep[top[x]]&lt;deep[top[y]])<span class=\"built_in\">swap</span>(x,y);</span><br><span class=\"line\">\t    \tans=<span class=\"built_in\">min</span>(ans,Seg.<span class=\"built_in\">Query</span>(idx[top[x]],idx[x],<span class=\"number\">1</span>,Size,<span class=\"number\">1</span>));</span><br><span class=\"line\">\t    \tx=fa[top[x]];</span><br><span class=\"line\">\t  \t&#125;</span><br><span class=\"line\">\t \t<span class=\"keyword\">if</span>(deep[x]&gt;deep[y])<span class=\"built_in\">swap</span>(x,y);</span><br><span class=\"line\">\t  \tans=<span class=\"built_in\">min</span>(ans,Seg.<span class=\"built_in\">Query</span>(idx[x],idx[y],<span class=\"number\">1</span>,Size,<span class=\"number\">1</span>));</span><br><span class=\"line\">    \t<span class=\"keyword\">if</span>(x&lt;=n)<span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    \t<span class=\"keyword\">else</span> <span class=\"keyword\">return</span> <span class=\"built_in\">min</span>(ans,w[fa[x]]);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;TCD;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">char</span> op[<span class=\"number\">2</span>];</span><br><span class=\"line\"><span class=\"type\">int</span> a,b;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">srand</span>(<span class=\"built_in\">time</span>(<span class=\"literal\">NULL</span>));</span><br><span class=\"line\">\tSize=n=<span class=\"built_in\">read</span>();m=<span class=\"built_in\">read</span>();Q=<span class=\"built_in\">read</span>();w[<span class=\"number\">0</span>]=inf;</span><br><span class=\"line\">  \t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i)w[i]=<span class=\"built_in\">read</span>();</span><br><span class=\"line\">  \t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>,a,b;i&lt;=m;++i)</span><br><span class=\"line\">\ta=<span class=\"built_in\">read</span>(),b=<span class=\"built_in\">read</span>(),<span class=\"built_in\">add_E</span>(a,b);</span><br><span class=\"line\">  \t<span class=\"built_in\">tarjan</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">  \tTCD.<span class=\"built_in\">init</span>();</span><br><span class=\"line\">  \t<span class=\"keyword\">while</span>(Q--)&#123;</span><br><span class=\"line\">    \t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%s&quot;</span>,op);a=<span class=\"built_in\">read</span>(),b=<span class=\"built_in\">read</span>();</span><br><span class=\"line\">    \t<span class=\"keyword\">if</span>(op[<span class=\"number\">0</span>]==<span class=\"string\">&#x27;C&#x27;</span>)TCD.<span class=\"built_in\">Update</span>(a,b);</span><br><span class=\"line\">    \t<span class=\"keyword\">if</span>(op[<span class=\"number\">0</span>]==<span class=\"string\">&#x27;A&#x27;</span>)<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>,TCD.<span class=\"built_in\">Query</span>(a,b));</span><br><span class=\"line\">  \t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>"},{"title":"OI中常见的线性代数矩阵问题","date":"2018-12-29T06:18:02.000Z","mathjax":true,"_content":"\n$\\ \\ \\ \\ \\ \\ \\ \\,$关于OI中常见的线性代数矩阵问题的复习笔记：\n\n\n<!-- more -->\n\n$\\ \\ \\ \\ \\ \\ \\,$对于一个 $n\\times m$ 的矩阵 $A$，我们这样定义：\n\n$ A=\\begin{bmatrix} a_{(1,1)} &  a_{(1,2)} &\\cdots &a_{(1,n)} \\\\  a_{(2,1)}&  a_{(2,2)} &\\cdots &a_{(2,n)} \\\\\\vdots &\\vdots &\\ddots &\\vdots\\\\  a_{(m,1)}&  a_{(m,2)} &\\cdots &a_{(m,n)}  \\end{bmatrix} $\n\n\n``` cpp\nstruct matrix{\t\n\tint n,m;\n\tdouble a[N][N];\n}A;\n```\n\n## 高斯消元\n\n$\\ \\ \\ \\ \\ \\ \\,$回忆初中学的多元一次方程（线性方程），我们可以把它当做一个矩阵，然后等号的后面为 $n\\times 1$ 的增广矩阵。\n\n$\\ \\ \\ \\ \\ \\ \\,$我们解答的过程，就是用方程之间的加减，或者乘一个常数，来消去一些未知数，直到可以直接解出答案。这个消元过程，就是高斯消元。\n\n$\\ \\ \\ \\ \\ \\ \\,$变换到矩阵上面，就是通过一些行与行之间的加减，或者乘一个常数，来使得一些位置的值变为 $0$ 。\n\n$\\ \\ \\ \\ \\ \\ \\,$我们一般会画成下面两种形态：\n\n1. 行阶梯式\n\n  $ \\begin{bmatrix} a &  a &a \\\\  0&  a &a \\\\0&  0 &a  \\end{bmatrix} $\n  \n  $\\ \\ \\ \\ \\ \\ \\,$代码如下，复杂度$O(n^3)$\n  \n``` cpp\nvoid Gauss(matrix &A){\n\tfor(int i=1;i<=A.n;i++){\n\t\tfor(int j=i;j<=A.m;j++)\n\t\tif(fabs(A.a[j][i])){swap(A.a[j],A.a[i]);break;}\n\t\tfor(int j=i+1;j<=A.m;j++){\n\t\tif(fabs(A.a[i][i])<eps)continue;\n\t\tdouble f=A.a[j][i]/A.a[i][i];\n\t\tfor(int k=i;k<=A.n;k++)A.a[j][k]-=f*A.a[i][k];\n\t\t}\n\t}\n}\n```\n  \n2. 行最简式\n\n  $ \\begin{bmatrix} a &  0 &0 \\\\  0&  a &0 \\\\0&  0 &a\\end{bmatrix} $\n  \n  $\\ \\ \\ \\ \\ \\ \\,$代码如下，在化成行阶梯式之后，再化成行最简式，复杂度$O(n^3)$\n  \n  \n``` cpp\nvoid Gauss(matrix &A){\n\tfor(int i=1;i<=A.n;i++){\n \t\tfor(int j=i;j<=A.m;j++)\n \t\tif(fabs(A.a[j][i])){swap(A.a[j],A.a[i]);break;}\n \t\tfor(int j=i+1;j<=A.m;j++){\n \t\t\tif(fabs(A.a[i][i])<eps)continue;\n \t\t\tdouble f=A.a[j][i]/A.a[i][i];\n      for(int k=i;k<=A.n;k++)A.a[j][k]-=f*A.a[i][k];\n\t\t}\n\t}\n\tfor(int i=A.n;i>=1;i--)\n \tfor(int j=i-1;j>=1;j--){\n \t\tif(fabs(A.a[j][i])<eps)continue;\n \t\tdouble f=-A.a[i][i]/A.a[j][i];\n    for(int k=j;k<=A.n;k++)\n    (A.a[j][k]*=f)+=A.a[i][k];\n\t}\n}\n```\n\n## 矩阵的秩和行列式的值\n\n1. 矩阵的秩\n\n$\\ \\ \\ \\ \\ \\ \\,$矩阵的秩是A的线性独立的纵（横）列的极大数目，感性地理解，就是在线性方程里的非自由元数目，也就是有用的为多少，我们可以在高斯消元的同时，来求矩阵的秩。\n\n$\\ \\ \\ \\ \\ \\ \\ \\,$也就是统计行阶梯式的对角线上，不为 $0$ 的数目。\n\n2. 行列式的值\n\n$\\ \\ \\ \\ \\ \\ \\,$行列式虽然与矩阵不同，但是也可以用矩阵表示，暴力求行列式的值复杂度太高，但是我们可以高斯消元过后再求。\n\n$\\ \\ \\ \\ \\ \\ \\,$就是行阶梯式的对角线的乘积。\n\n\n\n## 矩阵乘法\n\n$\\ \\ \\ \\ \\ \\ \\,$那么对于矩阵之间的乘法 $B\\times A$，我们这样定义：\n\n$\\ \\ \\ \\ \\ \\ \\,$首先，我们需要确定，$B$ 的列数等于$A$ 的行数，既$m_A=n_B$。\n\n$\\ \\ \\ \\ \\ \\ \\,$令$S_{(i,j)}=\\sum_{k=1}^{m_A}a_{(k,j)}\\times b_{(i,k)}$，那么有：\n\n$B\\times A=\\begin{bmatrix} S_{(1,1)} &  S_{(1,2)} &\\cdots &S_{(1,n_A)} \\\\  S_{(2,1)}&  S_{(2,2)} &\\cdots &S_{(2,n_A)} \\\\\\vdots &\\vdots &\\ddots &\\vdots\\\\  S_{(m_B,1)}&  S_{(m_B,2)} &\\cdots &S_{(m_B,n_A)}  \\end{bmatrix} $\n\n$\\ \\ \\ \\ \\ \\ \\,$显然是一定满足结合律，不一定满足交换律的，复杂度为$O(n^3)$，直接模拟的，代码如下：\n\n``` cpp\ninline matrix operator *(const matrix &a,const matrix &b){\n\tmatrix ret;ret.n=a.n;ret.m=b.m;\n\tfor(int i=1;i<=a.n;i++)\n\tfor(int j=1;j<=b.m;j++){\n\t  ret.a[i][j]=0;\n\t  for(int k=1;k<=a.m;k++)\n\t  ret.a[i][j]+=a.a[i][k]*b.a[k][j];\n\t}\n\treturn ret;\n}\n```\n\n\n## 矩阵逆元\n\n$\\ \\ \\ \\ \\ \\ \\,$有矩阵乘法，那么就会存在单位元，那么就自然会有逆元的存在。\n\n$\\ \\ \\ \\ \\ \\ \\,$单位矩阵，既对角线上面都是 $1$，其余都是 $0$ 的矩阵：\n\n$ I=\\begin{bmatrix} 1 &  0 &\\cdots &0 \\\\  0&  1 &\\cdots &0 \\\\\\vdots &\\vdots &\\ddots &\\vdots\\\\  0&  0 &\\cdots &1  \\end{bmatrix} $\n\n$\\ \\ \\ \\ \\ \\ \\,$根据矩阵乘法的定义，很容易知道$A\\times I=A$。\n\n$\\ \\ \\ \\ \\ \\ \\,$那么对于矩阵$A$，若是$A\\times A'=I$，我们就称 $A'$ 为 $A$ 的逆矩阵。\n\n$\\ \\ \\ \\ \\ \\ \\,$对于一个矩阵$A$，肯定可以通过一些行与行之间的加减，或者乘一个常数，既高斯消元，变成 $I$。那么我们令$B=I$，同时和$A$做高斯消元，那么当$A=I$时，$B=A'$了。\n\n$\\ \\ \\ \\ \\ \\ \\,$模板如下，返回$0$是无逆元情况：\n\n``` cpp\nbool Inv(matrix A,matrix &B){\n\tB.n=A.n;B.m=A.m;\n\tmemset(B.a,0,sizeof(B.a));\n\tfor(int i=1;i<=A.n;i++)B.a[i][i]=1;\n\tfor(int i=1;i<=A.n;i++){\n    for(int j=i;j<=A.n;j++)\n    if(A.a[j][i]){\n      swap(A.a[i],A.a[j]);\n\t\t\tswap(B.a[i],B.a[j]);\n      break;\n    }\n    if(!A.a[i][i])return 0;\n    long long r=inv(A.a[i][i]);\n    for(int j=i;j<=A.n;j++)A.a[i][j]=A.a[i][j]*r%mod;\n    for(int j=1;j<=A.n;j++)B.a[i][j]=B.a[i][j]*r%mod;\n    for(int j=1;j<=A.n;j++)\n    if(j!=i){\n      long long f=A.a[j][i];\n      for(int k=i;k<=A.n;k++)\n      A.a[j][k]=(A.a[j][k]-f*A.a[i][k]%mod+mod)%mod;\n      for(int k=1;k<=A.n;k++)\n      B.a[j][k]=(B.a[j][k]-f*B.a[i][k]%mod+mod)%mod;\n    }\n  }\n  return 1;\n}\n```\n\n","source":"_posts/OI中常见的线性代数矩阵问题.md","raw":"---\ntitle: 'OI中常见的线性代数矩阵问题'\ndate: 2018-12-29 14:18:02\ncategories:\n- 学习笔记\ntags:\n- OI\n- 数学\n- 矩阵乘法\n- 矩阵求逆\n- 高斯消元\nmathjax: true\n---\n\n$\\ \\ \\ \\ \\ \\ \\ \\,$关于OI中常见的线性代数矩阵问题的复习笔记：\n\n\n<!-- more -->\n\n$\\ \\ \\ \\ \\ \\ \\,$对于一个 $n\\times m$ 的矩阵 $A$，我们这样定义：\n\n$ A=\\begin{bmatrix} a_{(1,1)} &  a_{(1,2)} &\\cdots &a_{(1,n)} \\\\  a_{(2,1)}&  a_{(2,2)} &\\cdots &a_{(2,n)} \\\\\\vdots &\\vdots &\\ddots &\\vdots\\\\  a_{(m,1)}&  a_{(m,2)} &\\cdots &a_{(m,n)}  \\end{bmatrix} $\n\n\n``` cpp\nstruct matrix{\t\n\tint n,m;\n\tdouble a[N][N];\n}A;\n```\n\n## 高斯消元\n\n$\\ \\ \\ \\ \\ \\ \\,$回忆初中学的多元一次方程（线性方程），我们可以把它当做一个矩阵，然后等号的后面为 $n\\times 1$ 的增广矩阵。\n\n$\\ \\ \\ \\ \\ \\ \\,$我们解答的过程，就是用方程之间的加减，或者乘一个常数，来消去一些未知数，直到可以直接解出答案。这个消元过程，就是高斯消元。\n\n$\\ \\ \\ \\ \\ \\ \\,$变换到矩阵上面，就是通过一些行与行之间的加减，或者乘一个常数，来使得一些位置的值变为 $0$ 。\n\n$\\ \\ \\ \\ \\ \\ \\,$我们一般会画成下面两种形态：\n\n1. 行阶梯式\n\n  $ \\begin{bmatrix} a &  a &a \\\\  0&  a &a \\\\0&  0 &a  \\end{bmatrix} $\n  \n  $\\ \\ \\ \\ \\ \\ \\,$代码如下，复杂度$O(n^3)$\n  \n``` cpp\nvoid Gauss(matrix &A){\n\tfor(int i=1;i<=A.n;i++){\n\t\tfor(int j=i;j<=A.m;j++)\n\t\tif(fabs(A.a[j][i])){swap(A.a[j],A.a[i]);break;}\n\t\tfor(int j=i+1;j<=A.m;j++){\n\t\tif(fabs(A.a[i][i])<eps)continue;\n\t\tdouble f=A.a[j][i]/A.a[i][i];\n\t\tfor(int k=i;k<=A.n;k++)A.a[j][k]-=f*A.a[i][k];\n\t\t}\n\t}\n}\n```\n  \n2. 行最简式\n\n  $ \\begin{bmatrix} a &  0 &0 \\\\  0&  a &0 \\\\0&  0 &a\\end{bmatrix} $\n  \n  $\\ \\ \\ \\ \\ \\ \\,$代码如下，在化成行阶梯式之后，再化成行最简式，复杂度$O(n^3)$\n  \n  \n``` cpp\nvoid Gauss(matrix &A){\n\tfor(int i=1;i<=A.n;i++){\n \t\tfor(int j=i;j<=A.m;j++)\n \t\tif(fabs(A.a[j][i])){swap(A.a[j],A.a[i]);break;}\n \t\tfor(int j=i+1;j<=A.m;j++){\n \t\t\tif(fabs(A.a[i][i])<eps)continue;\n \t\t\tdouble f=A.a[j][i]/A.a[i][i];\n      for(int k=i;k<=A.n;k++)A.a[j][k]-=f*A.a[i][k];\n\t\t}\n\t}\n\tfor(int i=A.n;i>=1;i--)\n \tfor(int j=i-1;j>=1;j--){\n \t\tif(fabs(A.a[j][i])<eps)continue;\n \t\tdouble f=-A.a[i][i]/A.a[j][i];\n    for(int k=j;k<=A.n;k++)\n    (A.a[j][k]*=f)+=A.a[i][k];\n\t}\n}\n```\n\n## 矩阵的秩和行列式的值\n\n1. 矩阵的秩\n\n$\\ \\ \\ \\ \\ \\ \\,$矩阵的秩是A的线性独立的纵（横）列的极大数目，感性地理解，就是在线性方程里的非自由元数目，也就是有用的为多少，我们可以在高斯消元的同时，来求矩阵的秩。\n\n$\\ \\ \\ \\ \\ \\ \\ \\,$也就是统计行阶梯式的对角线上，不为 $0$ 的数目。\n\n2. 行列式的值\n\n$\\ \\ \\ \\ \\ \\ \\,$行列式虽然与矩阵不同，但是也可以用矩阵表示，暴力求行列式的值复杂度太高，但是我们可以高斯消元过后再求。\n\n$\\ \\ \\ \\ \\ \\ \\,$就是行阶梯式的对角线的乘积。\n\n\n\n## 矩阵乘法\n\n$\\ \\ \\ \\ \\ \\ \\,$那么对于矩阵之间的乘法 $B\\times A$，我们这样定义：\n\n$\\ \\ \\ \\ \\ \\ \\,$首先，我们需要确定，$B$ 的列数等于$A$ 的行数，既$m_A=n_B$。\n\n$\\ \\ \\ \\ \\ \\ \\,$令$S_{(i,j)}=\\sum_{k=1}^{m_A}a_{(k,j)}\\times b_{(i,k)}$，那么有：\n\n$B\\times A=\\begin{bmatrix} S_{(1,1)} &  S_{(1,2)} &\\cdots &S_{(1,n_A)} \\\\  S_{(2,1)}&  S_{(2,2)} &\\cdots &S_{(2,n_A)} \\\\\\vdots &\\vdots &\\ddots &\\vdots\\\\  S_{(m_B,1)}&  S_{(m_B,2)} &\\cdots &S_{(m_B,n_A)}  \\end{bmatrix} $\n\n$\\ \\ \\ \\ \\ \\ \\,$显然是一定满足结合律，不一定满足交换律的，复杂度为$O(n^3)$，直接模拟的，代码如下：\n\n``` cpp\ninline matrix operator *(const matrix &a,const matrix &b){\n\tmatrix ret;ret.n=a.n;ret.m=b.m;\n\tfor(int i=1;i<=a.n;i++)\n\tfor(int j=1;j<=b.m;j++){\n\t  ret.a[i][j]=0;\n\t  for(int k=1;k<=a.m;k++)\n\t  ret.a[i][j]+=a.a[i][k]*b.a[k][j];\n\t}\n\treturn ret;\n}\n```\n\n\n## 矩阵逆元\n\n$\\ \\ \\ \\ \\ \\ \\,$有矩阵乘法，那么就会存在单位元，那么就自然会有逆元的存在。\n\n$\\ \\ \\ \\ \\ \\ \\,$单位矩阵，既对角线上面都是 $1$，其余都是 $0$ 的矩阵：\n\n$ I=\\begin{bmatrix} 1 &  0 &\\cdots &0 \\\\  0&  1 &\\cdots &0 \\\\\\vdots &\\vdots &\\ddots &\\vdots\\\\  0&  0 &\\cdots &1  \\end{bmatrix} $\n\n$\\ \\ \\ \\ \\ \\ \\,$根据矩阵乘法的定义，很容易知道$A\\times I=A$。\n\n$\\ \\ \\ \\ \\ \\ \\,$那么对于矩阵$A$，若是$A\\times A'=I$，我们就称 $A'$ 为 $A$ 的逆矩阵。\n\n$\\ \\ \\ \\ \\ \\ \\,$对于一个矩阵$A$，肯定可以通过一些行与行之间的加减，或者乘一个常数，既高斯消元，变成 $I$。那么我们令$B=I$，同时和$A$做高斯消元，那么当$A=I$时，$B=A'$了。\n\n$\\ \\ \\ \\ \\ \\ \\,$模板如下，返回$0$是无逆元情况：\n\n``` cpp\nbool Inv(matrix A,matrix &B){\n\tB.n=A.n;B.m=A.m;\n\tmemset(B.a,0,sizeof(B.a));\n\tfor(int i=1;i<=A.n;i++)B.a[i][i]=1;\n\tfor(int i=1;i<=A.n;i++){\n    for(int j=i;j<=A.n;j++)\n    if(A.a[j][i]){\n      swap(A.a[i],A.a[j]);\n\t\t\tswap(B.a[i],B.a[j]);\n      break;\n    }\n    if(!A.a[i][i])return 0;\n    long long r=inv(A.a[i][i]);\n    for(int j=i;j<=A.n;j++)A.a[i][j]=A.a[i][j]*r%mod;\n    for(int j=1;j<=A.n;j++)B.a[i][j]=B.a[i][j]*r%mod;\n    for(int j=1;j<=A.n;j++)\n    if(j!=i){\n      long long f=A.a[j][i];\n      for(int k=i;k<=A.n;k++)\n      A.a[j][k]=(A.a[j][k]-f*A.a[i][k]%mod+mod)%mod;\n      for(int k=1;k<=A.n;k++)\n      B.a[j][k]=(B.a[j][k]-f*B.a[i][k]%mod+mod)%mod;\n    }\n  }\n  return 1;\n}\n```\n\n","slug":"OI中常见的线性代数矩阵问题","published":1,"updated":"2022-02-14T04:06:00.321Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0i63w5t0009u4gbengk3txm","content":"<p>$\\ \\ \\ \\ \\ \\ \\ \\,$关于OI中常见的线性代数矩阵问题的复习笔记：</p>\n<span id=\"more\"></span>\n<p>$\\ \\ \\ \\ \\ \\ \\,$对于一个 $n\\times m$ 的矩阵 $A$，我们这样定义：</p>\n<p>$ A=\\begin{bmatrix} a_{(1,1)} &amp;  a_{(1,2)} &amp;\\cdots &amp;a_{(1,n)} \\\\  a_{(2,1)}&amp;  a_{(2,2)} &amp;\\cdots &amp;a_{(2,n)} \\\\\\vdots &amp;\\vdots &amp;\\ddots &amp;\\vdots\\\\  a_{(m,1)}&amp;  a_{(m,2)} &amp;\\cdots &amp;a_{(m,n)}  \\end{bmatrix} $</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">matrix</span>&#123;\t</span><br><span class=\"line\">\t<span class=\"type\">int</span> n,m;</span><br><span class=\"line\">\t<span class=\"type\">double</span> a[N][N];</span><br><span class=\"line\">&#125;A;</span><br></pre></td></tr></table></figure>\n<h2 id=\"高斯消元\"><a href=\"#高斯消元\" class=\"headerlink\" title=\"高斯消元\"></a>高斯消元</h2><p>$\\ \\ \\ \\ \\ \\ \\,$回忆初中学的多元一次方程（线性方程），我们可以把它当做一个矩阵，然后等号的后面为 $n\\times 1$ 的增广矩阵。</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$我们解答的过程，就是用方程之间的加减，或者乘一个常数，来消去一些未知数，直到可以直接解出答案。这个消元过程，就是高斯消元。</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$变换到矩阵上面，就是通过一些行与行之间的加减，或者乘一个常数，来使得一些位置的值变为 $0$ 。</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$我们一般会画成下面两种形态：</p>\n<ol>\n<li><p>行阶梯式</p>\n<p>$ \\begin{bmatrix} a &amp;  a &amp;a \\\\  0&amp;  a &amp;a \\\\0&amp;  0 &amp;a  \\end{bmatrix} $</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$代码如下，复杂度$O(n^3)$</p>\n</li>\n</ol>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Gauss</span><span class=\"params\">(matrix &amp;A)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=A.n;i++)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=i;j&lt;=A.m;j++)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(<span class=\"built_in\">fabs</span>(A.a[j][i]))&#123;<span class=\"built_in\">swap</span>(A.a[j],A.a[i]);<span class=\"keyword\">break</span>;&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=i+<span class=\"number\">1</span>;j&lt;=A.m;j++)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(<span class=\"built_in\">fabs</span>(A.a[i][i])&lt;eps)<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\t<span class=\"type\">double</span> f=A.a[j][i]/A.a[i][i];</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> k=i;k&lt;=A.n;k++)A.a[j][k]-=f*A.a[i][k];</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol>\n<li><p>行最简式</p>\n<p>$ \\begin{bmatrix} a &amp;  0 &amp;0 \\\\  0&amp;  a &amp;0 \\\\0&amp;  0 &amp;a\\end{bmatrix} $</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$代码如下，在化成行阶梯式之后，再化成行最简式，复杂度$O(n^3)$</p>\n</li>\n</ol>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Gauss</span><span class=\"params\">(matrix &amp;A)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=A.n;i++)&#123;</span><br><span class=\"line\"> \t\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=i;j&lt;=A.m;j++)</span><br><span class=\"line\"> \t\t<span class=\"keyword\">if</span>(<span class=\"built_in\">fabs</span>(A.a[j][i]))&#123;<span class=\"built_in\">swap</span>(A.a[j],A.a[i]);<span class=\"keyword\">break</span>;&#125;</span><br><span class=\"line\"> \t\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=i+<span class=\"number\">1</span>;j&lt;=A.m;j++)&#123;</span><br><span class=\"line\"> \t\t\t<span class=\"keyword\">if</span>(<span class=\"built_in\">fabs</span>(A.a[i][i])&lt;eps)<span class=\"keyword\">continue</span>;</span><br><span class=\"line\"> \t\t\t<span class=\"type\">double</span> f=A.a[j][i]/A.a[i][i];</span><br><span class=\"line\">      <span class=\"keyword\">for</span>(<span class=\"type\">int</span> k=i;k&lt;=A.n;k++)A.a[j][k]-=f*A.a[i][k];</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=A.n;i&gt;=<span class=\"number\">1</span>;i--)</span><br><span class=\"line\"> \t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=i<span class=\"number\">-1</span>;j&gt;=<span class=\"number\">1</span>;j--)&#123;</span><br><span class=\"line\"> \t\t<span class=\"keyword\">if</span>(<span class=\"built_in\">fabs</span>(A.a[j][i])&lt;eps)<span class=\"keyword\">continue</span>;</span><br><span class=\"line\"> \t\t<span class=\"type\">double</span> f=-A.a[i][i]/A.a[j][i];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> k=j;k&lt;=A.n;k++)</span><br><span class=\"line\">    (A.a[j][k]*=f)+=A.a[i][k];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"矩阵的秩和行列式的值\"><a href=\"#矩阵的秩和行列式的值\" class=\"headerlink\" title=\"矩阵的秩和行列式的值\"></a>矩阵的秩和行列式的值</h2><ol>\n<li>矩阵的秩</li>\n</ol>\n<p>$\\ \\ \\ \\ \\ \\ \\,$矩阵的秩是A的线性独立的纵（横）列的极大数目，感性地理解，就是在线性方程里的非自由元数目，也就是有用的为多少，我们可以在高斯消元的同时，来求矩阵的秩。</p>\n<p>$\\ \\ \\ \\ \\ \\ \\ \\,$也就是统计行阶梯式的对角线上，不为 $0$ 的数目。</p>\n<ol>\n<li>行列式的值</li>\n</ol>\n<p>$\\ \\ \\ \\ \\ \\ \\,$行列式虽然与矩阵不同，但是也可以用矩阵表示，暴力求行列式的值复杂度太高，但是我们可以高斯消元过后再求。</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$就是行阶梯式的对角线的乘积。</p>\n<h2 id=\"矩阵乘法\"><a href=\"#矩阵乘法\" class=\"headerlink\" title=\"矩阵乘法\"></a>矩阵乘法</h2><p>$\\ \\ \\ \\ \\ \\ \\,$那么对于矩阵之间的乘法 $B\\times A$，我们这样定义：</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$首先，我们需要确定，$B$ 的列数等于$A$ 的行数，既$m_A=n_B$。</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$令$S_{(i,j)}=\\sum_{k=1}^{m_A}a_{(k,j)}\\times b_{(i,k)}$，那么有：</p>\n<p>$B\\times A=\\begin{bmatrix} S_{(1,1)} &amp;  S_{(1,2)} &amp;\\cdots &amp;S_{(1,n_A)} \\\\  S_{(2,1)}&amp;  S_{(2,2)} &amp;\\cdots &amp;S_{(2,n_A)} \\\\\\vdots &amp;\\vdots &amp;\\ddots &amp;\\vdots\\\\  S_{(m_B,1)}&amp;  S_{(m_B,2)} &amp;\\cdots &amp;S_{(m_B,n_A)}  \\end{bmatrix} $</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$显然是一定满足结合律，不一定满足交换律的，复杂度为$O(n^3)$，直接模拟的，代码如下：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">inline</span> matrix <span class=\"keyword\">operator</span> *(<span class=\"type\">const</span> matrix &amp;a,<span class=\"type\">const</span> matrix &amp;b)&#123;</span><br><span class=\"line\">\tmatrix ret;ret.n=a.n;ret.m=b.m;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=a.n;i++)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;=b.m;j++)&#123;</span><br><span class=\"line\">\t  ret.a[i][j]=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> k=<span class=\"number\">1</span>;k&lt;=a.m;k++)</span><br><span class=\"line\">\t  ret.a[i][j]+=a.a[i][k]*b.a[k][j];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"矩阵逆元\"><a href=\"#矩阵逆元\" class=\"headerlink\" title=\"矩阵逆元\"></a>矩阵逆元</h2><p>$\\ \\ \\ \\ \\ \\ \\,$有矩阵乘法，那么就会存在单位元，那么就自然会有逆元的存在。</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$单位矩阵，既对角线上面都是 $1$，其余都是 $0$ 的矩阵：</p>\n<p>$ I=\\begin{bmatrix} 1 &amp;  0 &amp;\\cdots &amp;0 \\\\  0&amp;  1 &amp;\\cdots &amp;0 \\\\\\vdots &amp;\\vdots &amp;\\ddots &amp;\\vdots\\\\  0&amp;  0 &amp;\\cdots &amp;1  \\end{bmatrix} $</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$根据矩阵乘法的定义，很容易知道$A\\times I=A$。</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$那么对于矩阵$A$，若是$A\\times A’=I$，我们就称 $A’$ 为 $A$ 的逆矩阵。</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$对于一个矩阵$A$，肯定可以通过一些行与行之间的加减，或者乘一个常数，既高斯消元，变成 $I$。那么我们令$B=I$，同时和$A$做高斯消元，那么当$A=I$时，$B=A’$了。</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$模板如下，返回$0$是无逆元情况：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">Inv</span><span class=\"params\">(matrix A,matrix &amp;B)</span></span>&#123;</span><br><span class=\"line\">\tB.n=A.n;B.m=A.m;</span><br><span class=\"line\">\t<span class=\"built_in\">memset</span>(B.a,<span class=\"number\">0</span>,<span class=\"built_in\">sizeof</span>(B.a));</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=A.n;i++)B.a[i][i]=<span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=A.n;i++)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=i;j&lt;=A.n;j++)</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(A.a[j][i])&#123;</span><br><span class=\"line\">      <span class=\"built_in\">swap</span>(A.a[i],A.a[j]);</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">swap</span>(B.a[i],B.a[j]);</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!A.a[i][i])<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">long</span> <span class=\"type\">long</span> r=<span class=\"built_in\">inv</span>(A.a[i][i]);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=i;j&lt;=A.n;j++)A.a[i][j]=A.a[i][j]*r%mod;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;=A.n;j++)B.a[i][j]=B.a[i][j]*r%mod;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;=A.n;j++)</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(j!=i)&#123;</span><br><span class=\"line\">      <span class=\"type\">long</span> <span class=\"type\">long</span> f=A.a[j][i];</span><br><span class=\"line\">      <span class=\"keyword\">for</span>(<span class=\"type\">int</span> k=i;k&lt;=A.n;k++)</span><br><span class=\"line\">      A.a[j][k]=(A.a[j][k]-f*A.a[i][k]%mod+mod)%mod;</span><br><span class=\"line\">      <span class=\"keyword\">for</span>(<span class=\"type\">int</span> k=<span class=\"number\">1</span>;k&lt;=A.n;k++)</span><br><span class=\"line\">      B.a[j][k]=(B.a[j][k]-f*B.a[i][k]%mod+mod)%mod;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>$\\ \\ \\ \\ \\ \\ \\ \\,$关于OI中常见的线性代数矩阵问题的复习笔记：</p>","more":"<p>$\\ \\ \\ \\ \\ \\ \\,$对于一个 $n\\times m$ 的矩阵 $A$，我们这样定义：</p>\n<p>$ A=\\begin{bmatrix} a_{(1,1)} &amp;  a_{(1,2)} &amp;\\cdots &amp;a_{(1,n)} \\\\  a_{(2,1)}&amp;  a_{(2,2)} &amp;\\cdots &amp;a_{(2,n)} \\\\\\vdots &amp;\\vdots &amp;\\ddots &amp;\\vdots\\\\  a_{(m,1)}&amp;  a_{(m,2)} &amp;\\cdots &amp;a_{(m,n)}  \\end{bmatrix} $</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">matrix</span>&#123;\t</span><br><span class=\"line\">\t<span class=\"type\">int</span> n,m;</span><br><span class=\"line\">\t<span class=\"type\">double</span> a[N][N];</span><br><span class=\"line\">&#125;A;</span><br></pre></td></tr></table></figure>\n<h2 id=\"高斯消元\"><a href=\"#高斯消元\" class=\"headerlink\" title=\"高斯消元\"></a>高斯消元</h2><p>$\\ \\ \\ \\ \\ \\ \\,$回忆初中学的多元一次方程（线性方程），我们可以把它当做一个矩阵，然后等号的后面为 $n\\times 1$ 的增广矩阵。</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$我们解答的过程，就是用方程之间的加减，或者乘一个常数，来消去一些未知数，直到可以直接解出答案。这个消元过程，就是高斯消元。</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$变换到矩阵上面，就是通过一些行与行之间的加减，或者乘一个常数，来使得一些位置的值变为 $0$ 。</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$我们一般会画成下面两种形态：</p>\n<ol>\n<li><p>行阶梯式</p>\n<p>$ \\begin{bmatrix} a &amp;  a &amp;a \\\\  0&amp;  a &amp;a \\\\0&amp;  0 &amp;a  \\end{bmatrix} $</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$代码如下，复杂度$O(n^3)$</p>\n</li>\n</ol>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Gauss</span><span class=\"params\">(matrix &amp;A)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=A.n;i++)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=i;j&lt;=A.m;j++)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(<span class=\"built_in\">fabs</span>(A.a[j][i]))&#123;<span class=\"built_in\">swap</span>(A.a[j],A.a[i]);<span class=\"keyword\">break</span>;&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=i+<span class=\"number\">1</span>;j&lt;=A.m;j++)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(<span class=\"built_in\">fabs</span>(A.a[i][i])&lt;eps)<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\t<span class=\"type\">double</span> f=A.a[j][i]/A.a[i][i];</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> k=i;k&lt;=A.n;k++)A.a[j][k]-=f*A.a[i][k];</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol>\n<li><p>行最简式</p>\n<p>$ \\begin{bmatrix} a &amp;  0 &amp;0 \\\\  0&amp;  a &amp;0 \\\\0&amp;  0 &amp;a\\end{bmatrix} $</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$代码如下，在化成行阶梯式之后，再化成行最简式，复杂度$O(n^3)$</p>\n</li>\n</ol>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Gauss</span><span class=\"params\">(matrix &amp;A)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=A.n;i++)&#123;</span><br><span class=\"line\"> \t\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=i;j&lt;=A.m;j++)</span><br><span class=\"line\"> \t\t<span class=\"keyword\">if</span>(<span class=\"built_in\">fabs</span>(A.a[j][i]))&#123;<span class=\"built_in\">swap</span>(A.a[j],A.a[i]);<span class=\"keyword\">break</span>;&#125;</span><br><span class=\"line\"> \t\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=i+<span class=\"number\">1</span>;j&lt;=A.m;j++)&#123;</span><br><span class=\"line\"> \t\t\t<span class=\"keyword\">if</span>(<span class=\"built_in\">fabs</span>(A.a[i][i])&lt;eps)<span class=\"keyword\">continue</span>;</span><br><span class=\"line\"> \t\t\t<span class=\"type\">double</span> f=A.a[j][i]/A.a[i][i];</span><br><span class=\"line\">      <span class=\"keyword\">for</span>(<span class=\"type\">int</span> k=i;k&lt;=A.n;k++)A.a[j][k]-=f*A.a[i][k];</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=A.n;i&gt;=<span class=\"number\">1</span>;i--)</span><br><span class=\"line\"> \t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=i<span class=\"number\">-1</span>;j&gt;=<span class=\"number\">1</span>;j--)&#123;</span><br><span class=\"line\"> \t\t<span class=\"keyword\">if</span>(<span class=\"built_in\">fabs</span>(A.a[j][i])&lt;eps)<span class=\"keyword\">continue</span>;</span><br><span class=\"line\"> \t\t<span class=\"type\">double</span> f=-A.a[i][i]/A.a[j][i];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> k=j;k&lt;=A.n;k++)</span><br><span class=\"line\">    (A.a[j][k]*=f)+=A.a[i][k];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"矩阵的秩和行列式的值\"><a href=\"#矩阵的秩和行列式的值\" class=\"headerlink\" title=\"矩阵的秩和行列式的值\"></a>矩阵的秩和行列式的值</h2><ol>\n<li>矩阵的秩</li>\n</ol>\n<p>$\\ \\ \\ \\ \\ \\ \\,$矩阵的秩是A的线性独立的纵（横）列的极大数目，感性地理解，就是在线性方程里的非自由元数目，也就是有用的为多少，我们可以在高斯消元的同时，来求矩阵的秩。</p>\n<p>$\\ \\ \\ \\ \\ \\ \\ \\,$也就是统计行阶梯式的对角线上，不为 $0$ 的数目。</p>\n<ol>\n<li>行列式的值</li>\n</ol>\n<p>$\\ \\ \\ \\ \\ \\ \\,$行列式虽然与矩阵不同，但是也可以用矩阵表示，暴力求行列式的值复杂度太高，但是我们可以高斯消元过后再求。</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$就是行阶梯式的对角线的乘积。</p>\n<h2 id=\"矩阵乘法\"><a href=\"#矩阵乘法\" class=\"headerlink\" title=\"矩阵乘法\"></a>矩阵乘法</h2><p>$\\ \\ \\ \\ \\ \\ \\,$那么对于矩阵之间的乘法 $B\\times A$，我们这样定义：</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$首先，我们需要确定，$B$ 的列数等于$A$ 的行数，既$m_A=n_B$。</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$令$S_{(i,j)}=\\sum_{k=1}^{m_A}a_{(k,j)}\\times b_{(i,k)}$，那么有：</p>\n<p>$B\\times A=\\begin{bmatrix} S_{(1,1)} &amp;  S_{(1,2)} &amp;\\cdots &amp;S_{(1,n_A)} \\\\  S_{(2,1)}&amp;  S_{(2,2)} &amp;\\cdots &amp;S_{(2,n_A)} \\\\\\vdots &amp;\\vdots &amp;\\ddots &amp;\\vdots\\\\  S_{(m_B,1)}&amp;  S_{(m_B,2)} &amp;\\cdots &amp;S_{(m_B,n_A)}  \\end{bmatrix} $</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$显然是一定满足结合律，不一定满足交换律的，复杂度为$O(n^3)$，直接模拟的，代码如下：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">inline</span> matrix <span class=\"keyword\">operator</span> *(<span class=\"type\">const</span> matrix &amp;a,<span class=\"type\">const</span> matrix &amp;b)&#123;</span><br><span class=\"line\">\tmatrix ret;ret.n=a.n;ret.m=b.m;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=a.n;i++)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;=b.m;j++)&#123;</span><br><span class=\"line\">\t  ret.a[i][j]=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> k=<span class=\"number\">1</span>;k&lt;=a.m;k++)</span><br><span class=\"line\">\t  ret.a[i][j]+=a.a[i][k]*b.a[k][j];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"矩阵逆元\"><a href=\"#矩阵逆元\" class=\"headerlink\" title=\"矩阵逆元\"></a>矩阵逆元</h2><p>$\\ \\ \\ \\ \\ \\ \\,$有矩阵乘法，那么就会存在单位元，那么就自然会有逆元的存在。</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$单位矩阵，既对角线上面都是 $1$，其余都是 $0$ 的矩阵：</p>\n<p>$ I=\\begin{bmatrix} 1 &amp;  0 &amp;\\cdots &amp;0 \\\\  0&amp;  1 &amp;\\cdots &amp;0 \\\\\\vdots &amp;\\vdots &amp;\\ddots &amp;\\vdots\\\\  0&amp;  0 &amp;\\cdots &amp;1  \\end{bmatrix} $</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$根据矩阵乘法的定义，很容易知道$A\\times I=A$。</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$那么对于矩阵$A$，若是$A\\times A’=I$，我们就称 $A’$ 为 $A$ 的逆矩阵。</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$对于一个矩阵$A$，肯定可以通过一些行与行之间的加减，或者乘一个常数，既高斯消元，变成 $I$。那么我们令$B=I$，同时和$A$做高斯消元，那么当$A=I$时，$B=A’$了。</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$模板如下，返回$0$是无逆元情况：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">Inv</span><span class=\"params\">(matrix A,matrix &amp;B)</span></span>&#123;</span><br><span class=\"line\">\tB.n=A.n;B.m=A.m;</span><br><span class=\"line\">\t<span class=\"built_in\">memset</span>(B.a,<span class=\"number\">0</span>,<span class=\"built_in\">sizeof</span>(B.a));</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=A.n;i++)B.a[i][i]=<span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=A.n;i++)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=i;j&lt;=A.n;j++)</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(A.a[j][i])&#123;</span><br><span class=\"line\">      <span class=\"built_in\">swap</span>(A.a[i],A.a[j]);</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">swap</span>(B.a[i],B.a[j]);</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!A.a[i][i])<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">long</span> <span class=\"type\">long</span> r=<span class=\"built_in\">inv</span>(A.a[i][i]);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=i;j&lt;=A.n;j++)A.a[i][j]=A.a[i][j]*r%mod;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;=A.n;j++)B.a[i][j]=B.a[i][j]*r%mod;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;=A.n;j++)</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(j!=i)&#123;</span><br><span class=\"line\">      <span class=\"type\">long</span> <span class=\"type\">long</span> f=A.a[j][i];</span><br><span class=\"line\">      <span class=\"keyword\">for</span>(<span class=\"type\">int</span> k=i;k&lt;=A.n;k++)</span><br><span class=\"line\">      A.a[j][k]=(A.a[j][k]-f*A.a[i][k]%mod+mod)%mod;</span><br><span class=\"line\">      <span class=\"keyword\">for</span>(<span class=\"type\">int</span> k=<span class=\"number\">1</span>;k&lt;=A.n;k++)</span><br><span class=\"line\">      B.a[j][k]=(B.a[j][k]-f*B.a[i][k]%mod+mod)%mod;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"Codeforces Round #536 (Div. 2)【己亥年农历新年赛】简略题解","date":"2019-02-15T13:37:26.000Z","mathjax":true,"_content":"\n## [【题目地址】](https://codeforces.com/contest/1106)\n---\n\n## 写在前面\n\n$\\ \\ \\ \\ \\ \\ \\,$这场比赛是wc2019回家那天晚上举办的，从8点到10点刚好在动车上，饥寒交迫，还拉肚子（吃不惯粤菜），就没有参加，是后面写的。\n\n$\\ \\ \\ \\ \\ \\ \\,$这套题在洛谷上面五颜六色的，很有意思啊（除了没有红的），题目也算可做，感觉很过年很快乐呢（~~嘤嘤~~\n\n<!-- more -->\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190215201821828.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzk3Mzk2Ng==,size_16,color_FFFFFF,t_70)\n\n\n---\n\n## [A. Lunar New Year and Cross Counting](https://codeforces.com/contest/1106/problem/A)\n$\\ \\ \\ \\ \\ \\ \\,$模拟？暴力？可以不解释吗……\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190215202145632.jpg)\n\n``` cpp\n#include<algorithm>\n#include<iostream>\n#include<cstdlib>\n#include<cstring>\n#include<cctype>\n#include<cstdio>\n#include<vector>\n#include<string>\n#include<queue>\n#include<stack>\n#include<cmath>\n#include<map>\n#include<set>\nusing namespace std;\nconst int inf=0x7fffffff;\nconst double eps=1e-10;\nconst double pi=acos(-1.0);\n//char buf[1<<15],*S=buf,*T=buf;\n//char getch(){return S==T&&(T=(S=buf)+fread(buf,1,1<<15,stdin),S==T)?0:*S++;}\ninline int read(){\n\tint x=0,f=1;char ch;ch=getchar();\n\twhile(ch<'0'||ch>'9'){if(ch=='-') f=0;ch=getchar();}\n\twhile(ch>='0'&&ch<='9'){x=(x<<1)+(x<<3)+(ch&15);ch=getchar();}\n\tif(f)return x;else return -x;\n}\nconst int N=510;\nint n;\nchar mp[N][N];\nint check(int x,int y){\n\tif(x+2>n||y+2>n)return 0;\n\tif(mp[x][y]!='X')return 0;if(mp[x][y+2]!='X')return 0;\n\tif(mp[x+1][y+1]!='X')return 0;\n\tif(mp[x+2][y]!='X')return 0;if(mp[x+2][y+2]!='X')return 0;\n\treturn 1;\n}\nint main()\n{\n\tn=read();\n\tfor(int i=1;i<=n;i++)scanf(\"%s\",mp[i]+1);\n\tint ans=0;\n\tfor(int i=1;i<=n;i++)\n\tfor(int j=1;j<=n;j++)\n\tans+=check(i,j);\n\tprintf(\"%d\\n\",ans);\n\treturn 0;\n}\n\n```\n\n## [B. Lunar New Year and Food Ordering](https://codeforces.com/contest/1106/problem/B)\n\n$\\ \\ \\ \\ \\ \\ \\,$这个也是模拟吧，我们把菜品排个序，用一个指针跳就好了吧……（敷衍\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190215203257557.jpg)\n``` cpp\n#include<algorithm>\n#include<iostream>\n#include<cstdlib>\n#include<cstring>\n#include<cctype>\n#include<cstdio>\n#include<vector>\n#include<string>\n#include<queue>\n#include<stack>\n#include<cmath>\n#include<map>\n#include<set>\nusing namespace std;\nconst int inf=0x7fffffff;\nconst double eps=1e-10;\nconst double pi=acos(-1.0);\n//char buf[1<<15],*S=buf,*T=buf;\n//char getch(){return S==T&&(T=(S=buf)+fread(buf,1,1<<15,stdin),S==T)?0:*S++;}\ninline int read(){\n\tint x=0,f=1;char ch;ch=getchar();\n\twhile(ch<'0'||ch>'9'){if(ch=='-') f=0;ch=getchar();}\n\twhile(ch>='0'&&ch<='9'){x=(x<<1)+(x<<3)+(ch&15);ch=getchar();}\n\tif(f)return x;else return -x;\n}\nconst int N=1e5+10;\nint n,m,z=1;\nint rk[N];\nstruct node{int a,c,id;}di[N];\ninline bool operator <(const node &a,const node &b)\n{return a.c<b.c||(a.c==b.c&&a.id<b.id);}\nint main()\n{\n\tn=read();m=read();\n\tfor(int i=1;i<=n;i++)di[i].a=read();\n\tfor(int i=1;i<=n;i++)di[i].c=read();\n\tfor(int i=1;i<=n;i++)di[i].id=i;\n\tsort(di+1,di+n+1);\n\tfor(int i=1;i<=n;i++)rk[di[i].id]=i;\n\twhile(m--){\n\t\tint kind=read(),cnt=read();\n\t\tif(di[rk[kind]].a>=cnt){\n\t\t\tdi[rk[kind]].a-=cnt;\n\t\t\tprintf(\"%lld\\n\",1ll*di[rk[kind]].c*cnt);\n\t\t\tcontinue;\n\t\t}\n\t\tlong long ls=0ll;\n\t\tif(di[rk[kind]].a){\n\t\t\tcnt-=di[rk[kind]].a;\n\t\t\tls+=1ll*di[rk[kind]].c*di[rk[kind]].a;\n\t\t\tdi[rk[kind]].a=0;\n\t\t}\n\t\twhile(cnt){\n\t\t\tif((!di[z].a)&&z<=n)z++;\n\t\t\tif(z>n){ls=0;break;}\n\t\t\telse{\n\t\t\t\tif(di[z].a>=cnt){\n\t\t\t\t\tdi[z].a-=cnt;\n\t\t\t\t\tls+=1ll*di[z].c*cnt;\n\t\t\t\t\tcnt=0;\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tcnt-=di[z].a;\n\t\t\t\t\tls+=1ll*di[z].c*di[z].a;\n\t\t\t\t\tdi[z].a=0;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tprintf(\"%lld\\n\",ls);\n\t}\n\treturn 0;\n}\n\n```\n\n## [C. Lunar New Year and Number Division](https://codeforces.com/contest/1106/problem/C)\n$\\ \\ \\ \\ \\ \\ \\,$根据二项式定理，当然是两个两个分为一组最合算了（$n$ 范围明示\n\n$\\ \\ \\ \\ \\ \\ \\,$我们展开可得：\n\n$(a+b)^2=a^2+b^2+2ab$\n\n$\\ \\ \\ \\ \\ \\ \\,$那么我们就想要两个成积较小的分一组最好，就是排序过后，最小的和最大的分一组好了呀。\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190215204003943.jpg)\n``` cpp\n#include<algorithm>\n#include<iostream>\n#include<cstdlib>\n#include<cstring>\n#include<cctype>\n#include<cstdio>\n#include<vector>\n#include<string>\n#include<queue>\n#include<stack>\n#include<cmath>\n#include<map>\n#include<set>\nusing namespace std;\nconst int inf=0x7fffffff;\nconst double eps=1e-10;\nconst double pi=acos(-1.0);\n//char buf[1<<15],*S=buf,*T=buf;\n//char getch(){return S==T&&(T=(S=buf)+fread(buf,1,1<<15,stdin),S==T)?0:*S++;}\ninline int read(){\n\tint x=0,f=1;char ch;ch=getchar();\n\twhile(ch<'0'||ch>'9'){if(ch=='-') f=0;ch=getchar();}\n\twhile(ch>='0'&&ch<='9'){x=(x<<1)+(x<<3)+(ch&15);ch=getchar();}\n\tif(f)return x;else return -x;\n}\nconst int N=3e5+10;\nlong long ans;\nint a[N],n;\nint main()\n{\n\tn=read();\n\tfor(int i=1;i<=n;i++)a[i]=read();\n\tsort(a+1,a+n+1);\n\tfor(int i=1,j=n;i<=j;i++,j--)\n\tans+=1ll*(a[i]+a[j])*(a[i]+a[j]);\n\tprintf(\"%lld\\n\",ans);\n\treturn 0;\n}\n\n```\n\n## [D. Lunar New Year and a Wander](https://codeforces.com/contest/1106/problem/D)\n$\\ \\ \\ \\ \\ \\ \\,$BFS……\n\n$\\ \\ \\ \\ \\ \\ \\,$并不是，其实也差不多吧，当前可以走到的点，我们把他放进堆里面，然后每次走堆里最小的这个样子。\n\n$\\ \\ \\ \\ \\ \\ \\,$（因为题意没看懂翻车了几次\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190215204454189.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzk3Mzk2Ng==,size_16,color_FFFFFF,t_70)\n``` cpp\n#include<algorithm>\n#include<iostream>\n#include<cstdlib>\n#include<cstring>\n#include<cctype>\n#include<cstdio>\n#include<vector>\n#include<string>\n#include<queue>\n#include<stack>\n#include<cmath>\n#include<map>\n#include<set>\nusing namespace std;\nconst int inf=0x7fffffff;\nconst double eps=1e-10;\nconst double pi=acos(-1.0);\n//char buf[1<<15],*S=buf,*T=buf;\n//char getch(){return S==T&&(T=(S=buf)+fread(buf,1,1<<15,stdin),S==T)?0:*S++;}\ninline int read(){\n\tint x=0,f=1;char ch;ch=getchar();\n\twhile(ch<'0'||ch>'9'){if(ch=='-') f=0;ch=getchar();}\n\twhile(ch>='0'&&ch<='9'){x=(x<<1)+(x<<3)+(ch&15);ch=getchar();}\n\tif(f)return x;else return -x;\n}\nconst int N=1e5+10;\nint n,m;\nbool used[N];\nvector<int> G[N];\npriority_queue<int> Q;\nint main()\n{\n\tn=read();m=read();\n\twhile(m--){\n\t\tint a=read(),b=read();\n\t\tG[a].push_back(b);\n\t\tG[b].push_back(a);\n\t}\n\tfor(int i=1;i<=n;i++)\n\tsort(G[i].begin(),G[i].end());\n\tQ.push(-1);used[1]=1;\n\twhile(!Q.empty()){\n\t\tint u=-Q.top();Q.pop();\n\t\tprintf(\"%d \",u);\n\t\tfor(auto v:G[u])if(!used[v])\n\t\tQ.push(-v),used[v]=1;\n\t}\n\treturn 0;\n}\n\n```\n\n## [E. Lunar New Year and Red Envelopes](https://codeforces.com/contest/1106/problem/E)\n\n$\\ \\ \\ \\ \\ \\ \\,$后面两道题就开始有讲的意思了，反正这道题我并没有独自写出来（我怀疑题都没有怎么读懂（我好菜呀\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190215204926766.jpg)\n\n$\\ \\ \\ \\ \\ \\ \\,$题目做法是DP，我们定义$f_{i,j}$，表示被打扰了 $i$ 次，现在时间是 $j$ 的最小收益。转移方程呢就是：\n\n$f_{i,j+1}=f_{i-1,j}$\n\n$f_{i,a_l.d+1}=f_{i-1,k}+a_l.w$\n\n$\\ \\ \\ \\ \\ \\ \\,$我们预处理数当前时间用那个红包好，就可以降低复杂度到$O(nm)$，具体来说，就是哪个钱多哪个好，钱一样多的话就是哪个冷却时间长哪个好。具体操作看的[**这里**](https://blog.csdn.net/g21glf/article/details/86743023)，其实很多地方没有必要这么麻烦，但是自己确实是太菜了，没有自己独立做出来。\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190215210921828.jpg)\n\n``` cpp\n#include<algorithm>\n#include<iostream>\n#include<cstdlib>\n#include<cstring>\n#include<cctype>\n#include<cstdio>\n#include<vector>\n#include<string>\n#include<queue>\n#include<stack>\n#include<cmath>\n#include<map>\n#include<set>\nusing namespace std;\nconst int inf=0x7fffffff;\nconst double eps=1e-10;\nconst double pi=acos(-1.0);\n//char buf[1<<15],*S=buf,*T=buf;\n//char getch(){return S==T&&(T=(S=buf)+fread(buf,1,1<<15,stdin),S==T)?0:*S++;}\ninline int read(){\n\tint x=0,f=1;char ch;ch=getchar();\n\twhile(ch<'0'||ch>'9'){if(ch=='-') f=0;ch=getchar();}\n\twhile(ch>='0'&&ch<='9'){x=(x<<1)+(x<<3)+(ch&15);ch=getchar();}\n\tif(f)return x;else return -x;\n}\nconst int N=100010;\nint n,m,k;\nstruct node{int d,w,t;}sta[N];\ninline bool operator <(const node &a,const node &b)\n{return a.w>b.w||(a.w==b.w&&a.d>b.d);}\nvector<node> e[N];\nmap<node,int> mp;\nvoid Insert(node a){\n\tif(mp.count(a))mp[a]++;\n\telse mp[a]=1;\n}\nvoid Delete(node a){\n\tmp[a]--;\n\tif(!mp[a])mp.erase(a);\n}\nlong long f[2][N],ans=(1ll<<62);\nint main()\n{\n\tn=read();m=read();k=read();\n\tfor(int i=1,s,t,d,w;i<=k;i++){\n\t\ts=read(),t=read(),d=read(),w=read();\n\t\te[s].push_back((node){d,w,1});\n\t\te[t+1].push_back((node){d,w,-1});\n\t}\n\tfor(int i=1;i<=n;i++){\n\t\tfor(auto p:e[i])\n\t\t\tif(~p.t)Insert(p);\n\t\t\telse Delete(p);\n\t\tif(mp.size())sta[i]=(*mp.begin()).first;\n\t\telse sta[i]=(node){i,0,0};\n\t}\n\tmemset(f,0x3f,sizeof(f));f[0][1]=0;\n\tint cas=1;\n\tfor(int j=0;j<=m;j++){\n\t\tmemset(f[cas],0x3f,sizeof(f[cas]));\n\t\tfor(int i=1;i<=n;i++){\n\t\t\tf[cas][i+1]=min(f[cas][i+1],f[cas^1][i]);\n\t\t\tf[cas^1][sta[i].d+1]=min(f[cas^1][sta[i].d+1],f[cas^1][i]+sta[i].w);\n\t\t}\n\t\tans=min(ans,f[cas^1][n+1]);cas^=1;\n\t}\n\tprintf(\"%lld\\n\",ans);\n\treturn 0;\n}\n\n```\n\n## [F. Lunar New Year and a Recursive Sequence](https://codeforces.com/contest/1106/problem/F)\n\n$\\ \\ \\ \\ \\ \\ \\,$感觉这道题操作比E题麻烦一点，但是确实比E题好想呢。\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190215213423624.jpg)\n\n$\\ \\ \\ \\ \\ \\ \\,$看到是一个有 $k$ 项的递推式，马上就可以想到矩乘，而前 $k-1$ 项已经确定了是 $1$，我们不妨设要求的 $f_k$ 为 $a$ 。根据他给的式子啊，我们就容易发现，这个递推式的每一项都应该是 $a^x$ 的形式，知道第 $n$ 项是 $a$ 的多少次方就要好处理一些了。\n\n$\\ \\ \\ \\ \\ \\ \\,$这样子稍微观察一下矩阵乘法就定义好了：\n\n$\\ \\ \\ \\ \\ \\ \\,$转移矩阵：$A=$\n\n$\n\\begin{bmatrix}0&0&\\cdots&0&b_k\\\\ 1&0&\\cdots&0&b_{k-1}\\\\0&1&\\cdots&0&b_{k-2}\\\\\\vdots&\\vdots&\\ddots&\\vdots&\\vdots\\\\0&0&\\cdots&1&b_1\\end{bmatrix}\n$\n\n$\\ \\ \\ \\ \\ \\ \\,$初始矩阵：$S=$\n\n$\n\\begin{bmatrix}0,0,\\cdots,0,1\\end{bmatrix}\n$\n\n$\\ \\ \\ \\ \\ \\ \\,$那么第 $n$ 项的指数，就是 $S\\cdot A^{n-k}$ 的第 $k$ 项，矩阵乘法取模的时候，根据欧拉定理，因为模数是素数，直接每次模 $mod-1$ 就好了。\n\n$\\ \\ \\ \\ \\ \\ \\,$现在问题是，我们知道 $x$，$m$，$mod$，$a^x\\%mod=m$，如何求 $a$ 呢？\n\n$\\ \\ \\ \\ \\ \\ \\,$好在他给我们的模数很特殊，我们很清楚他的原根为 $3$ ，那么我们可以重新把 $a$ 定义为 $3^s\\%mod$，所以原式化为:\n\n$3^{sx}\\%mod=m$\n\n$\\ \\ \\ \\ \\ \\ \\,$我们可以很轻松用 BSGS 算法知道 $sx\\%(mod-1)$的取值，而我们又知道 $x\\%(mod-1)$ 的取值，扩展GCD处理一下就好咯~\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190215213335919.jpg)\n\n$\\ \\ \\ \\ \\ \\ \\,$然后我们就知道 $s$ 的取值了（也有可能无解），那么答案也就出来了：$f_k=3^s$。\n\n``` cpp\n#include<algorithm>\n#include<iostream>\n#include<cstdlib>\n#include<cstring>\n#include<cctype>\n#include<cstdio>\n#include<vector>\n#include<string>\n#include<queue>\n#include<stack>\n#include<cmath>\n#include<map>\n#include<set>\nusing namespace std;\nconst int inf=0x7fffffff;\nconst double eps=1e-10;\nconst double pi=acos(-1.0);\n//char buf[1<<15],*S=buf,*T=buf;\n//char getch(){return S==T&&(T=(S=buf)+fread(buf,1,1<<15,stdin),S==T)?0:*S++;}\ninline int read(){\n\tint x=0,f=1;char ch;ch=getchar();\n\twhile(ch<'0'||ch>'9'){if(ch=='-') f=0;ch=getchar();}\n\twhile(ch>='0'&&ch<='9'){x=(x<<1)+(x<<3)+(ch&15);ch=getchar();}\n\tif(f)return x;else return -x;\n}\nconst int mod=998244353;\nstruct matrix{\n\tint x,y;\n\tint a[101][101];\n};\nint K,m,n;\nmatrix S,A,T;\nmatrix operator *(matrix m1,matrix m2){\n\tmatrix t;t.x=m1.x;t.y=m2.y;\n\tfor(int i=1;i<=m1.x;i++)\n\tfor(int j=1;j<=m2.y;j++){\n\t  \tt.a[i][j]=0;\n\t  \tfor(int k=1;k<=m1.y;k++)\n\t  \tt.a[i][j]=(1ll*t.a[i][j]+1ll*m1.a[i][k]*m2.a[k][j])%(mod-1);\n\t}\n\treturn t;\n}\nmatrix power(matrix a,int b){\n\tmatrix ans=a;b--;\n\twhile(b){\n\t\tif(b&1ll)ans=ans*a;\n\t\ta=a*a;b>>=1;\n\t}\n\treturn ans;\n}\nint power(int a,int b,int mod){\n\tint ans=1;\n\twhile(b){\n\t\tif(b&1)ans=(1ll*ans*a)%mod;\n\t\ta=(1ll*a*a)%mod;\n\t\tb>>=1;\n\t}\n\treturn ans;\n}\nlong long BSGS(long long a,long long b,long long c){\n  \tmap<int,int>hash;hash.clear();b%=c;\n  \tint t=(int)sqrt(c)+1;\n  \tfor(int j=0;j<t;j++){\n    \tint val=(int)(b*power(a,j,c)%c);\n    \thash[val]=j;\n  \t}\n  \ta=power(a,t,c);\n  \tif(a==0){\n  \t\tif(b==0)return 1;\n    \telse return -1;\n  \t}\n  \tfor(int i=0;i<=t;i++){\n    \tint val=power(a,i,c);\n    \tint j=hash.find(val)==hash.end()?-1:hash[val];\n    \tif(j>=0&&i*t-j>=0)return i*t-j;\n  \t}\n  \treturn -1;\n}\nvoid exgcd(long long a,long long b,long long &d,long long &x,long long &y){\n\tif(!b){d=a;x=1;y=0;return;}\n\texgcd(b,a%b,d,y,x);y-=x*(a/b);\n}\nint main()\n{\n\tK=read();S.x=1;\n\tA.x=A.y=S.y=K;S.a[1][K]=1;\n\tfor(int i=2;i<=K;i++)A.a[i][i-1]=1;\n\tfor(int i=K;i>=1;i--)A.a[i][K]=read();\n\tn=read();m=read();\n\tT=S*power(A,n-K);\n\tlong long t=BSGS(3ll,1ll*m,mod);\n\tlong long g,x,y;\n\texgcd(T.a[1][K],mod-1,g,x,y);\n  \tif(t%g)puts(\"-1\");\n  \telse{\n   \t\tx=(t/g*x%(mod-1)+mod-1)%(mod-1);\n    \tprintf(\"%d\\n\",power(3,x,mod));\n  \t}\n\treturn 0;\n}\n\n```\n\n## 完结撒花\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190215213506253.gif)","source":"_posts/Codeforces-Round-536-Div-2-己亥年农历新年赛-简略题解.md","raw":"---\ntitle: 'Codeforces Round #536 (Div. 2)【己亥年农历新年赛】简略题解'\ndate: 2019-02-15 21:37:26\ncategories:\n- 题解\ntags:\n- OI\n- 修勾勾\n- 暴力模拟\n- 贪心\n- 动态规划\n- 矩阵乘法\n- 数据结构\nmathjax: true\n---\n\n## [【题目地址】](https://codeforces.com/contest/1106)\n---\n\n## 写在前面\n\n$\\ \\ \\ \\ \\ \\ \\,$这场比赛是wc2019回家那天晚上举办的，从8点到10点刚好在动车上，饥寒交迫，还拉肚子（吃不惯粤菜），就没有参加，是后面写的。\n\n$\\ \\ \\ \\ \\ \\ \\,$这套题在洛谷上面五颜六色的，很有意思啊（除了没有红的），题目也算可做，感觉很过年很快乐呢（~~嘤嘤~~\n\n<!-- more -->\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190215201821828.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzk3Mzk2Ng==,size_16,color_FFFFFF,t_70)\n\n\n---\n\n## [A. Lunar New Year and Cross Counting](https://codeforces.com/contest/1106/problem/A)\n$\\ \\ \\ \\ \\ \\ \\,$模拟？暴力？可以不解释吗……\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190215202145632.jpg)\n\n``` cpp\n#include<algorithm>\n#include<iostream>\n#include<cstdlib>\n#include<cstring>\n#include<cctype>\n#include<cstdio>\n#include<vector>\n#include<string>\n#include<queue>\n#include<stack>\n#include<cmath>\n#include<map>\n#include<set>\nusing namespace std;\nconst int inf=0x7fffffff;\nconst double eps=1e-10;\nconst double pi=acos(-1.0);\n//char buf[1<<15],*S=buf,*T=buf;\n//char getch(){return S==T&&(T=(S=buf)+fread(buf,1,1<<15,stdin),S==T)?0:*S++;}\ninline int read(){\n\tint x=0,f=1;char ch;ch=getchar();\n\twhile(ch<'0'||ch>'9'){if(ch=='-') f=0;ch=getchar();}\n\twhile(ch>='0'&&ch<='9'){x=(x<<1)+(x<<3)+(ch&15);ch=getchar();}\n\tif(f)return x;else return -x;\n}\nconst int N=510;\nint n;\nchar mp[N][N];\nint check(int x,int y){\n\tif(x+2>n||y+2>n)return 0;\n\tif(mp[x][y]!='X')return 0;if(mp[x][y+2]!='X')return 0;\n\tif(mp[x+1][y+1]!='X')return 0;\n\tif(mp[x+2][y]!='X')return 0;if(mp[x+2][y+2]!='X')return 0;\n\treturn 1;\n}\nint main()\n{\n\tn=read();\n\tfor(int i=1;i<=n;i++)scanf(\"%s\",mp[i]+1);\n\tint ans=0;\n\tfor(int i=1;i<=n;i++)\n\tfor(int j=1;j<=n;j++)\n\tans+=check(i,j);\n\tprintf(\"%d\\n\",ans);\n\treturn 0;\n}\n\n```\n\n## [B. Lunar New Year and Food Ordering](https://codeforces.com/contest/1106/problem/B)\n\n$\\ \\ \\ \\ \\ \\ \\,$这个也是模拟吧，我们把菜品排个序，用一个指针跳就好了吧……（敷衍\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190215203257557.jpg)\n``` cpp\n#include<algorithm>\n#include<iostream>\n#include<cstdlib>\n#include<cstring>\n#include<cctype>\n#include<cstdio>\n#include<vector>\n#include<string>\n#include<queue>\n#include<stack>\n#include<cmath>\n#include<map>\n#include<set>\nusing namespace std;\nconst int inf=0x7fffffff;\nconst double eps=1e-10;\nconst double pi=acos(-1.0);\n//char buf[1<<15],*S=buf,*T=buf;\n//char getch(){return S==T&&(T=(S=buf)+fread(buf,1,1<<15,stdin),S==T)?0:*S++;}\ninline int read(){\n\tint x=0,f=1;char ch;ch=getchar();\n\twhile(ch<'0'||ch>'9'){if(ch=='-') f=0;ch=getchar();}\n\twhile(ch>='0'&&ch<='9'){x=(x<<1)+(x<<3)+(ch&15);ch=getchar();}\n\tif(f)return x;else return -x;\n}\nconst int N=1e5+10;\nint n,m,z=1;\nint rk[N];\nstruct node{int a,c,id;}di[N];\ninline bool operator <(const node &a,const node &b)\n{return a.c<b.c||(a.c==b.c&&a.id<b.id);}\nint main()\n{\n\tn=read();m=read();\n\tfor(int i=1;i<=n;i++)di[i].a=read();\n\tfor(int i=1;i<=n;i++)di[i].c=read();\n\tfor(int i=1;i<=n;i++)di[i].id=i;\n\tsort(di+1,di+n+1);\n\tfor(int i=1;i<=n;i++)rk[di[i].id]=i;\n\twhile(m--){\n\t\tint kind=read(),cnt=read();\n\t\tif(di[rk[kind]].a>=cnt){\n\t\t\tdi[rk[kind]].a-=cnt;\n\t\t\tprintf(\"%lld\\n\",1ll*di[rk[kind]].c*cnt);\n\t\t\tcontinue;\n\t\t}\n\t\tlong long ls=0ll;\n\t\tif(di[rk[kind]].a){\n\t\t\tcnt-=di[rk[kind]].a;\n\t\t\tls+=1ll*di[rk[kind]].c*di[rk[kind]].a;\n\t\t\tdi[rk[kind]].a=0;\n\t\t}\n\t\twhile(cnt){\n\t\t\tif((!di[z].a)&&z<=n)z++;\n\t\t\tif(z>n){ls=0;break;}\n\t\t\telse{\n\t\t\t\tif(di[z].a>=cnt){\n\t\t\t\t\tdi[z].a-=cnt;\n\t\t\t\t\tls+=1ll*di[z].c*cnt;\n\t\t\t\t\tcnt=0;\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tcnt-=di[z].a;\n\t\t\t\t\tls+=1ll*di[z].c*di[z].a;\n\t\t\t\t\tdi[z].a=0;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tprintf(\"%lld\\n\",ls);\n\t}\n\treturn 0;\n}\n\n```\n\n## [C. Lunar New Year and Number Division](https://codeforces.com/contest/1106/problem/C)\n$\\ \\ \\ \\ \\ \\ \\,$根据二项式定理，当然是两个两个分为一组最合算了（$n$ 范围明示\n\n$\\ \\ \\ \\ \\ \\ \\,$我们展开可得：\n\n$(a+b)^2=a^2+b^2+2ab$\n\n$\\ \\ \\ \\ \\ \\ \\,$那么我们就想要两个成积较小的分一组最好，就是排序过后，最小的和最大的分一组好了呀。\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190215204003943.jpg)\n``` cpp\n#include<algorithm>\n#include<iostream>\n#include<cstdlib>\n#include<cstring>\n#include<cctype>\n#include<cstdio>\n#include<vector>\n#include<string>\n#include<queue>\n#include<stack>\n#include<cmath>\n#include<map>\n#include<set>\nusing namespace std;\nconst int inf=0x7fffffff;\nconst double eps=1e-10;\nconst double pi=acos(-1.0);\n//char buf[1<<15],*S=buf,*T=buf;\n//char getch(){return S==T&&(T=(S=buf)+fread(buf,1,1<<15,stdin),S==T)?0:*S++;}\ninline int read(){\n\tint x=0,f=1;char ch;ch=getchar();\n\twhile(ch<'0'||ch>'9'){if(ch=='-') f=0;ch=getchar();}\n\twhile(ch>='0'&&ch<='9'){x=(x<<1)+(x<<3)+(ch&15);ch=getchar();}\n\tif(f)return x;else return -x;\n}\nconst int N=3e5+10;\nlong long ans;\nint a[N],n;\nint main()\n{\n\tn=read();\n\tfor(int i=1;i<=n;i++)a[i]=read();\n\tsort(a+1,a+n+1);\n\tfor(int i=1,j=n;i<=j;i++,j--)\n\tans+=1ll*(a[i]+a[j])*(a[i]+a[j]);\n\tprintf(\"%lld\\n\",ans);\n\treturn 0;\n}\n\n```\n\n## [D. Lunar New Year and a Wander](https://codeforces.com/contest/1106/problem/D)\n$\\ \\ \\ \\ \\ \\ \\,$BFS……\n\n$\\ \\ \\ \\ \\ \\ \\,$并不是，其实也差不多吧，当前可以走到的点，我们把他放进堆里面，然后每次走堆里最小的这个样子。\n\n$\\ \\ \\ \\ \\ \\ \\,$（因为题意没看懂翻车了几次\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190215204454189.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzk3Mzk2Ng==,size_16,color_FFFFFF,t_70)\n``` cpp\n#include<algorithm>\n#include<iostream>\n#include<cstdlib>\n#include<cstring>\n#include<cctype>\n#include<cstdio>\n#include<vector>\n#include<string>\n#include<queue>\n#include<stack>\n#include<cmath>\n#include<map>\n#include<set>\nusing namespace std;\nconst int inf=0x7fffffff;\nconst double eps=1e-10;\nconst double pi=acos(-1.0);\n//char buf[1<<15],*S=buf,*T=buf;\n//char getch(){return S==T&&(T=(S=buf)+fread(buf,1,1<<15,stdin),S==T)?0:*S++;}\ninline int read(){\n\tint x=0,f=1;char ch;ch=getchar();\n\twhile(ch<'0'||ch>'9'){if(ch=='-') f=0;ch=getchar();}\n\twhile(ch>='0'&&ch<='9'){x=(x<<1)+(x<<3)+(ch&15);ch=getchar();}\n\tif(f)return x;else return -x;\n}\nconst int N=1e5+10;\nint n,m;\nbool used[N];\nvector<int> G[N];\npriority_queue<int> Q;\nint main()\n{\n\tn=read();m=read();\n\twhile(m--){\n\t\tint a=read(),b=read();\n\t\tG[a].push_back(b);\n\t\tG[b].push_back(a);\n\t}\n\tfor(int i=1;i<=n;i++)\n\tsort(G[i].begin(),G[i].end());\n\tQ.push(-1);used[1]=1;\n\twhile(!Q.empty()){\n\t\tint u=-Q.top();Q.pop();\n\t\tprintf(\"%d \",u);\n\t\tfor(auto v:G[u])if(!used[v])\n\t\tQ.push(-v),used[v]=1;\n\t}\n\treturn 0;\n}\n\n```\n\n## [E. Lunar New Year and Red Envelopes](https://codeforces.com/contest/1106/problem/E)\n\n$\\ \\ \\ \\ \\ \\ \\,$后面两道题就开始有讲的意思了，反正这道题我并没有独自写出来（我怀疑题都没有怎么读懂（我好菜呀\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190215204926766.jpg)\n\n$\\ \\ \\ \\ \\ \\ \\,$题目做法是DP，我们定义$f_{i,j}$，表示被打扰了 $i$ 次，现在时间是 $j$ 的最小收益。转移方程呢就是：\n\n$f_{i,j+1}=f_{i-1,j}$\n\n$f_{i,a_l.d+1}=f_{i-1,k}+a_l.w$\n\n$\\ \\ \\ \\ \\ \\ \\,$我们预处理数当前时间用那个红包好，就可以降低复杂度到$O(nm)$，具体来说，就是哪个钱多哪个好，钱一样多的话就是哪个冷却时间长哪个好。具体操作看的[**这里**](https://blog.csdn.net/g21glf/article/details/86743023)，其实很多地方没有必要这么麻烦，但是自己确实是太菜了，没有自己独立做出来。\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190215210921828.jpg)\n\n``` cpp\n#include<algorithm>\n#include<iostream>\n#include<cstdlib>\n#include<cstring>\n#include<cctype>\n#include<cstdio>\n#include<vector>\n#include<string>\n#include<queue>\n#include<stack>\n#include<cmath>\n#include<map>\n#include<set>\nusing namespace std;\nconst int inf=0x7fffffff;\nconst double eps=1e-10;\nconst double pi=acos(-1.0);\n//char buf[1<<15],*S=buf,*T=buf;\n//char getch(){return S==T&&(T=(S=buf)+fread(buf,1,1<<15,stdin),S==T)?0:*S++;}\ninline int read(){\n\tint x=0,f=1;char ch;ch=getchar();\n\twhile(ch<'0'||ch>'9'){if(ch=='-') f=0;ch=getchar();}\n\twhile(ch>='0'&&ch<='9'){x=(x<<1)+(x<<3)+(ch&15);ch=getchar();}\n\tif(f)return x;else return -x;\n}\nconst int N=100010;\nint n,m,k;\nstruct node{int d,w,t;}sta[N];\ninline bool operator <(const node &a,const node &b)\n{return a.w>b.w||(a.w==b.w&&a.d>b.d);}\nvector<node> e[N];\nmap<node,int> mp;\nvoid Insert(node a){\n\tif(mp.count(a))mp[a]++;\n\telse mp[a]=1;\n}\nvoid Delete(node a){\n\tmp[a]--;\n\tif(!mp[a])mp.erase(a);\n}\nlong long f[2][N],ans=(1ll<<62);\nint main()\n{\n\tn=read();m=read();k=read();\n\tfor(int i=1,s,t,d,w;i<=k;i++){\n\t\ts=read(),t=read(),d=read(),w=read();\n\t\te[s].push_back((node){d,w,1});\n\t\te[t+1].push_back((node){d,w,-1});\n\t}\n\tfor(int i=1;i<=n;i++){\n\t\tfor(auto p:e[i])\n\t\t\tif(~p.t)Insert(p);\n\t\t\telse Delete(p);\n\t\tif(mp.size())sta[i]=(*mp.begin()).first;\n\t\telse sta[i]=(node){i,0,0};\n\t}\n\tmemset(f,0x3f,sizeof(f));f[0][1]=0;\n\tint cas=1;\n\tfor(int j=0;j<=m;j++){\n\t\tmemset(f[cas],0x3f,sizeof(f[cas]));\n\t\tfor(int i=1;i<=n;i++){\n\t\t\tf[cas][i+1]=min(f[cas][i+1],f[cas^1][i]);\n\t\t\tf[cas^1][sta[i].d+1]=min(f[cas^1][sta[i].d+1],f[cas^1][i]+sta[i].w);\n\t\t}\n\t\tans=min(ans,f[cas^1][n+1]);cas^=1;\n\t}\n\tprintf(\"%lld\\n\",ans);\n\treturn 0;\n}\n\n```\n\n## [F. Lunar New Year and a Recursive Sequence](https://codeforces.com/contest/1106/problem/F)\n\n$\\ \\ \\ \\ \\ \\ \\,$感觉这道题操作比E题麻烦一点，但是确实比E题好想呢。\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190215213423624.jpg)\n\n$\\ \\ \\ \\ \\ \\ \\,$看到是一个有 $k$ 项的递推式，马上就可以想到矩乘，而前 $k-1$ 项已经确定了是 $1$，我们不妨设要求的 $f_k$ 为 $a$ 。根据他给的式子啊，我们就容易发现，这个递推式的每一项都应该是 $a^x$ 的形式，知道第 $n$ 项是 $a$ 的多少次方就要好处理一些了。\n\n$\\ \\ \\ \\ \\ \\ \\,$这样子稍微观察一下矩阵乘法就定义好了：\n\n$\\ \\ \\ \\ \\ \\ \\,$转移矩阵：$A=$\n\n$\n\\begin{bmatrix}0&0&\\cdots&0&b_k\\\\ 1&0&\\cdots&0&b_{k-1}\\\\0&1&\\cdots&0&b_{k-2}\\\\\\vdots&\\vdots&\\ddots&\\vdots&\\vdots\\\\0&0&\\cdots&1&b_1\\end{bmatrix}\n$\n\n$\\ \\ \\ \\ \\ \\ \\,$初始矩阵：$S=$\n\n$\n\\begin{bmatrix}0,0,\\cdots,0,1\\end{bmatrix}\n$\n\n$\\ \\ \\ \\ \\ \\ \\,$那么第 $n$ 项的指数，就是 $S\\cdot A^{n-k}$ 的第 $k$ 项，矩阵乘法取模的时候，根据欧拉定理，因为模数是素数，直接每次模 $mod-1$ 就好了。\n\n$\\ \\ \\ \\ \\ \\ \\,$现在问题是，我们知道 $x$，$m$，$mod$，$a^x\\%mod=m$，如何求 $a$ 呢？\n\n$\\ \\ \\ \\ \\ \\ \\,$好在他给我们的模数很特殊，我们很清楚他的原根为 $3$ ，那么我们可以重新把 $a$ 定义为 $3^s\\%mod$，所以原式化为:\n\n$3^{sx}\\%mod=m$\n\n$\\ \\ \\ \\ \\ \\ \\,$我们可以很轻松用 BSGS 算法知道 $sx\\%(mod-1)$的取值，而我们又知道 $x\\%(mod-1)$ 的取值，扩展GCD处理一下就好咯~\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190215213335919.jpg)\n\n$\\ \\ \\ \\ \\ \\ \\,$然后我们就知道 $s$ 的取值了（也有可能无解），那么答案也就出来了：$f_k=3^s$。\n\n``` cpp\n#include<algorithm>\n#include<iostream>\n#include<cstdlib>\n#include<cstring>\n#include<cctype>\n#include<cstdio>\n#include<vector>\n#include<string>\n#include<queue>\n#include<stack>\n#include<cmath>\n#include<map>\n#include<set>\nusing namespace std;\nconst int inf=0x7fffffff;\nconst double eps=1e-10;\nconst double pi=acos(-1.0);\n//char buf[1<<15],*S=buf,*T=buf;\n//char getch(){return S==T&&(T=(S=buf)+fread(buf,1,1<<15,stdin),S==T)?0:*S++;}\ninline int read(){\n\tint x=0,f=1;char ch;ch=getchar();\n\twhile(ch<'0'||ch>'9'){if(ch=='-') f=0;ch=getchar();}\n\twhile(ch>='0'&&ch<='9'){x=(x<<1)+(x<<3)+(ch&15);ch=getchar();}\n\tif(f)return x;else return -x;\n}\nconst int mod=998244353;\nstruct matrix{\n\tint x,y;\n\tint a[101][101];\n};\nint K,m,n;\nmatrix S,A,T;\nmatrix operator *(matrix m1,matrix m2){\n\tmatrix t;t.x=m1.x;t.y=m2.y;\n\tfor(int i=1;i<=m1.x;i++)\n\tfor(int j=1;j<=m2.y;j++){\n\t  \tt.a[i][j]=0;\n\t  \tfor(int k=1;k<=m1.y;k++)\n\t  \tt.a[i][j]=(1ll*t.a[i][j]+1ll*m1.a[i][k]*m2.a[k][j])%(mod-1);\n\t}\n\treturn t;\n}\nmatrix power(matrix a,int b){\n\tmatrix ans=a;b--;\n\twhile(b){\n\t\tif(b&1ll)ans=ans*a;\n\t\ta=a*a;b>>=1;\n\t}\n\treturn ans;\n}\nint power(int a,int b,int mod){\n\tint ans=1;\n\twhile(b){\n\t\tif(b&1)ans=(1ll*ans*a)%mod;\n\t\ta=(1ll*a*a)%mod;\n\t\tb>>=1;\n\t}\n\treturn ans;\n}\nlong long BSGS(long long a,long long b,long long c){\n  \tmap<int,int>hash;hash.clear();b%=c;\n  \tint t=(int)sqrt(c)+1;\n  \tfor(int j=0;j<t;j++){\n    \tint val=(int)(b*power(a,j,c)%c);\n    \thash[val]=j;\n  \t}\n  \ta=power(a,t,c);\n  \tif(a==0){\n  \t\tif(b==0)return 1;\n    \telse return -1;\n  \t}\n  \tfor(int i=0;i<=t;i++){\n    \tint val=power(a,i,c);\n    \tint j=hash.find(val)==hash.end()?-1:hash[val];\n    \tif(j>=0&&i*t-j>=0)return i*t-j;\n  \t}\n  \treturn -1;\n}\nvoid exgcd(long long a,long long b,long long &d,long long &x,long long &y){\n\tif(!b){d=a;x=1;y=0;return;}\n\texgcd(b,a%b,d,y,x);y-=x*(a/b);\n}\nint main()\n{\n\tK=read();S.x=1;\n\tA.x=A.y=S.y=K;S.a[1][K]=1;\n\tfor(int i=2;i<=K;i++)A.a[i][i-1]=1;\n\tfor(int i=K;i>=1;i--)A.a[i][K]=read();\n\tn=read();m=read();\n\tT=S*power(A,n-K);\n\tlong long t=BSGS(3ll,1ll*m,mod);\n\tlong long g,x,y;\n\texgcd(T.a[1][K],mod-1,g,x,y);\n  \tif(t%g)puts(\"-1\");\n  \telse{\n   \t\tx=(t/g*x%(mod-1)+mod-1)%(mod-1);\n    \tprintf(\"%d\\n\",power(3,x,mod));\n  \t}\n\treturn 0;\n}\n\n```\n\n## 完结撒花\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190215213506253.gif)","slug":"Codeforces-Round-536-Div-2-己亥年农历新年赛-简略题解","published":1,"updated":"2022-02-13T14:06:49.047Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0i63w5u000bu4gbf8bc2vo6","content":"<h2 id=\"【题目地址】\"><a href=\"#【题目地址】\" class=\"headerlink\" title=\"【题目地址】\"></a><a href=\"https://codeforces.com/contest/1106\">【题目地址】</a></h2><hr>\n<h2 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h2><p>$\\ \\ \\ \\ \\ \\ \\,$这场比赛是wc2019回家那天晚上举办的，从8点到10点刚好在动车上，饥寒交迫，还拉肚子（吃不惯粤菜），就没有参加，是后面写的。</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$这套题在洛谷上面五颜六色的，很有意思啊（除了没有红的），题目也算可做，感觉很过年很快乐呢（<del>嘤嘤</del></p>\n<span id=\"more\"></span>\n<p><img src=\"https://img-blog.csdnimg.cn/20190215201821828.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzk3Mzk2Ng==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<hr>\n<h2 id=\"A-Lunar-New-Year-and-Cross-Counting\"><a href=\"#A-Lunar-New-Year-and-Cross-Counting\" class=\"headerlink\" title=\"A. Lunar New Year and Cross Counting\"></a><a href=\"https://codeforces.com/contest/1106/problem/A\">A. Lunar New Year and Cross Counting</a></h2><p>$\\ \\ \\ \\ \\ \\ \\,$模拟？暴力？可以不解释吗……</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20190215202145632.jpg\" alt=\"在这里插入图片描述\"></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdlib&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cctype&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;stack&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;map&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;set&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> inf=<span class=\"number\">0x7fffffff</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">double</span> eps=<span class=\"number\">1e-10</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">double</span> pi=<span class=\"built_in\">acos</span>(<span class=\"number\">-1.0</span>);</span><br><span class=\"line\"><span class=\"comment\">//char buf[1&lt;&lt;15],*S=buf,*T=buf;</span></span><br><span class=\"line\"><span class=\"comment\">//char getch()&#123;return S==T&amp;&amp;(T=(S=buf)+fread(buf,1,1&lt;&lt;15,stdin),S==T)?0:*S++;&#125;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">int</span> <span class=\"title\">read</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> x=<span class=\"number\">0</span>,f=<span class=\"number\">1</span>;<span class=\"type\">char</span> ch;ch=<span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(ch&lt;<span class=\"string\">&#x27;0&#x27;</span>||ch&gt;<span class=\"string\">&#x27;9&#x27;</span>)&#123;<span class=\"keyword\">if</span>(ch==<span class=\"string\">&#x27;-&#x27;</span>) f=<span class=\"number\">0</span>;ch=<span class=\"built_in\">getchar</span>();&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(ch&gt;=<span class=\"string\">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class=\"string\">&#x27;9&#x27;</span>)&#123;x=(x&lt;&lt;<span class=\"number\">1</span>)+(x&lt;&lt;<span class=\"number\">3</span>)+(ch&amp;<span class=\"number\">15</span>);ch=<span class=\"built_in\">getchar</span>();&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(f)<span class=\"keyword\">return</span> x;<span class=\"keyword\">else</span> <span class=\"keyword\">return</span> -x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">510</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> n;</span><br><span class=\"line\"><span class=\"type\">char</span> mp[N][N];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">check</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> y)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(x+<span class=\"number\">2</span>&gt;n||y+<span class=\"number\">2</span>&gt;n)<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(mp[x][y]!=<span class=\"string\">&#x27;X&#x27;</span>)<span class=\"keyword\">return</span> <span class=\"number\">0</span>;<span class=\"keyword\">if</span>(mp[x][y+<span class=\"number\">2</span>]!=<span class=\"string\">&#x27;X&#x27;</span>)<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(mp[x+<span class=\"number\">1</span>][y+<span class=\"number\">1</span>]!=<span class=\"string\">&#x27;X&#x27;</span>)<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(mp[x+<span class=\"number\">2</span>][y]!=<span class=\"string\">&#x27;X&#x27;</span>)<span class=\"keyword\">return</span> <span class=\"number\">0</span>;<span class=\"keyword\">if</span>(mp[x+<span class=\"number\">2</span>][y+<span class=\"number\">2</span>]!=<span class=\"string\">&#x27;X&#x27;</span>)<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tn=<span class=\"built_in\">read</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%s&quot;</span>,mp[i]+<span class=\"number\">1</span>);</span><br><span class=\"line\">\t<span class=\"type\">int</span> ans=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;=n;j++)</span><br><span class=\"line\">\tans+=<span class=\"built_in\">check</span>(i,j);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>,ans);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"B-Lunar-New-Year-and-Food-Ordering\"><a href=\"#B-Lunar-New-Year-and-Food-Ordering\" class=\"headerlink\" title=\"B. Lunar New Year and Food Ordering\"></a><a href=\"https://codeforces.com/contest/1106/problem/B\">B. Lunar New Year and Food Ordering</a></h2><p>$\\ \\ \\ \\ \\ \\ \\,$这个也是模拟吧，我们把菜品排个序，用一个指针跳就好了吧……（敷衍<br><img src=\"https://img-blog.csdnimg.cn/20190215203257557.jpg\" alt=\"在这里插入图片描述\"><br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdlib&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cctype&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;stack&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;map&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;set&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> inf=<span class=\"number\">0x7fffffff</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">double</span> eps=<span class=\"number\">1e-10</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">double</span> pi=<span class=\"built_in\">acos</span>(<span class=\"number\">-1.0</span>);</span><br><span class=\"line\"><span class=\"comment\">//char buf[1&lt;&lt;15],*S=buf,*T=buf;</span></span><br><span class=\"line\"><span class=\"comment\">//char getch()&#123;return S==T&amp;&amp;(T=(S=buf)+fread(buf,1,1&lt;&lt;15,stdin),S==T)?0:*S++;&#125;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">int</span> <span class=\"title\">read</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> x=<span class=\"number\">0</span>,f=<span class=\"number\">1</span>;<span class=\"type\">char</span> ch;ch=<span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(ch&lt;<span class=\"string\">&#x27;0&#x27;</span>||ch&gt;<span class=\"string\">&#x27;9&#x27;</span>)&#123;<span class=\"keyword\">if</span>(ch==<span class=\"string\">&#x27;-&#x27;</span>) f=<span class=\"number\">0</span>;ch=<span class=\"built_in\">getchar</span>();&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(ch&gt;=<span class=\"string\">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class=\"string\">&#x27;9&#x27;</span>)&#123;x=(x&lt;&lt;<span class=\"number\">1</span>)+(x&lt;&lt;<span class=\"number\">3</span>)+(ch&amp;<span class=\"number\">15</span>);ch=<span class=\"built_in\">getchar</span>();&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(f)<span class=\"keyword\">return</span> x;<span class=\"keyword\">else</span> <span class=\"keyword\">return</span> -x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">1e5</span>+<span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> n,m,z=<span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> rk[N];</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">node</span>&#123;<span class=\"type\">int</span> a,c,id;&#125;di[N];</span><br><span class=\"line\"><span class=\"keyword\">inline</span> <span class=\"type\">bool</span> <span class=\"keyword\">operator</span> &lt;(<span class=\"type\">const</span> node &amp;a,<span class=\"type\">const</span> node &amp;b)</span><br><span class=\"line\">&#123;<span class=\"keyword\">return</span> a.c&lt;b.c||(a.c==b.c&amp;&amp;a.id&lt;b.id);&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tn=<span class=\"built_in\">read</span>();m=<span class=\"built_in\">read</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)di[i].a=<span class=\"built_in\">read</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)di[i].c=<span class=\"built_in\">read</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)di[i].id=i;</span><br><span class=\"line\">\t<span class=\"built_in\">sort</span>(di+<span class=\"number\">1</span>,di+n+<span class=\"number\">1</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)rk[di[i].id]=i;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(m--)&#123;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> kind=<span class=\"built_in\">read</span>(),cnt=<span class=\"built_in\">read</span>();</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(di[rk[kind]].a&gt;=cnt)&#123;</span><br><span class=\"line\">\t\t\tdi[rk[kind]].a-=cnt;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%lld\\n&quot;</span>,<span class=\"number\">1ll</span>*di[rk[kind]].c*cnt);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"type\">long</span> <span class=\"type\">long</span> ls=<span class=\"number\">0ll</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(di[rk[kind]].a)&#123;</span><br><span class=\"line\">\t\t\tcnt-=di[rk[kind]].a;</span><br><span class=\"line\">\t\t\tls+=<span class=\"number\">1ll</span>*di[rk[kind]].c*di[rk[kind]].a;</span><br><span class=\"line\">\t\t\tdi[rk[kind]].a=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(cnt)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>((!di[z].a)&amp;&amp;z&lt;=n)z++;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(z&gt;n)&#123;ls=<span class=\"number\">0</span>;<span class=\"keyword\">break</span>;&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(di[z].a&gt;=cnt)&#123;</span><br><span class=\"line\">\t\t\t\t\tdi[z].a-=cnt;</span><br><span class=\"line\">\t\t\t\t\tls+=<span class=\"number\">1ll</span>*di[z].c*cnt;</span><br><span class=\"line\">\t\t\t\t\tcnt=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t\t\t\tcnt-=di[z].a;</span><br><span class=\"line\">\t\t\t\t\tls+=<span class=\"number\">1ll</span>*di[z].c*di[z].a;</span><br><span class=\"line\">\t\t\t\t\tdi[z].a=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%lld\\n&quot;</span>,ls);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"C-Lunar-New-Year-and-Number-Division\"><a href=\"#C-Lunar-New-Year-and-Number-Division\" class=\"headerlink\" title=\"C. Lunar New Year and Number Division\"></a><a href=\"https://codeforces.com/contest/1106/problem/C\">C. Lunar New Year and Number Division</a></h2><p>$\\ \\ \\ \\ \\ \\ \\,$根据二项式定理，当然是两个两个分为一组最合算了（$n$ 范围明示</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$我们展开可得：</p>\n<p>$(a+b)^2=a^2+b^2+2ab$</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$那么我们就想要两个成积较小的分一组最好，就是排序过后，最小的和最大的分一组好了呀。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20190215204003943.jpg\" alt=\"在这里插入图片描述\"><br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdlib&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cctype&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;stack&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;map&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;set&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> inf=<span class=\"number\">0x7fffffff</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">double</span> eps=<span class=\"number\">1e-10</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">double</span> pi=<span class=\"built_in\">acos</span>(<span class=\"number\">-1.0</span>);</span><br><span class=\"line\"><span class=\"comment\">//char buf[1&lt;&lt;15],*S=buf,*T=buf;</span></span><br><span class=\"line\"><span class=\"comment\">//char getch()&#123;return S==T&amp;&amp;(T=(S=buf)+fread(buf,1,1&lt;&lt;15,stdin),S==T)?0:*S++;&#125;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">int</span> <span class=\"title\">read</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> x=<span class=\"number\">0</span>,f=<span class=\"number\">1</span>;<span class=\"type\">char</span> ch;ch=<span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(ch&lt;<span class=\"string\">&#x27;0&#x27;</span>||ch&gt;<span class=\"string\">&#x27;9&#x27;</span>)&#123;<span class=\"keyword\">if</span>(ch==<span class=\"string\">&#x27;-&#x27;</span>) f=<span class=\"number\">0</span>;ch=<span class=\"built_in\">getchar</span>();&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(ch&gt;=<span class=\"string\">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class=\"string\">&#x27;9&#x27;</span>)&#123;x=(x&lt;&lt;<span class=\"number\">1</span>)+(x&lt;&lt;<span class=\"number\">3</span>)+(ch&amp;<span class=\"number\">15</span>);ch=<span class=\"built_in\">getchar</span>();&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(f)<span class=\"keyword\">return</span> x;<span class=\"keyword\">else</span> <span class=\"keyword\">return</span> -x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">3e5</span>+<span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"type\">long</span> <span class=\"type\">long</span> ans;</span><br><span class=\"line\"><span class=\"type\">int</span> a[N],n;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tn=<span class=\"built_in\">read</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)a[i]=<span class=\"built_in\">read</span>();</span><br><span class=\"line\">\t<span class=\"built_in\">sort</span>(a+<span class=\"number\">1</span>,a+n+<span class=\"number\">1</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>,j=n;i&lt;=j;i++,j--)</span><br><span class=\"line\">\tans+=<span class=\"number\">1ll</span>*(a[i]+a[j])*(a[i]+a[j]);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%lld\\n&quot;</span>,ans);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"D-Lunar-New-Year-and-a-Wander\"><a href=\"#D-Lunar-New-Year-and-a-Wander\" class=\"headerlink\" title=\"D. Lunar New Year and a Wander\"></a><a href=\"https://codeforces.com/contest/1106/problem/D\">D. Lunar New Year and a Wander</a></h2><p>$\\ \\ \\ \\ \\ \\ \\,$BFS……</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$并不是，其实也差不多吧，当前可以走到的点，我们把他放进堆里面，然后每次走堆里最小的这个样子。</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$（因为题意没看懂翻车了几次</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20190215204454189.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzk3Mzk2Ng==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdlib&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cctype&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;stack&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;map&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;set&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> inf=<span class=\"number\">0x7fffffff</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">double</span> eps=<span class=\"number\">1e-10</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">double</span> pi=<span class=\"built_in\">acos</span>(<span class=\"number\">-1.0</span>);</span><br><span class=\"line\"><span class=\"comment\">//char buf[1&lt;&lt;15],*S=buf,*T=buf;</span></span><br><span class=\"line\"><span class=\"comment\">//char getch()&#123;return S==T&amp;&amp;(T=(S=buf)+fread(buf,1,1&lt;&lt;15,stdin),S==T)?0:*S++;&#125;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">int</span> <span class=\"title\">read</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> x=<span class=\"number\">0</span>,f=<span class=\"number\">1</span>;<span class=\"type\">char</span> ch;ch=<span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(ch&lt;<span class=\"string\">&#x27;0&#x27;</span>||ch&gt;<span class=\"string\">&#x27;9&#x27;</span>)&#123;<span class=\"keyword\">if</span>(ch==<span class=\"string\">&#x27;-&#x27;</span>) f=<span class=\"number\">0</span>;ch=<span class=\"built_in\">getchar</span>();&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(ch&gt;=<span class=\"string\">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class=\"string\">&#x27;9&#x27;</span>)&#123;x=(x&lt;&lt;<span class=\"number\">1</span>)+(x&lt;&lt;<span class=\"number\">3</span>)+(ch&amp;<span class=\"number\">15</span>);ch=<span class=\"built_in\">getchar</span>();&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(f)<span class=\"keyword\">return</span> x;<span class=\"keyword\">else</span> <span class=\"keyword\">return</span> -x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">1e5</span>+<span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> n,m;</span><br><span class=\"line\"><span class=\"type\">bool</span> used[N];</span><br><span class=\"line\">vector&lt;<span class=\"type\">int</span>&gt; G[N];</span><br><span class=\"line\">priority_queue&lt;<span class=\"type\">int</span>&gt; Q;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tn=<span class=\"built_in\">read</span>();m=<span class=\"built_in\">read</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(m--)&#123;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> a=<span class=\"built_in\">read</span>(),b=<span class=\"built_in\">read</span>();</span><br><span class=\"line\">\t\tG[a].<span class=\"built_in\">push_back</span>(b);</span><br><span class=\"line\">\t\tG[b].<span class=\"built_in\">push_back</span>(a);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)</span><br><span class=\"line\">\t<span class=\"built_in\">sort</span>(G[i].<span class=\"built_in\">begin</span>(),G[i].<span class=\"built_in\">end</span>());</span><br><span class=\"line\">\tQ.<span class=\"built_in\">push</span>(<span class=\"number\">-1</span>);used[<span class=\"number\">1</span>]=<span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(!Q.<span class=\"built_in\">empty</span>())&#123;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> u=-Q.<span class=\"built_in\">top</span>();Q.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d &quot;</span>,u);</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> v:G[u])<span class=\"keyword\">if</span>(!used[v])</span><br><span class=\"line\">\t\tQ.<span class=\"built_in\">push</span>(-v),used[v]=<span class=\"number\">1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"E-Lunar-New-Year-and-Red-Envelopes\"><a href=\"#E-Lunar-New-Year-and-Red-Envelopes\" class=\"headerlink\" title=\"E. Lunar New Year and Red Envelopes\"></a><a href=\"https://codeforces.com/contest/1106/problem/E\">E. Lunar New Year and Red Envelopes</a></h2><p>$\\ \\ \\ \\ \\ \\ \\,$后面两道题就开始有讲的意思了，反正这道题我并没有独自写出来（我怀疑题都没有怎么读懂（我好菜呀<br><img src=\"https://img-blog.csdnimg.cn/20190215204926766.jpg\" alt=\"在这里插入图片描述\"></p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$题目做法是DP，我们定义$f_{i,j}$，表示被打扰了 $i$ 次，现在时间是 $j$ 的最小收益。转移方程呢就是：</p>\n<p>$f_{i,j+1}=f_{i-1,j}$</p>\n<p>$f_{i,a_l.d+1}=f_{i-1,k}+a_l.w$</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$我们预处理数当前时间用那个红包好，就可以降低复杂度到$O(nm)$，具体来说，就是哪个钱多哪个好，钱一样多的话就是哪个冷却时间长哪个好。具体操作看的<a href=\"https://blog.csdn.net/g21glf/article/details/86743023\"><strong>这里</strong></a>，其实很多地方没有必要这么麻烦，但是自己确实是太菜了，没有自己独立做出来。<br><img src=\"https://img-blog.csdnimg.cn/20190215210921828.jpg\" alt=\"在这里插入图片描述\"></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdlib&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cctype&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;stack&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;map&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;set&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> inf=<span class=\"number\">0x7fffffff</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">double</span> eps=<span class=\"number\">1e-10</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">double</span> pi=<span class=\"built_in\">acos</span>(<span class=\"number\">-1.0</span>);</span><br><span class=\"line\"><span class=\"comment\">//char buf[1&lt;&lt;15],*S=buf,*T=buf;</span></span><br><span class=\"line\"><span class=\"comment\">//char getch()&#123;return S==T&amp;&amp;(T=(S=buf)+fread(buf,1,1&lt;&lt;15,stdin),S==T)?0:*S++;&#125;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">int</span> <span class=\"title\">read</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> x=<span class=\"number\">0</span>,f=<span class=\"number\">1</span>;<span class=\"type\">char</span> ch;ch=<span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(ch&lt;<span class=\"string\">&#x27;0&#x27;</span>||ch&gt;<span class=\"string\">&#x27;9&#x27;</span>)&#123;<span class=\"keyword\">if</span>(ch==<span class=\"string\">&#x27;-&#x27;</span>) f=<span class=\"number\">0</span>;ch=<span class=\"built_in\">getchar</span>();&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(ch&gt;=<span class=\"string\">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class=\"string\">&#x27;9&#x27;</span>)&#123;x=(x&lt;&lt;<span class=\"number\">1</span>)+(x&lt;&lt;<span class=\"number\">3</span>)+(ch&amp;<span class=\"number\">15</span>);ch=<span class=\"built_in\">getchar</span>();&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(f)<span class=\"keyword\">return</span> x;<span class=\"keyword\">else</span> <span class=\"keyword\">return</span> -x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">100010</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> n,m,k;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">node</span>&#123;<span class=\"type\">int</span> d,w,t;&#125;sta[N];</span><br><span class=\"line\"><span class=\"keyword\">inline</span> <span class=\"type\">bool</span> <span class=\"keyword\">operator</span> &lt;(<span class=\"type\">const</span> node &amp;a,<span class=\"type\">const</span> node &amp;b)</span><br><span class=\"line\">&#123;<span class=\"keyword\">return</span> a.w&gt;b.w||(a.w==b.w&amp;&amp;a.d&gt;b.d);&#125;</span><br><span class=\"line\">vector&lt;node&gt; e[N];</span><br><span class=\"line\">map&lt;node,<span class=\"type\">int</span>&gt; mp;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Insert</span><span class=\"params\">(node a)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(mp.<span class=\"built_in\">count</span>(a))mp[a]++;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> mp[a]=<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Delete</span><span class=\"params\">(node a)</span></span>&#123;</span><br><span class=\"line\">\tmp[a]--;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(!mp[a])mp.<span class=\"built_in\">erase</span>(a);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">long</span> <span class=\"type\">long</span> f[<span class=\"number\">2</span>][N],ans=(<span class=\"number\">1ll</span>&lt;&lt;<span class=\"number\">62</span>);</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tn=<span class=\"built_in\">read</span>();m=<span class=\"built_in\">read</span>();k=<span class=\"built_in\">read</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>,s,t,d,w;i&lt;=k;i++)&#123;</span><br><span class=\"line\">\t\ts=<span class=\"built_in\">read</span>(),t=<span class=\"built_in\">read</span>(),d=<span class=\"built_in\">read</span>(),w=<span class=\"built_in\">read</span>();</span><br><span class=\"line\">\t\te[s].<span class=\"built_in\">push_back</span>((node)&#123;d,w,<span class=\"number\">1</span>&#125;);</span><br><span class=\"line\">\t\te[t+<span class=\"number\">1</span>].<span class=\"built_in\">push_back</span>((node)&#123;d,w,<span class=\"number\">-1</span>&#125;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> p:e[i])</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(~p.t)<span class=\"built_in\">Insert</span>(p);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span> <span class=\"built_in\">Delete</span>(p);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(mp.<span class=\"built_in\">size</span>())sta[i]=(*mp.<span class=\"built_in\">begin</span>()).first;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> sta[i]=(node)&#123;i,<span class=\"number\">0</span>,<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">memset</span>(f,<span class=\"number\">0x3f</span>,<span class=\"built_in\">sizeof</span>(f));f[<span class=\"number\">0</span>][<span class=\"number\">1</span>]=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"type\">int</span> cas=<span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">0</span>;j&lt;=m;j++)&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">memset</span>(f[cas],<span class=\"number\">0x3f</span>,<span class=\"built_in\">sizeof</span>(f[cas]));</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">\t\t\tf[cas][i+<span class=\"number\">1</span>]=<span class=\"built_in\">min</span>(f[cas][i+<span class=\"number\">1</span>],f[cas^<span class=\"number\">1</span>][i]);</span><br><span class=\"line\">\t\t\tf[cas^<span class=\"number\">1</span>][sta[i].d+<span class=\"number\">1</span>]=<span class=\"built_in\">min</span>(f[cas^<span class=\"number\">1</span>][sta[i].d+<span class=\"number\">1</span>],f[cas^<span class=\"number\">1</span>][i]+sta[i].w);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tans=<span class=\"built_in\">min</span>(ans,f[cas^<span class=\"number\">1</span>][n+<span class=\"number\">1</span>]);cas^=<span class=\"number\">1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%lld\\n&quot;</span>,ans);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"F-Lunar-New-Year-and-a-Recursive-Sequence\"><a href=\"#F-Lunar-New-Year-and-a-Recursive-Sequence\" class=\"headerlink\" title=\"F. Lunar New Year and a Recursive Sequence\"></a><a href=\"https://codeforces.com/contest/1106/problem/F\">F. Lunar New Year and a Recursive Sequence</a></h2><p>$\\ \\ \\ \\ \\ \\ \\,$感觉这道题操作比E题麻烦一点，但是确实比E题好想呢。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20190215213423624.jpg\" alt=\"在这里插入图片描述\"></p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$看到是一个有 $k$ 项的递推式，马上就可以想到矩乘，而前 $k-1$ 项已经确定了是 $1$，我们不妨设要求的 $f_k$ 为 $a$ 。根据他给的式子啊，我们就容易发现，这个递推式的每一项都应该是 $a^x$ 的形式，知道第 $n$ 项是 $a$ 的多少次方就要好处理一些了。</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$这样子稍微观察一下矩阵乘法就定义好了：</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$转移矩阵：$A=$</p>\n<p>$<br>\\begin{bmatrix}0&amp;0&amp;\\cdots&amp;0&amp;b_k\\\\ 1&amp;0&amp;\\cdots&amp;0&amp;b_{k-1}\\\\0&amp;1&amp;\\cdots&amp;0&amp;b_{k-2}\\\\\\vdots&amp;\\vdots&amp;\\ddots&amp;\\vdots&amp;\\vdots\\\\0&amp;0&amp;\\cdots&amp;1&amp;b_1\\end{bmatrix}<br>$</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$初始矩阵：$S=$</p>\n<p>$<br>\\begin{bmatrix}0,0,\\cdots,0,1\\end{bmatrix}<br>$</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$那么第 $n$ 项的指数，就是 $S\\cdot A^{n-k}$ 的第 $k$ 项，矩阵乘法取模的时候，根据欧拉定理，因为模数是素数，直接每次模 $mod-1$ 就好了。</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$现在问题是，我们知道 $x$，$m$，$mod$，$a^x\\%mod=m$，如何求 $a$ 呢？</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$好在他给我们的模数很特殊，我们很清楚他的原根为 $3$ ，那么我们可以重新把 $a$ 定义为 $3^s\\%mod$，所以原式化为:</p>\n<p>$3^{sx}\\%mod=m$</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$我们可以很轻松用 BSGS 算法知道 $sx\\%(mod-1)$的取值，而我们又知道 $x\\%(mod-1)$ 的取值，扩展GCD处理一下就好咯~</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20190215213335919.jpg\" alt=\"在这里插入图片描述\"></p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$然后我们就知道 $s$ 的取值了（也有可能无解），那么答案也就出来了：$f_k=3^s$。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdlib&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cctype&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;stack&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;map&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;set&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> inf=<span class=\"number\">0x7fffffff</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">double</span> eps=<span class=\"number\">1e-10</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">double</span> pi=<span class=\"built_in\">acos</span>(<span class=\"number\">-1.0</span>);</span><br><span class=\"line\"><span class=\"comment\">//char buf[1&lt;&lt;15],*S=buf,*T=buf;</span></span><br><span class=\"line\"><span class=\"comment\">//char getch()&#123;return S==T&amp;&amp;(T=(S=buf)+fread(buf,1,1&lt;&lt;15,stdin),S==T)?0:*S++;&#125;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">int</span> <span class=\"title\">read</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> x=<span class=\"number\">0</span>,f=<span class=\"number\">1</span>;<span class=\"type\">char</span> ch;ch=<span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(ch&lt;<span class=\"string\">&#x27;0&#x27;</span>||ch&gt;<span class=\"string\">&#x27;9&#x27;</span>)&#123;<span class=\"keyword\">if</span>(ch==<span class=\"string\">&#x27;-&#x27;</span>) f=<span class=\"number\">0</span>;ch=<span class=\"built_in\">getchar</span>();&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(ch&gt;=<span class=\"string\">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class=\"string\">&#x27;9&#x27;</span>)&#123;x=(x&lt;&lt;<span class=\"number\">1</span>)+(x&lt;&lt;<span class=\"number\">3</span>)+(ch&amp;<span class=\"number\">15</span>);ch=<span class=\"built_in\">getchar</span>();&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(f)<span class=\"keyword\">return</span> x;<span class=\"keyword\">else</span> <span class=\"keyword\">return</span> -x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> mod=<span class=\"number\">998244353</span>;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">matrix</span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> x,y;</span><br><span class=\"line\">\t<span class=\"type\">int</span> a[<span class=\"number\">101</span>][<span class=\"number\">101</span>];</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"type\">int</span> K,m,n;</span><br><span class=\"line\">matrix S,A,T;</span><br><span class=\"line\">matrix <span class=\"keyword\">operator</span> *(matrix m1,matrix m2)&#123;</span><br><span class=\"line\">\tmatrix t;t.x=m1.x;t.y=m2.y;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=m1.x;i++)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;=m2.y;j++)&#123;</span><br><span class=\"line\">\t  \tt.a[i][j]=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t  \t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> k=<span class=\"number\">1</span>;k&lt;=m1.y;k++)</span><br><span class=\"line\">\t  \tt.a[i][j]=(<span class=\"number\">1ll</span>*t.a[i][j]+<span class=\"number\">1ll</span>*m1.a[i][k]*m2.a[k][j])%(mod<span class=\"number\">-1</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> t;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\">matrix <span class=\"title\">power</span><span class=\"params\">(matrix a,<span class=\"type\">int</span> b)</span></span>&#123;</span><br><span class=\"line\">\tmatrix ans=a;b--;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(b)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(b&amp;<span class=\"number\">1ll</span>)ans=ans*a;</span><br><span class=\"line\">\t\ta=a*a;b&gt;&gt;=<span class=\"number\">1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">power</span><span class=\"params\">(<span class=\"type\">int</span> a,<span class=\"type\">int</span> b,<span class=\"type\">int</span> mod)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> ans=<span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(b)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(b&amp;<span class=\"number\">1</span>)ans=(<span class=\"number\">1ll</span>*ans*a)%mod;</span><br><span class=\"line\">\t\ta=(<span class=\"number\">1ll</span>*a*a)%mod;</span><br><span class=\"line\">\t\tb&gt;&gt;=<span class=\"number\">1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"title\">BSGS</span><span class=\"params\">(<span class=\"type\">long</span> <span class=\"type\">long</span> a,<span class=\"type\">long</span> <span class=\"type\">long</span> b,<span class=\"type\">long</span> <span class=\"type\">long</span> c)</span></span>&#123;</span><br><span class=\"line\">  \tmap&lt;<span class=\"type\">int</span>,<span class=\"type\">int</span>&gt;hash;hash.<span class=\"built_in\">clear</span>();b%=c;</span><br><span class=\"line\">  \t<span class=\"type\">int</span> t=(<span class=\"type\">int</span>)<span class=\"built_in\">sqrt</span>(c)+<span class=\"number\">1</span>;</span><br><span class=\"line\">  \t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">0</span>;j&lt;t;j++)&#123;</span><br><span class=\"line\">    \t<span class=\"type\">int</span> val=(<span class=\"type\">int</span>)(b*<span class=\"built_in\">power</span>(a,j,c)%c);</span><br><span class=\"line\">    \thash[val]=j;</span><br><span class=\"line\">  \t&#125;</span><br><span class=\"line\">  \ta=<span class=\"built_in\">power</span>(a,t,c);</span><br><span class=\"line\">  \t<span class=\"keyword\">if</span>(a==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">  \t\t<span class=\"keyword\">if</span>(b==<span class=\"number\">0</span>)<span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    \t<span class=\"keyword\">else</span> <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">  \t&#125;</span><br><span class=\"line\">  \t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;=t;i++)&#123;</span><br><span class=\"line\">    \t<span class=\"type\">int</span> val=<span class=\"built_in\">power</span>(a,i,c);</span><br><span class=\"line\">    \t<span class=\"type\">int</span> j=hash.<span class=\"built_in\">find</span>(val)==hash.<span class=\"built_in\">end</span>()?<span class=\"number\">-1</span>:hash[val];</span><br><span class=\"line\">    \t<span class=\"keyword\">if</span>(j&gt;=<span class=\"number\">0</span>&amp;&amp;i*t-j&gt;=<span class=\"number\">0</span>)<span class=\"keyword\">return</span> i*t-j;</span><br><span class=\"line\">  \t&#125;</span><br><span class=\"line\">  \t<span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">exgcd</span><span class=\"params\">(<span class=\"type\">long</span> <span class=\"type\">long</span> a,<span class=\"type\">long</span> <span class=\"type\">long</span> b,<span class=\"type\">long</span> <span class=\"type\">long</span> &amp;d,<span class=\"type\">long</span> <span class=\"type\">long</span> &amp;x,<span class=\"type\">long</span> <span class=\"type\">long</span> &amp;y)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(!b)&#123;d=a;x=<span class=\"number\">1</span>;y=<span class=\"number\">0</span>;<span class=\"keyword\">return</span>;&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">exgcd</span>(b,a%b,d,y,x);y-=x*(a/b);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tK=<span class=\"built_in\">read</span>();S.x=<span class=\"number\">1</span>;</span><br><span class=\"line\">\tA.x=A.y=S.y=K;S.a[<span class=\"number\">1</span>][K]=<span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">2</span>;i&lt;=K;i++)A.a[i][i<span class=\"number\">-1</span>]=<span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=K;i&gt;=<span class=\"number\">1</span>;i--)A.a[i][K]=<span class=\"built_in\">read</span>();</span><br><span class=\"line\">\tn=<span class=\"built_in\">read</span>();m=<span class=\"built_in\">read</span>();</span><br><span class=\"line\">\tT=S*<span class=\"built_in\">power</span>(A,n-K);</span><br><span class=\"line\">\t<span class=\"type\">long</span> <span class=\"type\">long</span> t=<span class=\"built_in\">BSGS</span>(<span class=\"number\">3ll</span>,<span class=\"number\">1ll</span>*m,mod);</span><br><span class=\"line\">\t<span class=\"type\">long</span> <span class=\"type\">long</span> g,x,y;</span><br><span class=\"line\">\t<span class=\"built_in\">exgcd</span>(T.a[<span class=\"number\">1</span>][K],mod<span class=\"number\">-1</span>,g,x,y);</span><br><span class=\"line\">  \t<span class=\"keyword\">if</span>(t%g)<span class=\"built_in\">puts</span>(<span class=\"string\">&quot;-1&quot;</span>);</span><br><span class=\"line\">  \t<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">   \t\tx=(t/g*x%(mod<span class=\"number\">-1</span>)+mod<span class=\"number\">-1</span>)%(mod<span class=\"number\">-1</span>);</span><br><span class=\"line\">    \t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>,<span class=\"built_in\">power</span>(<span class=\"number\">3</span>,x,mod));</span><br><span class=\"line\">  \t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"完结撒花\"><a href=\"#完结撒花\" class=\"headerlink\" title=\"完结撒花\"></a>完结撒花</h2><p><img src=\"https://img-blog.csdnimg.cn/20190215213506253.gif\" alt=\"在这里插入图片描述\"></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"【题目地址】\"><a href=\"#【题目地址】\" class=\"headerlink\" title=\"【题目地址】\"></a><a href=\"https://codeforces.com/contest/1106\">【题目地址】</a></h2><hr>\n<h2 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h2><p>$\\ \\ \\ \\ \\ \\ \\,$这场比赛是wc2019回家那天晚上举办的，从8点到10点刚好在动车上，饥寒交迫，还拉肚子（吃不惯粤菜），就没有参加，是后面写的。</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$这套题在洛谷上面五颜六色的，很有意思啊（除了没有红的），题目也算可做，感觉很过年很快乐呢（<del>嘤嘤</del></p>","more":"<p><img src=\"https://img-blog.csdnimg.cn/20190215201821828.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzk3Mzk2Ng==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<hr>\n<h2 id=\"A-Lunar-New-Year-and-Cross-Counting\"><a href=\"#A-Lunar-New-Year-and-Cross-Counting\" class=\"headerlink\" title=\"A. Lunar New Year and Cross Counting\"></a><a href=\"https://codeforces.com/contest/1106/problem/A\">A. Lunar New Year and Cross Counting</a></h2><p>$\\ \\ \\ \\ \\ \\ \\,$模拟？暴力？可以不解释吗……</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20190215202145632.jpg\" alt=\"在这里插入图片描述\"></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdlib&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cctype&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;stack&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;map&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;set&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> inf=<span class=\"number\">0x7fffffff</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">double</span> eps=<span class=\"number\">1e-10</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">double</span> pi=<span class=\"built_in\">acos</span>(<span class=\"number\">-1.0</span>);</span><br><span class=\"line\"><span class=\"comment\">//char buf[1&lt;&lt;15],*S=buf,*T=buf;</span></span><br><span class=\"line\"><span class=\"comment\">//char getch()&#123;return S==T&amp;&amp;(T=(S=buf)+fread(buf,1,1&lt;&lt;15,stdin),S==T)?0:*S++;&#125;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">int</span> <span class=\"title\">read</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> x=<span class=\"number\">0</span>,f=<span class=\"number\">1</span>;<span class=\"type\">char</span> ch;ch=<span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(ch&lt;<span class=\"string\">&#x27;0&#x27;</span>||ch&gt;<span class=\"string\">&#x27;9&#x27;</span>)&#123;<span class=\"keyword\">if</span>(ch==<span class=\"string\">&#x27;-&#x27;</span>) f=<span class=\"number\">0</span>;ch=<span class=\"built_in\">getchar</span>();&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(ch&gt;=<span class=\"string\">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class=\"string\">&#x27;9&#x27;</span>)&#123;x=(x&lt;&lt;<span class=\"number\">1</span>)+(x&lt;&lt;<span class=\"number\">3</span>)+(ch&amp;<span class=\"number\">15</span>);ch=<span class=\"built_in\">getchar</span>();&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(f)<span class=\"keyword\">return</span> x;<span class=\"keyword\">else</span> <span class=\"keyword\">return</span> -x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">510</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> n;</span><br><span class=\"line\"><span class=\"type\">char</span> mp[N][N];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">check</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> y)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(x+<span class=\"number\">2</span>&gt;n||y+<span class=\"number\">2</span>&gt;n)<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(mp[x][y]!=<span class=\"string\">&#x27;X&#x27;</span>)<span class=\"keyword\">return</span> <span class=\"number\">0</span>;<span class=\"keyword\">if</span>(mp[x][y+<span class=\"number\">2</span>]!=<span class=\"string\">&#x27;X&#x27;</span>)<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(mp[x+<span class=\"number\">1</span>][y+<span class=\"number\">1</span>]!=<span class=\"string\">&#x27;X&#x27;</span>)<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(mp[x+<span class=\"number\">2</span>][y]!=<span class=\"string\">&#x27;X&#x27;</span>)<span class=\"keyword\">return</span> <span class=\"number\">0</span>;<span class=\"keyword\">if</span>(mp[x+<span class=\"number\">2</span>][y+<span class=\"number\">2</span>]!=<span class=\"string\">&#x27;X&#x27;</span>)<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tn=<span class=\"built_in\">read</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%s&quot;</span>,mp[i]+<span class=\"number\">1</span>);</span><br><span class=\"line\">\t<span class=\"type\">int</span> ans=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;=n;j++)</span><br><span class=\"line\">\tans+=<span class=\"built_in\">check</span>(i,j);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>,ans);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"B-Lunar-New-Year-and-Food-Ordering\"><a href=\"#B-Lunar-New-Year-and-Food-Ordering\" class=\"headerlink\" title=\"B. Lunar New Year and Food Ordering\"></a><a href=\"https://codeforces.com/contest/1106/problem/B\">B. Lunar New Year and Food Ordering</a></h2><p>$\\ \\ \\ \\ \\ \\ \\,$这个也是模拟吧，我们把菜品排个序，用一个指针跳就好了吧……（敷衍<br><img src=\"https://img-blog.csdnimg.cn/20190215203257557.jpg\" alt=\"在这里插入图片描述\"><br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdlib&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cctype&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;stack&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;map&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;set&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> inf=<span class=\"number\">0x7fffffff</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">double</span> eps=<span class=\"number\">1e-10</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">double</span> pi=<span class=\"built_in\">acos</span>(<span class=\"number\">-1.0</span>);</span><br><span class=\"line\"><span class=\"comment\">//char buf[1&lt;&lt;15],*S=buf,*T=buf;</span></span><br><span class=\"line\"><span class=\"comment\">//char getch()&#123;return S==T&amp;&amp;(T=(S=buf)+fread(buf,1,1&lt;&lt;15,stdin),S==T)?0:*S++;&#125;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">int</span> <span class=\"title\">read</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> x=<span class=\"number\">0</span>,f=<span class=\"number\">1</span>;<span class=\"type\">char</span> ch;ch=<span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(ch&lt;<span class=\"string\">&#x27;0&#x27;</span>||ch&gt;<span class=\"string\">&#x27;9&#x27;</span>)&#123;<span class=\"keyword\">if</span>(ch==<span class=\"string\">&#x27;-&#x27;</span>) f=<span class=\"number\">0</span>;ch=<span class=\"built_in\">getchar</span>();&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(ch&gt;=<span class=\"string\">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class=\"string\">&#x27;9&#x27;</span>)&#123;x=(x&lt;&lt;<span class=\"number\">1</span>)+(x&lt;&lt;<span class=\"number\">3</span>)+(ch&amp;<span class=\"number\">15</span>);ch=<span class=\"built_in\">getchar</span>();&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(f)<span class=\"keyword\">return</span> x;<span class=\"keyword\">else</span> <span class=\"keyword\">return</span> -x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">1e5</span>+<span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> n,m,z=<span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> rk[N];</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">node</span>&#123;<span class=\"type\">int</span> a,c,id;&#125;di[N];</span><br><span class=\"line\"><span class=\"keyword\">inline</span> <span class=\"type\">bool</span> <span class=\"keyword\">operator</span> &lt;(<span class=\"type\">const</span> node &amp;a,<span class=\"type\">const</span> node &amp;b)</span><br><span class=\"line\">&#123;<span class=\"keyword\">return</span> a.c&lt;b.c||(a.c==b.c&amp;&amp;a.id&lt;b.id);&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tn=<span class=\"built_in\">read</span>();m=<span class=\"built_in\">read</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)di[i].a=<span class=\"built_in\">read</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)di[i].c=<span class=\"built_in\">read</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)di[i].id=i;</span><br><span class=\"line\">\t<span class=\"built_in\">sort</span>(di+<span class=\"number\">1</span>,di+n+<span class=\"number\">1</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)rk[di[i].id]=i;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(m--)&#123;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> kind=<span class=\"built_in\">read</span>(),cnt=<span class=\"built_in\">read</span>();</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(di[rk[kind]].a&gt;=cnt)&#123;</span><br><span class=\"line\">\t\t\tdi[rk[kind]].a-=cnt;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%lld\\n&quot;</span>,<span class=\"number\">1ll</span>*di[rk[kind]].c*cnt);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"type\">long</span> <span class=\"type\">long</span> ls=<span class=\"number\">0ll</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(di[rk[kind]].a)&#123;</span><br><span class=\"line\">\t\t\tcnt-=di[rk[kind]].a;</span><br><span class=\"line\">\t\t\tls+=<span class=\"number\">1ll</span>*di[rk[kind]].c*di[rk[kind]].a;</span><br><span class=\"line\">\t\t\tdi[rk[kind]].a=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(cnt)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>((!di[z].a)&amp;&amp;z&lt;=n)z++;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(z&gt;n)&#123;ls=<span class=\"number\">0</span>;<span class=\"keyword\">break</span>;&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(di[z].a&gt;=cnt)&#123;</span><br><span class=\"line\">\t\t\t\t\tdi[z].a-=cnt;</span><br><span class=\"line\">\t\t\t\t\tls+=<span class=\"number\">1ll</span>*di[z].c*cnt;</span><br><span class=\"line\">\t\t\t\t\tcnt=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t\t\t\tcnt-=di[z].a;</span><br><span class=\"line\">\t\t\t\t\tls+=<span class=\"number\">1ll</span>*di[z].c*di[z].a;</span><br><span class=\"line\">\t\t\t\t\tdi[z].a=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%lld\\n&quot;</span>,ls);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"C-Lunar-New-Year-and-Number-Division\"><a href=\"#C-Lunar-New-Year-and-Number-Division\" class=\"headerlink\" title=\"C. Lunar New Year and Number Division\"></a><a href=\"https://codeforces.com/contest/1106/problem/C\">C. Lunar New Year and Number Division</a></h2><p>$\\ \\ \\ \\ \\ \\ \\,$根据二项式定理，当然是两个两个分为一组最合算了（$n$ 范围明示</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$我们展开可得：</p>\n<p>$(a+b)^2=a^2+b^2+2ab$</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$那么我们就想要两个成积较小的分一组最好，就是排序过后，最小的和最大的分一组好了呀。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20190215204003943.jpg\" alt=\"在这里插入图片描述\"><br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdlib&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cctype&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;stack&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;map&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;set&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> inf=<span class=\"number\">0x7fffffff</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">double</span> eps=<span class=\"number\">1e-10</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">double</span> pi=<span class=\"built_in\">acos</span>(<span class=\"number\">-1.0</span>);</span><br><span class=\"line\"><span class=\"comment\">//char buf[1&lt;&lt;15],*S=buf,*T=buf;</span></span><br><span class=\"line\"><span class=\"comment\">//char getch()&#123;return S==T&amp;&amp;(T=(S=buf)+fread(buf,1,1&lt;&lt;15,stdin),S==T)?0:*S++;&#125;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">int</span> <span class=\"title\">read</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> x=<span class=\"number\">0</span>,f=<span class=\"number\">1</span>;<span class=\"type\">char</span> ch;ch=<span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(ch&lt;<span class=\"string\">&#x27;0&#x27;</span>||ch&gt;<span class=\"string\">&#x27;9&#x27;</span>)&#123;<span class=\"keyword\">if</span>(ch==<span class=\"string\">&#x27;-&#x27;</span>) f=<span class=\"number\">0</span>;ch=<span class=\"built_in\">getchar</span>();&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(ch&gt;=<span class=\"string\">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class=\"string\">&#x27;9&#x27;</span>)&#123;x=(x&lt;&lt;<span class=\"number\">1</span>)+(x&lt;&lt;<span class=\"number\">3</span>)+(ch&amp;<span class=\"number\">15</span>);ch=<span class=\"built_in\">getchar</span>();&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(f)<span class=\"keyword\">return</span> x;<span class=\"keyword\">else</span> <span class=\"keyword\">return</span> -x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">3e5</span>+<span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"type\">long</span> <span class=\"type\">long</span> ans;</span><br><span class=\"line\"><span class=\"type\">int</span> a[N],n;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tn=<span class=\"built_in\">read</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)a[i]=<span class=\"built_in\">read</span>();</span><br><span class=\"line\">\t<span class=\"built_in\">sort</span>(a+<span class=\"number\">1</span>,a+n+<span class=\"number\">1</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>,j=n;i&lt;=j;i++,j--)</span><br><span class=\"line\">\tans+=<span class=\"number\">1ll</span>*(a[i]+a[j])*(a[i]+a[j]);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%lld\\n&quot;</span>,ans);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"D-Lunar-New-Year-and-a-Wander\"><a href=\"#D-Lunar-New-Year-and-a-Wander\" class=\"headerlink\" title=\"D. Lunar New Year and a Wander\"></a><a href=\"https://codeforces.com/contest/1106/problem/D\">D. Lunar New Year and a Wander</a></h2><p>$\\ \\ \\ \\ \\ \\ \\,$BFS……</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$并不是，其实也差不多吧，当前可以走到的点，我们把他放进堆里面，然后每次走堆里最小的这个样子。</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$（因为题意没看懂翻车了几次</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20190215204454189.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzk3Mzk2Ng==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdlib&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cctype&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;stack&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;map&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;set&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> inf=<span class=\"number\">0x7fffffff</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">double</span> eps=<span class=\"number\">1e-10</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">double</span> pi=<span class=\"built_in\">acos</span>(<span class=\"number\">-1.0</span>);</span><br><span class=\"line\"><span class=\"comment\">//char buf[1&lt;&lt;15],*S=buf,*T=buf;</span></span><br><span class=\"line\"><span class=\"comment\">//char getch()&#123;return S==T&amp;&amp;(T=(S=buf)+fread(buf,1,1&lt;&lt;15,stdin),S==T)?0:*S++;&#125;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">int</span> <span class=\"title\">read</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> x=<span class=\"number\">0</span>,f=<span class=\"number\">1</span>;<span class=\"type\">char</span> ch;ch=<span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(ch&lt;<span class=\"string\">&#x27;0&#x27;</span>||ch&gt;<span class=\"string\">&#x27;9&#x27;</span>)&#123;<span class=\"keyword\">if</span>(ch==<span class=\"string\">&#x27;-&#x27;</span>) f=<span class=\"number\">0</span>;ch=<span class=\"built_in\">getchar</span>();&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(ch&gt;=<span class=\"string\">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class=\"string\">&#x27;9&#x27;</span>)&#123;x=(x&lt;&lt;<span class=\"number\">1</span>)+(x&lt;&lt;<span class=\"number\">3</span>)+(ch&amp;<span class=\"number\">15</span>);ch=<span class=\"built_in\">getchar</span>();&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(f)<span class=\"keyword\">return</span> x;<span class=\"keyword\">else</span> <span class=\"keyword\">return</span> -x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">1e5</span>+<span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> n,m;</span><br><span class=\"line\"><span class=\"type\">bool</span> used[N];</span><br><span class=\"line\">vector&lt;<span class=\"type\">int</span>&gt; G[N];</span><br><span class=\"line\">priority_queue&lt;<span class=\"type\">int</span>&gt; Q;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tn=<span class=\"built_in\">read</span>();m=<span class=\"built_in\">read</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(m--)&#123;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> a=<span class=\"built_in\">read</span>(),b=<span class=\"built_in\">read</span>();</span><br><span class=\"line\">\t\tG[a].<span class=\"built_in\">push_back</span>(b);</span><br><span class=\"line\">\t\tG[b].<span class=\"built_in\">push_back</span>(a);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)</span><br><span class=\"line\">\t<span class=\"built_in\">sort</span>(G[i].<span class=\"built_in\">begin</span>(),G[i].<span class=\"built_in\">end</span>());</span><br><span class=\"line\">\tQ.<span class=\"built_in\">push</span>(<span class=\"number\">-1</span>);used[<span class=\"number\">1</span>]=<span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(!Q.<span class=\"built_in\">empty</span>())&#123;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> u=-Q.<span class=\"built_in\">top</span>();Q.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d &quot;</span>,u);</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> v:G[u])<span class=\"keyword\">if</span>(!used[v])</span><br><span class=\"line\">\t\tQ.<span class=\"built_in\">push</span>(-v),used[v]=<span class=\"number\">1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"E-Lunar-New-Year-and-Red-Envelopes\"><a href=\"#E-Lunar-New-Year-and-Red-Envelopes\" class=\"headerlink\" title=\"E. Lunar New Year and Red Envelopes\"></a><a href=\"https://codeforces.com/contest/1106/problem/E\">E. Lunar New Year and Red Envelopes</a></h2><p>$\\ \\ \\ \\ \\ \\ \\,$后面两道题就开始有讲的意思了，反正这道题我并没有独自写出来（我怀疑题都没有怎么读懂（我好菜呀<br><img src=\"https://img-blog.csdnimg.cn/20190215204926766.jpg\" alt=\"在这里插入图片描述\"></p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$题目做法是DP，我们定义$f_{i,j}$，表示被打扰了 $i$ 次，现在时间是 $j$ 的最小收益。转移方程呢就是：</p>\n<p>$f_{i,j+1}=f_{i-1,j}$</p>\n<p>$f_{i,a_l.d+1}=f_{i-1,k}+a_l.w$</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$我们预处理数当前时间用那个红包好，就可以降低复杂度到$O(nm)$，具体来说，就是哪个钱多哪个好，钱一样多的话就是哪个冷却时间长哪个好。具体操作看的<a href=\"https://blog.csdn.net/g21glf/article/details/86743023\"><strong>这里</strong></a>，其实很多地方没有必要这么麻烦，但是自己确实是太菜了，没有自己独立做出来。<br><img src=\"https://img-blog.csdnimg.cn/20190215210921828.jpg\" alt=\"在这里插入图片描述\"></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdlib&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cctype&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;stack&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;map&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;set&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> inf=<span class=\"number\">0x7fffffff</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">double</span> eps=<span class=\"number\">1e-10</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">double</span> pi=<span class=\"built_in\">acos</span>(<span class=\"number\">-1.0</span>);</span><br><span class=\"line\"><span class=\"comment\">//char buf[1&lt;&lt;15],*S=buf,*T=buf;</span></span><br><span class=\"line\"><span class=\"comment\">//char getch()&#123;return S==T&amp;&amp;(T=(S=buf)+fread(buf,1,1&lt;&lt;15,stdin),S==T)?0:*S++;&#125;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">int</span> <span class=\"title\">read</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> x=<span class=\"number\">0</span>,f=<span class=\"number\">1</span>;<span class=\"type\">char</span> ch;ch=<span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(ch&lt;<span class=\"string\">&#x27;0&#x27;</span>||ch&gt;<span class=\"string\">&#x27;9&#x27;</span>)&#123;<span class=\"keyword\">if</span>(ch==<span class=\"string\">&#x27;-&#x27;</span>) f=<span class=\"number\">0</span>;ch=<span class=\"built_in\">getchar</span>();&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(ch&gt;=<span class=\"string\">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class=\"string\">&#x27;9&#x27;</span>)&#123;x=(x&lt;&lt;<span class=\"number\">1</span>)+(x&lt;&lt;<span class=\"number\">3</span>)+(ch&amp;<span class=\"number\">15</span>);ch=<span class=\"built_in\">getchar</span>();&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(f)<span class=\"keyword\">return</span> x;<span class=\"keyword\">else</span> <span class=\"keyword\">return</span> -x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">100010</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> n,m,k;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">node</span>&#123;<span class=\"type\">int</span> d,w,t;&#125;sta[N];</span><br><span class=\"line\"><span class=\"keyword\">inline</span> <span class=\"type\">bool</span> <span class=\"keyword\">operator</span> &lt;(<span class=\"type\">const</span> node &amp;a,<span class=\"type\">const</span> node &amp;b)</span><br><span class=\"line\">&#123;<span class=\"keyword\">return</span> a.w&gt;b.w||(a.w==b.w&amp;&amp;a.d&gt;b.d);&#125;</span><br><span class=\"line\">vector&lt;node&gt; e[N];</span><br><span class=\"line\">map&lt;node,<span class=\"type\">int</span>&gt; mp;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Insert</span><span class=\"params\">(node a)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(mp.<span class=\"built_in\">count</span>(a))mp[a]++;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> mp[a]=<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Delete</span><span class=\"params\">(node a)</span></span>&#123;</span><br><span class=\"line\">\tmp[a]--;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(!mp[a])mp.<span class=\"built_in\">erase</span>(a);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">long</span> <span class=\"type\">long</span> f[<span class=\"number\">2</span>][N],ans=(<span class=\"number\">1ll</span>&lt;&lt;<span class=\"number\">62</span>);</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tn=<span class=\"built_in\">read</span>();m=<span class=\"built_in\">read</span>();k=<span class=\"built_in\">read</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>,s,t,d,w;i&lt;=k;i++)&#123;</span><br><span class=\"line\">\t\ts=<span class=\"built_in\">read</span>(),t=<span class=\"built_in\">read</span>(),d=<span class=\"built_in\">read</span>(),w=<span class=\"built_in\">read</span>();</span><br><span class=\"line\">\t\te[s].<span class=\"built_in\">push_back</span>((node)&#123;d,w,<span class=\"number\">1</span>&#125;);</span><br><span class=\"line\">\t\te[t+<span class=\"number\">1</span>].<span class=\"built_in\">push_back</span>((node)&#123;d,w,<span class=\"number\">-1</span>&#125;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> p:e[i])</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(~p.t)<span class=\"built_in\">Insert</span>(p);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span> <span class=\"built_in\">Delete</span>(p);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(mp.<span class=\"built_in\">size</span>())sta[i]=(*mp.<span class=\"built_in\">begin</span>()).first;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> sta[i]=(node)&#123;i,<span class=\"number\">0</span>,<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">memset</span>(f,<span class=\"number\">0x3f</span>,<span class=\"built_in\">sizeof</span>(f));f[<span class=\"number\">0</span>][<span class=\"number\">1</span>]=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"type\">int</span> cas=<span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">0</span>;j&lt;=m;j++)&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">memset</span>(f[cas],<span class=\"number\">0x3f</span>,<span class=\"built_in\">sizeof</span>(f[cas]));</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">\t\t\tf[cas][i+<span class=\"number\">1</span>]=<span class=\"built_in\">min</span>(f[cas][i+<span class=\"number\">1</span>],f[cas^<span class=\"number\">1</span>][i]);</span><br><span class=\"line\">\t\t\tf[cas^<span class=\"number\">1</span>][sta[i].d+<span class=\"number\">1</span>]=<span class=\"built_in\">min</span>(f[cas^<span class=\"number\">1</span>][sta[i].d+<span class=\"number\">1</span>],f[cas^<span class=\"number\">1</span>][i]+sta[i].w);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tans=<span class=\"built_in\">min</span>(ans,f[cas^<span class=\"number\">1</span>][n+<span class=\"number\">1</span>]);cas^=<span class=\"number\">1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%lld\\n&quot;</span>,ans);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"F-Lunar-New-Year-and-a-Recursive-Sequence\"><a href=\"#F-Lunar-New-Year-and-a-Recursive-Sequence\" class=\"headerlink\" title=\"F. Lunar New Year and a Recursive Sequence\"></a><a href=\"https://codeforces.com/contest/1106/problem/F\">F. Lunar New Year and a Recursive Sequence</a></h2><p>$\\ \\ \\ \\ \\ \\ \\,$感觉这道题操作比E题麻烦一点，但是确实比E题好想呢。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20190215213423624.jpg\" alt=\"在这里插入图片描述\"></p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$看到是一个有 $k$ 项的递推式，马上就可以想到矩乘，而前 $k-1$ 项已经确定了是 $1$，我们不妨设要求的 $f_k$ 为 $a$ 。根据他给的式子啊，我们就容易发现，这个递推式的每一项都应该是 $a^x$ 的形式，知道第 $n$ 项是 $a$ 的多少次方就要好处理一些了。</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$这样子稍微观察一下矩阵乘法就定义好了：</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$转移矩阵：$A=$</p>\n<p>$<br>\\begin{bmatrix}0&amp;0&amp;\\cdots&amp;0&amp;b_k\\\\ 1&amp;0&amp;\\cdots&amp;0&amp;b_{k-1}\\\\0&amp;1&amp;\\cdots&amp;0&amp;b_{k-2}\\\\\\vdots&amp;\\vdots&amp;\\ddots&amp;\\vdots&amp;\\vdots\\\\0&amp;0&amp;\\cdots&amp;1&amp;b_1\\end{bmatrix}<br>$</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$初始矩阵：$S=$</p>\n<p>$<br>\\begin{bmatrix}0,0,\\cdots,0,1\\end{bmatrix}<br>$</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$那么第 $n$ 项的指数，就是 $S\\cdot A^{n-k}$ 的第 $k$ 项，矩阵乘法取模的时候，根据欧拉定理，因为模数是素数，直接每次模 $mod-1$ 就好了。</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$现在问题是，我们知道 $x$，$m$，$mod$，$a^x\\%mod=m$，如何求 $a$ 呢？</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$好在他给我们的模数很特殊，我们很清楚他的原根为 $3$ ，那么我们可以重新把 $a$ 定义为 $3^s\\%mod$，所以原式化为:</p>\n<p>$3^{sx}\\%mod=m$</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$我们可以很轻松用 BSGS 算法知道 $sx\\%(mod-1)$的取值，而我们又知道 $x\\%(mod-1)$ 的取值，扩展GCD处理一下就好咯~</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20190215213335919.jpg\" alt=\"在这里插入图片描述\"></p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$然后我们就知道 $s$ 的取值了（也有可能无解），那么答案也就出来了：$f_k=3^s$。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdlib&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cctype&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;stack&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;map&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;set&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> inf=<span class=\"number\">0x7fffffff</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">double</span> eps=<span class=\"number\">1e-10</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">double</span> pi=<span class=\"built_in\">acos</span>(<span class=\"number\">-1.0</span>);</span><br><span class=\"line\"><span class=\"comment\">//char buf[1&lt;&lt;15],*S=buf,*T=buf;</span></span><br><span class=\"line\"><span class=\"comment\">//char getch()&#123;return S==T&amp;&amp;(T=(S=buf)+fread(buf,1,1&lt;&lt;15,stdin),S==T)?0:*S++;&#125;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">int</span> <span class=\"title\">read</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> x=<span class=\"number\">0</span>,f=<span class=\"number\">1</span>;<span class=\"type\">char</span> ch;ch=<span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(ch&lt;<span class=\"string\">&#x27;0&#x27;</span>||ch&gt;<span class=\"string\">&#x27;9&#x27;</span>)&#123;<span class=\"keyword\">if</span>(ch==<span class=\"string\">&#x27;-&#x27;</span>) f=<span class=\"number\">0</span>;ch=<span class=\"built_in\">getchar</span>();&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(ch&gt;=<span class=\"string\">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class=\"string\">&#x27;9&#x27;</span>)&#123;x=(x&lt;&lt;<span class=\"number\">1</span>)+(x&lt;&lt;<span class=\"number\">3</span>)+(ch&amp;<span class=\"number\">15</span>);ch=<span class=\"built_in\">getchar</span>();&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(f)<span class=\"keyword\">return</span> x;<span class=\"keyword\">else</span> <span class=\"keyword\">return</span> -x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> mod=<span class=\"number\">998244353</span>;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">matrix</span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> x,y;</span><br><span class=\"line\">\t<span class=\"type\">int</span> a[<span class=\"number\">101</span>][<span class=\"number\">101</span>];</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"type\">int</span> K,m,n;</span><br><span class=\"line\">matrix S,A,T;</span><br><span class=\"line\">matrix <span class=\"keyword\">operator</span> *(matrix m1,matrix m2)&#123;</span><br><span class=\"line\">\tmatrix t;t.x=m1.x;t.y=m2.y;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=m1.x;i++)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;=m2.y;j++)&#123;</span><br><span class=\"line\">\t  \tt.a[i][j]=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t  \t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> k=<span class=\"number\">1</span>;k&lt;=m1.y;k++)</span><br><span class=\"line\">\t  \tt.a[i][j]=(<span class=\"number\">1ll</span>*t.a[i][j]+<span class=\"number\">1ll</span>*m1.a[i][k]*m2.a[k][j])%(mod<span class=\"number\">-1</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> t;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\">matrix <span class=\"title\">power</span><span class=\"params\">(matrix a,<span class=\"type\">int</span> b)</span></span>&#123;</span><br><span class=\"line\">\tmatrix ans=a;b--;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(b)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(b&amp;<span class=\"number\">1ll</span>)ans=ans*a;</span><br><span class=\"line\">\t\ta=a*a;b&gt;&gt;=<span class=\"number\">1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">power</span><span class=\"params\">(<span class=\"type\">int</span> a,<span class=\"type\">int</span> b,<span class=\"type\">int</span> mod)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> ans=<span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(b)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(b&amp;<span class=\"number\">1</span>)ans=(<span class=\"number\">1ll</span>*ans*a)%mod;</span><br><span class=\"line\">\t\ta=(<span class=\"number\">1ll</span>*a*a)%mod;</span><br><span class=\"line\">\t\tb&gt;&gt;=<span class=\"number\">1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"title\">BSGS</span><span class=\"params\">(<span class=\"type\">long</span> <span class=\"type\">long</span> a,<span class=\"type\">long</span> <span class=\"type\">long</span> b,<span class=\"type\">long</span> <span class=\"type\">long</span> c)</span></span>&#123;</span><br><span class=\"line\">  \tmap&lt;<span class=\"type\">int</span>,<span class=\"type\">int</span>&gt;hash;hash.<span class=\"built_in\">clear</span>();b%=c;</span><br><span class=\"line\">  \t<span class=\"type\">int</span> t=(<span class=\"type\">int</span>)<span class=\"built_in\">sqrt</span>(c)+<span class=\"number\">1</span>;</span><br><span class=\"line\">  \t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">0</span>;j&lt;t;j++)&#123;</span><br><span class=\"line\">    \t<span class=\"type\">int</span> val=(<span class=\"type\">int</span>)(b*<span class=\"built_in\">power</span>(a,j,c)%c);</span><br><span class=\"line\">    \thash[val]=j;</span><br><span class=\"line\">  \t&#125;</span><br><span class=\"line\">  \ta=<span class=\"built_in\">power</span>(a,t,c);</span><br><span class=\"line\">  \t<span class=\"keyword\">if</span>(a==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">  \t\t<span class=\"keyword\">if</span>(b==<span class=\"number\">0</span>)<span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    \t<span class=\"keyword\">else</span> <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">  \t&#125;</span><br><span class=\"line\">  \t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;=t;i++)&#123;</span><br><span class=\"line\">    \t<span class=\"type\">int</span> val=<span class=\"built_in\">power</span>(a,i,c);</span><br><span class=\"line\">    \t<span class=\"type\">int</span> j=hash.<span class=\"built_in\">find</span>(val)==hash.<span class=\"built_in\">end</span>()?<span class=\"number\">-1</span>:hash[val];</span><br><span class=\"line\">    \t<span class=\"keyword\">if</span>(j&gt;=<span class=\"number\">0</span>&amp;&amp;i*t-j&gt;=<span class=\"number\">0</span>)<span class=\"keyword\">return</span> i*t-j;</span><br><span class=\"line\">  \t&#125;</span><br><span class=\"line\">  \t<span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">exgcd</span><span class=\"params\">(<span class=\"type\">long</span> <span class=\"type\">long</span> a,<span class=\"type\">long</span> <span class=\"type\">long</span> b,<span class=\"type\">long</span> <span class=\"type\">long</span> &amp;d,<span class=\"type\">long</span> <span class=\"type\">long</span> &amp;x,<span class=\"type\">long</span> <span class=\"type\">long</span> &amp;y)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(!b)&#123;d=a;x=<span class=\"number\">1</span>;y=<span class=\"number\">0</span>;<span class=\"keyword\">return</span>;&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">exgcd</span>(b,a%b,d,y,x);y-=x*(a/b);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tK=<span class=\"built_in\">read</span>();S.x=<span class=\"number\">1</span>;</span><br><span class=\"line\">\tA.x=A.y=S.y=K;S.a[<span class=\"number\">1</span>][K]=<span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">2</span>;i&lt;=K;i++)A.a[i][i<span class=\"number\">-1</span>]=<span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=K;i&gt;=<span class=\"number\">1</span>;i--)A.a[i][K]=<span class=\"built_in\">read</span>();</span><br><span class=\"line\">\tn=<span class=\"built_in\">read</span>();m=<span class=\"built_in\">read</span>();</span><br><span class=\"line\">\tT=S*<span class=\"built_in\">power</span>(A,n-K);</span><br><span class=\"line\">\t<span class=\"type\">long</span> <span class=\"type\">long</span> t=<span class=\"built_in\">BSGS</span>(<span class=\"number\">3ll</span>,<span class=\"number\">1ll</span>*m,mod);</span><br><span class=\"line\">\t<span class=\"type\">long</span> <span class=\"type\">long</span> g,x,y;</span><br><span class=\"line\">\t<span class=\"built_in\">exgcd</span>(T.a[<span class=\"number\">1</span>][K],mod<span class=\"number\">-1</span>,g,x,y);</span><br><span class=\"line\">  \t<span class=\"keyword\">if</span>(t%g)<span class=\"built_in\">puts</span>(<span class=\"string\">&quot;-1&quot;</span>);</span><br><span class=\"line\">  \t<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">   \t\tx=(t/g*x%(mod<span class=\"number\">-1</span>)+mod<span class=\"number\">-1</span>)%(mod<span class=\"number\">-1</span>);</span><br><span class=\"line\">    \t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>,<span class=\"built_in\">power</span>(<span class=\"number\">3</span>,x,mod));</span><br><span class=\"line\">  \t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"完结撒花\"><a href=\"#完结撒花\" class=\"headerlink\" title=\"完结撒花\"></a>完结撒花</h2><p><img src=\"https://img-blog.csdnimg.cn/20190215213506253.gif\" alt=\"在这里插入图片描述\"></p>"},{"title":"【SCOI2016】Day1初略题解","date":"2019-02-13T08:41:29.000Z","mathjax":true,"_content":"$\\ \\ \\ \\ \\ \\,$做一套省选题来练练手（Day1）。\n\n<!-- more -->\n\n\n## [【T1 背单词】](https://www.luogu.org/problemnew/show/P3294)\n\n### 解法\n\n$\\ \\ \\ \\ \\ \\,$ 由题意可以得到，如果存在一个单词是它的后缀，并且当前没有被填入表内，那他需要吃 n*n 颗泡椒，这显然是很不合算的。要优先填入后缀。\n\n$\\ \\ \\ \\ \\ \\,$第一个问题是如何找后缀，我们可以把串反过来插入 $Trie$ 树，然后按照$Trie$ 树上的父子关系新建树，按照一种神奇的 $DFS$ 序来依次填入。\n\n$\\ \\ \\ \\ \\ \\,$ 现在的问题是如何处理这个 $DFS$ 序，手玩一点小样例可以发现，优先走子树小的较优，现在我们得到了填入顺序，每个点的填入序号减去他父亲的和，就是我们的答案，复杂度 $O(|len|+3n)$\n\n### 代码\n\n``` cpp\n#include<queue>\n#include<string>\n#include<cstdio>\n#include<cstring>\n#include<iostream>\n#include<algorithm>\nusing namespace std;\ntypedef long long ll;\ninline int read(){\n\tint x=0,p=1;char c=getchar();\n\twhile(c<'0'||c>'9'){if(c=='-') p=-1;c=getchar();}\n\twhile(c<='9'&&c>='0'){x=(x<<1)+(x<<3)+(c&15);c=getchar();}\n\treturn x*p;\n}\nconst int N=510010;\nint son[N][26],appear[N];\nint id[N],cnt2,rt,cnt,n,size[N];\nchar s[N];\nvector<int> a[100010];\nbool cmp(int x,int y){return size[x]<size[y];}\nvoid insert(char *s,int id){\n\tint len=strlen(s+1);int now=rt,v;\n\tfor(int i=len;i;i--){\n\t\tif(!son[now][s[i]-'a'])son[now][s[i]-'a']=++cnt;\n\t\tnow=son[now][s[i]-'a'];\n\t}\n\tappear[now]=id;\n}\nvoid dfs1(int rt,int fa){\n\tif(appear[rt]){a[fa].push_back(appear[rt]);fa=appear[rt];}\n\tfor(int i=0;i<26;i++)if(son[rt][i])\n\tid[son[rt][i]]=id[rt],dfs1(son[rt][i],fa);\n}\nvoid dfs2(int rt){\n\tsize[rt]=1;\n\tfor(int i=0;i<a[rt].size();i++)\n\tdfs2(a[rt][i]),size[rt]+=size[a[rt][i]];\n}\nlong long ans;\nvoid get_ans(int rt){\n\tid[rt]=++cnt2;\n\tsort(a[rt].begin(),a[rt].end(),cmp);\n\tfor(int i=0;i<a[rt].size();i++)\n\tans+=cnt2+1-id[rt],get_ans(a[rt][i]);\n}\nint main(){\n\tfreopen(\"word.in\",\"r\",stdin);\n\tfreopen(\"word.out\",\"w\",stdout);\n\tn=read();\n\tfor(int i=1;i<=n;i++)\n\tscanf(\"%s\",s+1),insert(s,i);\n\tdfs1(0,0);\n\tdfs2(0);\n\tget_ans(0);\n\tprintf(\"%lld\\n\",ans);\n\tfclose(stdin);\n\tfclose(stdout);\n\treturn 0;\n}\n\n```\n\n## [【T2 幸运数字】](https://www.luogu.org/problemnew/show/P3292)\n\n### 解法\n\n$\\ \\ \\ \\ \\ \\,$ 一眼可以看出来是实数异或线性基，不会这个的话就完全不能做这道题的。\n\n$\\ \\ \\ \\ \\ \\,$下面的问题是，如何高效地处理路径问题？\n\n$\\ \\ \\ \\ \\ \\,$我第一个想到的是树链剖分，复杂度为 $O(Q \\log^2n)$，算上线性基合并的复杂度 $60\\times 60$ 的常数有点吃不消。询问次数很大，我们可以试着多预处理一点。\n\n$\\ \\ \\ \\ \\ \\,$倍增的复杂度为$O(Q \\log n)$，加上一些蜜汁卡常数技巧，比如说去掉结构体啊什么的，就过了，空间还算充裕，没有那么卡。代码比较丑：\n\n### 代码\n\n``` cpp\n#include<queue>\n#include<string>\n#include<cstdio>\n#include<cstring>\n#include<iostream>\n#include<algorithm>\nusing namespace std;\ntypedef long long ll;\ninline long long read(){\n\tlong long x=0,p=1;char c=getchar();\n\twhile(c<'0'||c>'9'){if(c=='-') p=-1;c=getchar();}\n\twhile(c<='9'&&c>='0'){x=(x<<1)+(x<<3)+(c&15);c=getchar();}\n\treturn x*p;\n}\nconst int N=20010;\nint n,m;\nlong long V[N],res;\nint head[N],p;\nstruct ss{int last,v;}G[N<<1];\nvoid add(int a,int b){\n\tG[++p]=(ss){head[a],b};head[a]=p;\n\tG[++p]=(ss){head[b],a};head[b]=p;\n}\nlong long lb[N][19][61],ans[61];\nvoid insert(long long *a,long long x){\n\tfor(register int i=60;i>=0;i--)\n\tif(x&(1ll<<i))\n\tif(!a[i]){a[i]=x;return;}\n\telse x^=a[i];\n}\nlong long querymax(long long *a){\n\tlong long res=0;\n\tfor(register int i=60;i>=0;--i)\n\tif((res^a[i])>res)res^=a[i];\n\treturn res;\n}\nvoid merge(long long *a,long long *b)\n{for(register int i=0;i<=60;i++)if(b[i])insert(a,b[i]);}\nint fa[N][19],deep[N];\nvoid dfs(int a,int f){\n\tfa[a][0]=f;deep[a]=deep[f]+1;\n\tfor(register int i=head[a];i;i=G[i].last)\n\tif(G[i].v!=f)dfs(G[i].v,a);\n}\nvoid query(int a,int b){\n\tmemset(ans,0,sizeof(ans));\n\tif(deep[a]>deep[b])swap(a,b);\n\tfor(register int i=18;i>=0;i--)\n\tif(deep[a]<=deep[b]-(1<<i))\n    merge(ans,lb[b][i]),b=fa[b][i];\n\tif(a==b){merge(ans,lb[a][0]);return ;}\n\tfor(register int i=18;i>=0;i--)if(fa[a][i]!=fa[b][i]){\n  \t\tmerge(ans,lb[a][i]),merge(ans,lb[b][i]);\n    \ta=fa[a][i],b=fa[b][i];\n\t}\n\tmerge(ans,lb[a][0]),merge(ans,lb[b][0]);\n\tmerge(ans,lb[fa[a][0]][0]);\n\treturn ;\n}\nint main()\n{\n\tfreopen(\"lucky.in\",\"r\",stdin);\n\tfreopen(\"lucky.out\",\"w\",stdout);\n\tn=(int)read();m=(int)read();\n\tfor(register int i=1;i<=n;i++)V[i]=read(),insert(lb[i][0],V[i]);\n\tfor(register int i=1,a,b;i<n;i++)\n    a=read(),b=read(),add(a,b);\n    dfs(1,0);\n    for(register int j=1;j<=18;j++)\n    for(register int i=1;i<=n;i++){\n    \tfa[i][j]=fa[fa[i][j-1]][j-1];\n  \t\tmemcpy(lb[i][j],lb[i][j-1],sizeof(lb[i][j-1]));\n    \tmerge(lb[i][j],lb[fa[i][j-1]][j-1]);\n\t}\n  \tfor(register int i=1,a,b;i<=m;i++){\n    \ta=(int)read();b=(int)read();\n    \tquery(a,b);\n    \tprintf(\"%lld\\n\",querymax(ans));\n\t}\n\treturn 0;\n}\n\n```\n\n## [【T3 萌萌哒】](https://www.luogu.org/problemnew/show/P3295)\n\n### 解法\n\n$\\ \\ \\ \\ \\ \\,$ 这道题前$30$分做法很显然吧，两段相关联的各个元素，我们可以用并查集并在一起，因为他们必须一定是同一种。最后统计并查集个数就好了，设个数为$cnt$，那么我们的答案是$9\\times 10^{cnt-1}$，因为包含第一个数位的只有$1$-$9$，其他可以取$0$-$9$。复杂度$O(n^2)$\n\n$\\ \\ \\ \\ \\ \\,$ 我们可以通过类似于势能分析来操作，来降低复杂度到$O(n\\log n)$，操作很骚，一开始没想到，也没有在其他地方见到过。\n\n### 代码\n\n``` cpp\n#include<queue>\n#include<string>\n#include<cstdio>\n#include<cstring>\n#include<iostream>\n#include<algorithm>\nusing namespace std;\ntypedef long long ll;\ninline int read(){\n\tint x=0,p=1;char c=getchar();\n\twhile(c<'0'||c>'9'){if(c=='-') p=-1;c=getchar();}\n\twhile(c<='9'&&c>='0'){x=(x<<1)+(x<<3)+(c&15);c=getchar();}\n\treturn x*p;\n}\nconst int N=1e5+10;\nint cnt,n,m;\nconst int mod=1e9+7;\nint power(int a,int b){\n\tint ans=1;\n\tfor(;b;b>>=1,a=1ll*a*a%mod)if(b&1)ans=1ll*a*ans%mod;\n\treturn ans;\n}\nint f[20][N];\n#define inv(x) power(x,mod-2)\ninline int find(int k,int x)\n{return f[k][x]==x?x:f[k][x]=find(k,f[k][x]);}\nint log_2(int x){\n\tint ret=0;\n\tfor(ret=0;x;x>>=1,ret++);\n\treturn ret-1;\n}\nvoid solve(int k,int xx,int yy){\n\tint r1=find(k,xx),r2=find(k,yy);\n\tif(r1==r2) return;\n\tf[k][r1]=r2;\n\tif(!k){cnt--;return;}\n\tsolve(k-1,xx,yy);\n\tsolve(k-1,xx+(1<<k-1),yy+(1<<k-1));\n}\nint main(){\n\tfreopen(\"moe.in\",\"r\",stdin);\n\tfreopen(\"moe.out\",\"w\",stdout);\n\tcnt=n=read();m=read();\n\tfor(int i=0;i<=18;i++)\n\tfor(int j=1;j<=n;j++)\n\tf[i][j]=j;\n\twhile(m--){\n\t\tint l1=read(),r1=read(),l2=read(),r2=read();\n\t\tif(l1>l2) swap(l1,l2),swap(r1,r2);\n\t\tint t=log_2(r1-l1+1);\n    \tsolve(t,l1,l2);\n    \tsolve(t,r1-(1<<t)+1,r2-(1<<t)+1);\n\t}\n\tprintf(\"%d\\n\",9ll*power(10,cnt-1)%mod);\n\tfclose(stdin);\n\tfclose(stdout);\n\treturn 0;\n}\n\n```","source":"_posts/SCOI2016-Day1初略题解.md","raw":"---\ntitle: '【SCOI2016】Day1初略题解'\ndate: 2019-02-13 16:41:29\ncategories:\n- 题解\ntags:\n- OI\n- 并查集\n- Trie树\n- 数据结构\n- 异或\n- 线性基\nmathjax: true\n---\n$\\ \\ \\ \\ \\ \\,$做一套省选题来练练手（Day1）。\n\n<!-- more -->\n\n\n## [【T1 背单词】](https://www.luogu.org/problemnew/show/P3294)\n\n### 解法\n\n$\\ \\ \\ \\ \\ \\,$ 由题意可以得到，如果存在一个单词是它的后缀，并且当前没有被填入表内，那他需要吃 n*n 颗泡椒，这显然是很不合算的。要优先填入后缀。\n\n$\\ \\ \\ \\ \\ \\,$第一个问题是如何找后缀，我们可以把串反过来插入 $Trie$ 树，然后按照$Trie$ 树上的父子关系新建树，按照一种神奇的 $DFS$ 序来依次填入。\n\n$\\ \\ \\ \\ \\ \\,$ 现在的问题是如何处理这个 $DFS$ 序，手玩一点小样例可以发现，优先走子树小的较优，现在我们得到了填入顺序，每个点的填入序号减去他父亲的和，就是我们的答案，复杂度 $O(|len|+3n)$\n\n### 代码\n\n``` cpp\n#include<queue>\n#include<string>\n#include<cstdio>\n#include<cstring>\n#include<iostream>\n#include<algorithm>\nusing namespace std;\ntypedef long long ll;\ninline int read(){\n\tint x=0,p=1;char c=getchar();\n\twhile(c<'0'||c>'9'){if(c=='-') p=-1;c=getchar();}\n\twhile(c<='9'&&c>='0'){x=(x<<1)+(x<<3)+(c&15);c=getchar();}\n\treturn x*p;\n}\nconst int N=510010;\nint son[N][26],appear[N];\nint id[N],cnt2,rt,cnt,n,size[N];\nchar s[N];\nvector<int> a[100010];\nbool cmp(int x,int y){return size[x]<size[y];}\nvoid insert(char *s,int id){\n\tint len=strlen(s+1);int now=rt,v;\n\tfor(int i=len;i;i--){\n\t\tif(!son[now][s[i]-'a'])son[now][s[i]-'a']=++cnt;\n\t\tnow=son[now][s[i]-'a'];\n\t}\n\tappear[now]=id;\n}\nvoid dfs1(int rt,int fa){\n\tif(appear[rt]){a[fa].push_back(appear[rt]);fa=appear[rt];}\n\tfor(int i=0;i<26;i++)if(son[rt][i])\n\tid[son[rt][i]]=id[rt],dfs1(son[rt][i],fa);\n}\nvoid dfs2(int rt){\n\tsize[rt]=1;\n\tfor(int i=0;i<a[rt].size();i++)\n\tdfs2(a[rt][i]),size[rt]+=size[a[rt][i]];\n}\nlong long ans;\nvoid get_ans(int rt){\n\tid[rt]=++cnt2;\n\tsort(a[rt].begin(),a[rt].end(),cmp);\n\tfor(int i=0;i<a[rt].size();i++)\n\tans+=cnt2+1-id[rt],get_ans(a[rt][i]);\n}\nint main(){\n\tfreopen(\"word.in\",\"r\",stdin);\n\tfreopen(\"word.out\",\"w\",stdout);\n\tn=read();\n\tfor(int i=1;i<=n;i++)\n\tscanf(\"%s\",s+1),insert(s,i);\n\tdfs1(0,0);\n\tdfs2(0);\n\tget_ans(0);\n\tprintf(\"%lld\\n\",ans);\n\tfclose(stdin);\n\tfclose(stdout);\n\treturn 0;\n}\n\n```\n\n## [【T2 幸运数字】](https://www.luogu.org/problemnew/show/P3292)\n\n### 解法\n\n$\\ \\ \\ \\ \\ \\,$ 一眼可以看出来是实数异或线性基，不会这个的话就完全不能做这道题的。\n\n$\\ \\ \\ \\ \\ \\,$下面的问题是，如何高效地处理路径问题？\n\n$\\ \\ \\ \\ \\ \\,$我第一个想到的是树链剖分，复杂度为 $O(Q \\log^2n)$，算上线性基合并的复杂度 $60\\times 60$ 的常数有点吃不消。询问次数很大，我们可以试着多预处理一点。\n\n$\\ \\ \\ \\ \\ \\,$倍增的复杂度为$O(Q \\log n)$，加上一些蜜汁卡常数技巧，比如说去掉结构体啊什么的，就过了，空间还算充裕，没有那么卡。代码比较丑：\n\n### 代码\n\n``` cpp\n#include<queue>\n#include<string>\n#include<cstdio>\n#include<cstring>\n#include<iostream>\n#include<algorithm>\nusing namespace std;\ntypedef long long ll;\ninline long long read(){\n\tlong long x=0,p=1;char c=getchar();\n\twhile(c<'0'||c>'9'){if(c=='-') p=-1;c=getchar();}\n\twhile(c<='9'&&c>='0'){x=(x<<1)+(x<<3)+(c&15);c=getchar();}\n\treturn x*p;\n}\nconst int N=20010;\nint n,m;\nlong long V[N],res;\nint head[N],p;\nstruct ss{int last,v;}G[N<<1];\nvoid add(int a,int b){\n\tG[++p]=(ss){head[a],b};head[a]=p;\n\tG[++p]=(ss){head[b],a};head[b]=p;\n}\nlong long lb[N][19][61],ans[61];\nvoid insert(long long *a,long long x){\n\tfor(register int i=60;i>=0;i--)\n\tif(x&(1ll<<i))\n\tif(!a[i]){a[i]=x;return;}\n\telse x^=a[i];\n}\nlong long querymax(long long *a){\n\tlong long res=0;\n\tfor(register int i=60;i>=0;--i)\n\tif((res^a[i])>res)res^=a[i];\n\treturn res;\n}\nvoid merge(long long *a,long long *b)\n{for(register int i=0;i<=60;i++)if(b[i])insert(a,b[i]);}\nint fa[N][19],deep[N];\nvoid dfs(int a,int f){\n\tfa[a][0]=f;deep[a]=deep[f]+1;\n\tfor(register int i=head[a];i;i=G[i].last)\n\tif(G[i].v!=f)dfs(G[i].v,a);\n}\nvoid query(int a,int b){\n\tmemset(ans,0,sizeof(ans));\n\tif(deep[a]>deep[b])swap(a,b);\n\tfor(register int i=18;i>=0;i--)\n\tif(deep[a]<=deep[b]-(1<<i))\n    merge(ans,lb[b][i]),b=fa[b][i];\n\tif(a==b){merge(ans,lb[a][0]);return ;}\n\tfor(register int i=18;i>=0;i--)if(fa[a][i]!=fa[b][i]){\n  \t\tmerge(ans,lb[a][i]),merge(ans,lb[b][i]);\n    \ta=fa[a][i],b=fa[b][i];\n\t}\n\tmerge(ans,lb[a][0]),merge(ans,lb[b][0]);\n\tmerge(ans,lb[fa[a][0]][0]);\n\treturn ;\n}\nint main()\n{\n\tfreopen(\"lucky.in\",\"r\",stdin);\n\tfreopen(\"lucky.out\",\"w\",stdout);\n\tn=(int)read();m=(int)read();\n\tfor(register int i=1;i<=n;i++)V[i]=read(),insert(lb[i][0],V[i]);\n\tfor(register int i=1,a,b;i<n;i++)\n    a=read(),b=read(),add(a,b);\n    dfs(1,0);\n    for(register int j=1;j<=18;j++)\n    for(register int i=1;i<=n;i++){\n    \tfa[i][j]=fa[fa[i][j-1]][j-1];\n  \t\tmemcpy(lb[i][j],lb[i][j-1],sizeof(lb[i][j-1]));\n    \tmerge(lb[i][j],lb[fa[i][j-1]][j-1]);\n\t}\n  \tfor(register int i=1,a,b;i<=m;i++){\n    \ta=(int)read();b=(int)read();\n    \tquery(a,b);\n    \tprintf(\"%lld\\n\",querymax(ans));\n\t}\n\treturn 0;\n}\n\n```\n\n## [【T3 萌萌哒】](https://www.luogu.org/problemnew/show/P3295)\n\n### 解法\n\n$\\ \\ \\ \\ \\ \\,$ 这道题前$30$分做法很显然吧，两段相关联的各个元素，我们可以用并查集并在一起，因为他们必须一定是同一种。最后统计并查集个数就好了，设个数为$cnt$，那么我们的答案是$9\\times 10^{cnt-1}$，因为包含第一个数位的只有$1$-$9$，其他可以取$0$-$9$。复杂度$O(n^2)$\n\n$\\ \\ \\ \\ \\ \\,$ 我们可以通过类似于势能分析来操作，来降低复杂度到$O(n\\log n)$，操作很骚，一开始没想到，也没有在其他地方见到过。\n\n### 代码\n\n``` cpp\n#include<queue>\n#include<string>\n#include<cstdio>\n#include<cstring>\n#include<iostream>\n#include<algorithm>\nusing namespace std;\ntypedef long long ll;\ninline int read(){\n\tint x=0,p=1;char c=getchar();\n\twhile(c<'0'||c>'9'){if(c=='-') p=-1;c=getchar();}\n\twhile(c<='9'&&c>='0'){x=(x<<1)+(x<<3)+(c&15);c=getchar();}\n\treturn x*p;\n}\nconst int N=1e5+10;\nint cnt,n,m;\nconst int mod=1e9+7;\nint power(int a,int b){\n\tint ans=1;\n\tfor(;b;b>>=1,a=1ll*a*a%mod)if(b&1)ans=1ll*a*ans%mod;\n\treturn ans;\n}\nint f[20][N];\n#define inv(x) power(x,mod-2)\ninline int find(int k,int x)\n{return f[k][x]==x?x:f[k][x]=find(k,f[k][x]);}\nint log_2(int x){\n\tint ret=0;\n\tfor(ret=0;x;x>>=1,ret++);\n\treturn ret-1;\n}\nvoid solve(int k,int xx,int yy){\n\tint r1=find(k,xx),r2=find(k,yy);\n\tif(r1==r2) return;\n\tf[k][r1]=r2;\n\tif(!k){cnt--;return;}\n\tsolve(k-1,xx,yy);\n\tsolve(k-1,xx+(1<<k-1),yy+(1<<k-1));\n}\nint main(){\n\tfreopen(\"moe.in\",\"r\",stdin);\n\tfreopen(\"moe.out\",\"w\",stdout);\n\tcnt=n=read();m=read();\n\tfor(int i=0;i<=18;i++)\n\tfor(int j=1;j<=n;j++)\n\tf[i][j]=j;\n\twhile(m--){\n\t\tint l1=read(),r1=read(),l2=read(),r2=read();\n\t\tif(l1>l2) swap(l1,l2),swap(r1,r2);\n\t\tint t=log_2(r1-l1+1);\n    \tsolve(t,l1,l2);\n    \tsolve(t,r1-(1<<t)+1,r2-(1<<t)+1);\n\t}\n\tprintf(\"%d\\n\",9ll*power(10,cnt-1)%mod);\n\tfclose(stdin);\n\tfclose(stdout);\n\treturn 0;\n}\n\n```","slug":"SCOI2016-Day1初略题解","published":1,"updated":"2022-02-13T09:17:24.812Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0i63w5v000eu4gbcg0x86ki","content":"<p>$\\ \\ \\ \\ \\ \\,$做一套省选题来练练手（Day1）。</p>\n<span id=\"more\"></span>\n<h2 id=\"【T1-背单词】\"><a href=\"#【T1-背单词】\" class=\"headerlink\" title=\"【T1 背单词】\"></a><a href=\"https://www.luogu.org/problemnew/show/P3294\">【T1 背单词】</a></h2><h3 id=\"解法\"><a href=\"#解法\" class=\"headerlink\" title=\"解法\"></a>解法</h3><p>$\\ \\ \\ \\ \\ \\,$ 由题意可以得到，如果存在一个单词是它的后缀，并且当前没有被填入表内，那他需要吃 n*n 颗泡椒，这显然是很不合算的。要优先填入后缀。</p>\n<p>$\\ \\ \\ \\ \\ \\,$第一个问题是如何找后缀，我们可以把串反过来插入 $Trie$ 树，然后按照$Trie$ 树上的父子关系新建树，按照一种神奇的 $DFS$ 序来依次填入。</p>\n<p>$\\ \\ \\ \\ \\ \\,$ 现在的问题是如何处理这个 $DFS$ 序，手玩一点小样例可以发现，优先走子树小的较优，现在我们得到了填入顺序，每个点的填入序号减去他父亲的和，就是我们的答案，复杂度 $O(|len|+3n)$</p>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">long</span> <span class=\"type\">long</span> ll;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">int</span> <span class=\"title\">read</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> x=<span class=\"number\">0</span>,p=<span class=\"number\">1</span>;<span class=\"type\">char</span> c=<span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(c&lt;<span class=\"string\">&#x27;0&#x27;</span>||c&gt;<span class=\"string\">&#x27;9&#x27;</span>)&#123;<span class=\"keyword\">if</span>(c==<span class=\"string\">&#x27;-&#x27;</span>) p=<span class=\"number\">-1</span>;c=<span class=\"built_in\">getchar</span>();&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(c&lt;=<span class=\"string\">&#x27;9&#x27;</span>&amp;&amp;c&gt;=<span class=\"string\">&#x27;0&#x27;</span>)&#123;x=(x&lt;&lt;<span class=\"number\">1</span>)+(x&lt;&lt;<span class=\"number\">3</span>)+(c&amp;<span class=\"number\">15</span>);c=<span class=\"built_in\">getchar</span>();&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> x*p;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">510010</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> son[N][<span class=\"number\">26</span>],appear[N];</span><br><span class=\"line\"><span class=\"type\">int</span> id[N],cnt2,rt,cnt,n,size[N];</span><br><span class=\"line\"><span class=\"type\">char</span> s[N];</span><br><span class=\"line\">vector&lt;<span class=\"type\">int</span>&gt; a[<span class=\"number\">100010</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">cmp</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> y)</span></span>&#123;<span class=\"keyword\">return</span> size[x]&lt;size[y];&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">insert</span><span class=\"params\">(<span class=\"type\">char</span> *s,<span class=\"type\">int</span> id)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> len=<span class=\"built_in\">strlen</span>(s+<span class=\"number\">1</span>);<span class=\"type\">int</span> now=rt,v;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=len;i;i--)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(!son[now][s[i]-<span class=\"string\">&#x27;a&#x27;</span>])son[now][s[i]-<span class=\"string\">&#x27;a&#x27;</span>]=++cnt;</span><br><span class=\"line\">\t\tnow=son[now][s[i]-<span class=\"string\">&#x27;a&#x27;</span>];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tappear[now]=id;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">dfs1</span><span class=\"params\">(<span class=\"type\">int</span> rt,<span class=\"type\">int</span> fa)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(appear[rt])&#123;a[fa].<span class=\"built_in\">push_back</span>(appear[rt]);fa=appear[rt];&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">26</span>;i++)<span class=\"keyword\">if</span>(son[rt][i])</span><br><span class=\"line\">\tid[son[rt][i]]=id[rt],<span class=\"built_in\">dfs1</span>(son[rt][i],fa);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">dfs2</span><span class=\"params\">(<span class=\"type\">int</span> rt)</span></span>&#123;</span><br><span class=\"line\">\tsize[rt]=<span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;a[rt].<span class=\"built_in\">size</span>();i++)</span><br><span class=\"line\">\t<span class=\"built_in\">dfs2</span>(a[rt][i]),size[rt]+=size[a[rt][i]];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">long</span> <span class=\"type\">long</span> ans;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">get_ans</span><span class=\"params\">(<span class=\"type\">int</span> rt)</span></span>&#123;</span><br><span class=\"line\">\tid[rt]=++cnt2;</span><br><span class=\"line\">\t<span class=\"built_in\">sort</span>(a[rt].<span class=\"built_in\">begin</span>(),a[rt].<span class=\"built_in\">end</span>(),cmp);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;a[rt].<span class=\"built_in\">size</span>();i++)</span><br><span class=\"line\">\tans+=cnt2+<span class=\"number\">1</span>-id[rt],<span class=\"built_in\">get_ans</span>(a[rt][i]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">freopen</span>(<span class=\"string\">&quot;word.in&quot;</span>,<span class=\"string\">&quot;r&quot;</span>,stdin);</span><br><span class=\"line\">\t<span class=\"built_in\">freopen</span>(<span class=\"string\">&quot;word.out&quot;</span>,<span class=\"string\">&quot;w&quot;</span>,stdout);</span><br><span class=\"line\">\tn=<span class=\"built_in\">read</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)</span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%s&quot;</span>,s+<span class=\"number\">1</span>),<span class=\"built_in\">insert</span>(s,i);</span><br><span class=\"line\">\t<span class=\"built_in\">dfs1</span>(<span class=\"number\">0</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">dfs2</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">get_ans</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%lld\\n&quot;</span>,ans);</span><br><span class=\"line\">\t<span class=\"built_in\">fclose</span>(stdin);</span><br><span class=\"line\">\t<span class=\"built_in\">fclose</span>(stdout);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"【T2-幸运数字】\"><a href=\"#【T2-幸运数字】\" class=\"headerlink\" title=\"【T2 幸运数字】\"></a><a href=\"https://www.luogu.org/problemnew/show/P3292\">【T2 幸运数字】</a></h2><h3 id=\"解法-1\"><a href=\"#解法-1\" class=\"headerlink\" title=\"解法\"></a>解法</h3><p>$\\ \\ \\ \\ \\ \\,$ 一眼可以看出来是实数异或线性基，不会这个的话就完全不能做这道题的。</p>\n<p>$\\ \\ \\ \\ \\ \\,$下面的问题是，如何高效地处理路径问题？</p>\n<p>$\\ \\ \\ \\ \\ \\,$我第一个想到的是树链剖分，复杂度为 $O(Q \\log^2n)$，算上线性基合并的复杂度 $60\\times 60$ 的常数有点吃不消。询问次数很大，我们可以试着多预处理一点。</p>\n<p>$\\ \\ \\ \\ \\ \\,$倍增的复杂度为$O(Q \\log n)$，加上一些蜜汁卡常数技巧，比如说去掉结构体啊什么的，就过了，空间还算充裕，没有那么卡。代码比较丑：</p>\n<h3 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">long</span> <span class=\"type\">long</span> ll;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"title\">read</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">long</span> <span class=\"type\">long</span> x=<span class=\"number\">0</span>,p=<span class=\"number\">1</span>;<span class=\"type\">char</span> c=<span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(c&lt;<span class=\"string\">&#x27;0&#x27;</span>||c&gt;<span class=\"string\">&#x27;9&#x27;</span>)&#123;<span class=\"keyword\">if</span>(c==<span class=\"string\">&#x27;-&#x27;</span>) p=<span class=\"number\">-1</span>;c=<span class=\"built_in\">getchar</span>();&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(c&lt;=<span class=\"string\">&#x27;9&#x27;</span>&amp;&amp;c&gt;=<span class=\"string\">&#x27;0&#x27;</span>)&#123;x=(x&lt;&lt;<span class=\"number\">1</span>)+(x&lt;&lt;<span class=\"number\">3</span>)+(c&amp;<span class=\"number\">15</span>);c=<span class=\"built_in\">getchar</span>();&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> x*p;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">20010</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> n,m;</span><br><span class=\"line\"><span class=\"type\">long</span> <span class=\"type\">long</span> V[N],res;</span><br><span class=\"line\"><span class=\"type\">int</span> head[N],p;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">ss</span>&#123;<span class=\"type\">int</span> last,v;&#125;G[N&lt;&lt;<span class=\"number\">1</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"type\">int</span> a,<span class=\"type\">int</span> b)</span></span>&#123;</span><br><span class=\"line\">\tG[++p]=(ss)&#123;head[a],b&#125;;head[a]=p;</span><br><span class=\"line\">\tG[++p]=(ss)&#123;head[b],a&#125;;head[b]=p;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">long</span> <span class=\"type\">long</span> lb[N][<span class=\"number\">19</span>][<span class=\"number\">61</span>],ans[<span class=\"number\">61</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">insert</span><span class=\"params\">(<span class=\"type\">long</span> <span class=\"type\">long</span> *a,<span class=\"type\">long</span> <span class=\"type\">long</span> x)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">register</span> <span class=\"type\">int</span> i=<span class=\"number\">60</span>;i&gt;=<span class=\"number\">0</span>;i--)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(x&amp;(<span class=\"number\">1ll</span>&lt;&lt;i))</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(!a[i])&#123;a[i]=x;<span class=\"keyword\">return</span>;&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> x^=a[i];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"title\">querymax</span><span class=\"params\">(<span class=\"type\">long</span> <span class=\"type\">long</span> *a)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">long</span> <span class=\"type\">long</span> res=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">register</span> <span class=\"type\">int</span> i=<span class=\"number\">60</span>;i&gt;=<span class=\"number\">0</span>;--i)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>((res^a[i])&gt;res)res^=a[i];</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">merge</span><span class=\"params\">(<span class=\"type\">long</span> <span class=\"type\">long</span> *a,<span class=\"type\">long</span> <span class=\"type\">long</span> *b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;<span class=\"keyword\">for</span>(<span class=\"keyword\">register</span> <span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;=<span class=\"number\">60</span>;i++)<span class=\"keyword\">if</span>(b[i])<span class=\"built_in\">insert</span>(a,b[i]);&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> fa[N][<span class=\"number\">19</span>],deep[N];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"type\">int</span> a,<span class=\"type\">int</span> f)</span></span>&#123;</span><br><span class=\"line\">\tfa[a][<span class=\"number\">0</span>]=f;deep[a]=deep[f]+<span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">register</span> <span class=\"type\">int</span> i=head[a];i;i=G[i].last)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(G[i].v!=f)<span class=\"built_in\">dfs</span>(G[i].v,a);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">query</span><span class=\"params\">(<span class=\"type\">int</span> a,<span class=\"type\">int</span> b)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">memset</span>(ans,<span class=\"number\">0</span>,<span class=\"built_in\">sizeof</span>(ans));</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(deep[a]&gt;deep[b])<span class=\"built_in\">swap</span>(a,b);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">register</span> <span class=\"type\">int</span> i=<span class=\"number\">18</span>;i&gt;=<span class=\"number\">0</span>;i--)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(deep[a]&lt;=deep[b]-(<span class=\"number\">1</span>&lt;&lt;i))</span><br><span class=\"line\">    <span class=\"built_in\">merge</span>(ans,lb[b][i]),b=fa[b][i];</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(a==b)&#123;<span class=\"built_in\">merge</span>(ans,lb[a][<span class=\"number\">0</span>]);<span class=\"keyword\">return</span> ;&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">register</span> <span class=\"type\">int</span> i=<span class=\"number\">18</span>;i&gt;=<span class=\"number\">0</span>;i--)<span class=\"keyword\">if</span>(fa[a][i]!=fa[b][i])&#123;</span><br><span class=\"line\">  \t\t<span class=\"built_in\">merge</span>(ans,lb[a][i]),<span class=\"built_in\">merge</span>(ans,lb[b][i]);</span><br><span class=\"line\">    \ta=fa[a][i],b=fa[b][i];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">merge</span>(ans,lb[a][<span class=\"number\">0</span>]),<span class=\"built_in\">merge</span>(ans,lb[b][<span class=\"number\">0</span>]);</span><br><span class=\"line\">\t<span class=\"built_in\">merge</span>(ans,lb[fa[a][<span class=\"number\">0</span>]][<span class=\"number\">0</span>]);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> ;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">freopen</span>(<span class=\"string\">&quot;lucky.in&quot;</span>,<span class=\"string\">&quot;r&quot;</span>,stdin);</span><br><span class=\"line\">\t<span class=\"built_in\">freopen</span>(<span class=\"string\">&quot;lucky.out&quot;</span>,<span class=\"string\">&quot;w&quot;</span>,stdout);</span><br><span class=\"line\">\tn=(<span class=\"type\">int</span>)<span class=\"built_in\">read</span>();m=(<span class=\"type\">int</span>)<span class=\"built_in\">read</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">register</span> <span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)V[i]=<span class=\"built_in\">read</span>(),<span class=\"built_in\">insert</span>(lb[i][<span class=\"number\">0</span>],V[i]);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">register</span> <span class=\"type\">int</span> i=<span class=\"number\">1</span>,a,b;i&lt;n;i++)</span><br><span class=\"line\">    a=<span class=\"built_in\">read</span>(),b=<span class=\"built_in\">read</span>(),<span class=\"built_in\">add</span>(a,b);</span><br><span class=\"line\">    <span class=\"built_in\">dfs</span>(<span class=\"number\">1</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">register</span> <span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;=<span class=\"number\">18</span>;j++)</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">register</span> <span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">    \tfa[i][j]=fa[fa[i][j<span class=\"number\">-1</span>]][j<span class=\"number\">-1</span>];</span><br><span class=\"line\">  \t\t<span class=\"built_in\">memcpy</span>(lb[i][j],lb[i][j<span class=\"number\">-1</span>],<span class=\"built_in\">sizeof</span>(lb[i][j<span class=\"number\">-1</span>]));</span><br><span class=\"line\">    \t<span class=\"built_in\">merge</span>(lb[i][j],lb[fa[i][j<span class=\"number\">-1</span>]][j<span class=\"number\">-1</span>]);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">  \t<span class=\"keyword\">for</span>(<span class=\"keyword\">register</span> <span class=\"type\">int</span> i=<span class=\"number\">1</span>,a,b;i&lt;=m;i++)&#123;</span><br><span class=\"line\">    \ta=(<span class=\"type\">int</span>)<span class=\"built_in\">read</span>();b=(<span class=\"type\">int</span>)<span class=\"built_in\">read</span>();</span><br><span class=\"line\">    \t<span class=\"built_in\">query</span>(a,b);</span><br><span class=\"line\">    \t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%lld\\n&quot;</span>,<span class=\"built_in\">querymax</span>(ans));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"【T3-萌萌哒】\"><a href=\"#【T3-萌萌哒】\" class=\"headerlink\" title=\"【T3 萌萌哒】\"></a><a href=\"https://www.luogu.org/problemnew/show/P3295\">【T3 萌萌哒】</a></h2><h3 id=\"解法-2\"><a href=\"#解法-2\" class=\"headerlink\" title=\"解法\"></a>解法</h3><p>$\\ \\ \\ \\ \\ \\,$ 这道题前$30$分做法很显然吧，两段相关联的各个元素，我们可以用并查集并在一起，因为他们必须一定是同一种。最后统计并查集个数就好了，设个数为$cnt$，那么我们的答案是$9\\times 10^{cnt-1}$，因为包含第一个数位的只有$1$-$9$，其他可以取$0$-$9$。复杂度$O(n^2)$</p>\n<p>$\\ \\ \\ \\ \\ \\,$ 我们可以通过类似于势能分析来操作，来降低复杂度到$O(n\\log n)$，操作很骚，一开始没想到，也没有在其他地方见到过。</p>\n<h3 id=\"代码-2\"><a href=\"#代码-2\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">long</span> <span class=\"type\">long</span> ll;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">int</span> <span class=\"title\">read</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> x=<span class=\"number\">0</span>,p=<span class=\"number\">1</span>;<span class=\"type\">char</span> c=<span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(c&lt;<span class=\"string\">&#x27;0&#x27;</span>||c&gt;<span class=\"string\">&#x27;9&#x27;</span>)&#123;<span class=\"keyword\">if</span>(c==<span class=\"string\">&#x27;-&#x27;</span>) p=<span class=\"number\">-1</span>;c=<span class=\"built_in\">getchar</span>();&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(c&lt;=<span class=\"string\">&#x27;9&#x27;</span>&amp;&amp;c&gt;=<span class=\"string\">&#x27;0&#x27;</span>)&#123;x=(x&lt;&lt;<span class=\"number\">1</span>)+(x&lt;&lt;<span class=\"number\">3</span>)+(c&amp;<span class=\"number\">15</span>);c=<span class=\"built_in\">getchar</span>();&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> x*p;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">1e5</span>+<span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> cnt,n,m;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> mod=<span class=\"number\">1e9</span>+<span class=\"number\">7</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">power</span><span class=\"params\">(<span class=\"type\">int</span> a,<span class=\"type\">int</span> b)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> ans=<span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(;b;b&gt;&gt;=<span class=\"number\">1</span>,a=<span class=\"number\">1ll</span>*a*a%mod)<span class=\"keyword\">if</span>(b&amp;<span class=\"number\">1</span>)ans=<span class=\"number\">1ll</span>*a*ans%mod;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> f[<span class=\"number\">20</span>][N];</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> inv(x) power(x,mod-2)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">int</span> <span class=\"title\">find</span><span class=\"params\">(<span class=\"type\">int</span> k,<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;<span class=\"keyword\">return</span> f[k][x]==x?x:f[k][x]=<span class=\"built_in\">find</span>(k,f[k][x]);&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">log_2</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> ret=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(ret=<span class=\"number\">0</span>;x;x&gt;&gt;=<span class=\"number\">1</span>,ret++);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> ret<span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">solve</span><span class=\"params\">(<span class=\"type\">int</span> k,<span class=\"type\">int</span> xx,<span class=\"type\">int</span> yy)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> r1=<span class=\"built_in\">find</span>(k,xx),r2=<span class=\"built_in\">find</span>(k,yy);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(r1==r2) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">\tf[k][r1]=r2;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(!k)&#123;cnt--;<span class=\"keyword\">return</span>;&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">solve</span>(k<span class=\"number\">-1</span>,xx,yy);</span><br><span class=\"line\">\t<span class=\"built_in\">solve</span>(k<span class=\"number\">-1</span>,xx+(<span class=\"number\">1</span>&lt;&lt;k<span class=\"number\">-1</span>),yy+(<span class=\"number\">1</span>&lt;&lt;k<span class=\"number\">-1</span>));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">freopen</span>(<span class=\"string\">&quot;moe.in&quot;</span>,<span class=\"string\">&quot;r&quot;</span>,stdin);</span><br><span class=\"line\">\t<span class=\"built_in\">freopen</span>(<span class=\"string\">&quot;moe.out&quot;</span>,<span class=\"string\">&quot;w&quot;</span>,stdout);</span><br><span class=\"line\">\tcnt=n=<span class=\"built_in\">read</span>();m=<span class=\"built_in\">read</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;=<span class=\"number\">18</span>;i++)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;=n;j++)</span><br><span class=\"line\">\tf[i][j]=j;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(m--)&#123;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> l1=<span class=\"built_in\">read</span>(),r1=<span class=\"built_in\">read</span>(),l2=<span class=\"built_in\">read</span>(),r2=<span class=\"built_in\">read</span>();</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(l1&gt;l2) <span class=\"built_in\">swap</span>(l1,l2),<span class=\"built_in\">swap</span>(r1,r2);</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> t=<span class=\"built_in\">log_2</span>(r1-l1+<span class=\"number\">1</span>);</span><br><span class=\"line\">    \t<span class=\"built_in\">solve</span>(t,l1,l2);</span><br><span class=\"line\">    \t<span class=\"built_in\">solve</span>(t,r1-(<span class=\"number\">1</span>&lt;&lt;t)+<span class=\"number\">1</span>,r2-(<span class=\"number\">1</span>&lt;&lt;t)+<span class=\"number\">1</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>,<span class=\"number\">9ll</span>*<span class=\"built_in\">power</span>(<span class=\"number\">10</span>,cnt<span class=\"number\">-1</span>)%mod);</span><br><span class=\"line\">\t<span class=\"built_in\">fclose</span>(stdin);</span><br><span class=\"line\">\t<span class=\"built_in\">fclose</span>(stdout);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p>$\\ \\ \\ \\ \\ \\,$做一套省选题来练练手（Day1）。</p>","more":"<h2 id=\"【T1-背单词】\"><a href=\"#【T1-背单词】\" class=\"headerlink\" title=\"【T1 背单词】\"></a><a href=\"https://www.luogu.org/problemnew/show/P3294\">【T1 背单词】</a></h2><h3 id=\"解法\"><a href=\"#解法\" class=\"headerlink\" title=\"解法\"></a>解法</h3><p>$\\ \\ \\ \\ \\ \\,$ 由题意可以得到，如果存在一个单词是它的后缀，并且当前没有被填入表内，那他需要吃 n*n 颗泡椒，这显然是很不合算的。要优先填入后缀。</p>\n<p>$\\ \\ \\ \\ \\ \\,$第一个问题是如何找后缀，我们可以把串反过来插入 $Trie$ 树，然后按照$Trie$ 树上的父子关系新建树，按照一种神奇的 $DFS$ 序来依次填入。</p>\n<p>$\\ \\ \\ \\ \\ \\,$ 现在的问题是如何处理这个 $DFS$ 序，手玩一点小样例可以发现，优先走子树小的较优，现在我们得到了填入顺序，每个点的填入序号减去他父亲的和，就是我们的答案，复杂度 $O(|len|+3n)$</p>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">long</span> <span class=\"type\">long</span> ll;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">int</span> <span class=\"title\">read</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> x=<span class=\"number\">0</span>,p=<span class=\"number\">1</span>;<span class=\"type\">char</span> c=<span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(c&lt;<span class=\"string\">&#x27;0&#x27;</span>||c&gt;<span class=\"string\">&#x27;9&#x27;</span>)&#123;<span class=\"keyword\">if</span>(c==<span class=\"string\">&#x27;-&#x27;</span>) p=<span class=\"number\">-1</span>;c=<span class=\"built_in\">getchar</span>();&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(c&lt;=<span class=\"string\">&#x27;9&#x27;</span>&amp;&amp;c&gt;=<span class=\"string\">&#x27;0&#x27;</span>)&#123;x=(x&lt;&lt;<span class=\"number\">1</span>)+(x&lt;&lt;<span class=\"number\">3</span>)+(c&amp;<span class=\"number\">15</span>);c=<span class=\"built_in\">getchar</span>();&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> x*p;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">510010</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> son[N][<span class=\"number\">26</span>],appear[N];</span><br><span class=\"line\"><span class=\"type\">int</span> id[N],cnt2,rt,cnt,n,size[N];</span><br><span class=\"line\"><span class=\"type\">char</span> s[N];</span><br><span class=\"line\">vector&lt;<span class=\"type\">int</span>&gt; a[<span class=\"number\">100010</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">cmp</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> y)</span></span>&#123;<span class=\"keyword\">return</span> size[x]&lt;size[y];&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">insert</span><span class=\"params\">(<span class=\"type\">char</span> *s,<span class=\"type\">int</span> id)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> len=<span class=\"built_in\">strlen</span>(s+<span class=\"number\">1</span>);<span class=\"type\">int</span> now=rt,v;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=len;i;i--)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(!son[now][s[i]-<span class=\"string\">&#x27;a&#x27;</span>])son[now][s[i]-<span class=\"string\">&#x27;a&#x27;</span>]=++cnt;</span><br><span class=\"line\">\t\tnow=son[now][s[i]-<span class=\"string\">&#x27;a&#x27;</span>];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tappear[now]=id;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">dfs1</span><span class=\"params\">(<span class=\"type\">int</span> rt,<span class=\"type\">int</span> fa)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(appear[rt])&#123;a[fa].<span class=\"built_in\">push_back</span>(appear[rt]);fa=appear[rt];&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">26</span>;i++)<span class=\"keyword\">if</span>(son[rt][i])</span><br><span class=\"line\">\tid[son[rt][i]]=id[rt],<span class=\"built_in\">dfs1</span>(son[rt][i],fa);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">dfs2</span><span class=\"params\">(<span class=\"type\">int</span> rt)</span></span>&#123;</span><br><span class=\"line\">\tsize[rt]=<span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;a[rt].<span class=\"built_in\">size</span>();i++)</span><br><span class=\"line\">\t<span class=\"built_in\">dfs2</span>(a[rt][i]),size[rt]+=size[a[rt][i]];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">long</span> <span class=\"type\">long</span> ans;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">get_ans</span><span class=\"params\">(<span class=\"type\">int</span> rt)</span></span>&#123;</span><br><span class=\"line\">\tid[rt]=++cnt2;</span><br><span class=\"line\">\t<span class=\"built_in\">sort</span>(a[rt].<span class=\"built_in\">begin</span>(),a[rt].<span class=\"built_in\">end</span>(),cmp);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;a[rt].<span class=\"built_in\">size</span>();i++)</span><br><span class=\"line\">\tans+=cnt2+<span class=\"number\">1</span>-id[rt],<span class=\"built_in\">get_ans</span>(a[rt][i]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">freopen</span>(<span class=\"string\">&quot;word.in&quot;</span>,<span class=\"string\">&quot;r&quot;</span>,stdin);</span><br><span class=\"line\">\t<span class=\"built_in\">freopen</span>(<span class=\"string\">&quot;word.out&quot;</span>,<span class=\"string\">&quot;w&quot;</span>,stdout);</span><br><span class=\"line\">\tn=<span class=\"built_in\">read</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)</span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%s&quot;</span>,s+<span class=\"number\">1</span>),<span class=\"built_in\">insert</span>(s,i);</span><br><span class=\"line\">\t<span class=\"built_in\">dfs1</span>(<span class=\"number\">0</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">dfs2</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">get_ans</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%lld\\n&quot;</span>,ans);</span><br><span class=\"line\">\t<span class=\"built_in\">fclose</span>(stdin);</span><br><span class=\"line\">\t<span class=\"built_in\">fclose</span>(stdout);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"【T2-幸运数字】\"><a href=\"#【T2-幸运数字】\" class=\"headerlink\" title=\"【T2 幸运数字】\"></a><a href=\"https://www.luogu.org/problemnew/show/P3292\">【T2 幸运数字】</a></h2><h3 id=\"解法-1\"><a href=\"#解法-1\" class=\"headerlink\" title=\"解法\"></a>解法</h3><p>$\\ \\ \\ \\ \\ \\,$ 一眼可以看出来是实数异或线性基，不会这个的话就完全不能做这道题的。</p>\n<p>$\\ \\ \\ \\ \\ \\,$下面的问题是，如何高效地处理路径问题？</p>\n<p>$\\ \\ \\ \\ \\ \\,$我第一个想到的是树链剖分，复杂度为 $O(Q \\log^2n)$，算上线性基合并的复杂度 $60\\times 60$ 的常数有点吃不消。询问次数很大，我们可以试着多预处理一点。</p>\n<p>$\\ \\ \\ \\ \\ \\,$倍增的复杂度为$O(Q \\log n)$，加上一些蜜汁卡常数技巧，比如说去掉结构体啊什么的，就过了，空间还算充裕，没有那么卡。代码比较丑：</p>\n<h3 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">long</span> <span class=\"type\">long</span> ll;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"title\">read</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">long</span> <span class=\"type\">long</span> x=<span class=\"number\">0</span>,p=<span class=\"number\">1</span>;<span class=\"type\">char</span> c=<span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(c&lt;<span class=\"string\">&#x27;0&#x27;</span>||c&gt;<span class=\"string\">&#x27;9&#x27;</span>)&#123;<span class=\"keyword\">if</span>(c==<span class=\"string\">&#x27;-&#x27;</span>) p=<span class=\"number\">-1</span>;c=<span class=\"built_in\">getchar</span>();&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(c&lt;=<span class=\"string\">&#x27;9&#x27;</span>&amp;&amp;c&gt;=<span class=\"string\">&#x27;0&#x27;</span>)&#123;x=(x&lt;&lt;<span class=\"number\">1</span>)+(x&lt;&lt;<span class=\"number\">3</span>)+(c&amp;<span class=\"number\">15</span>);c=<span class=\"built_in\">getchar</span>();&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> x*p;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">20010</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> n,m;</span><br><span class=\"line\"><span class=\"type\">long</span> <span class=\"type\">long</span> V[N],res;</span><br><span class=\"line\"><span class=\"type\">int</span> head[N],p;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">ss</span>&#123;<span class=\"type\">int</span> last,v;&#125;G[N&lt;&lt;<span class=\"number\">1</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"type\">int</span> a,<span class=\"type\">int</span> b)</span></span>&#123;</span><br><span class=\"line\">\tG[++p]=(ss)&#123;head[a],b&#125;;head[a]=p;</span><br><span class=\"line\">\tG[++p]=(ss)&#123;head[b],a&#125;;head[b]=p;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">long</span> <span class=\"type\">long</span> lb[N][<span class=\"number\">19</span>][<span class=\"number\">61</span>],ans[<span class=\"number\">61</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">insert</span><span class=\"params\">(<span class=\"type\">long</span> <span class=\"type\">long</span> *a,<span class=\"type\">long</span> <span class=\"type\">long</span> x)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">register</span> <span class=\"type\">int</span> i=<span class=\"number\">60</span>;i&gt;=<span class=\"number\">0</span>;i--)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(x&amp;(<span class=\"number\">1ll</span>&lt;&lt;i))</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(!a[i])&#123;a[i]=x;<span class=\"keyword\">return</span>;&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> x^=a[i];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"title\">querymax</span><span class=\"params\">(<span class=\"type\">long</span> <span class=\"type\">long</span> *a)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">long</span> <span class=\"type\">long</span> res=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">register</span> <span class=\"type\">int</span> i=<span class=\"number\">60</span>;i&gt;=<span class=\"number\">0</span>;--i)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>((res^a[i])&gt;res)res^=a[i];</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">merge</span><span class=\"params\">(<span class=\"type\">long</span> <span class=\"type\">long</span> *a,<span class=\"type\">long</span> <span class=\"type\">long</span> *b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;<span class=\"keyword\">for</span>(<span class=\"keyword\">register</span> <span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;=<span class=\"number\">60</span>;i++)<span class=\"keyword\">if</span>(b[i])<span class=\"built_in\">insert</span>(a,b[i]);&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> fa[N][<span class=\"number\">19</span>],deep[N];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"type\">int</span> a,<span class=\"type\">int</span> f)</span></span>&#123;</span><br><span class=\"line\">\tfa[a][<span class=\"number\">0</span>]=f;deep[a]=deep[f]+<span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">register</span> <span class=\"type\">int</span> i=head[a];i;i=G[i].last)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(G[i].v!=f)<span class=\"built_in\">dfs</span>(G[i].v,a);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">query</span><span class=\"params\">(<span class=\"type\">int</span> a,<span class=\"type\">int</span> b)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">memset</span>(ans,<span class=\"number\">0</span>,<span class=\"built_in\">sizeof</span>(ans));</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(deep[a]&gt;deep[b])<span class=\"built_in\">swap</span>(a,b);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">register</span> <span class=\"type\">int</span> i=<span class=\"number\">18</span>;i&gt;=<span class=\"number\">0</span>;i--)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(deep[a]&lt;=deep[b]-(<span class=\"number\">1</span>&lt;&lt;i))</span><br><span class=\"line\">    <span class=\"built_in\">merge</span>(ans,lb[b][i]),b=fa[b][i];</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(a==b)&#123;<span class=\"built_in\">merge</span>(ans,lb[a][<span class=\"number\">0</span>]);<span class=\"keyword\">return</span> ;&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">register</span> <span class=\"type\">int</span> i=<span class=\"number\">18</span>;i&gt;=<span class=\"number\">0</span>;i--)<span class=\"keyword\">if</span>(fa[a][i]!=fa[b][i])&#123;</span><br><span class=\"line\">  \t\t<span class=\"built_in\">merge</span>(ans,lb[a][i]),<span class=\"built_in\">merge</span>(ans,lb[b][i]);</span><br><span class=\"line\">    \ta=fa[a][i],b=fa[b][i];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">merge</span>(ans,lb[a][<span class=\"number\">0</span>]),<span class=\"built_in\">merge</span>(ans,lb[b][<span class=\"number\">0</span>]);</span><br><span class=\"line\">\t<span class=\"built_in\">merge</span>(ans,lb[fa[a][<span class=\"number\">0</span>]][<span class=\"number\">0</span>]);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> ;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">freopen</span>(<span class=\"string\">&quot;lucky.in&quot;</span>,<span class=\"string\">&quot;r&quot;</span>,stdin);</span><br><span class=\"line\">\t<span class=\"built_in\">freopen</span>(<span class=\"string\">&quot;lucky.out&quot;</span>,<span class=\"string\">&quot;w&quot;</span>,stdout);</span><br><span class=\"line\">\tn=(<span class=\"type\">int</span>)<span class=\"built_in\">read</span>();m=(<span class=\"type\">int</span>)<span class=\"built_in\">read</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">register</span> <span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)V[i]=<span class=\"built_in\">read</span>(),<span class=\"built_in\">insert</span>(lb[i][<span class=\"number\">0</span>],V[i]);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">register</span> <span class=\"type\">int</span> i=<span class=\"number\">1</span>,a,b;i&lt;n;i++)</span><br><span class=\"line\">    a=<span class=\"built_in\">read</span>(),b=<span class=\"built_in\">read</span>(),<span class=\"built_in\">add</span>(a,b);</span><br><span class=\"line\">    <span class=\"built_in\">dfs</span>(<span class=\"number\">1</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">register</span> <span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;=<span class=\"number\">18</span>;j++)</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">register</span> <span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">    \tfa[i][j]=fa[fa[i][j<span class=\"number\">-1</span>]][j<span class=\"number\">-1</span>];</span><br><span class=\"line\">  \t\t<span class=\"built_in\">memcpy</span>(lb[i][j],lb[i][j<span class=\"number\">-1</span>],<span class=\"built_in\">sizeof</span>(lb[i][j<span class=\"number\">-1</span>]));</span><br><span class=\"line\">    \t<span class=\"built_in\">merge</span>(lb[i][j],lb[fa[i][j<span class=\"number\">-1</span>]][j<span class=\"number\">-1</span>]);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">  \t<span class=\"keyword\">for</span>(<span class=\"keyword\">register</span> <span class=\"type\">int</span> i=<span class=\"number\">1</span>,a,b;i&lt;=m;i++)&#123;</span><br><span class=\"line\">    \ta=(<span class=\"type\">int</span>)<span class=\"built_in\">read</span>();b=(<span class=\"type\">int</span>)<span class=\"built_in\">read</span>();</span><br><span class=\"line\">    \t<span class=\"built_in\">query</span>(a,b);</span><br><span class=\"line\">    \t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%lld\\n&quot;</span>,<span class=\"built_in\">querymax</span>(ans));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"【T3-萌萌哒】\"><a href=\"#【T3-萌萌哒】\" class=\"headerlink\" title=\"【T3 萌萌哒】\"></a><a href=\"https://www.luogu.org/problemnew/show/P3295\">【T3 萌萌哒】</a></h2><h3 id=\"解法-2\"><a href=\"#解法-2\" class=\"headerlink\" title=\"解法\"></a>解法</h3><p>$\\ \\ \\ \\ \\ \\,$ 这道题前$30$分做法很显然吧，两段相关联的各个元素，我们可以用并查集并在一起，因为他们必须一定是同一种。最后统计并查集个数就好了，设个数为$cnt$，那么我们的答案是$9\\times 10^{cnt-1}$，因为包含第一个数位的只有$1$-$9$，其他可以取$0$-$9$。复杂度$O(n^2)$</p>\n<p>$\\ \\ \\ \\ \\ \\,$ 我们可以通过类似于势能分析来操作，来降低复杂度到$O(n\\log n)$，操作很骚，一开始没想到，也没有在其他地方见到过。</p>\n<h3 id=\"代码-2\"><a href=\"#代码-2\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">long</span> <span class=\"type\">long</span> ll;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">int</span> <span class=\"title\">read</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> x=<span class=\"number\">0</span>,p=<span class=\"number\">1</span>;<span class=\"type\">char</span> c=<span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(c&lt;<span class=\"string\">&#x27;0&#x27;</span>||c&gt;<span class=\"string\">&#x27;9&#x27;</span>)&#123;<span class=\"keyword\">if</span>(c==<span class=\"string\">&#x27;-&#x27;</span>) p=<span class=\"number\">-1</span>;c=<span class=\"built_in\">getchar</span>();&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(c&lt;=<span class=\"string\">&#x27;9&#x27;</span>&amp;&amp;c&gt;=<span class=\"string\">&#x27;0&#x27;</span>)&#123;x=(x&lt;&lt;<span class=\"number\">1</span>)+(x&lt;&lt;<span class=\"number\">3</span>)+(c&amp;<span class=\"number\">15</span>);c=<span class=\"built_in\">getchar</span>();&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> x*p;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">1e5</span>+<span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> cnt,n,m;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> mod=<span class=\"number\">1e9</span>+<span class=\"number\">7</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">power</span><span class=\"params\">(<span class=\"type\">int</span> a,<span class=\"type\">int</span> b)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> ans=<span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(;b;b&gt;&gt;=<span class=\"number\">1</span>,a=<span class=\"number\">1ll</span>*a*a%mod)<span class=\"keyword\">if</span>(b&amp;<span class=\"number\">1</span>)ans=<span class=\"number\">1ll</span>*a*ans%mod;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> f[<span class=\"number\">20</span>][N];</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> inv(x) power(x,mod-2)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">int</span> <span class=\"title\">find</span><span class=\"params\">(<span class=\"type\">int</span> k,<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;<span class=\"keyword\">return</span> f[k][x]==x?x:f[k][x]=<span class=\"built_in\">find</span>(k,f[k][x]);&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">log_2</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> ret=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(ret=<span class=\"number\">0</span>;x;x&gt;&gt;=<span class=\"number\">1</span>,ret++);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> ret<span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">solve</span><span class=\"params\">(<span class=\"type\">int</span> k,<span class=\"type\">int</span> xx,<span class=\"type\">int</span> yy)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> r1=<span class=\"built_in\">find</span>(k,xx),r2=<span class=\"built_in\">find</span>(k,yy);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(r1==r2) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">\tf[k][r1]=r2;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(!k)&#123;cnt--;<span class=\"keyword\">return</span>;&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">solve</span>(k<span class=\"number\">-1</span>,xx,yy);</span><br><span class=\"line\">\t<span class=\"built_in\">solve</span>(k<span class=\"number\">-1</span>,xx+(<span class=\"number\">1</span>&lt;&lt;k<span class=\"number\">-1</span>),yy+(<span class=\"number\">1</span>&lt;&lt;k<span class=\"number\">-1</span>));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">freopen</span>(<span class=\"string\">&quot;moe.in&quot;</span>,<span class=\"string\">&quot;r&quot;</span>,stdin);</span><br><span class=\"line\">\t<span class=\"built_in\">freopen</span>(<span class=\"string\">&quot;moe.out&quot;</span>,<span class=\"string\">&quot;w&quot;</span>,stdout);</span><br><span class=\"line\">\tcnt=n=<span class=\"built_in\">read</span>();m=<span class=\"built_in\">read</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;=<span class=\"number\">18</span>;i++)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;=n;j++)</span><br><span class=\"line\">\tf[i][j]=j;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(m--)&#123;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> l1=<span class=\"built_in\">read</span>(),r1=<span class=\"built_in\">read</span>(),l2=<span class=\"built_in\">read</span>(),r2=<span class=\"built_in\">read</span>();</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(l1&gt;l2) <span class=\"built_in\">swap</span>(l1,l2),<span class=\"built_in\">swap</span>(r1,r2);</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> t=<span class=\"built_in\">log_2</span>(r1-l1+<span class=\"number\">1</span>);</span><br><span class=\"line\">    \t<span class=\"built_in\">solve</span>(t,l1,l2);</span><br><span class=\"line\">    \t<span class=\"built_in\">solve</span>(t,r1-(<span class=\"number\">1</span>&lt;&lt;t)+<span class=\"number\">1</span>,r2-(<span class=\"number\">1</span>&lt;&lt;t)+<span class=\"number\">1</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>,<span class=\"number\">9ll</span>*<span class=\"built_in\">power</span>(<span class=\"number\">10</span>,cnt<span class=\"number\">-1</span>)%mod);</span><br><span class=\"line\">\t<span class=\"built_in\">fclose</span>(stdin);</span><br><span class=\"line\">\t<span class=\"built_in\">fclose</span>(stdout);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>"},{"title":"【SCOI2016】Day2初略题解","date":"2019-02-15T08:18:00.000Z","mathjax":true,"_content":"$\\ \\ \\ \\ \\ \\,$做一套省选题来练练手（Day2）。\n\n<!-- more -->\n\n## [【T1 妖怪】](https://www.luogu.org/problemnew/show/P3291)\n\n### 解法\n\n$\\ \\ \\ \\ \\ \\,$ 对于一个妖怪的两个属性，为了方便我们把它定义为 $x$，$y$，而要求的一个妖怪的战斗力应该为：\n\n$(\\frac{b}{a}+1)x+(\\frac{a}{b}+1)y$\n\n$\\ \\ \\ \\ \\ \\,$ 既：\n\n$\\frac{b}{a}x+\\frac{a}{b}y+x+y$\n\n$\\ \\ \\ \\ \\ \\,$ 由于 $x$，$y$ 已经确定，所以我们需要找的是 $\\frac{b}{a}x+\\frac{a}{b}y$ 最大的最小。\n\n$\\ \\ \\ \\ \\ \\,$容易得到这是个**对勾函数**，对于一个怪物，当$\\frac{b}{a}=\\sqrt{\\frac{y}{x}}$ 时，战斗力最小。\n\n$\\ \\ \\ \\ \\ \\,$所以我们以 $x$，$y$ 为横纵坐标做个上凸壳，那么答案就一定是在凸壳上面，就会存在下面两种情况：\n\n- 在点上：$\\frac{b}{a}=\\sqrt{\\frac{y}{x}}$\n- 在边上：需要满足：\n  $(\\frac{b}{a}+1)x_1+(\\frac{a}{b}+1)y_1=(\\frac{b}{a}+1)x_2+(\\frac{a}{b}+1)y_2$\n  解得：$\\frac{b}{a}=\\frac{y_1-y_2}{x_2-x_1}$\n  \n$\\ \\ \\ \\ \\ \\,$就这样扫一遍过去就行了，复杂度 $O(n \\log n)$。\n\n### 代码\n\n``` cpp\n#include<queue>\n#include<cmath>\n#include<string>\n#include<cstdio>\n#include<cstring>\n#include<iostream>\n#include<algorithm>\nusing namespace std;\nconst int inf=0x7fffffff;\nconst int eps=1e-10;\nconst double pi=acos(-1.0);\ninline int read(){\n\tint x=0,p=1;char c=getchar();\n\twhile(c<'0'||c>'9'){if(c=='-')p=-1;c=getchar();}\n\twhile(c<='9'&&c>='0'){x=(x<<1)+(x<<3)+(c&15);c=getchar();}\n\treturn x*p;\n}\nconst int N=1e6+20;\nint n,m;\nstruct Point{long long x,y;}p[N],f[N];\ninline Point operator +(const Point &a,const Point &b)\n{return (Point){a.x+b.x,a.y+b.y};}\ninline Point operator -(const Point &a,const Point &b)\n{return (Point){a.x-b.x,a.y-b.y};}\ninline bool operator <(const Point &a,const Point &b)\n{return a.x==b.x?a.y<b.y:a.x<b.x;}\ninline long long Cross(const Point &a,const Point &b)\n{return a.x*b.y-a.y*b.x;}\nint Solve(Point *P,int n,Point *F){\n\tsort(P+1,P+n+1);int top=0;\n\tfor(register int i=1;i<=n;++i){\n\t\tfor(;top>1&&Cross(F[top]-F[top-1],P[i]-F[top-1])>=0;top--);\n    \tF[++top]=P[i];\n  \t}\n  \treturn top;\n}\ninline double solve(const Point &a,double k)\n{return k<=0?inf:(double)a.x+a.y+k*a.x+a.y/k;}\ninline double Getval_point(const Point &a)\n{return sqrt((double)a.y/a.x);}\ninline double Getval_line(const Point &a,const Point &b)\n{return a.x==b.x?-inf:((double)(a.y-b.y)/(double)(b.x-a.x));}\nint main(){\n\tfreopen(\"monster.in\",\"r\",stdin);\n\tfreopen(\"monster.out\",\"w\",stdout);\n\tn=read();\n\tfor(register int i=1;i<=n;++i)p[i].x=1ll*read(),p[i].y=1ll*read();\n\tm=Solve(p,n,f);\n\tif(m<2){\n\t\tprintf(\"%.4lf\",solve(f[1],Getval_point(f[1])));\n\t}\n\telse{\n\t\tdouble k1,k2,k3,ans=inf;\n\t\tk1=Getval_point(f[1]),k2=Getval_line(f[1],f[2]);\n\t\tif(k1<=k2)ans=min(ans,solve(f[1],k1));\n\t\tk1=Getval_point(f[m]),k2=Getval_line(f[m-1],f[m]);\n\t\tif(k1>=k2)ans=min(ans,solve(f[m],k1));\n  \t\tans=min(ans,solve(f[m],k2));\n  \t\tfor(register int i=2;i<m;++i){\n  \t\t\tk1=Getval_line(f[i-1],f[i]);\n  \t\t\tk2=Getval_line(f[i],f[i+1]);\n  \t\t\tk3=Getval_point(f[i]);\n  \t\t\tans=min(ans,solve(f[i],k1));\n  \t\t\tif(k1<=k3&&k3<=k2)\n  \t\t\tans=min(ans,solve(f[i],k3));\n  \t\t}\n  \t\tprintf(\"%.4lf\\n\",ans);\n\t}\n\tfclose(stdin);\n\tfclose(stdout);\n\treturn 0;\n}\n\n```\n\n## [【T2 美味】](https://www.luogu.org/problemnew/show/P3293)\n\n### 解法\n\n$\\ \\ \\ \\ \\ \\,$又是异或最大呢，不是线性基就是贪心了，day1才搞了线性基，可以排除，我们看看怎么贪心。\n\n$\\ \\ \\ \\ \\ \\,$首先可以看到他有一个取值范围的限制，我们可以用到可持久化数据结构维护。\n\n$\\ \\ \\ \\ \\ \\,$然后我们可以贪心地想，从高位到低为维护 $a_i$ 的存在性。这个可持久化数据结构需要满足下面的操作：\n\n- 插入一个数；\n- 删除一个数；\n- 统计某个取值范围的数数量是多少。\n\n$\\ \\ \\ \\ \\ \\,$我最后选择了权值主席树。\n\n$\\ \\ \\ \\ \\ \\,$现在对于每一次询问，我们贪心一下，从高位到低位枚举，如果$b$这一位为$1$，我们就找 $0$ ，反之找 $1$。\n\n$\\ \\ \\ \\ \\ \\,$怎么找呢？我们令当前找到第$i$位， $ans$ 等于当前最优的 $a_i+x$，那么我们就找当前 $[l,r]$ 范围内，是否存在有数次在区间（$1/0$为当前要找的数）：\n\n$[ans+(1/0<<i)-x,ans+(1/0<<i)-x+(1<<i)-1]$\n\n$\\ \\ \\ \\ \\ \\,$存在的话就更新$ans$为 $ans+(1/0<<i)$，不然退而求其次，取 $ans+(0/1<<i)$。\n\n$\\ \\ \\ \\ \\ \\,$这样我们可以保证在完成贪心，取到第0位之时，$ans$ 等于最优的 $a_i+x$。（并不关心是哪个$a_i$，反正是拼出来了。\n\n$\\ \\ \\ \\ \\ \\,$复杂度$O(n \\log a_{max}+m\\log^2 a_{max})$\n\n### 代码\n\n``` cpp\n#include<queue>\n#include<cmath>\n#include<string>\n#include<cstdio>\n#include<cstring>\n#include<iostream>\n#include<algorithm>\nusing namespace std;\ninline int read(){\n\tint x=0,p=1;char c=getchar();\n\twhile(c<'0'||c>'9'){if(c=='-') p=-1;c=getchar();}\n\twhile(c<='9'&&c>='0'){x=(x<<1)+(x<<3)+(c&15);c=getchar();}\n\treturn x*p;\n}\nconst int N=5e5+5;\nint a[N],root[N];\nint n,m,nn;\nstruct CM_Tree{\n\t#define lson l,mid,ls[rt]\n\t#define rson mid+1,r,rs[rt]\n\tint ls[N*20],rs[N*20],sum[N*20],size;\n\tint copy(int rt){\n\t\tls[++size]=ls[rt];\n\t\trs[size]=rs[rt];\n\t\tsum[size]=sum[rt];\n\t\treturn size;\n\t}\n\tvoid update(int id,int l,int r,int &rt){\n    \trt=copy(rt);sum[rt]++;\n    \tif(l==r)return;\n    \tint mid=(l+r)>>1;\n    \tif(id<=mid)update(id,lson);\n    \telse update(id,rson);\n\t}\n\tint query(int L,int R,int l,int r,int rt,int rt2){\n    if(L<=l&&r<=R)return sum[rt2]-sum[rt];\n    \tint mid=(l+r)>>1,ret=0;\n    \tif(L<=mid)ret+=query(L,R,lson,ls[rt2]);\n    \tif(mid<R)ret+=query(L,R,rson,rs[rt2]);\n    \treturn ret;\n\t}\n}tree;\nbool check(int i,int j,int L,int R){\n\tL=max(0,L);R=min(R,nn);\n\tif(L>R)return 0;\n\treturn tree.query(L,R,0,nn,root[i],root[j])>0;\n}\n#define getbit(a,i) ((a>>i)&1)\nint main(){\n\tfreopen(\"food.in\",\"r\",stdin);\n\tfreopen(\"food.out\",\"w\",stdout);\n\tn=read();m=read();\n\tfor(register int i=1;i<=n;++i)a[i]=read(),nn=max(nn,a[i]);\n  \tfor(register int i=1;i<=n;++i)root[i]=root[i-1],tree.update(a[i],0,nn,root[i]);\n  \tfor(register int i=1;i<=m;++i){\n    \tint b=read(),x=read(),l=read(),r=read(),ans=0;\n    \tfor(register int i=17,ls;i>=0;--i){\n    \t\tif(!getbit(b,i))ls=ans+(1<<i)-x;\n    \t\telse ls=ans-x;\n      \t\tif(check(l-1,r,ls,ls+(1<<i)-1))ans=ls+x;\n      \t\telse ans+=getbit(b,i)<<i;\n    \t}\n    \tprintf(\"%d\\n\",ans^b);\n  \t}\n\tfclose(stdin);\n\tfclose(stdout);\n\treturn 0;\n}\n\n```\n\n\n## [【T3 围棋】](https://www.luogu.org/problemnew/show/P3290)\n$\\ \\ \\ \\ \\ \\,$插头dp是不会做插头dp的，这辈子不可能做插头dp的。写起来又怪麻烦，就是打打傻逼暴力，才能骗得了分这样子。\n\n$\\ \\ \\ \\ \\ \\,$（逃\n\n","source":"_posts/SCOI2016-Day2初略题解.md","raw":"---\ntitle: '【SCOI2016】Day2初略题解'\ndate: 2019-02-15 16:18:00\ncategories:\n- 题解\ntags:\n- OI\n- 计算几何\n- 凸壳\n- 数形结合\n- 数据结构\n- 主席树\n- 贪心\nmathjax: true\n---\n$\\ \\ \\ \\ \\ \\,$做一套省选题来练练手（Day2）。\n\n<!-- more -->\n\n## [【T1 妖怪】](https://www.luogu.org/problemnew/show/P3291)\n\n### 解法\n\n$\\ \\ \\ \\ \\ \\,$ 对于一个妖怪的两个属性，为了方便我们把它定义为 $x$，$y$，而要求的一个妖怪的战斗力应该为：\n\n$(\\frac{b}{a}+1)x+(\\frac{a}{b}+1)y$\n\n$\\ \\ \\ \\ \\ \\,$ 既：\n\n$\\frac{b}{a}x+\\frac{a}{b}y+x+y$\n\n$\\ \\ \\ \\ \\ \\,$ 由于 $x$，$y$ 已经确定，所以我们需要找的是 $\\frac{b}{a}x+\\frac{a}{b}y$ 最大的最小。\n\n$\\ \\ \\ \\ \\ \\,$容易得到这是个**对勾函数**，对于一个怪物，当$\\frac{b}{a}=\\sqrt{\\frac{y}{x}}$ 时，战斗力最小。\n\n$\\ \\ \\ \\ \\ \\,$所以我们以 $x$，$y$ 为横纵坐标做个上凸壳，那么答案就一定是在凸壳上面，就会存在下面两种情况：\n\n- 在点上：$\\frac{b}{a}=\\sqrt{\\frac{y}{x}}$\n- 在边上：需要满足：\n  $(\\frac{b}{a}+1)x_1+(\\frac{a}{b}+1)y_1=(\\frac{b}{a}+1)x_2+(\\frac{a}{b}+1)y_2$\n  解得：$\\frac{b}{a}=\\frac{y_1-y_2}{x_2-x_1}$\n  \n$\\ \\ \\ \\ \\ \\,$就这样扫一遍过去就行了，复杂度 $O(n \\log n)$。\n\n### 代码\n\n``` cpp\n#include<queue>\n#include<cmath>\n#include<string>\n#include<cstdio>\n#include<cstring>\n#include<iostream>\n#include<algorithm>\nusing namespace std;\nconst int inf=0x7fffffff;\nconst int eps=1e-10;\nconst double pi=acos(-1.0);\ninline int read(){\n\tint x=0,p=1;char c=getchar();\n\twhile(c<'0'||c>'9'){if(c=='-')p=-1;c=getchar();}\n\twhile(c<='9'&&c>='0'){x=(x<<1)+(x<<3)+(c&15);c=getchar();}\n\treturn x*p;\n}\nconst int N=1e6+20;\nint n,m;\nstruct Point{long long x,y;}p[N],f[N];\ninline Point operator +(const Point &a,const Point &b)\n{return (Point){a.x+b.x,a.y+b.y};}\ninline Point operator -(const Point &a,const Point &b)\n{return (Point){a.x-b.x,a.y-b.y};}\ninline bool operator <(const Point &a,const Point &b)\n{return a.x==b.x?a.y<b.y:a.x<b.x;}\ninline long long Cross(const Point &a,const Point &b)\n{return a.x*b.y-a.y*b.x;}\nint Solve(Point *P,int n,Point *F){\n\tsort(P+1,P+n+1);int top=0;\n\tfor(register int i=1;i<=n;++i){\n\t\tfor(;top>1&&Cross(F[top]-F[top-1],P[i]-F[top-1])>=0;top--);\n    \tF[++top]=P[i];\n  \t}\n  \treturn top;\n}\ninline double solve(const Point &a,double k)\n{return k<=0?inf:(double)a.x+a.y+k*a.x+a.y/k;}\ninline double Getval_point(const Point &a)\n{return sqrt((double)a.y/a.x);}\ninline double Getval_line(const Point &a,const Point &b)\n{return a.x==b.x?-inf:((double)(a.y-b.y)/(double)(b.x-a.x));}\nint main(){\n\tfreopen(\"monster.in\",\"r\",stdin);\n\tfreopen(\"monster.out\",\"w\",stdout);\n\tn=read();\n\tfor(register int i=1;i<=n;++i)p[i].x=1ll*read(),p[i].y=1ll*read();\n\tm=Solve(p,n,f);\n\tif(m<2){\n\t\tprintf(\"%.4lf\",solve(f[1],Getval_point(f[1])));\n\t}\n\telse{\n\t\tdouble k1,k2,k3,ans=inf;\n\t\tk1=Getval_point(f[1]),k2=Getval_line(f[1],f[2]);\n\t\tif(k1<=k2)ans=min(ans,solve(f[1],k1));\n\t\tk1=Getval_point(f[m]),k2=Getval_line(f[m-1],f[m]);\n\t\tif(k1>=k2)ans=min(ans,solve(f[m],k1));\n  \t\tans=min(ans,solve(f[m],k2));\n  \t\tfor(register int i=2;i<m;++i){\n  \t\t\tk1=Getval_line(f[i-1],f[i]);\n  \t\t\tk2=Getval_line(f[i],f[i+1]);\n  \t\t\tk3=Getval_point(f[i]);\n  \t\t\tans=min(ans,solve(f[i],k1));\n  \t\t\tif(k1<=k3&&k3<=k2)\n  \t\t\tans=min(ans,solve(f[i],k3));\n  \t\t}\n  \t\tprintf(\"%.4lf\\n\",ans);\n\t}\n\tfclose(stdin);\n\tfclose(stdout);\n\treturn 0;\n}\n\n```\n\n## [【T2 美味】](https://www.luogu.org/problemnew/show/P3293)\n\n### 解法\n\n$\\ \\ \\ \\ \\ \\,$又是异或最大呢，不是线性基就是贪心了，day1才搞了线性基，可以排除，我们看看怎么贪心。\n\n$\\ \\ \\ \\ \\ \\,$首先可以看到他有一个取值范围的限制，我们可以用到可持久化数据结构维护。\n\n$\\ \\ \\ \\ \\ \\,$然后我们可以贪心地想，从高位到低为维护 $a_i$ 的存在性。这个可持久化数据结构需要满足下面的操作：\n\n- 插入一个数；\n- 删除一个数；\n- 统计某个取值范围的数数量是多少。\n\n$\\ \\ \\ \\ \\ \\,$我最后选择了权值主席树。\n\n$\\ \\ \\ \\ \\ \\,$现在对于每一次询问，我们贪心一下，从高位到低位枚举，如果$b$这一位为$1$，我们就找 $0$ ，反之找 $1$。\n\n$\\ \\ \\ \\ \\ \\,$怎么找呢？我们令当前找到第$i$位， $ans$ 等于当前最优的 $a_i+x$，那么我们就找当前 $[l,r]$ 范围内，是否存在有数次在区间（$1/0$为当前要找的数）：\n\n$[ans+(1/0<<i)-x,ans+(1/0<<i)-x+(1<<i)-1]$\n\n$\\ \\ \\ \\ \\ \\,$存在的话就更新$ans$为 $ans+(1/0<<i)$，不然退而求其次，取 $ans+(0/1<<i)$。\n\n$\\ \\ \\ \\ \\ \\,$这样我们可以保证在完成贪心，取到第0位之时，$ans$ 等于最优的 $a_i+x$。（并不关心是哪个$a_i$，反正是拼出来了。\n\n$\\ \\ \\ \\ \\ \\,$复杂度$O(n \\log a_{max}+m\\log^2 a_{max})$\n\n### 代码\n\n``` cpp\n#include<queue>\n#include<cmath>\n#include<string>\n#include<cstdio>\n#include<cstring>\n#include<iostream>\n#include<algorithm>\nusing namespace std;\ninline int read(){\n\tint x=0,p=1;char c=getchar();\n\twhile(c<'0'||c>'9'){if(c=='-') p=-1;c=getchar();}\n\twhile(c<='9'&&c>='0'){x=(x<<1)+(x<<3)+(c&15);c=getchar();}\n\treturn x*p;\n}\nconst int N=5e5+5;\nint a[N],root[N];\nint n,m,nn;\nstruct CM_Tree{\n\t#define lson l,mid,ls[rt]\n\t#define rson mid+1,r,rs[rt]\n\tint ls[N*20],rs[N*20],sum[N*20],size;\n\tint copy(int rt){\n\t\tls[++size]=ls[rt];\n\t\trs[size]=rs[rt];\n\t\tsum[size]=sum[rt];\n\t\treturn size;\n\t}\n\tvoid update(int id,int l,int r,int &rt){\n    \trt=copy(rt);sum[rt]++;\n    \tif(l==r)return;\n    \tint mid=(l+r)>>1;\n    \tif(id<=mid)update(id,lson);\n    \telse update(id,rson);\n\t}\n\tint query(int L,int R,int l,int r,int rt,int rt2){\n    if(L<=l&&r<=R)return sum[rt2]-sum[rt];\n    \tint mid=(l+r)>>1,ret=0;\n    \tif(L<=mid)ret+=query(L,R,lson,ls[rt2]);\n    \tif(mid<R)ret+=query(L,R,rson,rs[rt2]);\n    \treturn ret;\n\t}\n}tree;\nbool check(int i,int j,int L,int R){\n\tL=max(0,L);R=min(R,nn);\n\tif(L>R)return 0;\n\treturn tree.query(L,R,0,nn,root[i],root[j])>0;\n}\n#define getbit(a,i) ((a>>i)&1)\nint main(){\n\tfreopen(\"food.in\",\"r\",stdin);\n\tfreopen(\"food.out\",\"w\",stdout);\n\tn=read();m=read();\n\tfor(register int i=1;i<=n;++i)a[i]=read(),nn=max(nn,a[i]);\n  \tfor(register int i=1;i<=n;++i)root[i]=root[i-1],tree.update(a[i],0,nn,root[i]);\n  \tfor(register int i=1;i<=m;++i){\n    \tint b=read(),x=read(),l=read(),r=read(),ans=0;\n    \tfor(register int i=17,ls;i>=0;--i){\n    \t\tif(!getbit(b,i))ls=ans+(1<<i)-x;\n    \t\telse ls=ans-x;\n      \t\tif(check(l-1,r,ls,ls+(1<<i)-1))ans=ls+x;\n      \t\telse ans+=getbit(b,i)<<i;\n    \t}\n    \tprintf(\"%d\\n\",ans^b);\n  \t}\n\tfclose(stdin);\n\tfclose(stdout);\n\treturn 0;\n}\n\n```\n\n\n## [【T3 围棋】](https://www.luogu.org/problemnew/show/P3290)\n$\\ \\ \\ \\ \\ \\,$插头dp是不会做插头dp的，这辈子不可能做插头dp的。写起来又怪麻烦，就是打打傻逼暴力，才能骗得了分这样子。\n\n$\\ \\ \\ \\ \\ \\,$（逃\n\n","slug":"SCOI2016-Day2初略题解","published":1,"updated":"2022-02-13T13:40:28.683Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0i63w5w000fu4gb8fgpf5q2","content":"<p>$\\ \\ \\ \\ \\ \\,$做一套省选题来练练手（Day2）。</p>\n<span id=\"more\"></span>\n<h2 id=\"【T1-妖怪】\"><a href=\"#【T1-妖怪】\" class=\"headerlink\" title=\"【T1 妖怪】\"></a><a href=\"https://www.luogu.org/problemnew/show/P3291\">【T1 妖怪】</a></h2><h3 id=\"解法\"><a href=\"#解法\" class=\"headerlink\" title=\"解法\"></a>解法</h3><p>$\\ \\ \\ \\ \\ \\,$ 对于一个妖怪的两个属性，为了方便我们把它定义为 $x$，$y$，而要求的一个妖怪的战斗力应该为：</p>\n<p>$(\\frac{b}{a}+1)x+(\\frac{a}{b}+1)y$</p>\n<p>$\\ \\ \\ \\ \\ \\,$ 既：</p>\n<p>$\\frac{b}{a}x+\\frac{a}{b}y+x+y$</p>\n<p>$\\ \\ \\ \\ \\ \\,$ 由于 $x$，$y$ 已经确定，所以我们需要找的是 $\\frac{b}{a}x+\\frac{a}{b}y$ 最大的最小。</p>\n<p>$\\ \\ \\ \\ \\ \\,$容易得到这是个<strong>对勾函数</strong>，对于一个怪物，当$\\frac{b}{a}=\\sqrt{\\frac{y}{x}}$ 时，战斗力最小。</p>\n<p>$\\ \\ \\ \\ \\ \\,$所以我们以 $x$，$y$ 为横纵坐标做个上凸壳，那么答案就一定是在凸壳上面，就会存在下面两种情况：</p>\n<ul>\n<li>在点上：$\\frac{b}{a}=\\sqrt{\\frac{y}{x}}$</li>\n<li>在边上：需要满足：<br>$(\\frac{b}{a}+1)x_1+(\\frac{a}{b}+1)y_1=(\\frac{b}{a}+1)x_2+(\\frac{a}{b}+1)y_2$<br>解得：$\\frac{b}{a}=\\frac{y_1-y_2}{x_2-x_1}$</li>\n</ul>\n<p>$\\ \\ \\ \\ \\ \\,$就这样扫一遍过去就行了，复杂度 $O(n \\log n)$。</p>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> inf=<span class=\"number\">0x7fffffff</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> eps=<span class=\"number\">1e-10</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">double</span> pi=<span class=\"built_in\">acos</span>(<span class=\"number\">-1.0</span>);</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">int</span> <span class=\"title\">read</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> x=<span class=\"number\">0</span>,p=<span class=\"number\">1</span>;<span class=\"type\">char</span> c=<span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(c&lt;<span class=\"string\">&#x27;0&#x27;</span>||c&gt;<span class=\"string\">&#x27;9&#x27;</span>)&#123;<span class=\"keyword\">if</span>(c==<span class=\"string\">&#x27;-&#x27;</span>)p=<span class=\"number\">-1</span>;c=<span class=\"built_in\">getchar</span>();&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(c&lt;=<span class=\"string\">&#x27;9&#x27;</span>&amp;&amp;c&gt;=<span class=\"string\">&#x27;0&#x27;</span>)&#123;x=(x&lt;&lt;<span class=\"number\">1</span>)+(x&lt;&lt;<span class=\"number\">3</span>)+(c&amp;<span class=\"number\">15</span>);c=<span class=\"built_in\">getchar</span>();&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> x*p;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">1e6</span>+<span class=\"number\">20</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> n,m;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Point</span>&#123;<span class=\"type\">long</span> <span class=\"type\">long</span> x,y;&#125;p[N],f[N];</span><br><span class=\"line\"><span class=\"keyword\">inline</span> Point <span class=\"keyword\">operator</span> +(<span class=\"type\">const</span> Point &amp;a,<span class=\"type\">const</span> Point &amp;b)</span><br><span class=\"line\">&#123;<span class=\"keyword\">return</span> (Point)&#123;a.x+b.x,a.y+b.y&#125;;&#125;</span><br><span class=\"line\"><span class=\"keyword\">inline</span> Point <span class=\"keyword\">operator</span> -(<span class=\"type\">const</span> Point &amp;a,<span class=\"type\">const</span> Point &amp;b)</span><br><span class=\"line\">&#123;<span class=\"keyword\">return</span> (Point)&#123;a.x-b.x,a.y-b.y&#125;;&#125;</span><br><span class=\"line\"><span class=\"keyword\">inline</span> <span class=\"type\">bool</span> <span class=\"keyword\">operator</span> &lt;(<span class=\"type\">const</span> Point &amp;a,<span class=\"type\">const</span> Point &amp;b)</span><br><span class=\"line\">&#123;<span class=\"keyword\">return</span> a.x==b.x?a.y&lt;b.y:a.x&lt;b.x;&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"title\">Cross</span><span class=\"params\">(<span class=\"type\">const</span> Point &amp;a,<span class=\"type\">const</span> Point &amp;b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;<span class=\"keyword\">return</span> a.x*b.y-a.y*b.x;&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">Solve</span><span class=\"params\">(Point *P,<span class=\"type\">int</span> n,Point *F)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">sort</span>(P+<span class=\"number\">1</span>,P+n+<span class=\"number\">1</span>);<span class=\"type\">int</span> top=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">register</span> <span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(;top&gt;<span class=\"number\">1</span>&amp;&amp;<span class=\"built_in\">Cross</span>(F[top]-F[top<span class=\"number\">-1</span>],P[i]-F[top<span class=\"number\">-1</span>])&gt;=<span class=\"number\">0</span>;top--);</span><br><span class=\"line\">    \tF[++top]=P[i];</span><br><span class=\"line\">  \t&#125;</span><br><span class=\"line\">  \t<span class=\"keyword\">return</span> top;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">double</span> <span class=\"title\">solve</span><span class=\"params\">(<span class=\"type\">const</span> Point &amp;a,<span class=\"type\">double</span> k)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;<span class=\"keyword\">return</span> k&lt;=<span class=\"number\">0</span>?inf:(<span class=\"type\">double</span>)a.x+a.y+k*a.x+a.y/k;&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">double</span> <span class=\"title\">Getval_point</span><span class=\"params\">(<span class=\"type\">const</span> Point &amp;a)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;<span class=\"keyword\">return</span> <span class=\"built_in\">sqrt</span>((<span class=\"type\">double</span>)a.y/a.x);&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">double</span> <span class=\"title\">Getval_line</span><span class=\"params\">(<span class=\"type\">const</span> Point &amp;a,<span class=\"type\">const</span> Point &amp;b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;<span class=\"keyword\">return</span> a.x==b.x?-inf:((<span class=\"type\">double</span>)(a.y-b.y)/(<span class=\"type\">double</span>)(b.x-a.x));&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">freopen</span>(<span class=\"string\">&quot;monster.in&quot;</span>,<span class=\"string\">&quot;r&quot;</span>,stdin);</span><br><span class=\"line\">\t<span class=\"built_in\">freopen</span>(<span class=\"string\">&quot;monster.out&quot;</span>,<span class=\"string\">&quot;w&quot;</span>,stdout);</span><br><span class=\"line\">\tn=<span class=\"built_in\">read</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">register</span> <span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i)p[i].x=<span class=\"number\">1ll</span>*<span class=\"built_in\">read</span>(),p[i].y=<span class=\"number\">1ll</span>*<span class=\"built_in\">read</span>();</span><br><span class=\"line\">\tm=<span class=\"built_in\">Solve</span>(p,n,f);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(m&lt;<span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%.4lf&quot;</span>,<span class=\"built_in\">solve</span>(f[<span class=\"number\">1</span>],<span class=\"built_in\">Getval_point</span>(f[<span class=\"number\">1</span>])));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"type\">double</span> k1,k2,k3,ans=inf;</span><br><span class=\"line\">\t\tk1=<span class=\"built_in\">Getval_point</span>(f[<span class=\"number\">1</span>]),k2=<span class=\"built_in\">Getval_line</span>(f[<span class=\"number\">1</span>],f[<span class=\"number\">2</span>]);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(k1&lt;=k2)ans=<span class=\"built_in\">min</span>(ans,<span class=\"built_in\">solve</span>(f[<span class=\"number\">1</span>],k1));</span><br><span class=\"line\">\t\tk1=<span class=\"built_in\">Getval_point</span>(f[m]),k2=<span class=\"built_in\">Getval_line</span>(f[m<span class=\"number\">-1</span>],f[m]);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(k1&gt;=k2)ans=<span class=\"built_in\">min</span>(ans,<span class=\"built_in\">solve</span>(f[m],k1));</span><br><span class=\"line\">  \t\tans=<span class=\"built_in\">min</span>(ans,<span class=\"built_in\">solve</span>(f[m],k2));</span><br><span class=\"line\">  \t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">register</span> <span class=\"type\">int</span> i=<span class=\"number\">2</span>;i&lt;m;++i)&#123;</span><br><span class=\"line\">  \t\t\tk1=<span class=\"built_in\">Getval_line</span>(f[i<span class=\"number\">-1</span>],f[i]);</span><br><span class=\"line\">  \t\t\tk2=<span class=\"built_in\">Getval_line</span>(f[i],f[i+<span class=\"number\">1</span>]);</span><br><span class=\"line\">  \t\t\tk3=<span class=\"built_in\">Getval_point</span>(f[i]);</span><br><span class=\"line\">  \t\t\tans=<span class=\"built_in\">min</span>(ans,<span class=\"built_in\">solve</span>(f[i],k1));</span><br><span class=\"line\">  \t\t\t<span class=\"keyword\">if</span>(k1&lt;=k3&amp;&amp;k3&lt;=k2)</span><br><span class=\"line\">  \t\t\tans=<span class=\"built_in\">min</span>(ans,<span class=\"built_in\">solve</span>(f[i],k3));</span><br><span class=\"line\">  \t\t&#125;</span><br><span class=\"line\">  \t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%.4lf\\n&quot;</span>,ans);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">fclose</span>(stdin);</span><br><span class=\"line\">\t<span class=\"built_in\">fclose</span>(stdout);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"【T2-美味】\"><a href=\"#【T2-美味】\" class=\"headerlink\" title=\"【T2 美味】\"></a><a href=\"https://www.luogu.org/problemnew/show/P3293\">【T2 美味】</a></h2><h3 id=\"解法-1\"><a href=\"#解法-1\" class=\"headerlink\" title=\"解法\"></a>解法</h3><p>$\\ \\ \\ \\ \\ \\,$又是异或最大呢，不是线性基就是贪心了，day1才搞了线性基，可以排除，我们看看怎么贪心。</p>\n<p>$\\ \\ \\ \\ \\ \\,$首先可以看到他有一个取值范围的限制，我们可以用到可持久化数据结构维护。</p>\n<p>$\\ \\ \\ \\ \\ \\,$然后我们可以贪心地想，从高位到低为维护 $a_i$ 的存在性。这个可持久化数据结构需要满足下面的操作：</p>\n<ul>\n<li>插入一个数；</li>\n<li>删除一个数；</li>\n<li>统计某个取值范围的数数量是多少。</li>\n</ul>\n<p>$\\ \\ \\ \\ \\ \\,$我最后选择了权值主席树。</p>\n<p>$\\ \\ \\ \\ \\ \\,$现在对于每一次询问，我们贪心一下，从高位到低位枚举，如果$b$这一位为$1$，我们就找 $0$ ，反之找 $1$。</p>\n<p>$\\ \\ \\ \\ \\ \\,$怎么找呢？我们令当前找到第$i$位， $ans$ 等于当前最优的 $a_i+x$，那么我们就找当前 $[l,r]$ 范围内，是否存在有数次在区间（$1/0$为当前要找的数）：</p>\n<p>$[ans+(1/0&lt;&lt;i)-x,ans+(1/0&lt;&lt;i)-x+(1&lt;&lt;i)-1]$</p>\n<p>$\\ \\ \\ \\ \\ \\,$存在的话就更新$ans$为 $ans+(1/0&lt;&lt;i)$，不然退而求其次，取 $ans+(0/1&lt;&lt;i)$。</p>\n<p>$\\ \\ \\ \\ \\ \\,$这样我们可以保证在完成贪心，取到第0位之时，$ans$ 等于最优的 $a_i+x$。（并不关心是哪个$a_i$，反正是拼出来了。</p>\n<p>$\\ \\ \\ \\ \\ \\,$复杂度$O(n \\log a_{max}+m\\log^2 a_{max})$</p>\n<h3 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">int</span> <span class=\"title\">read</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> x=<span class=\"number\">0</span>,p=<span class=\"number\">1</span>;<span class=\"type\">char</span> c=<span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(c&lt;<span class=\"string\">&#x27;0&#x27;</span>||c&gt;<span class=\"string\">&#x27;9&#x27;</span>)&#123;<span class=\"keyword\">if</span>(c==<span class=\"string\">&#x27;-&#x27;</span>) p=<span class=\"number\">-1</span>;c=<span class=\"built_in\">getchar</span>();&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(c&lt;=<span class=\"string\">&#x27;9&#x27;</span>&amp;&amp;c&gt;=<span class=\"string\">&#x27;0&#x27;</span>)&#123;x=(x&lt;&lt;<span class=\"number\">1</span>)+(x&lt;&lt;<span class=\"number\">3</span>)+(c&amp;<span class=\"number\">15</span>);c=<span class=\"built_in\">getchar</span>();&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> x*p;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">5e5</span>+<span class=\"number\">5</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> a[N],root[N];</span><br><span class=\"line\"><span class=\"type\">int</span> n,m,nn;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">CM_Tree</span>&#123;</span><br><span class=\"line\">\t<span class=\"meta\">#<span class=\"keyword\">define</span> lson l,mid,ls[rt]</span></span><br><span class=\"line\">\t<span class=\"meta\">#<span class=\"keyword\">define</span> rson mid+1,r,rs[rt]</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> ls[N*<span class=\"number\">20</span>],rs[N*<span class=\"number\">20</span>],sum[N*<span class=\"number\">20</span>],size;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">copy</span><span class=\"params\">(<span class=\"type\">int</span> rt)</span></span>&#123;</span><br><span class=\"line\">\t\tls[++size]=ls[rt];</span><br><span class=\"line\">\t\trs[size]=rs[rt];</span><br><span class=\"line\">\t\tsum[size]=sum[rt];</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> size;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">update</span><span class=\"params\">(<span class=\"type\">int</span> id,<span class=\"type\">int</span> l,<span class=\"type\">int</span> r,<span class=\"type\">int</span> &amp;rt)</span></span>&#123;</span><br><span class=\"line\">    \trt=<span class=\"built_in\">copy</span>(rt);sum[rt]++;</span><br><span class=\"line\">    \t<span class=\"keyword\">if</span>(l==r)<span class=\"keyword\">return</span>;</span><br><span class=\"line\">    \t<span class=\"type\">int</span> mid=(l+r)&gt;&gt;<span class=\"number\">1</span>;</span><br><span class=\"line\">    \t<span class=\"keyword\">if</span>(id&lt;=mid)<span class=\"built_in\">update</span>(id,lson);</span><br><span class=\"line\">    \t<span class=\"keyword\">else</span> <span class=\"built_in\">update</span>(id,rson);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">query</span><span class=\"params\">(<span class=\"type\">int</span> L,<span class=\"type\">int</span> R,<span class=\"type\">int</span> l,<span class=\"type\">int</span> r,<span class=\"type\">int</span> rt,<span class=\"type\">int</span> rt2)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(L&lt;=l&amp;&amp;r&lt;=R)<span class=\"keyword\">return</span> sum[rt2]-sum[rt];</span><br><span class=\"line\">    \t<span class=\"type\">int</span> mid=(l+r)&gt;&gt;<span class=\"number\">1</span>,ret=<span class=\"number\">0</span>;</span><br><span class=\"line\">    \t<span class=\"keyword\">if</span>(L&lt;=mid)ret+=<span class=\"built_in\">query</span>(L,R,lson,ls[rt2]);</span><br><span class=\"line\">    \t<span class=\"keyword\">if</span>(mid&lt;R)ret+=<span class=\"built_in\">query</span>(L,R,rson,rs[rt2]);</span><br><span class=\"line\">    \t<span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;tree;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">check</span><span class=\"params\">(<span class=\"type\">int</span> i,<span class=\"type\">int</span> j,<span class=\"type\">int</span> L,<span class=\"type\">int</span> R)</span></span>&#123;</span><br><span class=\"line\">\tL=<span class=\"built_in\">max</span>(<span class=\"number\">0</span>,L);R=<span class=\"built_in\">min</span>(R,nn);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(L&gt;R)<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> tree.<span class=\"built_in\">query</span>(L,R,<span class=\"number\">0</span>,nn,root[i],root[j])&gt;<span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> getbit(a,i) ((a&gt;&gt;i)&amp;1)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">freopen</span>(<span class=\"string\">&quot;food.in&quot;</span>,<span class=\"string\">&quot;r&quot;</span>,stdin);</span><br><span class=\"line\">\t<span class=\"built_in\">freopen</span>(<span class=\"string\">&quot;food.out&quot;</span>,<span class=\"string\">&quot;w&quot;</span>,stdout);</span><br><span class=\"line\">\tn=<span class=\"built_in\">read</span>();m=<span class=\"built_in\">read</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">register</span> <span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i)a[i]=<span class=\"built_in\">read</span>(),nn=<span class=\"built_in\">max</span>(nn,a[i]);</span><br><span class=\"line\">  \t<span class=\"keyword\">for</span>(<span class=\"keyword\">register</span> <span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i)root[i]=root[i<span class=\"number\">-1</span>],tree.<span class=\"built_in\">update</span>(a[i],<span class=\"number\">0</span>,nn,root[i]);</span><br><span class=\"line\">  \t<span class=\"keyword\">for</span>(<span class=\"keyword\">register</span> <span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=m;++i)&#123;</span><br><span class=\"line\">    \t<span class=\"type\">int</span> b=<span class=\"built_in\">read</span>(),x=<span class=\"built_in\">read</span>(),l=<span class=\"built_in\">read</span>(),r=<span class=\"built_in\">read</span>(),ans=<span class=\"number\">0</span>;</span><br><span class=\"line\">    \t<span class=\"keyword\">for</span>(<span class=\"keyword\">register</span> <span class=\"type\">int</span> i=<span class=\"number\">17</span>,ls;i&gt;=<span class=\"number\">0</span>;--i)&#123;</span><br><span class=\"line\">    \t\t<span class=\"keyword\">if</span>(!<span class=\"built_in\">getbit</span>(b,i))ls=ans+(<span class=\"number\">1</span>&lt;&lt;i)-x;</span><br><span class=\"line\">    \t\t<span class=\"keyword\">else</span> ls=ans-x;</span><br><span class=\"line\">      \t\t<span class=\"keyword\">if</span>(<span class=\"built_in\">check</span>(l<span class=\"number\">-1</span>,r,ls,ls+(<span class=\"number\">1</span>&lt;&lt;i)<span class=\"number\">-1</span>))ans=ls+x;</span><br><span class=\"line\">      \t\t<span class=\"keyword\">else</span> ans+=<span class=\"built_in\">getbit</span>(b,i)&lt;&lt;i;</span><br><span class=\"line\">    \t&#125;</span><br><span class=\"line\">    \t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>,ans^b);</span><br><span class=\"line\">  \t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">fclose</span>(stdin);</span><br><span class=\"line\">\t<span class=\"built_in\">fclose</span>(stdout);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"【T3-围棋】\"><a href=\"#【T3-围棋】\" class=\"headerlink\" title=\"【T3 围棋】\"></a><a href=\"https://www.luogu.org/problemnew/show/P3290\">【T3 围棋】</a></h2><p>$\\ \\ \\ \\ \\ \\,$插头dp是不会做插头dp的，这辈子不可能做插头dp的。写起来又怪麻烦，就是打打傻逼暴力，才能骗得了分这样子。</p>\n<p>$\\ \\ \\ \\ \\ \\,$（逃</p>\n","site":{"data":{}},"excerpt":"<p>$\\ \\ \\ \\ \\ \\,$做一套省选题来练练手（Day2）。</p>","more":"<h2 id=\"【T1-妖怪】\"><a href=\"#【T1-妖怪】\" class=\"headerlink\" title=\"【T1 妖怪】\"></a><a href=\"https://www.luogu.org/problemnew/show/P3291\">【T1 妖怪】</a></h2><h3 id=\"解法\"><a href=\"#解法\" class=\"headerlink\" title=\"解法\"></a>解法</h3><p>$\\ \\ \\ \\ \\ \\,$ 对于一个妖怪的两个属性，为了方便我们把它定义为 $x$，$y$，而要求的一个妖怪的战斗力应该为：</p>\n<p>$(\\frac{b}{a}+1)x+(\\frac{a}{b}+1)y$</p>\n<p>$\\ \\ \\ \\ \\ \\,$ 既：</p>\n<p>$\\frac{b}{a}x+\\frac{a}{b}y+x+y$</p>\n<p>$\\ \\ \\ \\ \\ \\,$ 由于 $x$，$y$ 已经确定，所以我们需要找的是 $\\frac{b}{a}x+\\frac{a}{b}y$ 最大的最小。</p>\n<p>$\\ \\ \\ \\ \\ \\,$容易得到这是个<strong>对勾函数</strong>，对于一个怪物，当$\\frac{b}{a}=\\sqrt{\\frac{y}{x}}$ 时，战斗力最小。</p>\n<p>$\\ \\ \\ \\ \\ \\,$所以我们以 $x$，$y$ 为横纵坐标做个上凸壳，那么答案就一定是在凸壳上面，就会存在下面两种情况：</p>\n<ul>\n<li>在点上：$\\frac{b}{a}=\\sqrt{\\frac{y}{x}}$</li>\n<li>在边上：需要满足：<br>$(\\frac{b}{a}+1)x_1+(\\frac{a}{b}+1)y_1=(\\frac{b}{a}+1)x_2+(\\frac{a}{b}+1)y_2$<br>解得：$\\frac{b}{a}=\\frac{y_1-y_2}{x_2-x_1}$</li>\n</ul>\n<p>$\\ \\ \\ \\ \\ \\,$就这样扫一遍过去就行了，复杂度 $O(n \\log n)$。</p>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> inf=<span class=\"number\">0x7fffffff</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> eps=<span class=\"number\">1e-10</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">double</span> pi=<span class=\"built_in\">acos</span>(<span class=\"number\">-1.0</span>);</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">int</span> <span class=\"title\">read</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> x=<span class=\"number\">0</span>,p=<span class=\"number\">1</span>;<span class=\"type\">char</span> c=<span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(c&lt;<span class=\"string\">&#x27;0&#x27;</span>||c&gt;<span class=\"string\">&#x27;9&#x27;</span>)&#123;<span class=\"keyword\">if</span>(c==<span class=\"string\">&#x27;-&#x27;</span>)p=<span class=\"number\">-1</span>;c=<span class=\"built_in\">getchar</span>();&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(c&lt;=<span class=\"string\">&#x27;9&#x27;</span>&amp;&amp;c&gt;=<span class=\"string\">&#x27;0&#x27;</span>)&#123;x=(x&lt;&lt;<span class=\"number\">1</span>)+(x&lt;&lt;<span class=\"number\">3</span>)+(c&amp;<span class=\"number\">15</span>);c=<span class=\"built_in\">getchar</span>();&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> x*p;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">1e6</span>+<span class=\"number\">20</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> n,m;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Point</span>&#123;<span class=\"type\">long</span> <span class=\"type\">long</span> x,y;&#125;p[N],f[N];</span><br><span class=\"line\"><span class=\"keyword\">inline</span> Point <span class=\"keyword\">operator</span> +(<span class=\"type\">const</span> Point &amp;a,<span class=\"type\">const</span> Point &amp;b)</span><br><span class=\"line\">&#123;<span class=\"keyword\">return</span> (Point)&#123;a.x+b.x,a.y+b.y&#125;;&#125;</span><br><span class=\"line\"><span class=\"keyword\">inline</span> Point <span class=\"keyword\">operator</span> -(<span class=\"type\">const</span> Point &amp;a,<span class=\"type\">const</span> Point &amp;b)</span><br><span class=\"line\">&#123;<span class=\"keyword\">return</span> (Point)&#123;a.x-b.x,a.y-b.y&#125;;&#125;</span><br><span class=\"line\"><span class=\"keyword\">inline</span> <span class=\"type\">bool</span> <span class=\"keyword\">operator</span> &lt;(<span class=\"type\">const</span> Point &amp;a,<span class=\"type\">const</span> Point &amp;b)</span><br><span class=\"line\">&#123;<span class=\"keyword\">return</span> a.x==b.x?a.y&lt;b.y:a.x&lt;b.x;&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"title\">Cross</span><span class=\"params\">(<span class=\"type\">const</span> Point &amp;a,<span class=\"type\">const</span> Point &amp;b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;<span class=\"keyword\">return</span> a.x*b.y-a.y*b.x;&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">Solve</span><span class=\"params\">(Point *P,<span class=\"type\">int</span> n,Point *F)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">sort</span>(P+<span class=\"number\">1</span>,P+n+<span class=\"number\">1</span>);<span class=\"type\">int</span> top=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">register</span> <span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(;top&gt;<span class=\"number\">1</span>&amp;&amp;<span class=\"built_in\">Cross</span>(F[top]-F[top<span class=\"number\">-1</span>],P[i]-F[top<span class=\"number\">-1</span>])&gt;=<span class=\"number\">0</span>;top--);</span><br><span class=\"line\">    \tF[++top]=P[i];</span><br><span class=\"line\">  \t&#125;</span><br><span class=\"line\">  \t<span class=\"keyword\">return</span> top;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">double</span> <span class=\"title\">solve</span><span class=\"params\">(<span class=\"type\">const</span> Point &amp;a,<span class=\"type\">double</span> k)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;<span class=\"keyword\">return</span> k&lt;=<span class=\"number\">0</span>?inf:(<span class=\"type\">double</span>)a.x+a.y+k*a.x+a.y/k;&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">double</span> <span class=\"title\">Getval_point</span><span class=\"params\">(<span class=\"type\">const</span> Point &amp;a)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;<span class=\"keyword\">return</span> <span class=\"built_in\">sqrt</span>((<span class=\"type\">double</span>)a.y/a.x);&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">double</span> <span class=\"title\">Getval_line</span><span class=\"params\">(<span class=\"type\">const</span> Point &amp;a,<span class=\"type\">const</span> Point &amp;b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;<span class=\"keyword\">return</span> a.x==b.x?-inf:((<span class=\"type\">double</span>)(a.y-b.y)/(<span class=\"type\">double</span>)(b.x-a.x));&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">freopen</span>(<span class=\"string\">&quot;monster.in&quot;</span>,<span class=\"string\">&quot;r&quot;</span>,stdin);</span><br><span class=\"line\">\t<span class=\"built_in\">freopen</span>(<span class=\"string\">&quot;monster.out&quot;</span>,<span class=\"string\">&quot;w&quot;</span>,stdout);</span><br><span class=\"line\">\tn=<span class=\"built_in\">read</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">register</span> <span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i)p[i].x=<span class=\"number\">1ll</span>*<span class=\"built_in\">read</span>(),p[i].y=<span class=\"number\">1ll</span>*<span class=\"built_in\">read</span>();</span><br><span class=\"line\">\tm=<span class=\"built_in\">Solve</span>(p,n,f);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(m&lt;<span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%.4lf&quot;</span>,<span class=\"built_in\">solve</span>(f[<span class=\"number\">1</span>],<span class=\"built_in\">Getval_point</span>(f[<span class=\"number\">1</span>])));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"type\">double</span> k1,k2,k3,ans=inf;</span><br><span class=\"line\">\t\tk1=<span class=\"built_in\">Getval_point</span>(f[<span class=\"number\">1</span>]),k2=<span class=\"built_in\">Getval_line</span>(f[<span class=\"number\">1</span>],f[<span class=\"number\">2</span>]);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(k1&lt;=k2)ans=<span class=\"built_in\">min</span>(ans,<span class=\"built_in\">solve</span>(f[<span class=\"number\">1</span>],k1));</span><br><span class=\"line\">\t\tk1=<span class=\"built_in\">Getval_point</span>(f[m]),k2=<span class=\"built_in\">Getval_line</span>(f[m<span class=\"number\">-1</span>],f[m]);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(k1&gt;=k2)ans=<span class=\"built_in\">min</span>(ans,<span class=\"built_in\">solve</span>(f[m],k1));</span><br><span class=\"line\">  \t\tans=<span class=\"built_in\">min</span>(ans,<span class=\"built_in\">solve</span>(f[m],k2));</span><br><span class=\"line\">  \t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">register</span> <span class=\"type\">int</span> i=<span class=\"number\">2</span>;i&lt;m;++i)&#123;</span><br><span class=\"line\">  \t\t\tk1=<span class=\"built_in\">Getval_line</span>(f[i<span class=\"number\">-1</span>],f[i]);</span><br><span class=\"line\">  \t\t\tk2=<span class=\"built_in\">Getval_line</span>(f[i],f[i+<span class=\"number\">1</span>]);</span><br><span class=\"line\">  \t\t\tk3=<span class=\"built_in\">Getval_point</span>(f[i]);</span><br><span class=\"line\">  \t\t\tans=<span class=\"built_in\">min</span>(ans,<span class=\"built_in\">solve</span>(f[i],k1));</span><br><span class=\"line\">  \t\t\t<span class=\"keyword\">if</span>(k1&lt;=k3&amp;&amp;k3&lt;=k2)</span><br><span class=\"line\">  \t\t\tans=<span class=\"built_in\">min</span>(ans,<span class=\"built_in\">solve</span>(f[i],k3));</span><br><span class=\"line\">  \t\t&#125;</span><br><span class=\"line\">  \t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%.4lf\\n&quot;</span>,ans);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">fclose</span>(stdin);</span><br><span class=\"line\">\t<span class=\"built_in\">fclose</span>(stdout);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"【T2-美味】\"><a href=\"#【T2-美味】\" class=\"headerlink\" title=\"【T2 美味】\"></a><a href=\"https://www.luogu.org/problemnew/show/P3293\">【T2 美味】</a></h2><h3 id=\"解法-1\"><a href=\"#解法-1\" class=\"headerlink\" title=\"解法\"></a>解法</h3><p>$\\ \\ \\ \\ \\ \\,$又是异或最大呢，不是线性基就是贪心了，day1才搞了线性基，可以排除，我们看看怎么贪心。</p>\n<p>$\\ \\ \\ \\ \\ \\,$首先可以看到他有一个取值范围的限制，我们可以用到可持久化数据结构维护。</p>\n<p>$\\ \\ \\ \\ \\ \\,$然后我们可以贪心地想，从高位到低为维护 $a_i$ 的存在性。这个可持久化数据结构需要满足下面的操作：</p>\n<ul>\n<li>插入一个数；</li>\n<li>删除一个数；</li>\n<li>统计某个取值范围的数数量是多少。</li>\n</ul>\n<p>$\\ \\ \\ \\ \\ \\,$我最后选择了权值主席树。</p>\n<p>$\\ \\ \\ \\ \\ \\,$现在对于每一次询问，我们贪心一下，从高位到低位枚举，如果$b$这一位为$1$，我们就找 $0$ ，反之找 $1$。</p>\n<p>$\\ \\ \\ \\ \\ \\,$怎么找呢？我们令当前找到第$i$位， $ans$ 等于当前最优的 $a_i+x$，那么我们就找当前 $[l,r]$ 范围内，是否存在有数次在区间（$1/0$为当前要找的数）：</p>\n<p>$[ans+(1/0&lt;&lt;i)-x,ans+(1/0&lt;&lt;i)-x+(1&lt;&lt;i)-1]$</p>\n<p>$\\ \\ \\ \\ \\ \\,$存在的话就更新$ans$为 $ans+(1/0&lt;&lt;i)$，不然退而求其次，取 $ans+(0/1&lt;&lt;i)$。</p>\n<p>$\\ \\ \\ \\ \\ \\,$这样我们可以保证在完成贪心，取到第0位之时，$ans$ 等于最优的 $a_i+x$。（并不关心是哪个$a_i$，反正是拼出来了。</p>\n<p>$\\ \\ \\ \\ \\ \\,$复杂度$O(n \\log a_{max}+m\\log^2 a_{max})$</p>\n<h3 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">int</span> <span class=\"title\">read</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> x=<span class=\"number\">0</span>,p=<span class=\"number\">1</span>;<span class=\"type\">char</span> c=<span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(c&lt;<span class=\"string\">&#x27;0&#x27;</span>||c&gt;<span class=\"string\">&#x27;9&#x27;</span>)&#123;<span class=\"keyword\">if</span>(c==<span class=\"string\">&#x27;-&#x27;</span>) p=<span class=\"number\">-1</span>;c=<span class=\"built_in\">getchar</span>();&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(c&lt;=<span class=\"string\">&#x27;9&#x27;</span>&amp;&amp;c&gt;=<span class=\"string\">&#x27;0&#x27;</span>)&#123;x=(x&lt;&lt;<span class=\"number\">1</span>)+(x&lt;&lt;<span class=\"number\">3</span>)+(c&amp;<span class=\"number\">15</span>);c=<span class=\"built_in\">getchar</span>();&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> x*p;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">5e5</span>+<span class=\"number\">5</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> a[N],root[N];</span><br><span class=\"line\"><span class=\"type\">int</span> n,m,nn;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">CM_Tree</span>&#123;</span><br><span class=\"line\">\t<span class=\"meta\">#<span class=\"keyword\">define</span> lson l,mid,ls[rt]</span></span><br><span class=\"line\">\t<span class=\"meta\">#<span class=\"keyword\">define</span> rson mid+1,r,rs[rt]</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> ls[N*<span class=\"number\">20</span>],rs[N*<span class=\"number\">20</span>],sum[N*<span class=\"number\">20</span>],size;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">copy</span><span class=\"params\">(<span class=\"type\">int</span> rt)</span></span>&#123;</span><br><span class=\"line\">\t\tls[++size]=ls[rt];</span><br><span class=\"line\">\t\trs[size]=rs[rt];</span><br><span class=\"line\">\t\tsum[size]=sum[rt];</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> size;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">update</span><span class=\"params\">(<span class=\"type\">int</span> id,<span class=\"type\">int</span> l,<span class=\"type\">int</span> r,<span class=\"type\">int</span> &amp;rt)</span></span>&#123;</span><br><span class=\"line\">    \trt=<span class=\"built_in\">copy</span>(rt);sum[rt]++;</span><br><span class=\"line\">    \t<span class=\"keyword\">if</span>(l==r)<span class=\"keyword\">return</span>;</span><br><span class=\"line\">    \t<span class=\"type\">int</span> mid=(l+r)&gt;&gt;<span class=\"number\">1</span>;</span><br><span class=\"line\">    \t<span class=\"keyword\">if</span>(id&lt;=mid)<span class=\"built_in\">update</span>(id,lson);</span><br><span class=\"line\">    \t<span class=\"keyword\">else</span> <span class=\"built_in\">update</span>(id,rson);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">query</span><span class=\"params\">(<span class=\"type\">int</span> L,<span class=\"type\">int</span> R,<span class=\"type\">int</span> l,<span class=\"type\">int</span> r,<span class=\"type\">int</span> rt,<span class=\"type\">int</span> rt2)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(L&lt;=l&amp;&amp;r&lt;=R)<span class=\"keyword\">return</span> sum[rt2]-sum[rt];</span><br><span class=\"line\">    \t<span class=\"type\">int</span> mid=(l+r)&gt;&gt;<span class=\"number\">1</span>,ret=<span class=\"number\">0</span>;</span><br><span class=\"line\">    \t<span class=\"keyword\">if</span>(L&lt;=mid)ret+=<span class=\"built_in\">query</span>(L,R,lson,ls[rt2]);</span><br><span class=\"line\">    \t<span class=\"keyword\">if</span>(mid&lt;R)ret+=<span class=\"built_in\">query</span>(L,R,rson,rs[rt2]);</span><br><span class=\"line\">    \t<span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;tree;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">check</span><span class=\"params\">(<span class=\"type\">int</span> i,<span class=\"type\">int</span> j,<span class=\"type\">int</span> L,<span class=\"type\">int</span> R)</span></span>&#123;</span><br><span class=\"line\">\tL=<span class=\"built_in\">max</span>(<span class=\"number\">0</span>,L);R=<span class=\"built_in\">min</span>(R,nn);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(L&gt;R)<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> tree.<span class=\"built_in\">query</span>(L,R,<span class=\"number\">0</span>,nn,root[i],root[j])&gt;<span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> getbit(a,i) ((a&gt;&gt;i)&amp;1)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">freopen</span>(<span class=\"string\">&quot;food.in&quot;</span>,<span class=\"string\">&quot;r&quot;</span>,stdin);</span><br><span class=\"line\">\t<span class=\"built_in\">freopen</span>(<span class=\"string\">&quot;food.out&quot;</span>,<span class=\"string\">&quot;w&quot;</span>,stdout);</span><br><span class=\"line\">\tn=<span class=\"built_in\">read</span>();m=<span class=\"built_in\">read</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">register</span> <span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i)a[i]=<span class=\"built_in\">read</span>(),nn=<span class=\"built_in\">max</span>(nn,a[i]);</span><br><span class=\"line\">  \t<span class=\"keyword\">for</span>(<span class=\"keyword\">register</span> <span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i)root[i]=root[i<span class=\"number\">-1</span>],tree.<span class=\"built_in\">update</span>(a[i],<span class=\"number\">0</span>,nn,root[i]);</span><br><span class=\"line\">  \t<span class=\"keyword\">for</span>(<span class=\"keyword\">register</span> <span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=m;++i)&#123;</span><br><span class=\"line\">    \t<span class=\"type\">int</span> b=<span class=\"built_in\">read</span>(),x=<span class=\"built_in\">read</span>(),l=<span class=\"built_in\">read</span>(),r=<span class=\"built_in\">read</span>(),ans=<span class=\"number\">0</span>;</span><br><span class=\"line\">    \t<span class=\"keyword\">for</span>(<span class=\"keyword\">register</span> <span class=\"type\">int</span> i=<span class=\"number\">17</span>,ls;i&gt;=<span class=\"number\">0</span>;--i)&#123;</span><br><span class=\"line\">    \t\t<span class=\"keyword\">if</span>(!<span class=\"built_in\">getbit</span>(b,i))ls=ans+(<span class=\"number\">1</span>&lt;&lt;i)-x;</span><br><span class=\"line\">    \t\t<span class=\"keyword\">else</span> ls=ans-x;</span><br><span class=\"line\">      \t\t<span class=\"keyword\">if</span>(<span class=\"built_in\">check</span>(l<span class=\"number\">-1</span>,r,ls,ls+(<span class=\"number\">1</span>&lt;&lt;i)<span class=\"number\">-1</span>))ans=ls+x;</span><br><span class=\"line\">      \t\t<span class=\"keyword\">else</span> ans+=<span class=\"built_in\">getbit</span>(b,i)&lt;&lt;i;</span><br><span class=\"line\">    \t&#125;</span><br><span class=\"line\">    \t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>,ans^b);</span><br><span class=\"line\">  \t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">fclose</span>(stdin);</span><br><span class=\"line\">\t<span class=\"built_in\">fclose</span>(stdout);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"【T3-围棋】\"><a href=\"#【T3-围棋】\" class=\"headerlink\" title=\"【T3 围棋】\"></a><a href=\"https://www.luogu.org/problemnew/show/P3290\">【T3 围棋】</a></h2><p>$\\ \\ \\ \\ \\ \\,$插头dp是不会做插头dp的，这辈子不可能做插头dp的。写起来又怪麻烦，就是打打傻逼暴力，才能骗得了分这样子。</p>\n<p>$\\ \\ \\ \\ \\ \\,$（逃</p>"},{"title":"【CF888G】 Xor-MST 简易题解","date":"2019-02-26T01:03:15.000Z","mathjax":true,"_content":"题目传送门：[【CF888G】 Xor-MST](https://www.luogu.com.cn/problem/CF888G)\n\n<!-- more -->\n\n## 题目大意\n\n$\\ \\ \\ \\ \\ \\ \\,$给你一个 $n$ 个节点的完全图，第 $i$ 个点的权值为 $a_i$ ，两点的之间边权为这两个点权值的异或值，求最小生成树的权值。\n\n## 想法\n\n$\\ \\ \\ \\ \\ \\ \\,$其实这道题没有那么复杂，还是好想的。\n\n$\\ \\ \\ \\ \\ \\ \\,$最小生成树的话，我们显然有一个基于贪心的$Kruskal$ 算法，复杂度 $O(n^2\\log n)$，想想还是算了吧。\n\n$\\ \\ \\ \\ \\ \\ \\,$而遇到关于异或的题呢，我们一般会有两种想法：整形异或线性基，$Trie$ 树。\n\n$\\ \\ \\ \\ \\ \\ \\,$容易想到的，这道题当然和线性基没有关系了，我们思考一下 $Trie$ 树，首先，我们先把第一个样例从高位到低位插入线性基看看：\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190226084314824.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzk3Mzk2Ng==,size_16,color_FFFFFF,t_70)\n\n$\\ \\ \\ \\ \\ \\ \\,$容易发现，对于每个叶子节点，既每个点值之间，要是需要互相连边，那么求 **他们 $Lca$ 以后的边的亦或值** 即可。\n\n$\\ \\ \\ \\ \\ \\ \\,$由此可得，若是 $Lca$ 的深度越深，便约优。因为我们是从高位到低位插入的，所以浅的点权值较大，要尽量避免选择浅的点。\n\n$\\ \\ \\ \\ \\ \\ \\,$我们不妨把可能是 $Lca$ 的点拉出来瞅瞅：\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190226085043371.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzk3Mzk2Ng==,size_16,color_FFFFFF,t_70)\n$\\ \\ \\ \\ \\ \\ \\,$惊喜地发现，刚好有 $4$ 个点，也就是所有拥有两个儿子的点一共有 $4$ 个，可以证明，如果 $a_i$ 两两不等的话，那么这种点一共有 $n-1$ 个，那么答案就呼之欲出了：\n\n$\\ \\ \\ \\ \\ \\ \\,$我们每找到这样的点，就暴力贪心 $DFS$ 下去：\n- 每次尽量同时走左儿子或右儿子；\n- 如果两个都有，就两个都走，然后返回值取 $min$ 。\n- 如果两个只有不一样的儿子，就在返回值加上这一深度$bit$的值，然后继续走\n\n$\\ \\ \\ \\ \\ \\ \\,$最终答案就是他们的 $DFS$ 值的和。\n\n$\\ \\ \\ \\ \\ \\ \\,$那如果 $a_i$ 不是两两不等的话怎么办呢，如果 $a_u=a_v$ 的话，我们当然首先建一条边连接 $u$，$v$，权值为 $0$，对答案完全没有影响，所以我们正常建，正常搜，是不会有问题的。\n\n## 代码\n\n``` cpp\n#include<algorithm>\n#include<iostream>\n#include<cstdlib>\n#include<cstring>\n#include<cctype>\n#include<cstdio>\n#include<vector>\n#include<string>\n#include<queue>\n#include<stack>\n#include<cmath>\n#include<map>\n#include<set>\nusing namespace std;\nconst int inf=0x7fffffff;\nconst double eps=1e-10;\nconst double pi=acos(-1.0);\n//char buf[1<<15],*S=buf,*T=buf;\n//char getch(){return S==T&&(T=(S=buf)+fread(buf,1,1<<15,stdin),S==T)?0:*S++;}\ninline int read(){\n\tint x=0,f=1;char ch;ch=getchar();\n\twhile(ch<'0'||ch>'9'){if(ch=='-') f=0;ch=getchar();}\n\twhile(ch>='0'&&ch<='9'){x=(x<<1)+(x<<3)+(ch&15);ch=getchar();}\n\tif(f)return x;else return -x;\n}\nstruct Trie{\n\tint son[2][200000*30+10],tot;\n\tvoid Insert(int a){\n\t\tint now=0,id;\n\t\tfor(int i=30;i>=0;i--){\n\t    \tid=(a>>i)&1;\n\t    \tif(!son[id][now])son[id][now]=++tot;\n\t    \tnow=son[id][now];\n\t\t}\n\t}\n\tint Find(int r1,int r2,int b){\n\t\tif(b<0) return 0;\n\t\tint a1=-1,a2=-1;\n\t\tif(son[0][r1]&&son[0][r2]) a1=Find(son[0][r1],son[0][r2],b-1);\n\t\tif(son[1][r1]&&son[1][r2]) a2=Find(son[1][r1],son[1][r2],b-1);\n\t\tif(~a1&&~a2) return min(a1,a2);\n\t\tif(~a1) return a1;if(~a2) return a2;\n\t\tif(son[1][r1]&&son[0][r2]) a1=Find(son[1][r1],son[0][r2],b-1)+(1<<b);\n\t\tif(son[0][r1]&&son[1][r2]) a2=Find(son[0][r1],son[1][r2],b-1)+(1<<b);\n\t\tif(~a1&&~a2) return min(a1,a2);\n\t\tif(~a1) return a1;if(~a2) return a2;\n\t}\n}T;\nlong long ans;\nvoid dfs(int a,int b){\n\tif(b<0) return;\n\tif(T.son[0][a]&&T.son[1][a]) ans+=1ll*T.Find(T.son[0][a],T.son[1][a],b-1)+(1ll<<b);\n\tif(T.son[0][a]) dfs(T.son[0][a],b-1);\n\tif(T.son[1][a]) dfs(T.son[1][a],b-1);\n}\nint n,v;\nint main()\n{\n\tn=read();\n\tfor(int i=1;i<=n;i++)T.Insert(read());\n\tdfs(0,30);\n\tprintf(\"%I64d\\n\",ans);\n\treturn 0;\n}\n\n```","source":"_posts/CF888G-Xor-MST-简易题解.md","raw":"---\ntitle: '【CF888G】 Xor-MST 简易题解'\ndate: 2019-02-26 09:03:15\ncategories:\n- 题解\ntags:\n- OI\n- 异或\n- Trie树\n- 数据结构\nmathjax: true\n---\n题目传送门：[【CF888G】 Xor-MST](https://www.luogu.com.cn/problem/CF888G)\n\n<!-- more -->\n\n## 题目大意\n\n$\\ \\ \\ \\ \\ \\ \\,$给你一个 $n$ 个节点的完全图，第 $i$ 个点的权值为 $a_i$ ，两点的之间边权为这两个点权值的异或值，求最小生成树的权值。\n\n## 想法\n\n$\\ \\ \\ \\ \\ \\ \\,$其实这道题没有那么复杂，还是好想的。\n\n$\\ \\ \\ \\ \\ \\ \\,$最小生成树的话，我们显然有一个基于贪心的$Kruskal$ 算法，复杂度 $O(n^2\\log n)$，想想还是算了吧。\n\n$\\ \\ \\ \\ \\ \\ \\,$而遇到关于异或的题呢，我们一般会有两种想法：整形异或线性基，$Trie$ 树。\n\n$\\ \\ \\ \\ \\ \\ \\,$容易想到的，这道题当然和线性基没有关系了，我们思考一下 $Trie$ 树，首先，我们先把第一个样例从高位到低位插入线性基看看：\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190226084314824.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzk3Mzk2Ng==,size_16,color_FFFFFF,t_70)\n\n$\\ \\ \\ \\ \\ \\ \\,$容易发现，对于每个叶子节点，既每个点值之间，要是需要互相连边，那么求 **他们 $Lca$ 以后的边的亦或值** 即可。\n\n$\\ \\ \\ \\ \\ \\ \\,$由此可得，若是 $Lca$ 的深度越深，便约优。因为我们是从高位到低位插入的，所以浅的点权值较大，要尽量避免选择浅的点。\n\n$\\ \\ \\ \\ \\ \\ \\,$我们不妨把可能是 $Lca$ 的点拉出来瞅瞅：\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190226085043371.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzk3Mzk2Ng==,size_16,color_FFFFFF,t_70)\n$\\ \\ \\ \\ \\ \\ \\,$惊喜地发现，刚好有 $4$ 个点，也就是所有拥有两个儿子的点一共有 $4$ 个，可以证明，如果 $a_i$ 两两不等的话，那么这种点一共有 $n-1$ 个，那么答案就呼之欲出了：\n\n$\\ \\ \\ \\ \\ \\ \\,$我们每找到这样的点，就暴力贪心 $DFS$ 下去：\n- 每次尽量同时走左儿子或右儿子；\n- 如果两个都有，就两个都走，然后返回值取 $min$ 。\n- 如果两个只有不一样的儿子，就在返回值加上这一深度$bit$的值，然后继续走\n\n$\\ \\ \\ \\ \\ \\ \\,$最终答案就是他们的 $DFS$ 值的和。\n\n$\\ \\ \\ \\ \\ \\ \\,$那如果 $a_i$ 不是两两不等的话怎么办呢，如果 $a_u=a_v$ 的话，我们当然首先建一条边连接 $u$，$v$，权值为 $0$，对答案完全没有影响，所以我们正常建，正常搜，是不会有问题的。\n\n## 代码\n\n``` cpp\n#include<algorithm>\n#include<iostream>\n#include<cstdlib>\n#include<cstring>\n#include<cctype>\n#include<cstdio>\n#include<vector>\n#include<string>\n#include<queue>\n#include<stack>\n#include<cmath>\n#include<map>\n#include<set>\nusing namespace std;\nconst int inf=0x7fffffff;\nconst double eps=1e-10;\nconst double pi=acos(-1.0);\n//char buf[1<<15],*S=buf,*T=buf;\n//char getch(){return S==T&&(T=(S=buf)+fread(buf,1,1<<15,stdin),S==T)?0:*S++;}\ninline int read(){\n\tint x=0,f=1;char ch;ch=getchar();\n\twhile(ch<'0'||ch>'9'){if(ch=='-') f=0;ch=getchar();}\n\twhile(ch>='0'&&ch<='9'){x=(x<<1)+(x<<3)+(ch&15);ch=getchar();}\n\tif(f)return x;else return -x;\n}\nstruct Trie{\n\tint son[2][200000*30+10],tot;\n\tvoid Insert(int a){\n\t\tint now=0,id;\n\t\tfor(int i=30;i>=0;i--){\n\t    \tid=(a>>i)&1;\n\t    \tif(!son[id][now])son[id][now]=++tot;\n\t    \tnow=son[id][now];\n\t\t}\n\t}\n\tint Find(int r1,int r2,int b){\n\t\tif(b<0) return 0;\n\t\tint a1=-1,a2=-1;\n\t\tif(son[0][r1]&&son[0][r2]) a1=Find(son[0][r1],son[0][r2],b-1);\n\t\tif(son[1][r1]&&son[1][r2]) a2=Find(son[1][r1],son[1][r2],b-1);\n\t\tif(~a1&&~a2) return min(a1,a2);\n\t\tif(~a1) return a1;if(~a2) return a2;\n\t\tif(son[1][r1]&&son[0][r2]) a1=Find(son[1][r1],son[0][r2],b-1)+(1<<b);\n\t\tif(son[0][r1]&&son[1][r2]) a2=Find(son[0][r1],son[1][r2],b-1)+(1<<b);\n\t\tif(~a1&&~a2) return min(a1,a2);\n\t\tif(~a1) return a1;if(~a2) return a2;\n\t}\n}T;\nlong long ans;\nvoid dfs(int a,int b){\n\tif(b<0) return;\n\tif(T.son[0][a]&&T.son[1][a]) ans+=1ll*T.Find(T.son[0][a],T.son[1][a],b-1)+(1ll<<b);\n\tif(T.son[0][a]) dfs(T.son[0][a],b-1);\n\tif(T.son[1][a]) dfs(T.son[1][a],b-1);\n}\nint n,v;\nint main()\n{\n\tn=read();\n\tfor(int i=1;i<=n;i++)T.Insert(read());\n\tdfs(0,30);\n\tprintf(\"%I64d\\n\",ans);\n\treturn 0;\n}\n\n```","slug":"CF888G-Xor-MST-简易题解","published":1,"updated":"2022-02-13T10:07:30.121Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0i63w5x000ju4gbeuwk8avs","content":"<p>题目传送门：<a href=\"https://www.luogu.com.cn/problem/CF888G\">【CF888G】 Xor-MST</a></p>\n<span id=\"more\"></span>\n<h2 id=\"题目大意\"><a href=\"#题目大意\" class=\"headerlink\" title=\"题目大意\"></a>题目大意</h2><p>$\\ \\ \\ \\ \\ \\ \\,$给你一个 $n$ 个节点的完全图，第 $i$ 个点的权值为 $a_i$ ，两点的之间边权为这两个点权值的异或值，求最小生成树的权值。</p>\n<h2 id=\"想法\"><a href=\"#想法\" class=\"headerlink\" title=\"想法\"></a>想法</h2><p>$\\ \\ \\ \\ \\ \\ \\,$其实这道题没有那么复杂，还是好想的。</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$最小生成树的话，我们显然有一个基于贪心的$Kruskal$ 算法，复杂度 $O(n^2\\log n)$，想想还是算了吧。</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$而遇到关于异或的题呢，我们一般会有两种想法：整形异或线性基，$Trie$ 树。</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$容易想到的，这道题当然和线性基没有关系了，我们思考一下 $Trie$ 树，首先，我们先把第一个样例从高位到低位插入线性基看看：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20190226084314824.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzk3Mzk2Ng==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$容易发现，对于每个叶子节点，既每个点值之间，要是需要互相连边，那么求 <strong>他们 $Lca$ 以后的边的亦或值</strong> 即可。</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$由此可得，若是 $Lca$ 的深度越深，便约优。因为我们是从高位到低位插入的，所以浅的点权值较大，要尽量避免选择浅的点。</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$我们不妨把可能是 $Lca$ 的点拉出来瞅瞅：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20190226085043371.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzk3Mzk2Ng==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>$\\ \\ \\ \\ \\ \\ \\,$惊喜地发现，刚好有 $4$ 个点，也就是所有拥有两个儿子的点一共有 $4$ 个，可以证明，如果 $a_i$ 两两不等的话，那么这种点一共有 $n-1$ 个，那么答案就呼之欲出了：</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$我们每找到这样的点，就暴力贪心 $DFS$ 下去：</p>\n<ul>\n<li>每次尽量同时走左儿子或右儿子；</li>\n<li>如果两个都有，就两个都走，然后返回值取 $min$ 。</li>\n<li>如果两个只有不一样的儿子，就在返回值加上这一深度$bit$的值，然后继续走</li>\n</ul>\n<p>$\\ \\ \\ \\ \\ \\ \\,$最终答案就是他们的 $DFS$ 值的和。</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$那如果 $a_i$ 不是两两不等的话怎么办呢，如果 $a_u=a_v$ 的话，我们当然首先建一条边连接 $u$，$v$，权值为 $0$，对答案完全没有影响，所以我们正常建，正常搜，是不会有问题的。</p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdlib&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cctype&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;stack&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;map&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;set&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> inf=<span class=\"number\">0x7fffffff</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">double</span> eps=<span class=\"number\">1e-10</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">double</span> pi=<span class=\"built_in\">acos</span>(<span class=\"number\">-1.0</span>);</span><br><span class=\"line\"><span class=\"comment\">//char buf[1&lt;&lt;15],*S=buf,*T=buf;</span></span><br><span class=\"line\"><span class=\"comment\">//char getch()&#123;return S==T&amp;&amp;(T=(S=buf)+fread(buf,1,1&lt;&lt;15,stdin),S==T)?0:*S++;&#125;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">int</span> <span class=\"title\">read</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> x=<span class=\"number\">0</span>,f=<span class=\"number\">1</span>;<span class=\"type\">char</span> ch;ch=<span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(ch&lt;<span class=\"string\">&#x27;0&#x27;</span>||ch&gt;<span class=\"string\">&#x27;9&#x27;</span>)&#123;<span class=\"keyword\">if</span>(ch==<span class=\"string\">&#x27;-&#x27;</span>) f=<span class=\"number\">0</span>;ch=<span class=\"built_in\">getchar</span>();&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(ch&gt;=<span class=\"string\">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class=\"string\">&#x27;9&#x27;</span>)&#123;x=(x&lt;&lt;<span class=\"number\">1</span>)+(x&lt;&lt;<span class=\"number\">3</span>)+(ch&amp;<span class=\"number\">15</span>);ch=<span class=\"built_in\">getchar</span>();&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(f)<span class=\"keyword\">return</span> x;<span class=\"keyword\">else</span> <span class=\"keyword\">return</span> -x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Trie</span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> son[<span class=\"number\">2</span>][<span class=\"number\">200000</span>*<span class=\"number\">30</span>+<span class=\"number\">10</span>],tot;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Insert</span><span class=\"params\">(<span class=\"type\">int</span> a)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> now=<span class=\"number\">0</span>,id;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">30</span>;i&gt;=<span class=\"number\">0</span>;i--)&#123;</span><br><span class=\"line\">\t    \tid=(a&gt;&gt;i)&amp;<span class=\"number\">1</span>;</span><br><span class=\"line\">\t    \t<span class=\"keyword\">if</span>(!son[id][now])son[id][now]=++tot;</span><br><span class=\"line\">\t    \tnow=son[id][now];</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">Find</span><span class=\"params\">(<span class=\"type\">int</span> r1,<span class=\"type\">int</span> r2,<span class=\"type\">int</span> b)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(b&lt;<span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> a1=<span class=\"number\">-1</span>,a2=<span class=\"number\">-1</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(son[<span class=\"number\">0</span>][r1]&amp;&amp;son[<span class=\"number\">0</span>][r2]) a1=<span class=\"built_in\">Find</span>(son[<span class=\"number\">0</span>][r1],son[<span class=\"number\">0</span>][r2],b<span class=\"number\">-1</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(son[<span class=\"number\">1</span>][r1]&amp;&amp;son[<span class=\"number\">1</span>][r2]) a2=<span class=\"built_in\">Find</span>(son[<span class=\"number\">1</span>][r1],son[<span class=\"number\">1</span>][r2],b<span class=\"number\">-1</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(~a1&amp;&amp;~a2) <span class=\"keyword\">return</span> <span class=\"built_in\">min</span>(a1,a2);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(~a1) <span class=\"keyword\">return</span> a1;<span class=\"keyword\">if</span>(~a2) <span class=\"keyword\">return</span> a2;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(son[<span class=\"number\">1</span>][r1]&amp;&amp;son[<span class=\"number\">0</span>][r2]) a1=<span class=\"built_in\">Find</span>(son[<span class=\"number\">1</span>][r1],son[<span class=\"number\">0</span>][r2],b<span class=\"number\">-1</span>)+(<span class=\"number\">1</span>&lt;&lt;b);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(son[<span class=\"number\">0</span>][r1]&amp;&amp;son[<span class=\"number\">1</span>][r2]) a2=<span class=\"built_in\">Find</span>(son[<span class=\"number\">0</span>][r1],son[<span class=\"number\">1</span>][r2],b<span class=\"number\">-1</span>)+(<span class=\"number\">1</span>&lt;&lt;b);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(~a1&amp;&amp;~a2) <span class=\"keyword\">return</span> <span class=\"built_in\">min</span>(a1,a2);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(~a1) <span class=\"keyword\">return</span> a1;<span class=\"keyword\">if</span>(~a2) <span class=\"keyword\">return</span> a2;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;T;</span><br><span class=\"line\"><span class=\"type\">long</span> <span class=\"type\">long</span> ans;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"type\">int</span> a,<span class=\"type\">int</span> b)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(b&lt;<span class=\"number\">0</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(T.son[<span class=\"number\">0</span>][a]&amp;&amp;T.son[<span class=\"number\">1</span>][a]) ans+=<span class=\"number\">1ll</span>*T.<span class=\"built_in\">Find</span>(T.son[<span class=\"number\">0</span>][a],T.son[<span class=\"number\">1</span>][a],b<span class=\"number\">-1</span>)+(<span class=\"number\">1ll</span>&lt;&lt;b);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(T.son[<span class=\"number\">0</span>][a]) <span class=\"built_in\">dfs</span>(T.son[<span class=\"number\">0</span>][a],b<span class=\"number\">-1</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(T.son[<span class=\"number\">1</span>][a]) <span class=\"built_in\">dfs</span>(T.son[<span class=\"number\">1</span>][a],b<span class=\"number\">-1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> n,v;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tn=<span class=\"built_in\">read</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)T.<span class=\"built_in\">Insert</span>(<span class=\"built_in\">read</span>());</span><br><span class=\"line\">\t<span class=\"built_in\">dfs</span>(<span class=\"number\">0</span>,<span class=\"number\">30</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%I64d\\n&quot;</span>,ans);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p>题目传送门：<a href=\"https://www.luogu.com.cn/problem/CF888G\">【CF888G】 Xor-MST</a></p>","more":"<h2 id=\"题目大意\"><a href=\"#题目大意\" class=\"headerlink\" title=\"题目大意\"></a>题目大意</h2><p>$\\ \\ \\ \\ \\ \\ \\,$给你一个 $n$ 个节点的完全图，第 $i$ 个点的权值为 $a_i$ ，两点的之间边权为这两个点权值的异或值，求最小生成树的权值。</p>\n<h2 id=\"想法\"><a href=\"#想法\" class=\"headerlink\" title=\"想法\"></a>想法</h2><p>$\\ \\ \\ \\ \\ \\ \\,$其实这道题没有那么复杂，还是好想的。</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$最小生成树的话，我们显然有一个基于贪心的$Kruskal$ 算法，复杂度 $O(n^2\\log n)$，想想还是算了吧。</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$而遇到关于异或的题呢，我们一般会有两种想法：整形异或线性基，$Trie$ 树。</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$容易想到的，这道题当然和线性基没有关系了，我们思考一下 $Trie$ 树，首先，我们先把第一个样例从高位到低位插入线性基看看：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20190226084314824.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzk3Mzk2Ng==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$容易发现，对于每个叶子节点，既每个点值之间，要是需要互相连边，那么求 <strong>他们 $Lca$ 以后的边的亦或值</strong> 即可。</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$由此可得，若是 $Lca$ 的深度越深，便约优。因为我们是从高位到低位插入的，所以浅的点权值较大，要尽量避免选择浅的点。</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$我们不妨把可能是 $Lca$ 的点拉出来瞅瞅：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20190226085043371.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzk3Mzk2Ng==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>$\\ \\ \\ \\ \\ \\ \\,$惊喜地发现，刚好有 $4$ 个点，也就是所有拥有两个儿子的点一共有 $4$ 个，可以证明，如果 $a_i$ 两两不等的话，那么这种点一共有 $n-1$ 个，那么答案就呼之欲出了：</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$我们每找到这样的点，就暴力贪心 $DFS$ 下去：</p>\n<ul>\n<li>每次尽量同时走左儿子或右儿子；</li>\n<li>如果两个都有，就两个都走，然后返回值取 $min$ 。</li>\n<li>如果两个只有不一样的儿子，就在返回值加上这一深度$bit$的值，然后继续走</li>\n</ul>\n<p>$\\ \\ \\ \\ \\ \\ \\,$最终答案就是他们的 $DFS$ 值的和。</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$那如果 $a_i$ 不是两两不等的话怎么办呢，如果 $a_u=a_v$ 的话，我们当然首先建一条边连接 $u$，$v$，权值为 $0$，对答案完全没有影响，所以我们正常建，正常搜，是不会有问题的。</p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdlib&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cctype&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;stack&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;map&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;set&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> inf=<span class=\"number\">0x7fffffff</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">double</span> eps=<span class=\"number\">1e-10</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">double</span> pi=<span class=\"built_in\">acos</span>(<span class=\"number\">-1.0</span>);</span><br><span class=\"line\"><span class=\"comment\">//char buf[1&lt;&lt;15],*S=buf,*T=buf;</span></span><br><span class=\"line\"><span class=\"comment\">//char getch()&#123;return S==T&amp;&amp;(T=(S=buf)+fread(buf,1,1&lt;&lt;15,stdin),S==T)?0:*S++;&#125;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">int</span> <span class=\"title\">read</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> x=<span class=\"number\">0</span>,f=<span class=\"number\">1</span>;<span class=\"type\">char</span> ch;ch=<span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(ch&lt;<span class=\"string\">&#x27;0&#x27;</span>||ch&gt;<span class=\"string\">&#x27;9&#x27;</span>)&#123;<span class=\"keyword\">if</span>(ch==<span class=\"string\">&#x27;-&#x27;</span>) f=<span class=\"number\">0</span>;ch=<span class=\"built_in\">getchar</span>();&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(ch&gt;=<span class=\"string\">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class=\"string\">&#x27;9&#x27;</span>)&#123;x=(x&lt;&lt;<span class=\"number\">1</span>)+(x&lt;&lt;<span class=\"number\">3</span>)+(ch&amp;<span class=\"number\">15</span>);ch=<span class=\"built_in\">getchar</span>();&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(f)<span class=\"keyword\">return</span> x;<span class=\"keyword\">else</span> <span class=\"keyword\">return</span> -x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Trie</span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> son[<span class=\"number\">2</span>][<span class=\"number\">200000</span>*<span class=\"number\">30</span>+<span class=\"number\">10</span>],tot;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Insert</span><span class=\"params\">(<span class=\"type\">int</span> a)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> now=<span class=\"number\">0</span>,id;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">30</span>;i&gt;=<span class=\"number\">0</span>;i--)&#123;</span><br><span class=\"line\">\t    \tid=(a&gt;&gt;i)&amp;<span class=\"number\">1</span>;</span><br><span class=\"line\">\t    \t<span class=\"keyword\">if</span>(!son[id][now])son[id][now]=++tot;</span><br><span class=\"line\">\t    \tnow=son[id][now];</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">Find</span><span class=\"params\">(<span class=\"type\">int</span> r1,<span class=\"type\">int</span> r2,<span class=\"type\">int</span> b)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(b&lt;<span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> a1=<span class=\"number\">-1</span>,a2=<span class=\"number\">-1</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(son[<span class=\"number\">0</span>][r1]&amp;&amp;son[<span class=\"number\">0</span>][r2]) a1=<span class=\"built_in\">Find</span>(son[<span class=\"number\">0</span>][r1],son[<span class=\"number\">0</span>][r2],b<span class=\"number\">-1</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(son[<span class=\"number\">1</span>][r1]&amp;&amp;son[<span class=\"number\">1</span>][r2]) a2=<span class=\"built_in\">Find</span>(son[<span class=\"number\">1</span>][r1],son[<span class=\"number\">1</span>][r2],b<span class=\"number\">-1</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(~a1&amp;&amp;~a2) <span class=\"keyword\">return</span> <span class=\"built_in\">min</span>(a1,a2);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(~a1) <span class=\"keyword\">return</span> a1;<span class=\"keyword\">if</span>(~a2) <span class=\"keyword\">return</span> a2;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(son[<span class=\"number\">1</span>][r1]&amp;&amp;son[<span class=\"number\">0</span>][r2]) a1=<span class=\"built_in\">Find</span>(son[<span class=\"number\">1</span>][r1],son[<span class=\"number\">0</span>][r2],b<span class=\"number\">-1</span>)+(<span class=\"number\">1</span>&lt;&lt;b);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(son[<span class=\"number\">0</span>][r1]&amp;&amp;son[<span class=\"number\">1</span>][r2]) a2=<span class=\"built_in\">Find</span>(son[<span class=\"number\">0</span>][r1],son[<span class=\"number\">1</span>][r2],b<span class=\"number\">-1</span>)+(<span class=\"number\">1</span>&lt;&lt;b);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(~a1&amp;&amp;~a2) <span class=\"keyword\">return</span> <span class=\"built_in\">min</span>(a1,a2);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(~a1) <span class=\"keyword\">return</span> a1;<span class=\"keyword\">if</span>(~a2) <span class=\"keyword\">return</span> a2;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;T;</span><br><span class=\"line\"><span class=\"type\">long</span> <span class=\"type\">long</span> ans;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"type\">int</span> a,<span class=\"type\">int</span> b)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(b&lt;<span class=\"number\">0</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(T.son[<span class=\"number\">0</span>][a]&amp;&amp;T.son[<span class=\"number\">1</span>][a]) ans+=<span class=\"number\">1ll</span>*T.<span class=\"built_in\">Find</span>(T.son[<span class=\"number\">0</span>][a],T.son[<span class=\"number\">1</span>][a],b<span class=\"number\">-1</span>)+(<span class=\"number\">1ll</span>&lt;&lt;b);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(T.son[<span class=\"number\">0</span>][a]) <span class=\"built_in\">dfs</span>(T.son[<span class=\"number\">0</span>][a],b<span class=\"number\">-1</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(T.son[<span class=\"number\">1</span>][a]) <span class=\"built_in\">dfs</span>(T.son[<span class=\"number\">1</span>][a],b<span class=\"number\">-1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> n,v;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tn=<span class=\"built_in\">read</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)T.<span class=\"built_in\">Insert</span>(<span class=\"built_in\">read</span>());</span><br><span class=\"line\">\t<span class=\"built_in\">dfs</span>(<span class=\"number\">0</span>,<span class=\"number\">30</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%I64d\\n&quot;</span>,ans);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>"},{"title":"[SDOI2016]生成魔咒 简易题解","date":"2019-03-12T02:01:39.000Z","mathjax":true,"_content":"题目传送门：[[SDOI2016]生成魔咒](https://www.luogu.com.cn/problem/P4070)\n\n<!-- more -->\n## 想法\n\n### 引入\n\n$\\ \\ \\ \\ \\ \\ \\,$一看这个题目：\n\n- 只是单调在后面加字符；\n- 只是统计子串数量。\n\n$\\ \\ \\ \\ \\ \\ \\,$哇！这不是 $SAM$ 的裸题吗，周道感动得要哭了，根据[【后缀自动机的性质】](/2018/12/29/后缀自动机/)：\n\n### 解法\n\n$\\ \\ \\ \\ \\ \\ \\,$点$i$上面表示子串的数量为:$len[fa[i]]−len[i]$\n$\\ \\ \\ \\ \\ \\ \\,$所以我们每次插入一个点，把新加的子串个数记累加就好了。\n\n$\\ \\ \\ \\ \\ \\ \\,$但是一看这个字符集大小……\n\n$\\ \\ \\ \\ \\ \\ \\,$不过我们知道，虽然字符集这么大，但是每个节点上面的儿子个数却是远远达不到字符集那么大的，所以我们试着用 $map$ 代替数组来记录儿子：\n\n$\\ \\ \\ \\ \\ \\ \\,$然后……就过了……\n\n## 代码\n\n``` cpp\n#include<algorithm>\n#include<iostream>\n#include<cstdlib>\n#include<cstring>\n#include<cctype>\n#include<cstdio>\n#include<vector>\n#include<string>\n#include<queue>\n#include<stack>\n#include<cmath>\n#include<map>\n#include<set>\nusing namespace std;\nconst int inf=0x7fffffff;\nconst double eps=1e-10;\nconst double pi=acos(-1.0);\n//char buf[1<<15],*S=buf,*T=buf;\n//char getch(){return S==T&&(T=(S=buf)+fread(buf,1,1<<15,stdin),S==T)?0:*S++;}\ninline int read(){\n\tint x=0,f=1;char ch;ch=getchar();\n\twhile(ch<'0'||ch>'9'){if(ch=='-') f=0;ch=getchar();}\n\twhile(ch>='0'&&ch<='9'){x=(x<<1)+(x<<3)+(ch&15);ch=getchar();}\n\tif(f)return x;else return -x;\n}\nconst int N=200010;\nlong long ans; \nstruct Suffix_Automaton{\n\tmap<int,int>ch[N];\n  \tint last=1,cnt=1;\n\tint len[N],fa[N];\n\tvoid insert(int c){\n\t\tint np=++cnt,p=last;last=np;\n\t\tlen[np]=len[p]+1;\n\t\tfor(;p&&!ch[p][c];p=fa[p])ch[p][c]=np;\n\t\tif(!p)fa[np]=1;\n\t\telse{\n\t\t\tint q=ch[p][c];\n\t\t\tif(len[q]==len[p]+1)fa[np]=q;\n\t\t\telse{\n\t\t\t\tint nq=++cnt;len[nq]=len[p]+1;\n\t\t\t\tch[nq]=ch[q];\n\t\t\t\tfa[nq]=fa[q];fa[q]=fa[np]=nq;\n\t\t\t\tfor(;ch[p][c]==q;p=fa[p])ch[p][c]=nq;\n\t\t\t}\n\t\t}\n\t\tans+=1ll*len[np]-len[fa[np]];\n\t}\n}Sam;\nint main()\n{\n\tint n=read();\n\twhile(n--){\n\t\tint a=read();\n\t\tSam.insert(a);\n\t\tprintf(\"%lld\\n\",ans);\n\t}\n\treturn 0;\n}\n\n```\n","source":"_posts/SDOI2016-生成魔咒-简易题解.md","raw":"---\ntitle: '[SDOI2016]生成魔咒 简易题解'\ndate: 2019-03-12 10:01:39\ncategories:\n- 题解\ntags:\n- OI\n- 数据结构\n- 字符串\n- 后缀自动机\nmathjax: true\n---\n题目传送门：[[SDOI2016]生成魔咒](https://www.luogu.com.cn/problem/P4070)\n\n<!-- more -->\n## 想法\n\n### 引入\n\n$\\ \\ \\ \\ \\ \\ \\,$一看这个题目：\n\n- 只是单调在后面加字符；\n- 只是统计子串数量。\n\n$\\ \\ \\ \\ \\ \\ \\,$哇！这不是 $SAM$ 的裸题吗，周道感动得要哭了，根据[【后缀自动机的性质】](/2018/12/29/后缀自动机/)：\n\n### 解法\n\n$\\ \\ \\ \\ \\ \\ \\,$点$i$上面表示子串的数量为:$len[fa[i]]−len[i]$\n$\\ \\ \\ \\ \\ \\ \\,$所以我们每次插入一个点，把新加的子串个数记累加就好了。\n\n$\\ \\ \\ \\ \\ \\ \\,$但是一看这个字符集大小……\n\n$\\ \\ \\ \\ \\ \\ \\,$不过我们知道，虽然字符集这么大，但是每个节点上面的儿子个数却是远远达不到字符集那么大的，所以我们试着用 $map$ 代替数组来记录儿子：\n\n$\\ \\ \\ \\ \\ \\ \\,$然后……就过了……\n\n## 代码\n\n``` cpp\n#include<algorithm>\n#include<iostream>\n#include<cstdlib>\n#include<cstring>\n#include<cctype>\n#include<cstdio>\n#include<vector>\n#include<string>\n#include<queue>\n#include<stack>\n#include<cmath>\n#include<map>\n#include<set>\nusing namespace std;\nconst int inf=0x7fffffff;\nconst double eps=1e-10;\nconst double pi=acos(-1.0);\n//char buf[1<<15],*S=buf,*T=buf;\n//char getch(){return S==T&&(T=(S=buf)+fread(buf,1,1<<15,stdin),S==T)?0:*S++;}\ninline int read(){\n\tint x=0,f=1;char ch;ch=getchar();\n\twhile(ch<'0'||ch>'9'){if(ch=='-') f=0;ch=getchar();}\n\twhile(ch>='0'&&ch<='9'){x=(x<<1)+(x<<3)+(ch&15);ch=getchar();}\n\tif(f)return x;else return -x;\n}\nconst int N=200010;\nlong long ans; \nstruct Suffix_Automaton{\n\tmap<int,int>ch[N];\n  \tint last=1,cnt=1;\n\tint len[N],fa[N];\n\tvoid insert(int c){\n\t\tint np=++cnt,p=last;last=np;\n\t\tlen[np]=len[p]+1;\n\t\tfor(;p&&!ch[p][c];p=fa[p])ch[p][c]=np;\n\t\tif(!p)fa[np]=1;\n\t\telse{\n\t\t\tint q=ch[p][c];\n\t\t\tif(len[q]==len[p]+1)fa[np]=q;\n\t\t\telse{\n\t\t\t\tint nq=++cnt;len[nq]=len[p]+1;\n\t\t\t\tch[nq]=ch[q];\n\t\t\t\tfa[nq]=fa[q];fa[q]=fa[np]=nq;\n\t\t\t\tfor(;ch[p][c]==q;p=fa[p])ch[p][c]=nq;\n\t\t\t}\n\t\t}\n\t\tans+=1ll*len[np]-len[fa[np]];\n\t}\n}Sam;\nint main()\n{\n\tint n=read();\n\twhile(n--){\n\t\tint a=read();\n\t\tSam.insert(a);\n\t\tprintf(\"%lld\\n\",ans);\n\t}\n\treturn 0;\n}\n\n```\n","slug":"SDOI2016-生成魔咒-简易题解","published":1,"updated":"2022-02-13T14:08:18.476Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0i63w5z000lu4gb3fhna7u8","content":"<p>题目传送门：<a href=\"https://www.luogu.com.cn/problem/P4070\">[SDOI2016]生成魔咒</a></p>\n<span id=\"more\"></span>\n<h2 id=\"想法\"><a href=\"#想法\" class=\"headerlink\" title=\"想法\"></a>想法</h2><h3 id=\"引入\"><a href=\"#引入\" class=\"headerlink\" title=\"引入\"></a>引入</h3><p>$\\ \\ \\ \\ \\ \\ \\,$一看这个题目：</p>\n<ul>\n<li>只是单调在后面加字符；</li>\n<li>只是统计子串数量。</li>\n</ul>\n<p>$\\ \\ \\ \\ \\ \\ \\,$哇！这不是 $SAM$ 的裸题吗，周道感动得要哭了，根据<a href=\"/2018/12/29/后缀自动机/\">【后缀自动机的性质】</a>：</p>\n<h3 id=\"解法\"><a href=\"#解法\" class=\"headerlink\" title=\"解法\"></a>解法</h3><p>$\\ \\ \\ \\ \\ \\ \\,$点$i$上面表示子串的数量为:$len[fa[i]]−len[i]$<br>$\\ \\ \\ \\ \\ \\ \\,$所以我们每次插入一个点，把新加的子串个数记累加就好了。</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$但是一看这个字符集大小……</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$不过我们知道，虽然字符集这么大，但是每个节点上面的儿子个数却是远远达不到字符集那么大的，所以我们试着用 $map$ 代替数组来记录儿子：</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$然后……就过了……</p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdlib&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cctype&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;stack&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;map&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;set&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> inf=<span class=\"number\">0x7fffffff</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">double</span> eps=<span class=\"number\">1e-10</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">double</span> pi=<span class=\"built_in\">acos</span>(<span class=\"number\">-1.0</span>);</span><br><span class=\"line\"><span class=\"comment\">//char buf[1&lt;&lt;15],*S=buf,*T=buf;</span></span><br><span class=\"line\"><span class=\"comment\">//char getch()&#123;return S==T&amp;&amp;(T=(S=buf)+fread(buf,1,1&lt;&lt;15,stdin),S==T)?0:*S++;&#125;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">int</span> <span class=\"title\">read</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> x=<span class=\"number\">0</span>,f=<span class=\"number\">1</span>;<span class=\"type\">char</span> ch;ch=<span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(ch&lt;<span class=\"string\">&#x27;0&#x27;</span>||ch&gt;<span class=\"string\">&#x27;9&#x27;</span>)&#123;<span class=\"keyword\">if</span>(ch==<span class=\"string\">&#x27;-&#x27;</span>) f=<span class=\"number\">0</span>;ch=<span class=\"built_in\">getchar</span>();&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(ch&gt;=<span class=\"string\">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class=\"string\">&#x27;9&#x27;</span>)&#123;x=(x&lt;&lt;<span class=\"number\">1</span>)+(x&lt;&lt;<span class=\"number\">3</span>)+(ch&amp;<span class=\"number\">15</span>);ch=<span class=\"built_in\">getchar</span>();&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(f)<span class=\"keyword\">return</span> x;<span class=\"keyword\">else</span> <span class=\"keyword\">return</span> -x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">200010</span>;</span><br><span class=\"line\"><span class=\"type\">long</span> <span class=\"type\">long</span> ans; </span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Suffix_Automaton</span>&#123;</span><br><span class=\"line\">\tmap&lt;<span class=\"type\">int</span>,<span class=\"type\">int</span>&gt;ch[N];</span><br><span class=\"line\">  \t<span class=\"type\">int</span> last=<span class=\"number\">1</span>,cnt=<span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"type\">int</span> len[N],fa[N];</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">insert</span><span class=\"params\">(<span class=\"type\">int</span> c)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> np=++cnt,p=last;last=np;</span><br><span class=\"line\">\t\tlen[np]=len[p]+<span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(;p&amp;&amp;!ch[p][c];p=fa[p])ch[p][c]=np;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(!p)fa[np]=<span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"type\">int</span> q=ch[p][c];</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(len[q]==len[p]+<span class=\"number\">1</span>)fa[np]=q;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"type\">int</span> nq=++cnt;len[nq]=len[p]+<span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t\tch[nq]=ch[q];</span><br><span class=\"line\">\t\t\t\tfa[nq]=fa[q];fa[q]=fa[np]=nq;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">for</span>(;ch[p][c]==q;p=fa[p])ch[p][c]=nq;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tans+=<span class=\"number\">1ll</span>*len[np]-len[fa[np]];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;Sam;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> n=<span class=\"built_in\">read</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(n--)&#123;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> a=<span class=\"built_in\">read</span>();</span><br><span class=\"line\">\t\tSam.<span class=\"built_in\">insert</span>(a);</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%lld\\n&quot;</span>,ans);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>题目传送门：<a href=\"https://www.luogu.com.cn/problem/P4070\">[SDOI2016]生成魔咒</a></p>","more":"<h2 id=\"想法\"><a href=\"#想法\" class=\"headerlink\" title=\"想法\"></a>想法</h2><h3 id=\"引入\"><a href=\"#引入\" class=\"headerlink\" title=\"引入\"></a>引入</h3><p>$\\ \\ \\ \\ \\ \\ \\,$一看这个题目：</p>\n<ul>\n<li>只是单调在后面加字符；</li>\n<li>只是统计子串数量。</li>\n</ul>\n<p>$\\ \\ \\ \\ \\ \\ \\,$哇！这不是 $SAM$ 的裸题吗，周道感动得要哭了，根据<a href=\"/2018/12/29/后缀自动机/\">【后缀自动机的性质】</a>：</p>\n<h3 id=\"解法\"><a href=\"#解法\" class=\"headerlink\" title=\"解法\"></a>解法</h3><p>$\\ \\ \\ \\ \\ \\ \\,$点$i$上面表示子串的数量为:$len[fa[i]]−len[i]$<br>$\\ \\ \\ \\ \\ \\ \\,$所以我们每次插入一个点，把新加的子串个数记累加就好了。</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$但是一看这个字符集大小……</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$不过我们知道，虽然字符集这么大，但是每个节点上面的儿子个数却是远远达不到字符集那么大的，所以我们试着用 $map$ 代替数组来记录儿子：</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$然后……就过了……</p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdlib&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cctype&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;stack&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;map&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;set&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> inf=<span class=\"number\">0x7fffffff</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">double</span> eps=<span class=\"number\">1e-10</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">double</span> pi=<span class=\"built_in\">acos</span>(<span class=\"number\">-1.0</span>);</span><br><span class=\"line\"><span class=\"comment\">//char buf[1&lt;&lt;15],*S=buf,*T=buf;</span></span><br><span class=\"line\"><span class=\"comment\">//char getch()&#123;return S==T&amp;&amp;(T=(S=buf)+fread(buf,1,1&lt;&lt;15,stdin),S==T)?0:*S++;&#125;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">int</span> <span class=\"title\">read</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> x=<span class=\"number\">0</span>,f=<span class=\"number\">1</span>;<span class=\"type\">char</span> ch;ch=<span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(ch&lt;<span class=\"string\">&#x27;0&#x27;</span>||ch&gt;<span class=\"string\">&#x27;9&#x27;</span>)&#123;<span class=\"keyword\">if</span>(ch==<span class=\"string\">&#x27;-&#x27;</span>) f=<span class=\"number\">0</span>;ch=<span class=\"built_in\">getchar</span>();&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(ch&gt;=<span class=\"string\">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class=\"string\">&#x27;9&#x27;</span>)&#123;x=(x&lt;&lt;<span class=\"number\">1</span>)+(x&lt;&lt;<span class=\"number\">3</span>)+(ch&amp;<span class=\"number\">15</span>);ch=<span class=\"built_in\">getchar</span>();&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(f)<span class=\"keyword\">return</span> x;<span class=\"keyword\">else</span> <span class=\"keyword\">return</span> -x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">200010</span>;</span><br><span class=\"line\"><span class=\"type\">long</span> <span class=\"type\">long</span> ans; </span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Suffix_Automaton</span>&#123;</span><br><span class=\"line\">\tmap&lt;<span class=\"type\">int</span>,<span class=\"type\">int</span>&gt;ch[N];</span><br><span class=\"line\">  \t<span class=\"type\">int</span> last=<span class=\"number\">1</span>,cnt=<span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"type\">int</span> len[N],fa[N];</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">insert</span><span class=\"params\">(<span class=\"type\">int</span> c)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> np=++cnt,p=last;last=np;</span><br><span class=\"line\">\t\tlen[np]=len[p]+<span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(;p&amp;&amp;!ch[p][c];p=fa[p])ch[p][c]=np;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(!p)fa[np]=<span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"type\">int</span> q=ch[p][c];</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(len[q]==len[p]+<span class=\"number\">1</span>)fa[np]=q;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"type\">int</span> nq=++cnt;len[nq]=len[p]+<span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t\tch[nq]=ch[q];</span><br><span class=\"line\">\t\t\t\tfa[nq]=fa[q];fa[q]=fa[np]=nq;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">for</span>(;ch[p][c]==q;p=fa[p])ch[p][c]=nq;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tans+=<span class=\"number\">1ll</span>*len[np]-len[fa[np]];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;Sam;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> n=<span class=\"built_in\">read</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(n--)&#123;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> a=<span class=\"built_in\">read</span>();</span><br><span class=\"line\">\t\tSam.<span class=\"built_in\">insert</span>(a);</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%lld\\n&quot;</span>,ans);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>"},{"title":"Hello World","date":"2022-02-14T08:06:02.000Z","_content":"\n&#8195; &#8195;忙乎了6天，终于算是把这个Blog搭好了，同时也把之前自己写过的东西搬了过来。说实话，川北家里，春节期间气候不是很好，还是怪冷的。每天的工作时间还是比较有限，效率也不是很高，不过好在还是在开学前把该学的东西学完，东西也做出来了。\n\n&#8195; &#8195;感觉很久没有写过什么东西了呢，那么现在还是来做一个最后的总结，记录一下这几天都忙了些什么东西。\n\n<!-- more -->\n\n## 为什么要搭建这个Blog\n\n### 首先是对寒假自学成果的检验\n\n&#8195; &#8195;学校平台能力有限，教学进度要照顾其他同学。而我作为一个前OI选手，已经掌握了一部分代码算法知识，也有了较为成熟的计算机思维，学校的教学方式显然是很难喂饱我的。大学已经过去一年半，这一年半里我专业知识方面的进步很小，也没有多少实战经验。之前报了学校的ACM队，但是因为家庭和个人原因没能持续参与，不过也不算什么大不了的吧！我在高中的时候已经经过系统的算法竞赛培训，再在大学继续搞的话，考虑到学校平台的问题，投入的时间和得到的收益很难匹配，属于是既学不到东西，又拿不到牌子，还很难得到实战经验。\n\n&#8195; &#8195;最开始我还是很焦虑的。在**Ferric**的建议下，我开始着重进行较为系统的自学，并希望做出东西来证明学习成果。\n\n&#8195; &#8195;于是在这个假期，我补了计算机基础：OS，计网，机组和数据库。然后学习了其他语言：python和java，方便我后期进行APK甚至HPK的开发工作。然后根据自己的兴趣，学习了HTML，CSS，Javascript三件套并做了相应的练习。\n\n&#8195; &#8195;于是就有了做这个Blog的想法，这也是**Ferric**推荐的，他希望我成为一个优秀的计算机从业者。\n\n### 其次是对个人履历的丰富\n\n&#8195; &#8195;搭建个人Blog应该算是一个计算机从业者的入门门票，这在个人简历中比很多大学社团活动有用多了，而且可以来记录并展示你的学习过程，你掌握的技能，并分享你对事件的看法，分享你的技术。就算是忘了什么东西，也可以很方便的找回来。可谓是一举多得，性价比超高。\n\n### 最后是对自己的激励\n\n&#8195; &#8195;学海无涯，尤其是在计算机领域，持续学习是非常有必要的。技术迭代非常快，要持续学习才能保证自己的优势。未来我会计划在计算机领域进行更广更深入的学习，这个Blog就是对我自己的激励，看着自己的日志数量越来越多，也是对自己的一个肯定。\n\n## 关于Blog的搭建过程\n\n### 为什么选择**Hexo**和**NexT**\n\n&#8195; &#8195;要搭建个人Blog，首先就遇到了第一个选择，是搭建动态网站还是静态网站？在**Ferric**的建议下，我选择了静态网站，因为个人blog体量不大，静态网站足以满足要求，还不用搭建数据库，非常方便。而且现在静态网站Blog非常成熟，有很多现成的可以利用，就比如**Hexo**，这也是**Ferric**推荐我使用的。\n\n&#8195; &#8195;然后便是具体搭建和个性化。**Hexo**的主题非常多，但却没有能让我非常满意的。最终还是选择了**NexT**的主题，原因很简单，**Next**主题使用群体多，而且可供选择样式也不少，整体简洁大方，方便进行二次魔改，修改部分CSS代码便可让人满意。于是整体的方向就定了下来。\n\n### 设计时的整体想法\n\n&#8195; &#8195;最开始的时候，我都只是按照自己的想法随便修修改改，最终的结果也很难让自己满意，于是便选择想在互联网寻找现成的设计来参考。\n\n&#8195; &#8195;最终选上了华为的[**HarmonyOS设计规范**](https://developer.harmonyos.com/cn/docs/design/des-guides/overview-0000001053563071)，其相关资料的开源和设计的现代性吸引了我。再加上华为鸿蒙这一热点，让我最终选择它作为我的Blog设计指导。\n\n&#8195; &#8195;按照规范，我为盒子都做了圆角，在每个卡片元素下都做了阴影。还为每个嵌套元素做了圆角匹配。字体也选择了文档推荐的**HarmonyOS_Sans**。对于配色的选择，我用了**HarmonyOS**的主题色：\n\n![](/images/material/color0A59F7.png) ![](/images/material/colorF1F3F5.png)\n\n&#8195; &#8195;在功能方面，感知较强的是我为Blog在右下角添加了返回主界面的按钮。当然还有**Hexo**和**NexT**自带的功能，必装的插件：如对Latex的支持，目录跳转，返回顶部，归档，标签等等。\n\n### 搭建时遇到的困难\n\n&#8195; &#8195;由于是利用了现成的静态Blog**Hexo**和**NexT**，所以修改别人的代码就是很烦的一件事情，经常修改CSS不能达到我想要的效果，有的时候只能选择更换设计思维妥协一下。或者是js的使用方法与我之前的Blog文章内容不能匹配渲染失败，或者是使用个别浏览器打开导致卡顿。图标库的版本也比较\n低，有些需要的图标没有。\n\n&#8195; &#8195;还有就是**Hexo**和**NexT**也比较老了，和最新版本难以匹配有的时候要去猜测文档的意思。\n\n&#8195; &#8195;那么在这里再次感谢**Ferric**的帮助，帮我解决了很多问题。\n\n### 未实现的遗憾\n\n&#8195; &#8195;想做一个一键深色模式，但是苦于工作量过高就先暂时搁置了。\n\n&#8195; &#8195;想用弥散光做background，但是不能CSS直接做出来，需要设计软件生成，也就换成了一个普通的图片。\n\n&#8195; &#8195;想在文章里面插入一个HTML的窗口，但是也不知道为什么不支持，为了避免麻烦也暂时搁置了。\n\n## 之后打算干点什么\n\n&#8195; &#8195;在个人层面，Blog上面的东西并不能完全代表我，我也不打算什么事情都往Blog什么写。我希望Blog上面只留下计算机相关内容。于是我还需要一个个人主页。\n\n&#8195; &#8195;我打算本站的**关于**界面可以链接过去，在个人主页内也应该可以用一个链接指回来。但个人主页目前只是在构想期间，所以我在**关于**界面留下了一个~~情人节~~小彩蛋。\n\n&#8195; &#8195;我还是一个会画画的人，所以我还计划做一个个人画廊，这个就计划做一个动态网页，来记录我的热爱。~~想必是很多福瑞~~\n\n&#8195; &#8195;同时我还有画漫画的梦想，我想利用计算机技术，做一个表现力更强的漫画，目前这个项目也是在计划中了：\n\n![](/images/material/SamsarA.png)\n\n&#8195; &#8195;相信不久之后我就可以开始这些项目的开发，我也会及时同步进度和内容到本站。\n\n## 写在最后\n\n&#8195; &#8195;那么这个Blog的开发现在就告一段落，非常感谢**Ferric**的帮助和**Hexo**，**NexT**的支持。\n\n&#8195; &#8195;今天刚好是情人节，最后就祝**Ferric**节日快乐😘。","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\ndate: 2022-02-14 16:06:02\ncategories:\n- 杂谈\n---\n\n&#8195; &#8195;忙乎了6天，终于算是把这个Blog搭好了，同时也把之前自己写过的东西搬了过来。说实话，川北家里，春节期间气候不是很好，还是怪冷的。每天的工作时间还是比较有限，效率也不是很高，不过好在还是在开学前把该学的东西学完，东西也做出来了。\n\n&#8195; &#8195;感觉很久没有写过什么东西了呢，那么现在还是来做一个最后的总结，记录一下这几天都忙了些什么东西。\n\n<!-- more -->\n\n## 为什么要搭建这个Blog\n\n### 首先是对寒假自学成果的检验\n\n&#8195; &#8195;学校平台能力有限，教学进度要照顾其他同学。而我作为一个前OI选手，已经掌握了一部分代码算法知识，也有了较为成熟的计算机思维，学校的教学方式显然是很难喂饱我的。大学已经过去一年半，这一年半里我专业知识方面的进步很小，也没有多少实战经验。之前报了学校的ACM队，但是因为家庭和个人原因没能持续参与，不过也不算什么大不了的吧！我在高中的时候已经经过系统的算法竞赛培训，再在大学继续搞的话，考虑到学校平台的问题，投入的时间和得到的收益很难匹配，属于是既学不到东西，又拿不到牌子，还很难得到实战经验。\n\n&#8195; &#8195;最开始我还是很焦虑的。在**Ferric**的建议下，我开始着重进行较为系统的自学，并希望做出东西来证明学习成果。\n\n&#8195; &#8195;于是在这个假期，我补了计算机基础：OS，计网，机组和数据库。然后学习了其他语言：python和java，方便我后期进行APK甚至HPK的开发工作。然后根据自己的兴趣，学习了HTML，CSS，Javascript三件套并做了相应的练习。\n\n&#8195; &#8195;于是就有了做这个Blog的想法，这也是**Ferric**推荐的，他希望我成为一个优秀的计算机从业者。\n\n### 其次是对个人履历的丰富\n\n&#8195; &#8195;搭建个人Blog应该算是一个计算机从业者的入门门票，这在个人简历中比很多大学社团活动有用多了，而且可以来记录并展示你的学习过程，你掌握的技能，并分享你对事件的看法，分享你的技术。就算是忘了什么东西，也可以很方便的找回来。可谓是一举多得，性价比超高。\n\n### 最后是对自己的激励\n\n&#8195; &#8195;学海无涯，尤其是在计算机领域，持续学习是非常有必要的。技术迭代非常快，要持续学习才能保证自己的优势。未来我会计划在计算机领域进行更广更深入的学习，这个Blog就是对我自己的激励，看着自己的日志数量越来越多，也是对自己的一个肯定。\n\n## 关于Blog的搭建过程\n\n### 为什么选择**Hexo**和**NexT**\n\n&#8195; &#8195;要搭建个人Blog，首先就遇到了第一个选择，是搭建动态网站还是静态网站？在**Ferric**的建议下，我选择了静态网站，因为个人blog体量不大，静态网站足以满足要求，还不用搭建数据库，非常方便。而且现在静态网站Blog非常成熟，有很多现成的可以利用，就比如**Hexo**，这也是**Ferric**推荐我使用的。\n\n&#8195; &#8195;然后便是具体搭建和个性化。**Hexo**的主题非常多，但却没有能让我非常满意的。最终还是选择了**NexT**的主题，原因很简单，**Next**主题使用群体多，而且可供选择样式也不少，整体简洁大方，方便进行二次魔改，修改部分CSS代码便可让人满意。于是整体的方向就定了下来。\n\n### 设计时的整体想法\n\n&#8195; &#8195;最开始的时候，我都只是按照自己的想法随便修修改改，最终的结果也很难让自己满意，于是便选择想在互联网寻找现成的设计来参考。\n\n&#8195; &#8195;最终选上了华为的[**HarmonyOS设计规范**](https://developer.harmonyos.com/cn/docs/design/des-guides/overview-0000001053563071)，其相关资料的开源和设计的现代性吸引了我。再加上华为鸿蒙这一热点，让我最终选择它作为我的Blog设计指导。\n\n&#8195; &#8195;按照规范，我为盒子都做了圆角，在每个卡片元素下都做了阴影。还为每个嵌套元素做了圆角匹配。字体也选择了文档推荐的**HarmonyOS_Sans**。对于配色的选择，我用了**HarmonyOS**的主题色：\n\n![](/images/material/color0A59F7.png) ![](/images/material/colorF1F3F5.png)\n\n&#8195; &#8195;在功能方面，感知较强的是我为Blog在右下角添加了返回主界面的按钮。当然还有**Hexo**和**NexT**自带的功能，必装的插件：如对Latex的支持，目录跳转，返回顶部，归档，标签等等。\n\n### 搭建时遇到的困难\n\n&#8195; &#8195;由于是利用了现成的静态Blog**Hexo**和**NexT**，所以修改别人的代码就是很烦的一件事情，经常修改CSS不能达到我想要的效果，有的时候只能选择更换设计思维妥协一下。或者是js的使用方法与我之前的Blog文章内容不能匹配渲染失败，或者是使用个别浏览器打开导致卡顿。图标库的版本也比较\n低，有些需要的图标没有。\n\n&#8195; &#8195;还有就是**Hexo**和**NexT**也比较老了，和最新版本难以匹配有的时候要去猜测文档的意思。\n\n&#8195; &#8195;那么在这里再次感谢**Ferric**的帮助，帮我解决了很多问题。\n\n### 未实现的遗憾\n\n&#8195; &#8195;想做一个一键深色模式，但是苦于工作量过高就先暂时搁置了。\n\n&#8195; &#8195;想用弥散光做background，但是不能CSS直接做出来，需要设计软件生成，也就换成了一个普通的图片。\n\n&#8195; &#8195;想在文章里面插入一个HTML的窗口，但是也不知道为什么不支持，为了避免麻烦也暂时搁置了。\n\n## 之后打算干点什么\n\n&#8195; &#8195;在个人层面，Blog上面的东西并不能完全代表我，我也不打算什么事情都往Blog什么写。我希望Blog上面只留下计算机相关内容。于是我还需要一个个人主页。\n\n&#8195; &#8195;我打算本站的**关于**界面可以链接过去，在个人主页内也应该可以用一个链接指回来。但个人主页目前只是在构想期间，所以我在**关于**界面留下了一个~~情人节~~小彩蛋。\n\n&#8195; &#8195;我还是一个会画画的人，所以我还计划做一个个人画廊，这个就计划做一个动态网页，来记录我的热爱。~~想必是很多福瑞~~\n\n&#8195; &#8195;同时我还有画漫画的梦想，我想利用计算机技术，做一个表现力更强的漫画，目前这个项目也是在计划中了：\n\n![](/images/material/SamsarA.png)\n\n&#8195; &#8195;相信不久之后我就可以开始这些项目的开发，我也会及时同步进度和内容到本站。\n\n## 写在最后\n\n&#8195; &#8195;那么这个Blog的开发现在就告一段落，非常感谢**Ferric**的帮助和**Hexo**，**NexT**的支持。\n\n&#8195; &#8195;今天刚好是情人节，最后就祝**Ferric**节日快乐😘。","slug":"hello-world","published":1,"updated":"2022-02-14T10:11:49.356Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0i63w61000pu4gb0t4oa7rq","content":"<p>&#8195; &#8195;忙乎了6天，终于算是把这个Blog搭好了，同时也把之前自己写过的东西搬了过来。说实话，川北家里，春节期间气候不是很好，还是怪冷的。每天的工作时间还是比较有限，效率也不是很高，不过好在还是在开学前把该学的东西学完，东西也做出来了。</p>\n<p>&#8195; &#8195;感觉很久没有写过什么东西了呢，那么现在还是来做一个最后的总结，记录一下这几天都忙了些什么东西。</p>\n<span id=\"more\"></span>\n<h2 id=\"为什么要搭建这个Blog\"><a href=\"#为什么要搭建这个Blog\" class=\"headerlink\" title=\"为什么要搭建这个Blog\"></a>为什么要搭建这个Blog</h2><h3 id=\"首先是对寒假自学成果的检验\"><a href=\"#首先是对寒假自学成果的检验\" class=\"headerlink\" title=\"首先是对寒假自学成果的检验\"></a>首先是对寒假自学成果的检验</h3><p>&#8195; &#8195;学校平台能力有限，教学进度要照顾其他同学。而我作为一个前OI选手，已经掌握了一部分代码算法知识，也有了较为成熟的计算机思维，学校的教学方式显然是很难喂饱我的。大学已经过去一年半，这一年半里我专业知识方面的进步很小，也没有多少实战经验。之前报了学校的ACM队，但是因为家庭和个人原因没能持续参与，不过也不算什么大不了的吧！我在高中的时候已经经过系统的算法竞赛培训，再在大学继续搞的话，考虑到学校平台的问题，投入的时间和得到的收益很难匹配，属于是既学不到东西，又拿不到牌子，还很难得到实战经验。</p>\n<p>&#8195; &#8195;最开始我还是很焦虑的。在<strong>Ferric</strong>的建议下，我开始着重进行较为系统的自学，并希望做出东西来证明学习成果。</p>\n<p>&#8195; &#8195;于是在这个假期，我补了计算机基础：OS，计网，机组和数据库。然后学习了其他语言：python和java，方便我后期进行APK甚至HPK的开发工作。然后根据自己的兴趣，学习了HTML，CSS，Javascript三件套并做了相应的练习。</p>\n<p>&#8195; &#8195;于是就有了做这个Blog的想法，这也是<strong>Ferric</strong>推荐的，他希望我成为一个优秀的计算机从业者。</p>\n<h3 id=\"其次是对个人履历的丰富\"><a href=\"#其次是对个人履历的丰富\" class=\"headerlink\" title=\"其次是对个人履历的丰富\"></a>其次是对个人履历的丰富</h3><p>&#8195; &#8195;搭建个人Blog应该算是一个计算机从业者的入门门票，这在个人简历中比很多大学社团活动有用多了，而且可以来记录并展示你的学习过程，你掌握的技能，并分享你对事件的看法，分享你的技术。就算是忘了什么东西，也可以很方便的找回来。可谓是一举多得，性价比超高。</p>\n<h3 id=\"最后是对自己的激励\"><a href=\"#最后是对自己的激励\" class=\"headerlink\" title=\"最后是对自己的激励\"></a>最后是对自己的激励</h3><p>&#8195; &#8195;学海无涯，尤其是在计算机领域，持续学习是非常有必要的。技术迭代非常快，要持续学习才能保证自己的优势。未来我会计划在计算机领域进行更广更深入的学习，这个Blog就是对我自己的激励，看着自己的日志数量越来越多，也是对自己的一个肯定。</p>\n<h2 id=\"关于Blog的搭建过程\"><a href=\"#关于Blog的搭建过程\" class=\"headerlink\" title=\"关于Blog的搭建过程\"></a>关于Blog的搭建过程</h2><h3 id=\"为什么选择Hexo和NexT\"><a href=\"#为什么选择Hexo和NexT\" class=\"headerlink\" title=\"为什么选择Hexo和NexT\"></a>为什么选择<strong>Hexo</strong>和<strong>NexT</strong></h3><p>&#8195; &#8195;要搭建个人Blog，首先就遇到了第一个选择，是搭建动态网站还是静态网站？在<strong>Ferric</strong>的建议下，我选择了静态网站，因为个人blog体量不大，静态网站足以满足要求，还不用搭建数据库，非常方便。而且现在静态网站Blog非常成熟，有很多现成的可以利用，就比如<strong>Hexo</strong>，这也是<strong>Ferric</strong>推荐我使用的。</p>\n<p>&#8195; &#8195;然后便是具体搭建和个性化。<strong>Hexo</strong>的主题非常多，但却没有能让我非常满意的。最终还是选择了<strong>NexT</strong>的主题，原因很简单，<strong>Next</strong>主题使用群体多，而且可供选择样式也不少，整体简洁大方，方便进行二次魔改，修改部分CSS代码便可让人满意。于是整体的方向就定了下来。</p>\n<h3 id=\"设计时的整体想法\"><a href=\"#设计时的整体想法\" class=\"headerlink\" title=\"设计时的整体想法\"></a>设计时的整体想法</h3><p>&#8195; &#8195;最开始的时候，我都只是按照自己的想法随便修修改改，最终的结果也很难让自己满意，于是便选择想在互联网寻找现成的设计来参考。</p>\n<p>&#8195; &#8195;最终选上了华为的<a href=\"https://developer.harmonyos.com/cn/docs/design/des-guides/overview-0000001053563071\"><strong>HarmonyOS设计规范</strong></a>，其相关资料的开源和设计的现代性吸引了我。再加上华为鸿蒙这一热点，让我最终选择它作为我的Blog设计指导。</p>\n<p>&#8195; &#8195;按照规范，我为盒子都做了圆角，在每个卡片元素下都做了阴影。还为每个嵌套元素做了圆角匹配。字体也选择了文档推荐的<strong>HarmonyOS_Sans</strong>。对于配色的选择，我用了<strong>HarmonyOS</strong>的主题色：</p>\n<p><img src=\"/images/material/color0A59F7.png\" alt=\"\"> <img src=\"/images/material/colorF1F3F5.png\" alt=\"\"></p>\n<p>&#8195; &#8195;在功能方面，感知较强的是我为Blog在右下角添加了返回主界面的按钮。当然还有<strong>Hexo</strong>和<strong>NexT</strong>自带的功能，必装的插件：如对Latex的支持，目录跳转，返回顶部，归档，标签等等。</p>\n<h3 id=\"搭建时遇到的困难\"><a href=\"#搭建时遇到的困难\" class=\"headerlink\" title=\"搭建时遇到的困难\"></a>搭建时遇到的困难</h3><p>&#8195; &#8195;由于是利用了现成的静态Blog<strong>Hexo</strong>和<strong>NexT</strong>，所以修改别人的代码就是很烦的一件事情，经常修改CSS不能达到我想要的效果，有的时候只能选择更换设计思维妥协一下。或者是js的使用方法与我之前的Blog文章内容不能匹配渲染失败，或者是使用个别浏览器打开导致卡顿。图标库的版本也比较<br>低，有些需要的图标没有。</p>\n<p>&#8195; &#8195;还有就是<strong>Hexo</strong>和<strong>NexT</strong>也比较老了，和最新版本难以匹配有的时候要去猜测文档的意思。</p>\n<p>&#8195; &#8195;那么在这里再次感谢<strong>Ferric</strong>的帮助，帮我解决了很多问题。</p>\n<h3 id=\"未实现的遗憾\"><a href=\"#未实现的遗憾\" class=\"headerlink\" title=\"未实现的遗憾\"></a>未实现的遗憾</h3><p>&#8195; &#8195;想做一个一键深色模式，但是苦于工作量过高就先暂时搁置了。</p>\n<p>&#8195; &#8195;想用弥散光做background，但是不能CSS直接做出来，需要设计软件生成，也就换成了一个普通的图片。</p>\n<p>&#8195; &#8195;想在文章里面插入一个HTML的窗口，但是也不知道为什么不支持，为了避免麻烦也暂时搁置了。</p>\n<h2 id=\"之后打算干点什么\"><a href=\"#之后打算干点什么\" class=\"headerlink\" title=\"之后打算干点什么\"></a>之后打算干点什么</h2><p>&#8195; &#8195;在个人层面，Blog上面的东西并不能完全代表我，我也不打算什么事情都往Blog什么写。我希望Blog上面只留下计算机相关内容。于是我还需要一个个人主页。</p>\n<p>&#8195; &#8195;我打算本站的<strong>关于</strong>界面可以链接过去，在个人主页内也应该可以用一个链接指回来。但个人主页目前只是在构想期间，所以我在<strong>关于</strong>界面留下了一个<del>情人节</del>小彩蛋。</p>\n<p>&#8195; &#8195;我还是一个会画画的人，所以我还计划做一个个人画廊，这个就计划做一个动态网页，来记录我的热爱。<del>想必是很多福瑞</del></p>\n<p>&#8195; &#8195;同时我还有画漫画的梦想，我想利用计算机技术，做一个表现力更强的漫画，目前这个项目也是在计划中了：</p>\n<p><img src=\"/images/material/SamsarA.png\" alt=\"\"></p>\n<p>&#8195; &#8195;相信不久之后我就可以开始这些项目的开发，我也会及时同步进度和内容到本站。</p>\n<h2 id=\"写在最后\"><a href=\"#写在最后\" class=\"headerlink\" title=\"写在最后\"></a>写在最后</h2><p>&#8195; &#8195;那么这个Blog的开发现在就告一段落，非常感谢<strong>Ferric</strong>的帮助和<strong>Hexo</strong>，<strong>NexT</strong>的支持。</p>\n<p>&#8195; &#8195;今天刚好是情人节，最后就祝<strong>Ferric</strong>节日快乐😘。</p>\n","site":{"data":{}},"excerpt":"<p>&#8195; &#8195;忙乎了6天，终于算是把这个Blog搭好了，同时也把之前自己写过的东西搬了过来。说实话，川北家里，春节期间气候不是很好，还是怪冷的。每天的工作时间还是比较有限，效率也不是很高，不过好在还是在开学前把该学的东西学完，东西也做出来了。</p>\n<p>&#8195; &#8195;感觉很久没有写过什么东西了呢，那么现在还是来做一个最后的总结，记录一下这几天都忙了些什么东西。</p>","more":"<h2 id=\"为什么要搭建这个Blog\"><a href=\"#为什么要搭建这个Blog\" class=\"headerlink\" title=\"为什么要搭建这个Blog\"></a>为什么要搭建这个Blog</h2><h3 id=\"首先是对寒假自学成果的检验\"><a href=\"#首先是对寒假自学成果的检验\" class=\"headerlink\" title=\"首先是对寒假自学成果的检验\"></a>首先是对寒假自学成果的检验</h3><p>&#8195; &#8195;学校平台能力有限，教学进度要照顾其他同学。而我作为一个前OI选手，已经掌握了一部分代码算法知识，也有了较为成熟的计算机思维，学校的教学方式显然是很难喂饱我的。大学已经过去一年半，这一年半里我专业知识方面的进步很小，也没有多少实战经验。之前报了学校的ACM队，但是因为家庭和个人原因没能持续参与，不过也不算什么大不了的吧！我在高中的时候已经经过系统的算法竞赛培训，再在大学继续搞的话，考虑到学校平台的问题，投入的时间和得到的收益很难匹配，属于是既学不到东西，又拿不到牌子，还很难得到实战经验。</p>\n<p>&#8195; &#8195;最开始我还是很焦虑的。在<strong>Ferric</strong>的建议下，我开始着重进行较为系统的自学，并希望做出东西来证明学习成果。</p>\n<p>&#8195; &#8195;于是在这个假期，我补了计算机基础：OS，计网，机组和数据库。然后学习了其他语言：python和java，方便我后期进行APK甚至HPK的开发工作。然后根据自己的兴趣，学习了HTML，CSS，Javascript三件套并做了相应的练习。</p>\n<p>&#8195; &#8195;于是就有了做这个Blog的想法，这也是<strong>Ferric</strong>推荐的，他希望我成为一个优秀的计算机从业者。</p>\n<h3 id=\"其次是对个人履历的丰富\"><a href=\"#其次是对个人履历的丰富\" class=\"headerlink\" title=\"其次是对个人履历的丰富\"></a>其次是对个人履历的丰富</h3><p>&#8195; &#8195;搭建个人Blog应该算是一个计算机从业者的入门门票，这在个人简历中比很多大学社团活动有用多了，而且可以来记录并展示你的学习过程，你掌握的技能，并分享你对事件的看法，分享你的技术。就算是忘了什么东西，也可以很方便的找回来。可谓是一举多得，性价比超高。</p>\n<h3 id=\"最后是对自己的激励\"><a href=\"#最后是对自己的激励\" class=\"headerlink\" title=\"最后是对自己的激励\"></a>最后是对自己的激励</h3><p>&#8195; &#8195;学海无涯，尤其是在计算机领域，持续学习是非常有必要的。技术迭代非常快，要持续学习才能保证自己的优势。未来我会计划在计算机领域进行更广更深入的学习，这个Blog就是对我自己的激励，看着自己的日志数量越来越多，也是对自己的一个肯定。</p>\n<h2 id=\"关于Blog的搭建过程\"><a href=\"#关于Blog的搭建过程\" class=\"headerlink\" title=\"关于Blog的搭建过程\"></a>关于Blog的搭建过程</h2><h3 id=\"为什么选择Hexo和NexT\"><a href=\"#为什么选择Hexo和NexT\" class=\"headerlink\" title=\"为什么选择Hexo和NexT\"></a>为什么选择<strong>Hexo</strong>和<strong>NexT</strong></h3><p>&#8195; &#8195;要搭建个人Blog，首先就遇到了第一个选择，是搭建动态网站还是静态网站？在<strong>Ferric</strong>的建议下，我选择了静态网站，因为个人blog体量不大，静态网站足以满足要求，还不用搭建数据库，非常方便。而且现在静态网站Blog非常成熟，有很多现成的可以利用，就比如<strong>Hexo</strong>，这也是<strong>Ferric</strong>推荐我使用的。</p>\n<p>&#8195; &#8195;然后便是具体搭建和个性化。<strong>Hexo</strong>的主题非常多，但却没有能让我非常满意的。最终还是选择了<strong>NexT</strong>的主题，原因很简单，<strong>Next</strong>主题使用群体多，而且可供选择样式也不少，整体简洁大方，方便进行二次魔改，修改部分CSS代码便可让人满意。于是整体的方向就定了下来。</p>\n<h3 id=\"设计时的整体想法\"><a href=\"#设计时的整体想法\" class=\"headerlink\" title=\"设计时的整体想法\"></a>设计时的整体想法</h3><p>&#8195; &#8195;最开始的时候，我都只是按照自己的想法随便修修改改，最终的结果也很难让自己满意，于是便选择想在互联网寻找现成的设计来参考。</p>\n<p>&#8195; &#8195;最终选上了华为的<a href=\"https://developer.harmonyos.com/cn/docs/design/des-guides/overview-0000001053563071\"><strong>HarmonyOS设计规范</strong></a>，其相关资料的开源和设计的现代性吸引了我。再加上华为鸿蒙这一热点，让我最终选择它作为我的Blog设计指导。</p>\n<p>&#8195; &#8195;按照规范，我为盒子都做了圆角，在每个卡片元素下都做了阴影。还为每个嵌套元素做了圆角匹配。字体也选择了文档推荐的<strong>HarmonyOS_Sans</strong>。对于配色的选择，我用了<strong>HarmonyOS</strong>的主题色：</p>\n<p><img src=\"/images/material/color0A59F7.png\" alt=\"\"> <img src=\"/images/material/colorF1F3F5.png\" alt=\"\"></p>\n<p>&#8195; &#8195;在功能方面，感知较强的是我为Blog在右下角添加了返回主界面的按钮。当然还有<strong>Hexo</strong>和<strong>NexT</strong>自带的功能，必装的插件：如对Latex的支持，目录跳转，返回顶部，归档，标签等等。</p>\n<h3 id=\"搭建时遇到的困难\"><a href=\"#搭建时遇到的困难\" class=\"headerlink\" title=\"搭建时遇到的困难\"></a>搭建时遇到的困难</h3><p>&#8195; &#8195;由于是利用了现成的静态Blog<strong>Hexo</strong>和<strong>NexT</strong>，所以修改别人的代码就是很烦的一件事情，经常修改CSS不能达到我想要的效果，有的时候只能选择更换设计思维妥协一下。或者是js的使用方法与我之前的Blog文章内容不能匹配渲染失败，或者是使用个别浏览器打开导致卡顿。图标库的版本也比较<br>低，有些需要的图标没有。</p>\n<p>&#8195; &#8195;还有就是<strong>Hexo</strong>和<strong>NexT</strong>也比较老了，和最新版本难以匹配有的时候要去猜测文档的意思。</p>\n<p>&#8195; &#8195;那么在这里再次感谢<strong>Ferric</strong>的帮助，帮我解决了很多问题。</p>\n<h3 id=\"未实现的遗憾\"><a href=\"#未实现的遗憾\" class=\"headerlink\" title=\"未实现的遗憾\"></a>未实现的遗憾</h3><p>&#8195; &#8195;想做一个一键深色模式，但是苦于工作量过高就先暂时搁置了。</p>\n<p>&#8195; &#8195;想用弥散光做background，但是不能CSS直接做出来，需要设计软件生成，也就换成了一个普通的图片。</p>\n<p>&#8195; &#8195;想在文章里面插入一个HTML的窗口，但是也不知道为什么不支持，为了避免麻烦也暂时搁置了。</p>\n<h2 id=\"之后打算干点什么\"><a href=\"#之后打算干点什么\" class=\"headerlink\" title=\"之后打算干点什么\"></a>之后打算干点什么</h2><p>&#8195; &#8195;在个人层面，Blog上面的东西并不能完全代表我，我也不打算什么事情都往Blog什么写。我希望Blog上面只留下计算机相关内容。于是我还需要一个个人主页。</p>\n<p>&#8195; &#8195;我打算本站的<strong>关于</strong>界面可以链接过去，在个人主页内也应该可以用一个链接指回来。但个人主页目前只是在构想期间，所以我在<strong>关于</strong>界面留下了一个<del>情人节</del>小彩蛋。</p>\n<p>&#8195; &#8195;我还是一个会画画的人，所以我还计划做一个个人画廊，这个就计划做一个动态网页，来记录我的热爱。<del>想必是很多福瑞</del></p>\n<p>&#8195; &#8195;同时我还有画漫画的梦想，我想利用计算机技术，做一个表现力更强的漫画，目前这个项目也是在计划中了：</p>\n<p><img src=\"/images/material/SamsarA.png\" alt=\"\"></p>\n<p>&#8195; &#8195;相信不久之后我就可以开始这些项目的开发，我也会及时同步进度和内容到本站。</p>\n<h2 id=\"写在最后\"><a href=\"#写在最后\" class=\"headerlink\" title=\"写在最后\"></a>写在最后</h2><p>&#8195; &#8195;那么这个Blog的开发现在就告一段落，非常感谢<strong>Ferric</strong>的帮助和<strong>Hexo</strong>，<strong>NexT</strong>的支持。</p>\n<p>&#8195; &#8195;今天刚好是情人节，最后就祝<strong>Ferric</strong>节日快乐😘。</p>"},{"title":"Splay各种操作模板大赏","date":"2019-01-05T09:01:41.000Z","mathjax":true,"_content":"\n$\\ \\ \\ \\ \\ \\ \\ \\,$关于Splay操作的复习笔记：\n\n$\\ \\ \\ \\ \\ \\ \\ \\,$依然的，只记录模板，不讲原理，关于Splay出门左拐百度。\n\n<!-- more-->\n\n## 结构\n``` cpp\nstruct Splay{\n\t#define lson son[0][rt]\n\t#define rson son[1][rt]\n\tint root,cnt;\n\tint son[2][N],sum[N],val[N],size[N],fa[N];\n\tint lazy[N];\n}\n```\n 1. $\\tt root$ ：根；\n 2. $\\tt cnt$ ：下标大小；\n 3. $\\tt son[0/1][]$ ：左右儿子；\n 4. $\\tt sum[]$ ：子树大小；\n 5. $\\tt val[]$ ：节点权值；\n 6. $\\tt size[]$ ：节点大小；\n 7. $\\tt fa[]$ ：节点父亲；\n 8. $\\tt lazy[]$ ：下传标记。\n\n\n## 基本操作\n- 标记上传 ($pushup$)\n``` cpp\nvoid pushup(int rt){\n\tif(!rt)return;\n\tsum[rt]=sum[lson]+sum[rson]+size[rt];\n}\n```\n- 标记下传 ($pushdown$)，根据情况会不一样\n``` cpp\nvoid pushdown(int rt){\n  \tif(!lazy[rt])return;\n  \tlazy[lson]^=1;lazy[rson]^=1;\n  \tlazy[rt]=0;\n  \tswap(lson,rson);\n  }\n```\n- 左旋+右旋 ($rotate$)\n``` cpp\n void rotate(int x){\n  \tint y=fa[x];int z=fa[y];\n  \tint k=son[1][y]==x;\n  \tson[son[1][z]==y][z]=x;\n  \tfa[x]=z;\n  \tson[k][y]=son[k^1][x];\n  \tfa[son[k^1][x]]=y;\n  \tson[k^1][x]=y;\n  \tfa[y]=x;\n\tpushup(y);pushup(x);\n}\n```\n- 将$x$旋转到$goal$下 ($splay$)\n``` cpp\nvoid splay(int x,int goal){\n  \twhile(fa[x]!=goal){\n  \t\tint y=fa[x];int z=fa[y];\n  \t\tif(z!=goal)\n  \t\t(son[1][z]==y)^(son[1][y]==x)?rotate(x):rotate(y);\n  \t\trotate(x);\n    }\n    if(goal==0)root=x;\n  }\n```\n\n## 修改\n\n- 新建节点 ($newnode$)\n``` cpp\nint newnode(int f,int v){\n    int rt=++cnt;\n    size[rt]=1;sum[rt]=1;val[rt]=v;\n    fa[rt]=f;lson=rson=0;lazy[rt]=0;\n    return rt;\n}\n```\n- 清空节点 ($clean$)\n``` cpp\nvoid clean(int rt){\n    lson=rson=0;fa[rt]=0;\n    val[rt]=0;sum[rt]=size[rt]=0;\n}\n```\n- 建立 ($Build$)\n``` cpp\nvoid Build(int &rt,int L,int R,int f){\n  \tif(L>R)return;\n  \tint mid=(L+R)>>1;\n  \trt=newnode(f,a[mid]);\n  \tBuild(lson,L,mid-1,rt);\n  \tBuild(rson,mid+1,R,rt);\n  \tpushup(rt);\n}\n```\n- 插入($Insert$)\n``` cpp\nvoid Insert(int v){\n    if(!root){root=newnode(0,v);return;}\n    int now=root,rt=0;\n    pushdown(now);\n    while(1){\n      if(val[now]==v){\n  \t\t\t++size[now];\n        pushup(now);pushup(rt);\n        splay(now,0);\n        break;\n      }\n      rt=now;\n      val[rt]<v?now=rson:now=lson;\n    \tpushdown(now);\n      if(!now){\n        now=newnode(rt,v);\n  \t    val[rt]<v?rson=now:lson=now;\n        pushup(rt);splay(now,0);\n        break;\n      }\n   }\n}\n```\n- 删除节点($delete\\_pos$)\n``` cpp\nvoid delete_pos(int rt){\n    splay(rt,0);\n    if(size[rt]>1){--size[rt];return;}\n    int now;\n    if(!lson||!rson){\n      now=rson+lson;pushdown(now);\n      if(!now){clean(rt);root=0;return;}\n      clean(rt);root=now;fa[now]=0;\n      pushup(now);return;\n    }\n    now=pre_pos(rt);\n    pushdown(now);\n    splay(now,rt);\n    fa[now]=0;son[1][now]=rson;fa[rson]=now;\n    root=now;clean(rt);\n    pushup(rson);pushup(now);\t\n}\n```\n- 删除($Delete$)\n``` cpp\nvoid Delete(int v){\n    v=QueryRank_pos(v);\n    pushdown(v);\n    delete_pos(v);\n}\n```\n- 删除第k($Delete\\_QueryRank$)\n``` cpp\nvoid Delete_QueryRank(int v){\n    v=Rank_pos(v);\n    pushdown(v);\n    delete_pos(v);\n}\n```\n- 区间修改（翻转）($revse$)\n``` cpp\nvoid revse(int a,int b){\n\ta=find(a);\n  \tb=find(b+2);\n  \tsplay(a,0);splay(b,a);\n  \tlazy[son[0][son[1][root]]]^=1;\n}\n```\n\n\n## 询问\n- 查找某个值的节点编号($QueryRank\\_pos$)\n``` cpp\nint QueryRank_pos(int x){\n    int rt=root;\n    while(1){\n    \tpushdown(rt);\n    \tif(val[rt]==x){splay(rt,0);return rt;} \n    \tif(val[rt]<x)rt=rson;\n    \telse if(val[rt]>x)rt=lson;\n    }\t\n}\n```\n- 查找某个排名的节点编号($Rank\\_pos$)\n``` cpp\n  int Rank_pos(int x){\n    int rt=root;\n    while(1){\n    \tpushdown(rt);\n    \tif(sum[lson]>=x){rt=lson;continue;}\n    \tx-=sum[lson];\n      \tif(size[rt]>=x){splay(rt,0);return val[rt];}\n      \tx-=size[rt];\n      \trt=rson;\n    }\t\n  }\n```\n- 查找排名第k的值($QueryRank$)\n``` cpp\nint QueryRank(int x){\n    int rt=root;\n    while(1){\n    \tpushdown(rt);\n    \tif(sum[lson]>=x){rt=lson;continue;}\n    \tx-=sum[lson];\n    \tif(size[rt]>=x){splay(rt,0);return val[rt];}\n    \tx-=size[rt];\n    \trt=rson;\n  }\n}\n```\n\n- 查找某个值的排名($Rank$)\n``` cpp\nint Rank(int num){\n    int rt=root,ans=0;\n    while(1){\n    \tpushdown(rt);\n    \tif(val[rt]==num){ans=ans+sum[lson]+1;splay(rt,0);return ans;}\n    \tif(val[rt]<num)ans+=sum[lson]+size[rt],rt=rson;\n     \telse if(val[rt]>num)rt=lson;\n  \t}\n}\n```\n- 集合内前驱的节点编号($pre\\_pos$)\n``` cpp\nint pre_pos(int x){\n    splay(x,0);int rt;\n    pushdown(x);\n    if(!(rt=son[0][x]))return val[x];\n    while(rson)pushdown(rt),rt=rson;\n    return rt;\t\n}\n```\n- 集合内后继的节点编号($nex\\_pos$)\n``` cpp\nint nex_pos(int x){\n    splay(x,0);int rt;\n    pushdown(x);\n    if(!(rt=son[1][x]))return val[x];\n    while(lson)pushdown(rt),rt=lson;\n    return rt;\t\n}\n```\n- 集合内前驱的值($pre$)\n``` cpp\nint pre(int x){\n\tsplay(x,0);int rt;\n    pushdown(x);\n    if(!(rt=son[0][x]))return val[x];\n    while(rson)pushdown(rt),rt=rson;\n    return val[rt];\n}\n```\n- 集合内后继的值($nex$)\n``` cpp\nint nex(int x){\n    splay(x,0);int rt;\n    pushdown(x);\n    if(!(rt=son[1][x]))return val[x];\n    while(lson)pushdown(rt),rt=lson;\n    return val[rt];\n}\n```\n- 前驱($Numpre$)\n``` cpp\nint Numpre(int x){\n    Insert(x);\n    int y=x;x=QueryRank_pos(x);\n    int ls=pre(x);\n    Delete(y);\n    return ls;\n}\n```\n- 后继($Numnex$)\n``` cpp\nint Numnex(int x){\n    Insert(x);\n    int y=x;x=QueryRank_pos(x);\n    int ls=nex(x);\n    Delete(y);\n    return ls;\n}\n```\n- 查找某个值的节点编号($find$)，不改变结构\n``` cpp\nint find(int k){\n  \tint rt=root;\n  \twhile(1){\n  \t\tpushdown(rt);\n  \t\tif(sum[lson]>=k)rt=lson;\n  \t\telse if(sum[lson]+1==k)return rt;\n  \t\telse k-=sum[lson]+1,rt=rson;\n    }\n }\n```\n\n\n## 完整模板\n``` cpp\nconst int N=1e5+10;\nint a[N],n,m;\nstruct Splay{\n\t#define lson son[0][rt]\n\t#define rson son[1][rt]\n\tint root,cnt;\n\tint son[2][N],sum[N],val[N],size[N],fa[N];\n  \tbool lazy[N];\n\tvoid pushdown(int rt){\n  \t\tif(!lazy[rt])return;\n  \t\tlazy[lson]^=1;lazy[rson]^=1;\n  \t\tlazy[rt]=0;\n  \t\tswap(lson,rson);\n  \t}\n\tvoid pushup(int rt){\n\t  \tif(!rt)return;\n\t  \tsum[rt]=sum[lson]+sum[rson]+size[rt];\n\t}\n  \tvoid rotate(int x){\n\t  \tint y=fa[x];int z=fa[y];\n\t  \tint k=son[1][y]==x;\n\t  \tson[son[1][z]==y][z]=x;\n\t  \tfa[x]=z;\n\t  \tson[k][y]=son[k^1][x];\n\t  \tfa[son[k^1][x]]=y;\n\t  \tson[k^1][x]=y;\n\t  \tfa[y]=x;\n\t  \tpushup(y);pushup(x);\n\t}\n  \tvoid splay(int x,int goal){\n\t  \twhile(fa[x]!=goal){\n\t  \t\tint y=fa[x];int z=fa[y];\n\t  \t\tif(z!=goal)\n\t  \t\t(son[1][z]==y)^(son[1][y]==x)?rotate(x):rotate(y);\n\t  \t\trotate(x);\n\t    }\n\t    if(goal==0)root=x;\n  \t}\n  \tint newnode(int f,int v){\n\t    int rt=++cnt;\n\t    size[rt]=1;sum[rt]=1;val[rt]=v;\n\t    fa[rt]=f;lson=rson=0;lazy[rt]=0;\n\t    return rt;\n\t\t}\n\t\tvoid clean(int rt){\n\t    lson=rson=0;fa[rt]=0;\n\t    val[rt]=0;sum[rt]=size[rt]=0;\n  \t}\n\tvoid Build(int &rt,int L,int R,int f){\n\t  \tif(L>R)return;\n\t  \tint mid=(L+R)>>1;\n\t  \trt=newnode(f,a[mid]);\n\t  \tBuild(lson,L,mid-1,rt);\n\t  \tBuild(rson,mid+1,R,rt);\n\t  \tpushup(rt);\n\t}\n  \tvoid Insert(int v){\n    \tif(!root){root=newnode(0,v);return;}\n    \tint now=root,rt=0;\n    \tpushdown(now);\n   \t\twhile(1){\n      \t\tif(val[now]==v){\n\t  \t\t\t++size[now];\n\t        \tpushup(now);pushup(rt);\n\t        \tsplay(now,0);\n\t        \tbreak;\n\t      \t}\n\t      \trt=now;\n\t      \tval[rt]<v?now=rson:now=lson;\n\t    \tpushdown(now);\n\t      \tif(!now){\n\t        \tnow=newnode(rt,v);\n\t  \t    \tval[rt]<v?rson=now:lson=now;\n\t        \tpushup(rt);splay(now,0);\n\t        \tbreak;\n\t      \t}\n   \t \t}\n  \t}\n  \tint QueryRank_pos(int x){\n    \tint rt=root;\n    \twhile(1){\n    \t\tpushdown(rt);\n      \t\tif(val[rt]==x){splay(rt,0);return rt;} \n      \t\tif(val[rt]<x)rt=rson;\n      \t\telse if(val[rt]>x)rt=lson;\n    \t}\t\n  }\n  int Rank_pos(int x){\n    int rt=root;\n    while(1){\n    \tpushdown(rt);\n      if(sum[lson]>=x){rt=lson;continue;}\n      x-=sum[lson];\n      if(size[rt]>=x){splay(rt,0);return val[rt];}\n      x-=size[rt];\n      rt=rson;\n    }\t\n  }\n  \tint QueryRank(int x){\n    \tint rt=root;\n    \twhile(1){\n    \t\tpushdown(rt);\n     \t\tif(sum[lson]>=x){rt=lson;continue;}\n     \t\tx-=sum[lson];\n      \t\tif(size[rt]>=x){splay(rt,0);return val[rt];}\n      \t\tx-=size[rt];\n      \t\trt=rson;\n    \t}\n  \t}\n  \tint Rank(int num){\n    \tint rt=root,ans=0;\n    \twhile(1){\n    \t\tpushdown(rt);\n      \t\tif(val[rt]==num){ans=ans+sum[lson]+1;splay(rt,0);return ans;}\n     \t\tif(val[rt]<num)ans+=sum[lson]+size[rt],rt=rson;\n      \t\telse if(val[rt]>num)rt=lson;\n    \t}\n  \t}\n  \tint pre_pos(int x){\n    \tsplay(x,0);int rt;\n    \tpushdown(x);\n    \tif(!(rt=son[0][x]))return val[x];\n    \twhile(rson)pushdown(rt),rt=rson;\n    \treturn rt;\t\n  \t}\n  \tint nex_pos(int x){\n    \tsplay(x,0);int rt;\n    \tpushdown(x);\n    \tif(!(rt=son[1][x]))return val[x];\n    \twhile(lson)pushdown(rt),rt=lson;\n    \treturn rt;\t\n  \t}\n  \tint pre(int x){\n    \tsplay(x,0);int rt;\n    \tpushdown(x);\n    \tif(!(rt=son[0][x]))return val[x];\n    \twhile(rson)pushdown(rt),rt=rson;\n    \treturn val[rt];\n  \t}\n  \tint nex(int x){\n    \tsplay(x,0);int rt;\n    \tpushdown(x);\n    \tif(!(rt=son[1][x]))return val[x];\n    \twhile(lson)pushdown(rt),rt=lson;\n    \treturn val[rt];\n  \t}\n  \tvoid delete_pos(int rt){\n    \tsplay(rt,0);\n    \tif(size[rt]>1){--size[rt];return;}\n    \tint now;\n    \tif(!lson||!rson){\n      \t\tnow=rson+lson;pushdown(now);\n      \t\tif(!now){clean(rt);root=0;return;}\n      \t\tclean(rt);root=now;fa[now]=0;\n      \t\tpushup(now);return;\n    \t}\n    \tnow=pre_pos(rt);\n    \tpushdown(now);\n    \tsplay(now,rt);\n    \tfa[now]=0;son[1][now]=rson;fa[rson]=now;\n    \troot=now;clean(rt);\n    \tpushup(rson);pushup(now);\t\n  \t}\n  \tvoid Delete(int v){\n    \tv=QueryRank_pos(v);\n    \tpushdown(v);\n    \tdelete_pos(v);\n  \t}\n  \tvoid Delete_QueryRank(int v){\n    \tv=Rank_pos(v);\n    \tpushdown(v);\n    \tdelete_pos(v);\n  \t}\n  \tint Numpre(int x){\n    \tInsert(x);\n    \tint y=x;x=QueryRank_pos(x);\n    \tint ls=pre(x);\n    \tDelete(y);\n    \treturn ls;\n  \t}\n  \tint Numnex(int x){\n    \tInsert(x);\n    \tint y=x;x=QueryRank_pos(x);\n    \tint ls=nex(x);\n    \tDelete(y);\n    \treturn ls;\n  \t}\n  \tint find(int k){\n  \t\tint rt=root;\n  \t\twhile(1){\n  \t\t\tpushdown(rt);\n  \t\t\tif(sum[lson]>=k)rt=lson;\n  \t\t\telse if(sum[lson]+1==k)return rt;\n  \t\t\telse k-=sum[lson]+1,rt=rson;\n    \t}\n  \t}\n\tvoid revse(int a,int b){\n\t\ta=find(a);\n  \t\tb=find(b+2);\n  \t\tsplay(a,0);splay(b,a);\n  \t\tlazy[son[0][son[1][root]]]^=1;\n\t}\n}Spl;\n```\n\n## 两个模板题：\n- [P3369 【模板】普通平衡树](https://www.luogu.org/problemnew/show/P3369)\n``` cpp\n#include<algorithm>\n#include<iostream>\n#include<cstdlib>\n#include<cstring>\n#include<cctype>\n#include<cstdio>\n#include<vector>\n#include<string>\n#include<queue>\n#include<stack>\n#include<cmath>\n#include<map>\n#include<set>\nusing namespace std;\nconst int inf=0x7fffffff;\nconst double eps=1e-10;\nconst double pi=acos(-1.0);\n//char buf[1<<15],*S=buf,*T=buf;\n//char getch(){return S==T&&(T=(S=buf)+fread(buf,1,1<<15,stdin),S==T)?0:*S++;}\ninline int read(){\n\tint x=0,f=1;char ch;ch=getchar();\n\twhile(ch<'0'||ch>'9'){if(ch=='-') f=0;ch=getchar();}\n\twhile(ch>='0'&&ch<='9'){x=(x<<1)+(x<<3)+(ch&15);ch=getchar();}\n\tif(f)return x;else return-x;\n}\nconst int N=1e5+10;\nint a[N],n,m;\nstruct Splay{\n\t\n}Spl;\nint main()\n{\n  \tint n=read();\n  \twhile(n--){\n    \tint opt=read(),x=read();\n    \tif(opt==1){Spl.Insert(x);continue;}\n    \tif(opt==2){Spl.Delete(x);continue;}\n    \tif(opt==3){printf(\"%d\\n\",Spl.Rank(x));continue;}\n    \tif(opt==4){printf(\"%d\\n\",Spl.QueryRank(x));continue;}\n    \tif(opt==5){printf(\"%d\\n\",Spl.Numpre(x));continue;}\n    \tif(opt==6){printf(\"%d\\n\",Spl.Numnex(x));continue;}\n  \t}\n  \treturn 0;\n}\n```\n- [P3391 【模板】文艺平衡树（Splay）](https://www.luogu.org/problemnew/show/P3391)\n``` cpp\n#include<algorithm>\n#include<iostream>\n#include<cstdlib>\n#include<cstring>\n#include<cctype>\n#include<cstdio>\n#include<vector>\n#include<string>\n#include<queue>\n#include<stack>\n#include<cmath>\n#include<map>\n#include<set>\nusing namespace std;\nconst int inf=0x7fffffff;\nconst double eps=1e-10;\nconst double pi=acos(-1.0);\n//char buf[1<<15],*S=buf,*T=buf;\n//char getch(){return S==T&&(T=(S=buf)+fread(buf,1,1<<15,stdin),S==T)?0:*S++;}\ninline int read(){\n\tint x=0,f=1;char ch;ch=getchar();\n\twhile(ch<'0'||ch>'9'){if(ch=='-') f=0;ch=getchar();}\n\twhile(ch>='0'&&ch<='9'){x=(x<<1)+(x<<3)+(ch&15);ch=getchar();}\n\tif(f)return x;else return-x;\n}\nconst int N=1e5+10;\nint a[N],n,m;\nstruct Splay{\n\t\n}Spl;\nvoid write(int rt){\n  \tSpl.pushdown(rt);\n  \tif(Spl.lson)write(Spl.lson);\n  \tif(Spl.val[rt]>1&&Spl.val[rt]<n+2)\n  \tprintf(\"%d \",Spl.val[rt]-1);\n  \tif(Spl.rson)write(Spl.rson); \n}\nint main()\n{\n\tn=read();m=read();\n \tfor(int i=1;i<=n+2;i++)a[i]=i;\n \tSpl.Build(Spl.root,1,n+2,0);\n \twhile(m--){\n    \tint l=read(),r=read();\n  \t\tSpl.revse(l,r);\n  \t}\n  \twrite(Spl.root);\n  \tprintf(\"\\n\");\n\treturn 0;\n}\n\n```","source":"_posts/Splay各种操作模板大赏.md","raw":"---\ntitle: 'Splay各种操作模板大赏'\ndate: 2019-01-05 17:01:41\ncategories:\n- 学习笔记\ntags:\n- OI\n- 字符串\n- 数据结构\n- 平衡树\n- Splay\nmathjax: true\n---\n\n$\\ \\ \\ \\ \\ \\ \\ \\,$关于Splay操作的复习笔记：\n\n$\\ \\ \\ \\ \\ \\ \\ \\,$依然的，只记录模板，不讲原理，关于Splay出门左拐百度。\n\n<!-- more-->\n\n## 结构\n``` cpp\nstruct Splay{\n\t#define lson son[0][rt]\n\t#define rson son[1][rt]\n\tint root,cnt;\n\tint son[2][N],sum[N],val[N],size[N],fa[N];\n\tint lazy[N];\n}\n```\n 1. $\\tt root$ ：根；\n 2. $\\tt cnt$ ：下标大小；\n 3. $\\tt son[0/1][]$ ：左右儿子；\n 4. $\\tt sum[]$ ：子树大小；\n 5. $\\tt val[]$ ：节点权值；\n 6. $\\tt size[]$ ：节点大小；\n 7. $\\tt fa[]$ ：节点父亲；\n 8. $\\tt lazy[]$ ：下传标记。\n\n\n## 基本操作\n- 标记上传 ($pushup$)\n``` cpp\nvoid pushup(int rt){\n\tif(!rt)return;\n\tsum[rt]=sum[lson]+sum[rson]+size[rt];\n}\n```\n- 标记下传 ($pushdown$)，根据情况会不一样\n``` cpp\nvoid pushdown(int rt){\n  \tif(!lazy[rt])return;\n  \tlazy[lson]^=1;lazy[rson]^=1;\n  \tlazy[rt]=0;\n  \tswap(lson,rson);\n  }\n```\n- 左旋+右旋 ($rotate$)\n``` cpp\n void rotate(int x){\n  \tint y=fa[x];int z=fa[y];\n  \tint k=son[1][y]==x;\n  \tson[son[1][z]==y][z]=x;\n  \tfa[x]=z;\n  \tson[k][y]=son[k^1][x];\n  \tfa[son[k^1][x]]=y;\n  \tson[k^1][x]=y;\n  \tfa[y]=x;\n\tpushup(y);pushup(x);\n}\n```\n- 将$x$旋转到$goal$下 ($splay$)\n``` cpp\nvoid splay(int x,int goal){\n  \twhile(fa[x]!=goal){\n  \t\tint y=fa[x];int z=fa[y];\n  \t\tif(z!=goal)\n  \t\t(son[1][z]==y)^(son[1][y]==x)?rotate(x):rotate(y);\n  \t\trotate(x);\n    }\n    if(goal==0)root=x;\n  }\n```\n\n## 修改\n\n- 新建节点 ($newnode$)\n``` cpp\nint newnode(int f,int v){\n    int rt=++cnt;\n    size[rt]=1;sum[rt]=1;val[rt]=v;\n    fa[rt]=f;lson=rson=0;lazy[rt]=0;\n    return rt;\n}\n```\n- 清空节点 ($clean$)\n``` cpp\nvoid clean(int rt){\n    lson=rson=0;fa[rt]=0;\n    val[rt]=0;sum[rt]=size[rt]=0;\n}\n```\n- 建立 ($Build$)\n``` cpp\nvoid Build(int &rt,int L,int R,int f){\n  \tif(L>R)return;\n  \tint mid=(L+R)>>1;\n  \trt=newnode(f,a[mid]);\n  \tBuild(lson,L,mid-1,rt);\n  \tBuild(rson,mid+1,R,rt);\n  \tpushup(rt);\n}\n```\n- 插入($Insert$)\n``` cpp\nvoid Insert(int v){\n    if(!root){root=newnode(0,v);return;}\n    int now=root,rt=0;\n    pushdown(now);\n    while(1){\n      if(val[now]==v){\n  \t\t\t++size[now];\n        pushup(now);pushup(rt);\n        splay(now,0);\n        break;\n      }\n      rt=now;\n      val[rt]<v?now=rson:now=lson;\n    \tpushdown(now);\n      if(!now){\n        now=newnode(rt,v);\n  \t    val[rt]<v?rson=now:lson=now;\n        pushup(rt);splay(now,0);\n        break;\n      }\n   }\n}\n```\n- 删除节点($delete\\_pos$)\n``` cpp\nvoid delete_pos(int rt){\n    splay(rt,0);\n    if(size[rt]>1){--size[rt];return;}\n    int now;\n    if(!lson||!rson){\n      now=rson+lson;pushdown(now);\n      if(!now){clean(rt);root=0;return;}\n      clean(rt);root=now;fa[now]=0;\n      pushup(now);return;\n    }\n    now=pre_pos(rt);\n    pushdown(now);\n    splay(now,rt);\n    fa[now]=0;son[1][now]=rson;fa[rson]=now;\n    root=now;clean(rt);\n    pushup(rson);pushup(now);\t\n}\n```\n- 删除($Delete$)\n``` cpp\nvoid Delete(int v){\n    v=QueryRank_pos(v);\n    pushdown(v);\n    delete_pos(v);\n}\n```\n- 删除第k($Delete\\_QueryRank$)\n``` cpp\nvoid Delete_QueryRank(int v){\n    v=Rank_pos(v);\n    pushdown(v);\n    delete_pos(v);\n}\n```\n- 区间修改（翻转）($revse$)\n``` cpp\nvoid revse(int a,int b){\n\ta=find(a);\n  \tb=find(b+2);\n  \tsplay(a,0);splay(b,a);\n  \tlazy[son[0][son[1][root]]]^=1;\n}\n```\n\n\n## 询问\n- 查找某个值的节点编号($QueryRank\\_pos$)\n``` cpp\nint QueryRank_pos(int x){\n    int rt=root;\n    while(1){\n    \tpushdown(rt);\n    \tif(val[rt]==x){splay(rt,0);return rt;} \n    \tif(val[rt]<x)rt=rson;\n    \telse if(val[rt]>x)rt=lson;\n    }\t\n}\n```\n- 查找某个排名的节点编号($Rank\\_pos$)\n``` cpp\n  int Rank_pos(int x){\n    int rt=root;\n    while(1){\n    \tpushdown(rt);\n    \tif(sum[lson]>=x){rt=lson;continue;}\n    \tx-=sum[lson];\n      \tif(size[rt]>=x){splay(rt,0);return val[rt];}\n      \tx-=size[rt];\n      \trt=rson;\n    }\t\n  }\n```\n- 查找排名第k的值($QueryRank$)\n``` cpp\nint QueryRank(int x){\n    int rt=root;\n    while(1){\n    \tpushdown(rt);\n    \tif(sum[lson]>=x){rt=lson;continue;}\n    \tx-=sum[lson];\n    \tif(size[rt]>=x){splay(rt,0);return val[rt];}\n    \tx-=size[rt];\n    \trt=rson;\n  }\n}\n```\n\n- 查找某个值的排名($Rank$)\n``` cpp\nint Rank(int num){\n    int rt=root,ans=0;\n    while(1){\n    \tpushdown(rt);\n    \tif(val[rt]==num){ans=ans+sum[lson]+1;splay(rt,0);return ans;}\n    \tif(val[rt]<num)ans+=sum[lson]+size[rt],rt=rson;\n     \telse if(val[rt]>num)rt=lson;\n  \t}\n}\n```\n- 集合内前驱的节点编号($pre\\_pos$)\n``` cpp\nint pre_pos(int x){\n    splay(x,0);int rt;\n    pushdown(x);\n    if(!(rt=son[0][x]))return val[x];\n    while(rson)pushdown(rt),rt=rson;\n    return rt;\t\n}\n```\n- 集合内后继的节点编号($nex\\_pos$)\n``` cpp\nint nex_pos(int x){\n    splay(x,0);int rt;\n    pushdown(x);\n    if(!(rt=son[1][x]))return val[x];\n    while(lson)pushdown(rt),rt=lson;\n    return rt;\t\n}\n```\n- 集合内前驱的值($pre$)\n``` cpp\nint pre(int x){\n\tsplay(x,0);int rt;\n    pushdown(x);\n    if(!(rt=son[0][x]))return val[x];\n    while(rson)pushdown(rt),rt=rson;\n    return val[rt];\n}\n```\n- 集合内后继的值($nex$)\n``` cpp\nint nex(int x){\n    splay(x,0);int rt;\n    pushdown(x);\n    if(!(rt=son[1][x]))return val[x];\n    while(lson)pushdown(rt),rt=lson;\n    return val[rt];\n}\n```\n- 前驱($Numpre$)\n``` cpp\nint Numpre(int x){\n    Insert(x);\n    int y=x;x=QueryRank_pos(x);\n    int ls=pre(x);\n    Delete(y);\n    return ls;\n}\n```\n- 后继($Numnex$)\n``` cpp\nint Numnex(int x){\n    Insert(x);\n    int y=x;x=QueryRank_pos(x);\n    int ls=nex(x);\n    Delete(y);\n    return ls;\n}\n```\n- 查找某个值的节点编号($find$)，不改变结构\n``` cpp\nint find(int k){\n  \tint rt=root;\n  \twhile(1){\n  \t\tpushdown(rt);\n  \t\tif(sum[lson]>=k)rt=lson;\n  \t\telse if(sum[lson]+1==k)return rt;\n  \t\telse k-=sum[lson]+1,rt=rson;\n    }\n }\n```\n\n\n## 完整模板\n``` cpp\nconst int N=1e5+10;\nint a[N],n,m;\nstruct Splay{\n\t#define lson son[0][rt]\n\t#define rson son[1][rt]\n\tint root,cnt;\n\tint son[2][N],sum[N],val[N],size[N],fa[N];\n  \tbool lazy[N];\n\tvoid pushdown(int rt){\n  \t\tif(!lazy[rt])return;\n  \t\tlazy[lson]^=1;lazy[rson]^=1;\n  \t\tlazy[rt]=0;\n  \t\tswap(lson,rson);\n  \t}\n\tvoid pushup(int rt){\n\t  \tif(!rt)return;\n\t  \tsum[rt]=sum[lson]+sum[rson]+size[rt];\n\t}\n  \tvoid rotate(int x){\n\t  \tint y=fa[x];int z=fa[y];\n\t  \tint k=son[1][y]==x;\n\t  \tson[son[1][z]==y][z]=x;\n\t  \tfa[x]=z;\n\t  \tson[k][y]=son[k^1][x];\n\t  \tfa[son[k^1][x]]=y;\n\t  \tson[k^1][x]=y;\n\t  \tfa[y]=x;\n\t  \tpushup(y);pushup(x);\n\t}\n  \tvoid splay(int x,int goal){\n\t  \twhile(fa[x]!=goal){\n\t  \t\tint y=fa[x];int z=fa[y];\n\t  \t\tif(z!=goal)\n\t  \t\t(son[1][z]==y)^(son[1][y]==x)?rotate(x):rotate(y);\n\t  \t\trotate(x);\n\t    }\n\t    if(goal==0)root=x;\n  \t}\n  \tint newnode(int f,int v){\n\t    int rt=++cnt;\n\t    size[rt]=1;sum[rt]=1;val[rt]=v;\n\t    fa[rt]=f;lson=rson=0;lazy[rt]=0;\n\t    return rt;\n\t\t}\n\t\tvoid clean(int rt){\n\t    lson=rson=0;fa[rt]=0;\n\t    val[rt]=0;sum[rt]=size[rt]=0;\n  \t}\n\tvoid Build(int &rt,int L,int R,int f){\n\t  \tif(L>R)return;\n\t  \tint mid=(L+R)>>1;\n\t  \trt=newnode(f,a[mid]);\n\t  \tBuild(lson,L,mid-1,rt);\n\t  \tBuild(rson,mid+1,R,rt);\n\t  \tpushup(rt);\n\t}\n  \tvoid Insert(int v){\n    \tif(!root){root=newnode(0,v);return;}\n    \tint now=root,rt=0;\n    \tpushdown(now);\n   \t\twhile(1){\n      \t\tif(val[now]==v){\n\t  \t\t\t++size[now];\n\t        \tpushup(now);pushup(rt);\n\t        \tsplay(now,0);\n\t        \tbreak;\n\t      \t}\n\t      \trt=now;\n\t      \tval[rt]<v?now=rson:now=lson;\n\t    \tpushdown(now);\n\t      \tif(!now){\n\t        \tnow=newnode(rt,v);\n\t  \t    \tval[rt]<v?rson=now:lson=now;\n\t        \tpushup(rt);splay(now,0);\n\t        \tbreak;\n\t      \t}\n   \t \t}\n  \t}\n  \tint QueryRank_pos(int x){\n    \tint rt=root;\n    \twhile(1){\n    \t\tpushdown(rt);\n      \t\tif(val[rt]==x){splay(rt,0);return rt;} \n      \t\tif(val[rt]<x)rt=rson;\n      \t\telse if(val[rt]>x)rt=lson;\n    \t}\t\n  }\n  int Rank_pos(int x){\n    int rt=root;\n    while(1){\n    \tpushdown(rt);\n      if(sum[lson]>=x){rt=lson;continue;}\n      x-=sum[lson];\n      if(size[rt]>=x){splay(rt,0);return val[rt];}\n      x-=size[rt];\n      rt=rson;\n    }\t\n  }\n  \tint QueryRank(int x){\n    \tint rt=root;\n    \twhile(1){\n    \t\tpushdown(rt);\n     \t\tif(sum[lson]>=x){rt=lson;continue;}\n     \t\tx-=sum[lson];\n      \t\tif(size[rt]>=x){splay(rt,0);return val[rt];}\n      \t\tx-=size[rt];\n      \t\trt=rson;\n    \t}\n  \t}\n  \tint Rank(int num){\n    \tint rt=root,ans=0;\n    \twhile(1){\n    \t\tpushdown(rt);\n      \t\tif(val[rt]==num){ans=ans+sum[lson]+1;splay(rt,0);return ans;}\n     \t\tif(val[rt]<num)ans+=sum[lson]+size[rt],rt=rson;\n      \t\telse if(val[rt]>num)rt=lson;\n    \t}\n  \t}\n  \tint pre_pos(int x){\n    \tsplay(x,0);int rt;\n    \tpushdown(x);\n    \tif(!(rt=son[0][x]))return val[x];\n    \twhile(rson)pushdown(rt),rt=rson;\n    \treturn rt;\t\n  \t}\n  \tint nex_pos(int x){\n    \tsplay(x,0);int rt;\n    \tpushdown(x);\n    \tif(!(rt=son[1][x]))return val[x];\n    \twhile(lson)pushdown(rt),rt=lson;\n    \treturn rt;\t\n  \t}\n  \tint pre(int x){\n    \tsplay(x,0);int rt;\n    \tpushdown(x);\n    \tif(!(rt=son[0][x]))return val[x];\n    \twhile(rson)pushdown(rt),rt=rson;\n    \treturn val[rt];\n  \t}\n  \tint nex(int x){\n    \tsplay(x,0);int rt;\n    \tpushdown(x);\n    \tif(!(rt=son[1][x]))return val[x];\n    \twhile(lson)pushdown(rt),rt=lson;\n    \treturn val[rt];\n  \t}\n  \tvoid delete_pos(int rt){\n    \tsplay(rt,0);\n    \tif(size[rt]>1){--size[rt];return;}\n    \tint now;\n    \tif(!lson||!rson){\n      \t\tnow=rson+lson;pushdown(now);\n      \t\tif(!now){clean(rt);root=0;return;}\n      \t\tclean(rt);root=now;fa[now]=0;\n      \t\tpushup(now);return;\n    \t}\n    \tnow=pre_pos(rt);\n    \tpushdown(now);\n    \tsplay(now,rt);\n    \tfa[now]=0;son[1][now]=rson;fa[rson]=now;\n    \troot=now;clean(rt);\n    \tpushup(rson);pushup(now);\t\n  \t}\n  \tvoid Delete(int v){\n    \tv=QueryRank_pos(v);\n    \tpushdown(v);\n    \tdelete_pos(v);\n  \t}\n  \tvoid Delete_QueryRank(int v){\n    \tv=Rank_pos(v);\n    \tpushdown(v);\n    \tdelete_pos(v);\n  \t}\n  \tint Numpre(int x){\n    \tInsert(x);\n    \tint y=x;x=QueryRank_pos(x);\n    \tint ls=pre(x);\n    \tDelete(y);\n    \treturn ls;\n  \t}\n  \tint Numnex(int x){\n    \tInsert(x);\n    \tint y=x;x=QueryRank_pos(x);\n    \tint ls=nex(x);\n    \tDelete(y);\n    \treturn ls;\n  \t}\n  \tint find(int k){\n  \t\tint rt=root;\n  \t\twhile(1){\n  \t\t\tpushdown(rt);\n  \t\t\tif(sum[lson]>=k)rt=lson;\n  \t\t\telse if(sum[lson]+1==k)return rt;\n  \t\t\telse k-=sum[lson]+1,rt=rson;\n    \t}\n  \t}\n\tvoid revse(int a,int b){\n\t\ta=find(a);\n  \t\tb=find(b+2);\n  \t\tsplay(a,0);splay(b,a);\n  \t\tlazy[son[0][son[1][root]]]^=1;\n\t}\n}Spl;\n```\n\n## 两个模板题：\n- [P3369 【模板】普通平衡树](https://www.luogu.org/problemnew/show/P3369)\n``` cpp\n#include<algorithm>\n#include<iostream>\n#include<cstdlib>\n#include<cstring>\n#include<cctype>\n#include<cstdio>\n#include<vector>\n#include<string>\n#include<queue>\n#include<stack>\n#include<cmath>\n#include<map>\n#include<set>\nusing namespace std;\nconst int inf=0x7fffffff;\nconst double eps=1e-10;\nconst double pi=acos(-1.0);\n//char buf[1<<15],*S=buf,*T=buf;\n//char getch(){return S==T&&(T=(S=buf)+fread(buf,1,1<<15,stdin),S==T)?0:*S++;}\ninline int read(){\n\tint x=0,f=1;char ch;ch=getchar();\n\twhile(ch<'0'||ch>'9'){if(ch=='-') f=0;ch=getchar();}\n\twhile(ch>='0'&&ch<='9'){x=(x<<1)+(x<<3)+(ch&15);ch=getchar();}\n\tif(f)return x;else return-x;\n}\nconst int N=1e5+10;\nint a[N],n,m;\nstruct Splay{\n\t\n}Spl;\nint main()\n{\n  \tint n=read();\n  \twhile(n--){\n    \tint opt=read(),x=read();\n    \tif(opt==1){Spl.Insert(x);continue;}\n    \tif(opt==2){Spl.Delete(x);continue;}\n    \tif(opt==3){printf(\"%d\\n\",Spl.Rank(x));continue;}\n    \tif(opt==4){printf(\"%d\\n\",Spl.QueryRank(x));continue;}\n    \tif(opt==5){printf(\"%d\\n\",Spl.Numpre(x));continue;}\n    \tif(opt==6){printf(\"%d\\n\",Spl.Numnex(x));continue;}\n  \t}\n  \treturn 0;\n}\n```\n- [P3391 【模板】文艺平衡树（Splay）](https://www.luogu.org/problemnew/show/P3391)\n``` cpp\n#include<algorithm>\n#include<iostream>\n#include<cstdlib>\n#include<cstring>\n#include<cctype>\n#include<cstdio>\n#include<vector>\n#include<string>\n#include<queue>\n#include<stack>\n#include<cmath>\n#include<map>\n#include<set>\nusing namespace std;\nconst int inf=0x7fffffff;\nconst double eps=1e-10;\nconst double pi=acos(-1.0);\n//char buf[1<<15],*S=buf,*T=buf;\n//char getch(){return S==T&&(T=(S=buf)+fread(buf,1,1<<15,stdin),S==T)?0:*S++;}\ninline int read(){\n\tint x=0,f=1;char ch;ch=getchar();\n\twhile(ch<'0'||ch>'9'){if(ch=='-') f=0;ch=getchar();}\n\twhile(ch>='0'&&ch<='9'){x=(x<<1)+(x<<3)+(ch&15);ch=getchar();}\n\tif(f)return x;else return-x;\n}\nconst int N=1e5+10;\nint a[N],n,m;\nstruct Splay{\n\t\n}Spl;\nvoid write(int rt){\n  \tSpl.pushdown(rt);\n  \tif(Spl.lson)write(Spl.lson);\n  \tif(Spl.val[rt]>1&&Spl.val[rt]<n+2)\n  \tprintf(\"%d \",Spl.val[rt]-1);\n  \tif(Spl.rson)write(Spl.rson); \n}\nint main()\n{\n\tn=read();m=read();\n \tfor(int i=1;i<=n+2;i++)a[i]=i;\n \tSpl.Build(Spl.root,1,n+2,0);\n \twhile(m--){\n    \tint l=read(),r=read();\n  \t\tSpl.revse(l,r);\n  \t}\n  \twrite(Spl.root);\n  \tprintf(\"\\n\");\n\treturn 0;\n}\n\n```","slug":"Splay各种操作模板大赏","published":1,"updated":"2022-02-13T14:00:10.196Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0i63w62000ru4gb1njta2hk","content":"<p>$\\ \\ \\ \\ \\ \\ \\ \\,$关于Splay操作的复习笔记：</p>\n<p>$\\ \\ \\ \\ \\ \\ \\ \\,$依然的，只记录模板，不讲原理，关于Splay出门左拐百度。</p>\n<span id=\"more\"></span>\n<h2 id=\"结构\"><a href=\"#结构\" class=\"headerlink\" title=\"结构\"></a>结构</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Splay</span>&#123;</span><br><span class=\"line\">\t<span class=\"meta\">#<span class=\"keyword\">define</span> lson son[0][rt]</span></span><br><span class=\"line\">\t<span class=\"meta\">#<span class=\"keyword\">define</span> rson son[1][rt]</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> root,cnt;</span><br><span class=\"line\">\t<span class=\"type\">int</span> son[<span class=\"number\">2</span>][N],sum[N],val[N],size[N],fa[N];</span><br><span class=\"line\">\t<span class=\"type\">int</span> lazy[N];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol>\n<li>$\\tt root$ ：根；</li>\n<li>$\\tt cnt$ ：下标大小；</li>\n<li>$\\tt son[0/1][]$ ：左右儿子；</li>\n<li>$\\tt sum[]$ ：子树大小；</li>\n<li>$\\tt val[]$ ：节点权值；</li>\n<li>$\\tt size[]$ ：节点大小；</li>\n<li>$\\tt fa[]$ ：节点父亲；</li>\n<li>$\\tt lazy[]$ ：下传标记。</li>\n</ol>\n<h2 id=\"基本操作\"><a href=\"#基本操作\" class=\"headerlink\" title=\"基本操作\"></a>基本操作</h2><ul>\n<li>标记上传 ($pushup$)<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">pushup</span><span class=\"params\">(<span class=\"type\">int</span> rt)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(!rt)<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\tsum[rt]=sum[lson]+sum[rson]+size[rt];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>标记下传 ($pushdown$)，根据情况会不一样<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">pushdown</span><span class=\"params\">(<span class=\"type\">int</span> rt)</span></span>&#123;</span><br><span class=\"line\">  \t<span class=\"keyword\">if</span>(!lazy[rt])<span class=\"keyword\">return</span>;</span><br><span class=\"line\">  \tlazy[lson]^=<span class=\"number\">1</span>;lazy[rson]^=<span class=\"number\">1</span>;</span><br><span class=\"line\">  \tlazy[rt]=<span class=\"number\">0</span>;</span><br><span class=\"line\">  \t<span class=\"built_in\">swap</span>(lson,rson);</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure></li>\n<li>左旋+右旋 ($rotate$)<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">rotate</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span>&#123;</span><br><span class=\"line\">  \t<span class=\"type\">int</span> y=fa[x];<span class=\"type\">int</span> z=fa[y];</span><br><span class=\"line\">  \t<span class=\"type\">int</span> k=son[<span class=\"number\">1</span>][y]==x;</span><br><span class=\"line\">  \tson[son[<span class=\"number\">1</span>][z]==y][z]=x;</span><br><span class=\"line\">  \tfa[x]=z;</span><br><span class=\"line\">  \tson[k][y]=son[k^<span class=\"number\">1</span>][x];</span><br><span class=\"line\">  \tfa[son[k^<span class=\"number\">1</span>][x]]=y;</span><br><span class=\"line\">  \tson[k^<span class=\"number\">1</span>][x]=y;</span><br><span class=\"line\">  \tfa[y]=x;</span><br><span class=\"line\">\t<span class=\"built_in\">pushup</span>(y);<span class=\"built_in\">pushup</span>(x);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>将$x$旋转到$goal$下 ($splay$)<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">splay</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> goal)</span></span>&#123;</span><br><span class=\"line\">  \t<span class=\"keyword\">while</span>(fa[x]!=goal)&#123;</span><br><span class=\"line\">  \t\t<span class=\"type\">int</span> y=fa[x];<span class=\"type\">int</span> z=fa[y];</span><br><span class=\"line\">  \t\t<span class=\"keyword\">if</span>(z!=goal)</span><br><span class=\"line\">  \t\t(son[<span class=\"number\">1</span>][z]==y)^(son[<span class=\"number\">1</span>][y]==x)?<span class=\"built_in\">rotate</span>(x):<span class=\"built_in\">rotate</span>(y);</span><br><span class=\"line\">  \t\t<span class=\"built_in\">rotate</span>(x);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(goal==<span class=\"number\">0</span>)root=x;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"修改\"><a href=\"#修改\" class=\"headerlink\" title=\"修改\"></a>修改</h2><ul>\n<li>新建节点 ($newnode$)<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">newnode</span><span class=\"params\">(<span class=\"type\">int</span> f,<span class=\"type\">int</span> v)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> rt=++cnt;</span><br><span class=\"line\">    size[rt]=<span class=\"number\">1</span>;sum[rt]=<span class=\"number\">1</span>;val[rt]=v;</span><br><span class=\"line\">    fa[rt]=f;lson=rson=<span class=\"number\">0</span>;lazy[rt]=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> rt;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>清空节点 ($clean$)<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">clean</span><span class=\"params\">(<span class=\"type\">int</span> rt)</span></span>&#123;</span><br><span class=\"line\">    lson=rson=<span class=\"number\">0</span>;fa[rt]=<span class=\"number\">0</span>;</span><br><span class=\"line\">    val[rt]=<span class=\"number\">0</span>;sum[rt]=size[rt]=<span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>建立 ($Build$)<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Build</span><span class=\"params\">(<span class=\"type\">int</span> &amp;rt,<span class=\"type\">int</span> L,<span class=\"type\">int</span> R,<span class=\"type\">int</span> f)</span></span>&#123;</span><br><span class=\"line\">  \t<span class=\"keyword\">if</span>(L&gt;R)<span class=\"keyword\">return</span>;</span><br><span class=\"line\">  \t<span class=\"type\">int</span> mid=(L+R)&gt;&gt;<span class=\"number\">1</span>;</span><br><span class=\"line\">  \trt=<span class=\"built_in\">newnode</span>(f,a[mid]);</span><br><span class=\"line\">  \t<span class=\"built_in\">Build</span>(lson,L,mid<span class=\"number\">-1</span>,rt);</span><br><span class=\"line\">  \t<span class=\"built_in\">Build</span>(rson,mid+<span class=\"number\">1</span>,R,rt);</span><br><span class=\"line\">  \t<span class=\"built_in\">pushup</span>(rt);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>插入($Insert$)<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Insert</span><span class=\"params\">(<span class=\"type\">int</span> v)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!root)&#123;root=<span class=\"built_in\">newnode</span>(<span class=\"number\">0</span>,v);<span class=\"keyword\">return</span>;&#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> now=root,rt=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"built_in\">pushdown</span>(now);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(val[now]==v)&#123;</span><br><span class=\"line\">  \t\t\t++size[now];</span><br><span class=\"line\">        <span class=\"built_in\">pushup</span>(now);<span class=\"built_in\">pushup</span>(rt);</span><br><span class=\"line\">        <span class=\"built_in\">splay</span>(now,<span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      rt=now;</span><br><span class=\"line\">      val[rt]&lt;v?now=rson:now=lson;</span><br><span class=\"line\">    \t<span class=\"built_in\">pushdown</span>(now);</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(!now)&#123;</span><br><span class=\"line\">        now=<span class=\"built_in\">newnode</span>(rt,v);</span><br><span class=\"line\">  \t    val[rt]&lt;v?rson=now:lson=now;</span><br><span class=\"line\">        <span class=\"built_in\">pushup</span>(rt);<span class=\"built_in\">splay</span>(now,<span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>删除节点($delete_pos$)<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">delete_pos</span><span class=\"params\">(<span class=\"type\">int</span> rt)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">splay</span>(rt,<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(size[rt]&gt;<span class=\"number\">1</span>)&#123;--size[rt];<span class=\"keyword\">return</span>;&#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> now;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!lson||!rson)&#123;</span><br><span class=\"line\">      now=rson+lson;<span class=\"built_in\">pushdown</span>(now);</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(!now)&#123;<span class=\"built_in\">clean</span>(rt);root=<span class=\"number\">0</span>;<span class=\"keyword\">return</span>;&#125;</span><br><span class=\"line\">      <span class=\"built_in\">clean</span>(rt);root=now;fa[now]=<span class=\"number\">0</span>;</span><br><span class=\"line\">      <span class=\"built_in\">pushup</span>(now);<span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    now=<span class=\"built_in\">pre_pos</span>(rt);</span><br><span class=\"line\">    <span class=\"built_in\">pushdown</span>(now);</span><br><span class=\"line\">    <span class=\"built_in\">splay</span>(now,rt);</span><br><span class=\"line\">    fa[now]=<span class=\"number\">0</span>;son[<span class=\"number\">1</span>][now]=rson;fa[rson]=now;</span><br><span class=\"line\">    root=now;<span class=\"built_in\">clean</span>(rt);</span><br><span class=\"line\">    <span class=\"built_in\">pushup</span>(rson);<span class=\"built_in\">pushup</span>(now);\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>删除($Delete$)<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Delete</span><span class=\"params\">(<span class=\"type\">int</span> v)</span></span>&#123;</span><br><span class=\"line\">    v=<span class=\"built_in\">QueryRank_pos</span>(v);</span><br><span class=\"line\">    <span class=\"built_in\">pushdown</span>(v);</span><br><span class=\"line\">    <span class=\"built_in\">delete_pos</span>(v);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>删除第k($Delete_QueryRank$)<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Delete_QueryRank</span><span class=\"params\">(<span class=\"type\">int</span> v)</span></span>&#123;</span><br><span class=\"line\">    v=<span class=\"built_in\">Rank_pos</span>(v);</span><br><span class=\"line\">    <span class=\"built_in\">pushdown</span>(v);</span><br><span class=\"line\">    <span class=\"built_in\">delete_pos</span>(v);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>区间修改（翻转）($revse$)<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">revse</span><span class=\"params\">(<span class=\"type\">int</span> a,<span class=\"type\">int</span> b)</span></span>&#123;</span><br><span class=\"line\">\ta=<span class=\"built_in\">find</span>(a);</span><br><span class=\"line\">  \tb=<span class=\"built_in\">find</span>(b+<span class=\"number\">2</span>);</span><br><span class=\"line\">  \t<span class=\"built_in\">splay</span>(a,<span class=\"number\">0</span>);<span class=\"built_in\">splay</span>(b,a);</span><br><span class=\"line\">  \tlazy[son[<span class=\"number\">0</span>][son[<span class=\"number\">1</span>][root]]]^=<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"询问\"><a href=\"#询问\" class=\"headerlink\" title=\"询问\"></a>询问</h2><ul>\n<li>查找某个值的节点编号($QueryRank_pos$)<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">QueryRank_pos</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> rt=root;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">    \t<span class=\"built_in\">pushdown</span>(rt);</span><br><span class=\"line\">    \t<span class=\"keyword\">if</span>(val[rt]==x)&#123;<span class=\"built_in\">splay</span>(rt,<span class=\"number\">0</span>);<span class=\"keyword\">return</span> rt;&#125; </span><br><span class=\"line\">    \t<span class=\"keyword\">if</span>(val[rt]&lt;x)rt=rson;</span><br><span class=\"line\">    \t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(val[rt]&gt;x)rt=lson;</span><br><span class=\"line\">    &#125;\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>查找某个排名的节点编号($Rank_pos$)<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">Rank_pos</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span>&#123;</span><br><span class=\"line\">  <span class=\"type\">int</span> rt=root;</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">  \t<span class=\"built_in\">pushdown</span>(rt);</span><br><span class=\"line\">  \t<span class=\"keyword\">if</span>(sum[lson]&gt;=x)&#123;rt=lson;<span class=\"keyword\">continue</span>;&#125;</span><br><span class=\"line\">  \tx-=sum[lson];</span><br><span class=\"line\">    \t<span class=\"keyword\">if</span>(size[rt]&gt;=x)&#123;<span class=\"built_in\">splay</span>(rt,<span class=\"number\">0</span>);<span class=\"keyword\">return</span> val[rt];&#125;</span><br><span class=\"line\">    \tx-=size[rt];</span><br><span class=\"line\">    \trt=rson;</span><br><span class=\"line\">  &#125;\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>查找排名第k的值($QueryRank$)</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">QueryRank</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> rt=root;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">    \t<span class=\"built_in\">pushdown</span>(rt);</span><br><span class=\"line\">    \t<span class=\"keyword\">if</span>(sum[lson]&gt;=x)&#123;rt=lson;<span class=\"keyword\">continue</span>;&#125;</span><br><span class=\"line\">    \tx-=sum[lson];</span><br><span class=\"line\">    \t<span class=\"keyword\">if</span>(size[rt]&gt;=x)&#123;<span class=\"built_in\">splay</span>(rt,<span class=\"number\">0</span>);<span class=\"keyword\">return</span> val[rt];&#125;</span><br><span class=\"line\">    \tx-=size[rt];</span><br><span class=\"line\">    \trt=rson;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查找某个值的排名($Rank$)</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">Rank</span><span class=\"params\">(<span class=\"type\">int</span> num)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> rt=root,ans=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">    \t<span class=\"built_in\">pushdown</span>(rt);</span><br><span class=\"line\">    \t<span class=\"keyword\">if</span>(val[rt]==num)&#123;ans=ans+sum[lson]+<span class=\"number\">1</span>;<span class=\"built_in\">splay</span>(rt,<span class=\"number\">0</span>);<span class=\"keyword\">return</span> ans;&#125;</span><br><span class=\"line\">    \t<span class=\"keyword\">if</span>(val[rt]&lt;num)ans+=sum[lson]+size[rt],rt=rson;</span><br><span class=\"line\">     \t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(val[rt]&gt;num)rt=lson;</span><br><span class=\"line\">  \t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>集合内前驱的节点编号($pre_pos$)<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">pre_pos</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">splay</span>(x,<span class=\"number\">0</span>);<span class=\"type\">int</span> rt;</span><br><span class=\"line\">    <span class=\"built_in\">pushdown</span>(x);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!(rt=son[<span class=\"number\">0</span>][x]))<span class=\"keyword\">return</span> val[x];</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(rson)<span class=\"built_in\">pushdown</span>(rt),rt=rson;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> rt;\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>集合内后继的节点编号($nex_pos$)<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">nex_pos</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">splay</span>(x,<span class=\"number\">0</span>);<span class=\"type\">int</span> rt;</span><br><span class=\"line\">    <span class=\"built_in\">pushdown</span>(x);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!(rt=son[<span class=\"number\">1</span>][x]))<span class=\"keyword\">return</span> val[x];</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(lson)<span class=\"built_in\">pushdown</span>(rt),rt=lson;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> rt;\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>集合内前驱的值($pre$)<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">pre</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">splay</span>(x,<span class=\"number\">0</span>);<span class=\"type\">int</span> rt;</span><br><span class=\"line\">    <span class=\"built_in\">pushdown</span>(x);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!(rt=son[<span class=\"number\">0</span>][x]))<span class=\"keyword\">return</span> val[x];</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(rson)<span class=\"built_in\">pushdown</span>(rt),rt=rson;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> val[rt];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>集合内后继的值($nex$)<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">nex</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">splay</span>(x,<span class=\"number\">0</span>);<span class=\"type\">int</span> rt;</span><br><span class=\"line\">    <span class=\"built_in\">pushdown</span>(x);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!(rt=son[<span class=\"number\">1</span>][x]))<span class=\"keyword\">return</span> val[x];</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(lson)<span class=\"built_in\">pushdown</span>(rt),rt=lson;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> val[rt];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>前驱($Numpre$)<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">Numpre</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">Insert</span>(x);</span><br><span class=\"line\">    <span class=\"type\">int</span> y=x;x=<span class=\"built_in\">QueryRank_pos</span>(x);</span><br><span class=\"line\">    <span class=\"type\">int</span> ls=<span class=\"built_in\">pre</span>(x);</span><br><span class=\"line\">    <span class=\"built_in\">Delete</span>(y);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ls;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>后继($Numnex$)<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">Numnex</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">Insert</span>(x);</span><br><span class=\"line\">    <span class=\"type\">int</span> y=x;x=<span class=\"built_in\">QueryRank_pos</span>(x);</span><br><span class=\"line\">    <span class=\"type\">int</span> ls=<span class=\"built_in\">nex</span>(x);</span><br><span class=\"line\">    <span class=\"built_in\">Delete</span>(y);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ls;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>查找某个值的节点编号($find$)，不改变结构<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">find</span><span class=\"params\">(<span class=\"type\">int</span> k)</span></span>&#123;</span><br><span class=\"line\">  \t<span class=\"type\">int</span> rt=root;</span><br><span class=\"line\">  \t<span class=\"keyword\">while</span>(<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">  \t\t<span class=\"built_in\">pushdown</span>(rt);</span><br><span class=\"line\">  \t\t<span class=\"keyword\">if</span>(sum[lson]&gt;=k)rt=lson;</span><br><span class=\"line\">  \t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(sum[lson]+<span class=\"number\">1</span>==k)<span class=\"keyword\">return</span> rt;</span><br><span class=\"line\">  \t\t<span class=\"keyword\">else</span> k-=sum[lson]+<span class=\"number\">1</span>,rt=rson;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"完整模板\"><a href=\"#完整模板\" class=\"headerlink\" title=\"完整模板\"></a>完整模板</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">1e5</span>+<span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> a[N],n,m;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Splay</span>&#123;</span><br><span class=\"line\">\t<span class=\"meta\">#<span class=\"keyword\">define</span> lson son[0][rt]</span></span><br><span class=\"line\">\t<span class=\"meta\">#<span class=\"keyword\">define</span> rson son[1][rt]</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> root,cnt;</span><br><span class=\"line\">\t<span class=\"type\">int</span> son[<span class=\"number\">2</span>][N],sum[N],val[N],size[N],fa[N];</span><br><span class=\"line\">  \t<span class=\"type\">bool</span> lazy[N];</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">pushdown</span><span class=\"params\">(<span class=\"type\">int</span> rt)</span></span>&#123;</span><br><span class=\"line\">  \t\t<span class=\"keyword\">if</span>(!lazy[rt])<span class=\"keyword\">return</span>;</span><br><span class=\"line\">  \t\tlazy[lson]^=<span class=\"number\">1</span>;lazy[rson]^=<span class=\"number\">1</span>;</span><br><span class=\"line\">  \t\tlazy[rt]=<span class=\"number\">0</span>;</span><br><span class=\"line\">  \t\t<span class=\"built_in\">swap</span>(lson,rson);</span><br><span class=\"line\">  \t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">pushup</span><span class=\"params\">(<span class=\"type\">int</span> rt)</span></span>&#123;</span><br><span class=\"line\">\t  \t<span class=\"keyword\">if</span>(!rt)<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t  \tsum[rt]=sum[lson]+sum[rson]+size[rt];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">  \t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">rotate</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span>&#123;</span><br><span class=\"line\">\t  \t<span class=\"type\">int</span> y=fa[x];<span class=\"type\">int</span> z=fa[y];</span><br><span class=\"line\">\t  \t<span class=\"type\">int</span> k=son[<span class=\"number\">1</span>][y]==x;</span><br><span class=\"line\">\t  \tson[son[<span class=\"number\">1</span>][z]==y][z]=x;</span><br><span class=\"line\">\t  \tfa[x]=z;</span><br><span class=\"line\">\t  \tson[k][y]=son[k^<span class=\"number\">1</span>][x];</span><br><span class=\"line\">\t  \tfa[son[k^<span class=\"number\">1</span>][x]]=y;</span><br><span class=\"line\">\t  \tson[k^<span class=\"number\">1</span>][x]=y;</span><br><span class=\"line\">\t  \tfa[y]=x;</span><br><span class=\"line\">\t  \t<span class=\"built_in\">pushup</span>(y);<span class=\"built_in\">pushup</span>(x);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">  \t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">splay</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> goal)</span></span>&#123;</span><br><span class=\"line\">\t  \t<span class=\"keyword\">while</span>(fa[x]!=goal)&#123;</span><br><span class=\"line\">\t  \t\t<span class=\"type\">int</span> y=fa[x];<span class=\"type\">int</span> z=fa[y];</span><br><span class=\"line\">\t  \t\t<span class=\"keyword\">if</span>(z!=goal)</span><br><span class=\"line\">\t  \t\t(son[<span class=\"number\">1</span>][z]==y)^(son[<span class=\"number\">1</span>][y]==x)?<span class=\"built_in\">rotate</span>(x):<span class=\"built_in\">rotate</span>(y);</span><br><span class=\"line\">\t  \t\t<span class=\"built_in\">rotate</span>(x);</span><br><span class=\"line\">\t    &#125;</span><br><span class=\"line\">\t    <span class=\"keyword\">if</span>(goal==<span class=\"number\">0</span>)root=x;</span><br><span class=\"line\">  \t&#125;</span><br><span class=\"line\">  \t<span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">newnode</span><span class=\"params\">(<span class=\"type\">int</span> f,<span class=\"type\">int</span> v)</span></span>&#123;</span><br><span class=\"line\">\t    <span class=\"type\">int</span> rt=++cnt;</span><br><span class=\"line\">\t    size[rt]=<span class=\"number\">1</span>;sum[rt]=<span class=\"number\">1</span>;val[rt]=v;</span><br><span class=\"line\">\t    fa[rt]=f;lson=rson=<span class=\"number\">0</span>;lazy[rt]=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t    <span class=\"keyword\">return</span> rt;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">clean</span><span class=\"params\">(<span class=\"type\">int</span> rt)</span></span>&#123;</span><br><span class=\"line\">\t    lson=rson=<span class=\"number\">0</span>;fa[rt]=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t    val[rt]=<span class=\"number\">0</span>;sum[rt]=size[rt]=<span class=\"number\">0</span>;</span><br><span class=\"line\">  \t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Build</span><span class=\"params\">(<span class=\"type\">int</span> &amp;rt,<span class=\"type\">int</span> L,<span class=\"type\">int</span> R,<span class=\"type\">int</span> f)</span></span>&#123;</span><br><span class=\"line\">\t  \t<span class=\"keyword\">if</span>(L&gt;R)<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t  \t<span class=\"type\">int</span> mid=(L+R)&gt;&gt;<span class=\"number\">1</span>;</span><br><span class=\"line\">\t  \trt=<span class=\"built_in\">newnode</span>(f,a[mid]);</span><br><span class=\"line\">\t  \t<span class=\"built_in\">Build</span>(lson,L,mid<span class=\"number\">-1</span>,rt);</span><br><span class=\"line\">\t  \t<span class=\"built_in\">Build</span>(rson,mid+<span class=\"number\">1</span>,R,rt);</span><br><span class=\"line\">\t  \t<span class=\"built_in\">pushup</span>(rt);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">  \t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Insert</span><span class=\"params\">(<span class=\"type\">int</span> v)</span></span>&#123;</span><br><span class=\"line\">    \t<span class=\"keyword\">if</span>(!root)&#123;root=<span class=\"built_in\">newnode</span>(<span class=\"number\">0</span>,v);<span class=\"keyword\">return</span>;&#125;</span><br><span class=\"line\">    \t<span class=\"type\">int</span> now=root,rt=<span class=\"number\">0</span>;</span><br><span class=\"line\">    \t<span class=\"built_in\">pushdown</span>(now);</span><br><span class=\"line\">   \t\t<span class=\"keyword\">while</span>(<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">      \t\t<span class=\"keyword\">if</span>(val[now]==v)&#123;</span><br><span class=\"line\">\t  \t\t\t++size[now];</span><br><span class=\"line\">\t        \t<span class=\"built_in\">pushup</span>(now);<span class=\"built_in\">pushup</span>(rt);</span><br><span class=\"line\">\t        \t<span class=\"built_in\">splay</span>(now,<span class=\"number\">0</span>);</span><br><span class=\"line\">\t        \t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t      \t&#125;</span><br><span class=\"line\">\t      \trt=now;</span><br><span class=\"line\">\t      \tval[rt]&lt;v?now=rson:now=lson;</span><br><span class=\"line\">\t    \t<span class=\"built_in\">pushdown</span>(now);</span><br><span class=\"line\">\t      \t<span class=\"keyword\">if</span>(!now)&#123;</span><br><span class=\"line\">\t        \tnow=<span class=\"built_in\">newnode</span>(rt,v);</span><br><span class=\"line\">\t  \t    \tval[rt]&lt;v?rson=now:lson=now;</span><br><span class=\"line\">\t        \t<span class=\"built_in\">pushup</span>(rt);<span class=\"built_in\">splay</span>(now,<span class=\"number\">0</span>);</span><br><span class=\"line\">\t        \t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t      \t&#125;</span><br><span class=\"line\">   \t \t&#125;</span><br><span class=\"line\">  \t&#125;</span><br><span class=\"line\">  \t<span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">QueryRank_pos</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span>&#123;</span><br><span class=\"line\">    \t<span class=\"type\">int</span> rt=root;</span><br><span class=\"line\">    \t<span class=\"keyword\">while</span>(<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">    \t\t<span class=\"built_in\">pushdown</span>(rt);</span><br><span class=\"line\">      \t\t<span class=\"keyword\">if</span>(val[rt]==x)&#123;<span class=\"built_in\">splay</span>(rt,<span class=\"number\">0</span>);<span class=\"keyword\">return</span> rt;&#125; </span><br><span class=\"line\">      \t\t<span class=\"keyword\">if</span>(val[rt]&lt;x)rt=rson;</span><br><span class=\"line\">      \t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(val[rt]&gt;x)rt=lson;</span><br><span class=\"line\">    \t&#125;\t</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">Rank_pos</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> rt=root;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">    \t<span class=\"built_in\">pushdown</span>(rt);</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(sum[lson]&gt;=x)&#123;rt=lson;<span class=\"keyword\">continue</span>;&#125;</span><br><span class=\"line\">      x-=sum[lson];</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(size[rt]&gt;=x)&#123;<span class=\"built_in\">splay</span>(rt,<span class=\"number\">0</span>);<span class=\"keyword\">return</span> val[rt];&#125;</span><br><span class=\"line\">      x-=size[rt];</span><br><span class=\"line\">      rt=rson;</span><br><span class=\"line\">    &#125;\t</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  \t<span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">QueryRank</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span>&#123;</span><br><span class=\"line\">    \t<span class=\"type\">int</span> rt=root;</span><br><span class=\"line\">    \t<span class=\"keyword\">while</span>(<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">    \t\t<span class=\"built_in\">pushdown</span>(rt);</span><br><span class=\"line\">     \t\t<span class=\"keyword\">if</span>(sum[lson]&gt;=x)&#123;rt=lson;<span class=\"keyword\">continue</span>;&#125;</span><br><span class=\"line\">     \t\tx-=sum[lson];</span><br><span class=\"line\">      \t\t<span class=\"keyword\">if</span>(size[rt]&gt;=x)&#123;<span class=\"built_in\">splay</span>(rt,<span class=\"number\">0</span>);<span class=\"keyword\">return</span> val[rt];&#125;</span><br><span class=\"line\">      \t\tx-=size[rt];</span><br><span class=\"line\">      \t\trt=rson;</span><br><span class=\"line\">    \t&#125;</span><br><span class=\"line\">  \t&#125;</span><br><span class=\"line\">  \t<span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">Rank</span><span class=\"params\">(<span class=\"type\">int</span> num)</span></span>&#123;</span><br><span class=\"line\">    \t<span class=\"type\">int</span> rt=root,ans=<span class=\"number\">0</span>;</span><br><span class=\"line\">    \t<span class=\"keyword\">while</span>(<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">    \t\t<span class=\"built_in\">pushdown</span>(rt);</span><br><span class=\"line\">      \t\t<span class=\"keyword\">if</span>(val[rt]==num)&#123;ans=ans+sum[lson]+<span class=\"number\">1</span>;<span class=\"built_in\">splay</span>(rt,<span class=\"number\">0</span>);<span class=\"keyword\">return</span> ans;&#125;</span><br><span class=\"line\">     \t\t<span class=\"keyword\">if</span>(val[rt]&lt;num)ans+=sum[lson]+size[rt],rt=rson;</span><br><span class=\"line\">      \t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(val[rt]&gt;num)rt=lson;</span><br><span class=\"line\">    \t&#125;</span><br><span class=\"line\">  \t&#125;</span><br><span class=\"line\">  \t<span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">pre_pos</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span>&#123;</span><br><span class=\"line\">    \t<span class=\"built_in\">splay</span>(x,<span class=\"number\">0</span>);<span class=\"type\">int</span> rt;</span><br><span class=\"line\">    \t<span class=\"built_in\">pushdown</span>(x);</span><br><span class=\"line\">    \t<span class=\"keyword\">if</span>(!(rt=son[<span class=\"number\">0</span>][x]))<span class=\"keyword\">return</span> val[x];</span><br><span class=\"line\">    \t<span class=\"keyword\">while</span>(rson)<span class=\"built_in\">pushdown</span>(rt),rt=rson;</span><br><span class=\"line\">    \t<span class=\"keyword\">return</span> rt;\t</span><br><span class=\"line\">  \t&#125;</span><br><span class=\"line\">  \t<span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">nex_pos</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span>&#123;</span><br><span class=\"line\">    \t<span class=\"built_in\">splay</span>(x,<span class=\"number\">0</span>);<span class=\"type\">int</span> rt;</span><br><span class=\"line\">    \t<span class=\"built_in\">pushdown</span>(x);</span><br><span class=\"line\">    \t<span class=\"keyword\">if</span>(!(rt=son[<span class=\"number\">1</span>][x]))<span class=\"keyword\">return</span> val[x];</span><br><span class=\"line\">    \t<span class=\"keyword\">while</span>(lson)<span class=\"built_in\">pushdown</span>(rt),rt=lson;</span><br><span class=\"line\">    \t<span class=\"keyword\">return</span> rt;\t</span><br><span class=\"line\">  \t&#125;</span><br><span class=\"line\">  \t<span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">pre</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span>&#123;</span><br><span class=\"line\">    \t<span class=\"built_in\">splay</span>(x,<span class=\"number\">0</span>);<span class=\"type\">int</span> rt;</span><br><span class=\"line\">    \t<span class=\"built_in\">pushdown</span>(x);</span><br><span class=\"line\">    \t<span class=\"keyword\">if</span>(!(rt=son[<span class=\"number\">0</span>][x]))<span class=\"keyword\">return</span> val[x];</span><br><span class=\"line\">    \t<span class=\"keyword\">while</span>(rson)<span class=\"built_in\">pushdown</span>(rt),rt=rson;</span><br><span class=\"line\">    \t<span class=\"keyword\">return</span> val[rt];</span><br><span class=\"line\">  \t&#125;</span><br><span class=\"line\">  \t<span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">nex</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span>&#123;</span><br><span class=\"line\">    \t<span class=\"built_in\">splay</span>(x,<span class=\"number\">0</span>);<span class=\"type\">int</span> rt;</span><br><span class=\"line\">    \t<span class=\"built_in\">pushdown</span>(x);</span><br><span class=\"line\">    \t<span class=\"keyword\">if</span>(!(rt=son[<span class=\"number\">1</span>][x]))<span class=\"keyword\">return</span> val[x];</span><br><span class=\"line\">    \t<span class=\"keyword\">while</span>(lson)<span class=\"built_in\">pushdown</span>(rt),rt=lson;</span><br><span class=\"line\">    \t<span class=\"keyword\">return</span> val[rt];</span><br><span class=\"line\">  \t&#125;</span><br><span class=\"line\">  \t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">delete_pos</span><span class=\"params\">(<span class=\"type\">int</span> rt)</span></span>&#123;</span><br><span class=\"line\">    \t<span class=\"built_in\">splay</span>(rt,<span class=\"number\">0</span>);</span><br><span class=\"line\">    \t<span class=\"keyword\">if</span>(size[rt]&gt;<span class=\"number\">1</span>)&#123;--size[rt];<span class=\"keyword\">return</span>;&#125;</span><br><span class=\"line\">    \t<span class=\"type\">int</span> now;</span><br><span class=\"line\">    \t<span class=\"keyword\">if</span>(!lson||!rson)&#123;</span><br><span class=\"line\">      \t\tnow=rson+lson;<span class=\"built_in\">pushdown</span>(now);</span><br><span class=\"line\">      \t\t<span class=\"keyword\">if</span>(!now)&#123;<span class=\"built_in\">clean</span>(rt);root=<span class=\"number\">0</span>;<span class=\"keyword\">return</span>;&#125;</span><br><span class=\"line\">      \t\t<span class=\"built_in\">clean</span>(rt);root=now;fa[now]=<span class=\"number\">0</span>;</span><br><span class=\"line\">      \t\t<span class=\"built_in\">pushup</span>(now);<span class=\"keyword\">return</span>;</span><br><span class=\"line\">    \t&#125;</span><br><span class=\"line\">    \tnow=<span class=\"built_in\">pre_pos</span>(rt);</span><br><span class=\"line\">    \t<span class=\"built_in\">pushdown</span>(now);</span><br><span class=\"line\">    \t<span class=\"built_in\">splay</span>(now,rt);</span><br><span class=\"line\">    \tfa[now]=<span class=\"number\">0</span>;son[<span class=\"number\">1</span>][now]=rson;fa[rson]=now;</span><br><span class=\"line\">    \troot=now;<span class=\"built_in\">clean</span>(rt);</span><br><span class=\"line\">    \t<span class=\"built_in\">pushup</span>(rson);<span class=\"built_in\">pushup</span>(now);\t</span><br><span class=\"line\">  \t&#125;</span><br><span class=\"line\">  \t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Delete</span><span class=\"params\">(<span class=\"type\">int</span> v)</span></span>&#123;</span><br><span class=\"line\">    \tv=<span class=\"built_in\">QueryRank_pos</span>(v);</span><br><span class=\"line\">    \t<span class=\"built_in\">pushdown</span>(v);</span><br><span class=\"line\">    \t<span class=\"built_in\">delete_pos</span>(v);</span><br><span class=\"line\">  \t&#125;</span><br><span class=\"line\">  \t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Delete_QueryRank</span><span class=\"params\">(<span class=\"type\">int</span> v)</span></span>&#123;</span><br><span class=\"line\">    \tv=<span class=\"built_in\">Rank_pos</span>(v);</span><br><span class=\"line\">    \t<span class=\"built_in\">pushdown</span>(v);</span><br><span class=\"line\">    \t<span class=\"built_in\">delete_pos</span>(v);</span><br><span class=\"line\">  \t&#125;</span><br><span class=\"line\">  \t<span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">Numpre</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span>&#123;</span><br><span class=\"line\">    \t<span class=\"built_in\">Insert</span>(x);</span><br><span class=\"line\">    \t<span class=\"type\">int</span> y=x;x=<span class=\"built_in\">QueryRank_pos</span>(x);</span><br><span class=\"line\">    \t<span class=\"type\">int</span> ls=<span class=\"built_in\">pre</span>(x);</span><br><span class=\"line\">    \t<span class=\"built_in\">Delete</span>(y);</span><br><span class=\"line\">    \t<span class=\"keyword\">return</span> ls;</span><br><span class=\"line\">  \t&#125;</span><br><span class=\"line\">  \t<span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">Numnex</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span>&#123;</span><br><span class=\"line\">    \t<span class=\"built_in\">Insert</span>(x);</span><br><span class=\"line\">    \t<span class=\"type\">int</span> y=x;x=<span class=\"built_in\">QueryRank_pos</span>(x);</span><br><span class=\"line\">    \t<span class=\"type\">int</span> ls=<span class=\"built_in\">nex</span>(x);</span><br><span class=\"line\">    \t<span class=\"built_in\">Delete</span>(y);</span><br><span class=\"line\">    \t<span class=\"keyword\">return</span> ls;</span><br><span class=\"line\">  \t&#125;</span><br><span class=\"line\">  \t<span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">find</span><span class=\"params\">(<span class=\"type\">int</span> k)</span></span>&#123;</span><br><span class=\"line\">  \t\t<span class=\"type\">int</span> rt=root;</span><br><span class=\"line\">  \t\t<span class=\"keyword\">while</span>(<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">  \t\t\t<span class=\"built_in\">pushdown</span>(rt);</span><br><span class=\"line\">  \t\t\t<span class=\"keyword\">if</span>(sum[lson]&gt;=k)rt=lson;</span><br><span class=\"line\">  \t\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(sum[lson]+<span class=\"number\">1</span>==k)<span class=\"keyword\">return</span> rt;</span><br><span class=\"line\">  \t\t\t<span class=\"keyword\">else</span> k-=sum[lson]+<span class=\"number\">1</span>,rt=rson;</span><br><span class=\"line\">    \t&#125;</span><br><span class=\"line\">  \t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">revse</span><span class=\"params\">(<span class=\"type\">int</span> a,<span class=\"type\">int</span> b)</span></span>&#123;</span><br><span class=\"line\">\t\ta=<span class=\"built_in\">find</span>(a);</span><br><span class=\"line\">  \t\tb=<span class=\"built_in\">find</span>(b+<span class=\"number\">2</span>);</span><br><span class=\"line\">  \t\t<span class=\"built_in\">splay</span>(a,<span class=\"number\">0</span>);<span class=\"built_in\">splay</span>(b,a);</span><br><span class=\"line\">  \t\tlazy[son[<span class=\"number\">0</span>][son[<span class=\"number\">1</span>][root]]]^=<span class=\"number\">1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;Spl;</span><br></pre></td></tr></table></figure>\n<h2 id=\"两个模板题：\"><a href=\"#两个模板题：\" class=\"headerlink\" title=\"两个模板题：\"></a>两个模板题：</h2><ul>\n<li><a href=\"https://www.luogu.org/problemnew/show/P3369\">P3369 【模板】普通平衡树</a><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdlib&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cctype&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;stack&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;map&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;set&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> inf=<span class=\"number\">0x7fffffff</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">double</span> eps=<span class=\"number\">1e-10</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">double</span> pi=<span class=\"built_in\">acos</span>(<span class=\"number\">-1.0</span>);</span><br><span class=\"line\"><span class=\"comment\">//char buf[1&lt;&lt;15],*S=buf,*T=buf;</span></span><br><span class=\"line\"><span class=\"comment\">//char getch()&#123;return S==T&amp;&amp;(T=(S=buf)+fread(buf,1,1&lt;&lt;15,stdin),S==T)?0:*S++;&#125;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">int</span> <span class=\"title\">read</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> x=<span class=\"number\">0</span>,f=<span class=\"number\">1</span>;<span class=\"type\">char</span> ch;ch=<span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(ch&lt;<span class=\"string\">&#x27;0&#x27;</span>||ch&gt;<span class=\"string\">&#x27;9&#x27;</span>)&#123;<span class=\"keyword\">if</span>(ch==<span class=\"string\">&#x27;-&#x27;</span>) f=<span class=\"number\">0</span>;ch=<span class=\"built_in\">getchar</span>();&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(ch&gt;=<span class=\"string\">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class=\"string\">&#x27;9&#x27;</span>)&#123;x=(x&lt;&lt;<span class=\"number\">1</span>)+(x&lt;&lt;<span class=\"number\">3</span>)+(ch&amp;<span class=\"number\">15</span>);ch=<span class=\"built_in\">getchar</span>();&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(f)<span class=\"keyword\">return</span> x;<span class=\"keyword\">else</span> <span class=\"keyword\">return</span>-x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">1e5</span>+<span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> a[N],n,m;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Splay</span>&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;Spl;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  \t<span class=\"type\">int</span> n=<span class=\"built_in\">read</span>();</span><br><span class=\"line\">  \t<span class=\"keyword\">while</span>(n--)&#123;</span><br><span class=\"line\">    \t<span class=\"type\">int</span> opt=<span class=\"built_in\">read</span>(),x=<span class=\"built_in\">read</span>();</span><br><span class=\"line\">    \t<span class=\"keyword\">if</span>(opt==<span class=\"number\">1</span>)&#123;Spl.<span class=\"built_in\">Insert</span>(x);<span class=\"keyword\">continue</span>;&#125;</span><br><span class=\"line\">    \t<span class=\"keyword\">if</span>(opt==<span class=\"number\">2</span>)&#123;Spl.<span class=\"built_in\">Delete</span>(x);<span class=\"keyword\">continue</span>;&#125;</span><br><span class=\"line\">    \t<span class=\"keyword\">if</span>(opt==<span class=\"number\">3</span>)&#123;<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>,Spl.<span class=\"built_in\">Rank</span>(x));<span class=\"keyword\">continue</span>;&#125;</span><br><span class=\"line\">    \t<span class=\"keyword\">if</span>(opt==<span class=\"number\">4</span>)&#123;<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>,Spl.<span class=\"built_in\">QueryRank</span>(x));<span class=\"keyword\">continue</span>;&#125;</span><br><span class=\"line\">    \t<span class=\"keyword\">if</span>(opt==<span class=\"number\">5</span>)&#123;<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>,Spl.<span class=\"built_in\">Numpre</span>(x));<span class=\"keyword\">continue</span>;&#125;</span><br><span class=\"line\">    \t<span class=\"keyword\">if</span>(opt==<span class=\"number\">6</span>)&#123;<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>,Spl.<span class=\"built_in\">Numnex</span>(x));<span class=\"keyword\">continue</span>;&#125;</span><br><span class=\"line\">  \t&#125;</span><br><span class=\"line\">  \t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><a href=\"https://www.luogu.org/problemnew/show/P3391\">P3391 【模板】文艺平衡树（Splay）</a><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdlib&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cctype&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;stack&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;map&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;set&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> inf=<span class=\"number\">0x7fffffff</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">double</span> eps=<span class=\"number\">1e-10</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">double</span> pi=<span class=\"built_in\">acos</span>(<span class=\"number\">-1.0</span>);</span><br><span class=\"line\"><span class=\"comment\">//char buf[1&lt;&lt;15],*S=buf,*T=buf;</span></span><br><span class=\"line\"><span class=\"comment\">//char getch()&#123;return S==T&amp;&amp;(T=(S=buf)+fread(buf,1,1&lt;&lt;15,stdin),S==T)?0:*S++;&#125;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">int</span> <span class=\"title\">read</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> x=<span class=\"number\">0</span>,f=<span class=\"number\">1</span>;<span class=\"type\">char</span> ch;ch=<span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(ch&lt;<span class=\"string\">&#x27;0&#x27;</span>||ch&gt;<span class=\"string\">&#x27;9&#x27;</span>)&#123;<span class=\"keyword\">if</span>(ch==<span class=\"string\">&#x27;-&#x27;</span>) f=<span class=\"number\">0</span>;ch=<span class=\"built_in\">getchar</span>();&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(ch&gt;=<span class=\"string\">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class=\"string\">&#x27;9&#x27;</span>)&#123;x=(x&lt;&lt;<span class=\"number\">1</span>)+(x&lt;&lt;<span class=\"number\">3</span>)+(ch&amp;<span class=\"number\">15</span>);ch=<span class=\"built_in\">getchar</span>();&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(f)<span class=\"keyword\">return</span> x;<span class=\"keyword\">else</span> <span class=\"keyword\">return</span>-x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">1e5</span>+<span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> a[N],n,m;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Splay</span>&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;Spl;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">write</span><span class=\"params\">(<span class=\"type\">int</span> rt)</span></span>&#123;</span><br><span class=\"line\">  \tSpl.<span class=\"built_in\">pushdown</span>(rt);</span><br><span class=\"line\">  \t<span class=\"keyword\">if</span>(Spl.lson)<span class=\"built_in\">write</span>(Spl.lson);</span><br><span class=\"line\">  \t<span class=\"keyword\">if</span>(Spl.val[rt]&gt;<span class=\"number\">1</span>&amp;&amp;Spl.val[rt]&lt;n+<span class=\"number\">2</span>)</span><br><span class=\"line\">  \t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d &quot;</span>,Spl.val[rt]<span class=\"number\">-1</span>);</span><br><span class=\"line\">  \t<span class=\"keyword\">if</span>(Spl.rson)<span class=\"built_in\">write</span>(Spl.rson); </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tn=<span class=\"built_in\">read</span>();m=<span class=\"built_in\">read</span>();</span><br><span class=\"line\"> \t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n+<span class=\"number\">2</span>;i++)a[i]=i;</span><br><span class=\"line\"> \tSpl.<span class=\"built_in\">Build</span>(Spl.root,<span class=\"number\">1</span>,n+<span class=\"number\">2</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\"> \t<span class=\"keyword\">while</span>(m--)&#123;</span><br><span class=\"line\">    \t<span class=\"type\">int</span> l=<span class=\"built_in\">read</span>(),r=<span class=\"built_in\">read</span>();</span><br><span class=\"line\">  \t\tSpl.<span class=\"built_in\">revse</span>(l,r);</span><br><span class=\"line\">  \t&#125;</span><br><span class=\"line\">  \t<span class=\"built_in\">write</span>(Spl.root);</span><br><span class=\"line\">  \t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>$\\ \\ \\ \\ \\ \\ \\ \\,$关于Splay操作的复习笔记：</p>\n<p>$\\ \\ \\ \\ \\ \\ \\ \\,$依然的，只记录模板，不讲原理，关于Splay出门左拐百度。</p>","more":"<h2 id=\"结构\"><a href=\"#结构\" class=\"headerlink\" title=\"结构\"></a>结构</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Splay</span>&#123;</span><br><span class=\"line\">\t<span class=\"meta\">#<span class=\"keyword\">define</span> lson son[0][rt]</span></span><br><span class=\"line\">\t<span class=\"meta\">#<span class=\"keyword\">define</span> rson son[1][rt]</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> root,cnt;</span><br><span class=\"line\">\t<span class=\"type\">int</span> son[<span class=\"number\">2</span>][N],sum[N],val[N],size[N],fa[N];</span><br><span class=\"line\">\t<span class=\"type\">int</span> lazy[N];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol>\n<li>$\\tt root$ ：根；</li>\n<li>$\\tt cnt$ ：下标大小；</li>\n<li>$\\tt son[0/1][]$ ：左右儿子；</li>\n<li>$\\tt sum[]$ ：子树大小；</li>\n<li>$\\tt val[]$ ：节点权值；</li>\n<li>$\\tt size[]$ ：节点大小；</li>\n<li>$\\tt fa[]$ ：节点父亲；</li>\n<li>$\\tt lazy[]$ ：下传标记。</li>\n</ol>\n<h2 id=\"基本操作\"><a href=\"#基本操作\" class=\"headerlink\" title=\"基本操作\"></a>基本操作</h2><ul>\n<li>标记上传 ($pushup$)<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">pushup</span><span class=\"params\">(<span class=\"type\">int</span> rt)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(!rt)<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\tsum[rt]=sum[lson]+sum[rson]+size[rt];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>标记下传 ($pushdown$)，根据情况会不一样<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">pushdown</span><span class=\"params\">(<span class=\"type\">int</span> rt)</span></span>&#123;</span><br><span class=\"line\">  \t<span class=\"keyword\">if</span>(!lazy[rt])<span class=\"keyword\">return</span>;</span><br><span class=\"line\">  \tlazy[lson]^=<span class=\"number\">1</span>;lazy[rson]^=<span class=\"number\">1</span>;</span><br><span class=\"line\">  \tlazy[rt]=<span class=\"number\">0</span>;</span><br><span class=\"line\">  \t<span class=\"built_in\">swap</span>(lson,rson);</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure></li>\n<li>左旋+右旋 ($rotate$)<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">rotate</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span>&#123;</span><br><span class=\"line\">  \t<span class=\"type\">int</span> y=fa[x];<span class=\"type\">int</span> z=fa[y];</span><br><span class=\"line\">  \t<span class=\"type\">int</span> k=son[<span class=\"number\">1</span>][y]==x;</span><br><span class=\"line\">  \tson[son[<span class=\"number\">1</span>][z]==y][z]=x;</span><br><span class=\"line\">  \tfa[x]=z;</span><br><span class=\"line\">  \tson[k][y]=son[k^<span class=\"number\">1</span>][x];</span><br><span class=\"line\">  \tfa[son[k^<span class=\"number\">1</span>][x]]=y;</span><br><span class=\"line\">  \tson[k^<span class=\"number\">1</span>][x]=y;</span><br><span class=\"line\">  \tfa[y]=x;</span><br><span class=\"line\">\t<span class=\"built_in\">pushup</span>(y);<span class=\"built_in\">pushup</span>(x);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>将$x$旋转到$goal$下 ($splay$)<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">splay</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> goal)</span></span>&#123;</span><br><span class=\"line\">  \t<span class=\"keyword\">while</span>(fa[x]!=goal)&#123;</span><br><span class=\"line\">  \t\t<span class=\"type\">int</span> y=fa[x];<span class=\"type\">int</span> z=fa[y];</span><br><span class=\"line\">  \t\t<span class=\"keyword\">if</span>(z!=goal)</span><br><span class=\"line\">  \t\t(son[<span class=\"number\">1</span>][z]==y)^(son[<span class=\"number\">1</span>][y]==x)?<span class=\"built_in\">rotate</span>(x):<span class=\"built_in\">rotate</span>(y);</span><br><span class=\"line\">  \t\t<span class=\"built_in\">rotate</span>(x);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(goal==<span class=\"number\">0</span>)root=x;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"修改\"><a href=\"#修改\" class=\"headerlink\" title=\"修改\"></a>修改</h2><ul>\n<li>新建节点 ($newnode$)<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">newnode</span><span class=\"params\">(<span class=\"type\">int</span> f,<span class=\"type\">int</span> v)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> rt=++cnt;</span><br><span class=\"line\">    size[rt]=<span class=\"number\">1</span>;sum[rt]=<span class=\"number\">1</span>;val[rt]=v;</span><br><span class=\"line\">    fa[rt]=f;lson=rson=<span class=\"number\">0</span>;lazy[rt]=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> rt;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>清空节点 ($clean$)<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">clean</span><span class=\"params\">(<span class=\"type\">int</span> rt)</span></span>&#123;</span><br><span class=\"line\">    lson=rson=<span class=\"number\">0</span>;fa[rt]=<span class=\"number\">0</span>;</span><br><span class=\"line\">    val[rt]=<span class=\"number\">0</span>;sum[rt]=size[rt]=<span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>建立 ($Build$)<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Build</span><span class=\"params\">(<span class=\"type\">int</span> &amp;rt,<span class=\"type\">int</span> L,<span class=\"type\">int</span> R,<span class=\"type\">int</span> f)</span></span>&#123;</span><br><span class=\"line\">  \t<span class=\"keyword\">if</span>(L&gt;R)<span class=\"keyword\">return</span>;</span><br><span class=\"line\">  \t<span class=\"type\">int</span> mid=(L+R)&gt;&gt;<span class=\"number\">1</span>;</span><br><span class=\"line\">  \trt=<span class=\"built_in\">newnode</span>(f,a[mid]);</span><br><span class=\"line\">  \t<span class=\"built_in\">Build</span>(lson,L,mid<span class=\"number\">-1</span>,rt);</span><br><span class=\"line\">  \t<span class=\"built_in\">Build</span>(rson,mid+<span class=\"number\">1</span>,R,rt);</span><br><span class=\"line\">  \t<span class=\"built_in\">pushup</span>(rt);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>插入($Insert$)<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Insert</span><span class=\"params\">(<span class=\"type\">int</span> v)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!root)&#123;root=<span class=\"built_in\">newnode</span>(<span class=\"number\">0</span>,v);<span class=\"keyword\">return</span>;&#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> now=root,rt=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"built_in\">pushdown</span>(now);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(val[now]==v)&#123;</span><br><span class=\"line\">  \t\t\t++size[now];</span><br><span class=\"line\">        <span class=\"built_in\">pushup</span>(now);<span class=\"built_in\">pushup</span>(rt);</span><br><span class=\"line\">        <span class=\"built_in\">splay</span>(now,<span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      rt=now;</span><br><span class=\"line\">      val[rt]&lt;v?now=rson:now=lson;</span><br><span class=\"line\">    \t<span class=\"built_in\">pushdown</span>(now);</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(!now)&#123;</span><br><span class=\"line\">        now=<span class=\"built_in\">newnode</span>(rt,v);</span><br><span class=\"line\">  \t    val[rt]&lt;v?rson=now:lson=now;</span><br><span class=\"line\">        <span class=\"built_in\">pushup</span>(rt);<span class=\"built_in\">splay</span>(now,<span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>删除节点($delete_pos$)<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">delete_pos</span><span class=\"params\">(<span class=\"type\">int</span> rt)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">splay</span>(rt,<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(size[rt]&gt;<span class=\"number\">1</span>)&#123;--size[rt];<span class=\"keyword\">return</span>;&#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> now;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!lson||!rson)&#123;</span><br><span class=\"line\">      now=rson+lson;<span class=\"built_in\">pushdown</span>(now);</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(!now)&#123;<span class=\"built_in\">clean</span>(rt);root=<span class=\"number\">0</span>;<span class=\"keyword\">return</span>;&#125;</span><br><span class=\"line\">      <span class=\"built_in\">clean</span>(rt);root=now;fa[now]=<span class=\"number\">0</span>;</span><br><span class=\"line\">      <span class=\"built_in\">pushup</span>(now);<span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    now=<span class=\"built_in\">pre_pos</span>(rt);</span><br><span class=\"line\">    <span class=\"built_in\">pushdown</span>(now);</span><br><span class=\"line\">    <span class=\"built_in\">splay</span>(now,rt);</span><br><span class=\"line\">    fa[now]=<span class=\"number\">0</span>;son[<span class=\"number\">1</span>][now]=rson;fa[rson]=now;</span><br><span class=\"line\">    root=now;<span class=\"built_in\">clean</span>(rt);</span><br><span class=\"line\">    <span class=\"built_in\">pushup</span>(rson);<span class=\"built_in\">pushup</span>(now);\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>删除($Delete$)<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Delete</span><span class=\"params\">(<span class=\"type\">int</span> v)</span></span>&#123;</span><br><span class=\"line\">    v=<span class=\"built_in\">QueryRank_pos</span>(v);</span><br><span class=\"line\">    <span class=\"built_in\">pushdown</span>(v);</span><br><span class=\"line\">    <span class=\"built_in\">delete_pos</span>(v);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>删除第k($Delete_QueryRank$)<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Delete_QueryRank</span><span class=\"params\">(<span class=\"type\">int</span> v)</span></span>&#123;</span><br><span class=\"line\">    v=<span class=\"built_in\">Rank_pos</span>(v);</span><br><span class=\"line\">    <span class=\"built_in\">pushdown</span>(v);</span><br><span class=\"line\">    <span class=\"built_in\">delete_pos</span>(v);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>区间修改（翻转）($revse$)<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">revse</span><span class=\"params\">(<span class=\"type\">int</span> a,<span class=\"type\">int</span> b)</span></span>&#123;</span><br><span class=\"line\">\ta=<span class=\"built_in\">find</span>(a);</span><br><span class=\"line\">  \tb=<span class=\"built_in\">find</span>(b+<span class=\"number\">2</span>);</span><br><span class=\"line\">  \t<span class=\"built_in\">splay</span>(a,<span class=\"number\">0</span>);<span class=\"built_in\">splay</span>(b,a);</span><br><span class=\"line\">  \tlazy[son[<span class=\"number\">0</span>][son[<span class=\"number\">1</span>][root]]]^=<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"询问\"><a href=\"#询问\" class=\"headerlink\" title=\"询问\"></a>询问</h2><ul>\n<li>查找某个值的节点编号($QueryRank_pos$)<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">QueryRank_pos</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> rt=root;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">    \t<span class=\"built_in\">pushdown</span>(rt);</span><br><span class=\"line\">    \t<span class=\"keyword\">if</span>(val[rt]==x)&#123;<span class=\"built_in\">splay</span>(rt,<span class=\"number\">0</span>);<span class=\"keyword\">return</span> rt;&#125; </span><br><span class=\"line\">    \t<span class=\"keyword\">if</span>(val[rt]&lt;x)rt=rson;</span><br><span class=\"line\">    \t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(val[rt]&gt;x)rt=lson;</span><br><span class=\"line\">    &#125;\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>查找某个排名的节点编号($Rank_pos$)<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">Rank_pos</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span>&#123;</span><br><span class=\"line\">  <span class=\"type\">int</span> rt=root;</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">  \t<span class=\"built_in\">pushdown</span>(rt);</span><br><span class=\"line\">  \t<span class=\"keyword\">if</span>(sum[lson]&gt;=x)&#123;rt=lson;<span class=\"keyword\">continue</span>;&#125;</span><br><span class=\"line\">  \tx-=sum[lson];</span><br><span class=\"line\">    \t<span class=\"keyword\">if</span>(size[rt]&gt;=x)&#123;<span class=\"built_in\">splay</span>(rt,<span class=\"number\">0</span>);<span class=\"keyword\">return</span> val[rt];&#125;</span><br><span class=\"line\">    \tx-=size[rt];</span><br><span class=\"line\">    \trt=rson;</span><br><span class=\"line\">  &#125;\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>查找排名第k的值($QueryRank$)</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">QueryRank</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> rt=root;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">    \t<span class=\"built_in\">pushdown</span>(rt);</span><br><span class=\"line\">    \t<span class=\"keyword\">if</span>(sum[lson]&gt;=x)&#123;rt=lson;<span class=\"keyword\">continue</span>;&#125;</span><br><span class=\"line\">    \tx-=sum[lson];</span><br><span class=\"line\">    \t<span class=\"keyword\">if</span>(size[rt]&gt;=x)&#123;<span class=\"built_in\">splay</span>(rt,<span class=\"number\">0</span>);<span class=\"keyword\">return</span> val[rt];&#125;</span><br><span class=\"line\">    \tx-=size[rt];</span><br><span class=\"line\">    \trt=rson;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查找某个值的排名($Rank$)</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">Rank</span><span class=\"params\">(<span class=\"type\">int</span> num)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> rt=root,ans=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">    \t<span class=\"built_in\">pushdown</span>(rt);</span><br><span class=\"line\">    \t<span class=\"keyword\">if</span>(val[rt]==num)&#123;ans=ans+sum[lson]+<span class=\"number\">1</span>;<span class=\"built_in\">splay</span>(rt,<span class=\"number\">0</span>);<span class=\"keyword\">return</span> ans;&#125;</span><br><span class=\"line\">    \t<span class=\"keyword\">if</span>(val[rt]&lt;num)ans+=sum[lson]+size[rt],rt=rson;</span><br><span class=\"line\">     \t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(val[rt]&gt;num)rt=lson;</span><br><span class=\"line\">  \t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>集合内前驱的节点编号($pre_pos$)<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">pre_pos</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">splay</span>(x,<span class=\"number\">0</span>);<span class=\"type\">int</span> rt;</span><br><span class=\"line\">    <span class=\"built_in\">pushdown</span>(x);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!(rt=son[<span class=\"number\">0</span>][x]))<span class=\"keyword\">return</span> val[x];</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(rson)<span class=\"built_in\">pushdown</span>(rt),rt=rson;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> rt;\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>集合内后继的节点编号($nex_pos$)<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">nex_pos</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">splay</span>(x,<span class=\"number\">0</span>);<span class=\"type\">int</span> rt;</span><br><span class=\"line\">    <span class=\"built_in\">pushdown</span>(x);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!(rt=son[<span class=\"number\">1</span>][x]))<span class=\"keyword\">return</span> val[x];</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(lson)<span class=\"built_in\">pushdown</span>(rt),rt=lson;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> rt;\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>集合内前驱的值($pre$)<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">pre</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">splay</span>(x,<span class=\"number\">0</span>);<span class=\"type\">int</span> rt;</span><br><span class=\"line\">    <span class=\"built_in\">pushdown</span>(x);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!(rt=son[<span class=\"number\">0</span>][x]))<span class=\"keyword\">return</span> val[x];</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(rson)<span class=\"built_in\">pushdown</span>(rt),rt=rson;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> val[rt];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>集合内后继的值($nex$)<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">nex</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">splay</span>(x,<span class=\"number\">0</span>);<span class=\"type\">int</span> rt;</span><br><span class=\"line\">    <span class=\"built_in\">pushdown</span>(x);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!(rt=son[<span class=\"number\">1</span>][x]))<span class=\"keyword\">return</span> val[x];</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(lson)<span class=\"built_in\">pushdown</span>(rt),rt=lson;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> val[rt];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>前驱($Numpre$)<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">Numpre</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">Insert</span>(x);</span><br><span class=\"line\">    <span class=\"type\">int</span> y=x;x=<span class=\"built_in\">QueryRank_pos</span>(x);</span><br><span class=\"line\">    <span class=\"type\">int</span> ls=<span class=\"built_in\">pre</span>(x);</span><br><span class=\"line\">    <span class=\"built_in\">Delete</span>(y);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ls;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>后继($Numnex$)<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">Numnex</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">Insert</span>(x);</span><br><span class=\"line\">    <span class=\"type\">int</span> y=x;x=<span class=\"built_in\">QueryRank_pos</span>(x);</span><br><span class=\"line\">    <span class=\"type\">int</span> ls=<span class=\"built_in\">nex</span>(x);</span><br><span class=\"line\">    <span class=\"built_in\">Delete</span>(y);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ls;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>查找某个值的节点编号($find$)，不改变结构<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">find</span><span class=\"params\">(<span class=\"type\">int</span> k)</span></span>&#123;</span><br><span class=\"line\">  \t<span class=\"type\">int</span> rt=root;</span><br><span class=\"line\">  \t<span class=\"keyword\">while</span>(<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">  \t\t<span class=\"built_in\">pushdown</span>(rt);</span><br><span class=\"line\">  \t\t<span class=\"keyword\">if</span>(sum[lson]&gt;=k)rt=lson;</span><br><span class=\"line\">  \t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(sum[lson]+<span class=\"number\">1</span>==k)<span class=\"keyword\">return</span> rt;</span><br><span class=\"line\">  \t\t<span class=\"keyword\">else</span> k-=sum[lson]+<span class=\"number\">1</span>,rt=rson;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"完整模板\"><a href=\"#完整模板\" class=\"headerlink\" title=\"完整模板\"></a>完整模板</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">1e5</span>+<span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> a[N],n,m;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Splay</span>&#123;</span><br><span class=\"line\">\t<span class=\"meta\">#<span class=\"keyword\">define</span> lson son[0][rt]</span></span><br><span class=\"line\">\t<span class=\"meta\">#<span class=\"keyword\">define</span> rson son[1][rt]</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> root,cnt;</span><br><span class=\"line\">\t<span class=\"type\">int</span> son[<span class=\"number\">2</span>][N],sum[N],val[N],size[N],fa[N];</span><br><span class=\"line\">  \t<span class=\"type\">bool</span> lazy[N];</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">pushdown</span><span class=\"params\">(<span class=\"type\">int</span> rt)</span></span>&#123;</span><br><span class=\"line\">  \t\t<span class=\"keyword\">if</span>(!lazy[rt])<span class=\"keyword\">return</span>;</span><br><span class=\"line\">  \t\tlazy[lson]^=<span class=\"number\">1</span>;lazy[rson]^=<span class=\"number\">1</span>;</span><br><span class=\"line\">  \t\tlazy[rt]=<span class=\"number\">0</span>;</span><br><span class=\"line\">  \t\t<span class=\"built_in\">swap</span>(lson,rson);</span><br><span class=\"line\">  \t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">pushup</span><span class=\"params\">(<span class=\"type\">int</span> rt)</span></span>&#123;</span><br><span class=\"line\">\t  \t<span class=\"keyword\">if</span>(!rt)<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t  \tsum[rt]=sum[lson]+sum[rson]+size[rt];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">  \t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">rotate</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span>&#123;</span><br><span class=\"line\">\t  \t<span class=\"type\">int</span> y=fa[x];<span class=\"type\">int</span> z=fa[y];</span><br><span class=\"line\">\t  \t<span class=\"type\">int</span> k=son[<span class=\"number\">1</span>][y]==x;</span><br><span class=\"line\">\t  \tson[son[<span class=\"number\">1</span>][z]==y][z]=x;</span><br><span class=\"line\">\t  \tfa[x]=z;</span><br><span class=\"line\">\t  \tson[k][y]=son[k^<span class=\"number\">1</span>][x];</span><br><span class=\"line\">\t  \tfa[son[k^<span class=\"number\">1</span>][x]]=y;</span><br><span class=\"line\">\t  \tson[k^<span class=\"number\">1</span>][x]=y;</span><br><span class=\"line\">\t  \tfa[y]=x;</span><br><span class=\"line\">\t  \t<span class=\"built_in\">pushup</span>(y);<span class=\"built_in\">pushup</span>(x);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">  \t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">splay</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> goal)</span></span>&#123;</span><br><span class=\"line\">\t  \t<span class=\"keyword\">while</span>(fa[x]!=goal)&#123;</span><br><span class=\"line\">\t  \t\t<span class=\"type\">int</span> y=fa[x];<span class=\"type\">int</span> z=fa[y];</span><br><span class=\"line\">\t  \t\t<span class=\"keyword\">if</span>(z!=goal)</span><br><span class=\"line\">\t  \t\t(son[<span class=\"number\">1</span>][z]==y)^(son[<span class=\"number\">1</span>][y]==x)?<span class=\"built_in\">rotate</span>(x):<span class=\"built_in\">rotate</span>(y);</span><br><span class=\"line\">\t  \t\t<span class=\"built_in\">rotate</span>(x);</span><br><span class=\"line\">\t    &#125;</span><br><span class=\"line\">\t    <span class=\"keyword\">if</span>(goal==<span class=\"number\">0</span>)root=x;</span><br><span class=\"line\">  \t&#125;</span><br><span class=\"line\">  \t<span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">newnode</span><span class=\"params\">(<span class=\"type\">int</span> f,<span class=\"type\">int</span> v)</span></span>&#123;</span><br><span class=\"line\">\t    <span class=\"type\">int</span> rt=++cnt;</span><br><span class=\"line\">\t    size[rt]=<span class=\"number\">1</span>;sum[rt]=<span class=\"number\">1</span>;val[rt]=v;</span><br><span class=\"line\">\t    fa[rt]=f;lson=rson=<span class=\"number\">0</span>;lazy[rt]=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t    <span class=\"keyword\">return</span> rt;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">clean</span><span class=\"params\">(<span class=\"type\">int</span> rt)</span></span>&#123;</span><br><span class=\"line\">\t    lson=rson=<span class=\"number\">0</span>;fa[rt]=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t    val[rt]=<span class=\"number\">0</span>;sum[rt]=size[rt]=<span class=\"number\">0</span>;</span><br><span class=\"line\">  \t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Build</span><span class=\"params\">(<span class=\"type\">int</span> &amp;rt,<span class=\"type\">int</span> L,<span class=\"type\">int</span> R,<span class=\"type\">int</span> f)</span></span>&#123;</span><br><span class=\"line\">\t  \t<span class=\"keyword\">if</span>(L&gt;R)<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t  \t<span class=\"type\">int</span> mid=(L+R)&gt;&gt;<span class=\"number\">1</span>;</span><br><span class=\"line\">\t  \trt=<span class=\"built_in\">newnode</span>(f,a[mid]);</span><br><span class=\"line\">\t  \t<span class=\"built_in\">Build</span>(lson,L,mid<span class=\"number\">-1</span>,rt);</span><br><span class=\"line\">\t  \t<span class=\"built_in\">Build</span>(rson,mid+<span class=\"number\">1</span>,R,rt);</span><br><span class=\"line\">\t  \t<span class=\"built_in\">pushup</span>(rt);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">  \t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Insert</span><span class=\"params\">(<span class=\"type\">int</span> v)</span></span>&#123;</span><br><span class=\"line\">    \t<span class=\"keyword\">if</span>(!root)&#123;root=<span class=\"built_in\">newnode</span>(<span class=\"number\">0</span>,v);<span class=\"keyword\">return</span>;&#125;</span><br><span class=\"line\">    \t<span class=\"type\">int</span> now=root,rt=<span class=\"number\">0</span>;</span><br><span class=\"line\">    \t<span class=\"built_in\">pushdown</span>(now);</span><br><span class=\"line\">   \t\t<span class=\"keyword\">while</span>(<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">      \t\t<span class=\"keyword\">if</span>(val[now]==v)&#123;</span><br><span class=\"line\">\t  \t\t\t++size[now];</span><br><span class=\"line\">\t        \t<span class=\"built_in\">pushup</span>(now);<span class=\"built_in\">pushup</span>(rt);</span><br><span class=\"line\">\t        \t<span class=\"built_in\">splay</span>(now,<span class=\"number\">0</span>);</span><br><span class=\"line\">\t        \t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t      \t&#125;</span><br><span class=\"line\">\t      \trt=now;</span><br><span class=\"line\">\t      \tval[rt]&lt;v?now=rson:now=lson;</span><br><span class=\"line\">\t    \t<span class=\"built_in\">pushdown</span>(now);</span><br><span class=\"line\">\t      \t<span class=\"keyword\">if</span>(!now)&#123;</span><br><span class=\"line\">\t        \tnow=<span class=\"built_in\">newnode</span>(rt,v);</span><br><span class=\"line\">\t  \t    \tval[rt]&lt;v?rson=now:lson=now;</span><br><span class=\"line\">\t        \t<span class=\"built_in\">pushup</span>(rt);<span class=\"built_in\">splay</span>(now,<span class=\"number\">0</span>);</span><br><span class=\"line\">\t        \t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t      \t&#125;</span><br><span class=\"line\">   \t \t&#125;</span><br><span class=\"line\">  \t&#125;</span><br><span class=\"line\">  \t<span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">QueryRank_pos</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span>&#123;</span><br><span class=\"line\">    \t<span class=\"type\">int</span> rt=root;</span><br><span class=\"line\">    \t<span class=\"keyword\">while</span>(<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">    \t\t<span class=\"built_in\">pushdown</span>(rt);</span><br><span class=\"line\">      \t\t<span class=\"keyword\">if</span>(val[rt]==x)&#123;<span class=\"built_in\">splay</span>(rt,<span class=\"number\">0</span>);<span class=\"keyword\">return</span> rt;&#125; </span><br><span class=\"line\">      \t\t<span class=\"keyword\">if</span>(val[rt]&lt;x)rt=rson;</span><br><span class=\"line\">      \t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(val[rt]&gt;x)rt=lson;</span><br><span class=\"line\">    \t&#125;\t</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">Rank_pos</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> rt=root;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">    \t<span class=\"built_in\">pushdown</span>(rt);</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(sum[lson]&gt;=x)&#123;rt=lson;<span class=\"keyword\">continue</span>;&#125;</span><br><span class=\"line\">      x-=sum[lson];</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(size[rt]&gt;=x)&#123;<span class=\"built_in\">splay</span>(rt,<span class=\"number\">0</span>);<span class=\"keyword\">return</span> val[rt];&#125;</span><br><span class=\"line\">      x-=size[rt];</span><br><span class=\"line\">      rt=rson;</span><br><span class=\"line\">    &#125;\t</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  \t<span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">QueryRank</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span>&#123;</span><br><span class=\"line\">    \t<span class=\"type\">int</span> rt=root;</span><br><span class=\"line\">    \t<span class=\"keyword\">while</span>(<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">    \t\t<span class=\"built_in\">pushdown</span>(rt);</span><br><span class=\"line\">     \t\t<span class=\"keyword\">if</span>(sum[lson]&gt;=x)&#123;rt=lson;<span class=\"keyword\">continue</span>;&#125;</span><br><span class=\"line\">     \t\tx-=sum[lson];</span><br><span class=\"line\">      \t\t<span class=\"keyword\">if</span>(size[rt]&gt;=x)&#123;<span class=\"built_in\">splay</span>(rt,<span class=\"number\">0</span>);<span class=\"keyword\">return</span> val[rt];&#125;</span><br><span class=\"line\">      \t\tx-=size[rt];</span><br><span class=\"line\">      \t\trt=rson;</span><br><span class=\"line\">    \t&#125;</span><br><span class=\"line\">  \t&#125;</span><br><span class=\"line\">  \t<span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">Rank</span><span class=\"params\">(<span class=\"type\">int</span> num)</span></span>&#123;</span><br><span class=\"line\">    \t<span class=\"type\">int</span> rt=root,ans=<span class=\"number\">0</span>;</span><br><span class=\"line\">    \t<span class=\"keyword\">while</span>(<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">    \t\t<span class=\"built_in\">pushdown</span>(rt);</span><br><span class=\"line\">      \t\t<span class=\"keyword\">if</span>(val[rt]==num)&#123;ans=ans+sum[lson]+<span class=\"number\">1</span>;<span class=\"built_in\">splay</span>(rt,<span class=\"number\">0</span>);<span class=\"keyword\">return</span> ans;&#125;</span><br><span class=\"line\">     \t\t<span class=\"keyword\">if</span>(val[rt]&lt;num)ans+=sum[lson]+size[rt],rt=rson;</span><br><span class=\"line\">      \t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(val[rt]&gt;num)rt=lson;</span><br><span class=\"line\">    \t&#125;</span><br><span class=\"line\">  \t&#125;</span><br><span class=\"line\">  \t<span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">pre_pos</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span>&#123;</span><br><span class=\"line\">    \t<span class=\"built_in\">splay</span>(x,<span class=\"number\">0</span>);<span class=\"type\">int</span> rt;</span><br><span class=\"line\">    \t<span class=\"built_in\">pushdown</span>(x);</span><br><span class=\"line\">    \t<span class=\"keyword\">if</span>(!(rt=son[<span class=\"number\">0</span>][x]))<span class=\"keyword\">return</span> val[x];</span><br><span class=\"line\">    \t<span class=\"keyword\">while</span>(rson)<span class=\"built_in\">pushdown</span>(rt),rt=rson;</span><br><span class=\"line\">    \t<span class=\"keyword\">return</span> rt;\t</span><br><span class=\"line\">  \t&#125;</span><br><span class=\"line\">  \t<span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">nex_pos</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span>&#123;</span><br><span class=\"line\">    \t<span class=\"built_in\">splay</span>(x,<span class=\"number\">0</span>);<span class=\"type\">int</span> rt;</span><br><span class=\"line\">    \t<span class=\"built_in\">pushdown</span>(x);</span><br><span class=\"line\">    \t<span class=\"keyword\">if</span>(!(rt=son[<span class=\"number\">1</span>][x]))<span class=\"keyword\">return</span> val[x];</span><br><span class=\"line\">    \t<span class=\"keyword\">while</span>(lson)<span class=\"built_in\">pushdown</span>(rt),rt=lson;</span><br><span class=\"line\">    \t<span class=\"keyword\">return</span> rt;\t</span><br><span class=\"line\">  \t&#125;</span><br><span class=\"line\">  \t<span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">pre</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span>&#123;</span><br><span class=\"line\">    \t<span class=\"built_in\">splay</span>(x,<span class=\"number\">0</span>);<span class=\"type\">int</span> rt;</span><br><span class=\"line\">    \t<span class=\"built_in\">pushdown</span>(x);</span><br><span class=\"line\">    \t<span class=\"keyword\">if</span>(!(rt=son[<span class=\"number\">0</span>][x]))<span class=\"keyword\">return</span> val[x];</span><br><span class=\"line\">    \t<span class=\"keyword\">while</span>(rson)<span class=\"built_in\">pushdown</span>(rt),rt=rson;</span><br><span class=\"line\">    \t<span class=\"keyword\">return</span> val[rt];</span><br><span class=\"line\">  \t&#125;</span><br><span class=\"line\">  \t<span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">nex</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span>&#123;</span><br><span class=\"line\">    \t<span class=\"built_in\">splay</span>(x,<span class=\"number\">0</span>);<span class=\"type\">int</span> rt;</span><br><span class=\"line\">    \t<span class=\"built_in\">pushdown</span>(x);</span><br><span class=\"line\">    \t<span class=\"keyword\">if</span>(!(rt=son[<span class=\"number\">1</span>][x]))<span class=\"keyword\">return</span> val[x];</span><br><span class=\"line\">    \t<span class=\"keyword\">while</span>(lson)<span class=\"built_in\">pushdown</span>(rt),rt=lson;</span><br><span class=\"line\">    \t<span class=\"keyword\">return</span> val[rt];</span><br><span class=\"line\">  \t&#125;</span><br><span class=\"line\">  \t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">delete_pos</span><span class=\"params\">(<span class=\"type\">int</span> rt)</span></span>&#123;</span><br><span class=\"line\">    \t<span class=\"built_in\">splay</span>(rt,<span class=\"number\">0</span>);</span><br><span class=\"line\">    \t<span class=\"keyword\">if</span>(size[rt]&gt;<span class=\"number\">1</span>)&#123;--size[rt];<span class=\"keyword\">return</span>;&#125;</span><br><span class=\"line\">    \t<span class=\"type\">int</span> now;</span><br><span class=\"line\">    \t<span class=\"keyword\">if</span>(!lson||!rson)&#123;</span><br><span class=\"line\">      \t\tnow=rson+lson;<span class=\"built_in\">pushdown</span>(now);</span><br><span class=\"line\">      \t\t<span class=\"keyword\">if</span>(!now)&#123;<span class=\"built_in\">clean</span>(rt);root=<span class=\"number\">0</span>;<span class=\"keyword\">return</span>;&#125;</span><br><span class=\"line\">      \t\t<span class=\"built_in\">clean</span>(rt);root=now;fa[now]=<span class=\"number\">0</span>;</span><br><span class=\"line\">      \t\t<span class=\"built_in\">pushup</span>(now);<span class=\"keyword\">return</span>;</span><br><span class=\"line\">    \t&#125;</span><br><span class=\"line\">    \tnow=<span class=\"built_in\">pre_pos</span>(rt);</span><br><span class=\"line\">    \t<span class=\"built_in\">pushdown</span>(now);</span><br><span class=\"line\">    \t<span class=\"built_in\">splay</span>(now,rt);</span><br><span class=\"line\">    \tfa[now]=<span class=\"number\">0</span>;son[<span class=\"number\">1</span>][now]=rson;fa[rson]=now;</span><br><span class=\"line\">    \troot=now;<span class=\"built_in\">clean</span>(rt);</span><br><span class=\"line\">    \t<span class=\"built_in\">pushup</span>(rson);<span class=\"built_in\">pushup</span>(now);\t</span><br><span class=\"line\">  \t&#125;</span><br><span class=\"line\">  \t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Delete</span><span class=\"params\">(<span class=\"type\">int</span> v)</span></span>&#123;</span><br><span class=\"line\">    \tv=<span class=\"built_in\">QueryRank_pos</span>(v);</span><br><span class=\"line\">    \t<span class=\"built_in\">pushdown</span>(v);</span><br><span class=\"line\">    \t<span class=\"built_in\">delete_pos</span>(v);</span><br><span class=\"line\">  \t&#125;</span><br><span class=\"line\">  \t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Delete_QueryRank</span><span class=\"params\">(<span class=\"type\">int</span> v)</span></span>&#123;</span><br><span class=\"line\">    \tv=<span class=\"built_in\">Rank_pos</span>(v);</span><br><span class=\"line\">    \t<span class=\"built_in\">pushdown</span>(v);</span><br><span class=\"line\">    \t<span class=\"built_in\">delete_pos</span>(v);</span><br><span class=\"line\">  \t&#125;</span><br><span class=\"line\">  \t<span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">Numpre</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span>&#123;</span><br><span class=\"line\">    \t<span class=\"built_in\">Insert</span>(x);</span><br><span class=\"line\">    \t<span class=\"type\">int</span> y=x;x=<span class=\"built_in\">QueryRank_pos</span>(x);</span><br><span class=\"line\">    \t<span class=\"type\">int</span> ls=<span class=\"built_in\">pre</span>(x);</span><br><span class=\"line\">    \t<span class=\"built_in\">Delete</span>(y);</span><br><span class=\"line\">    \t<span class=\"keyword\">return</span> ls;</span><br><span class=\"line\">  \t&#125;</span><br><span class=\"line\">  \t<span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">Numnex</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span>&#123;</span><br><span class=\"line\">    \t<span class=\"built_in\">Insert</span>(x);</span><br><span class=\"line\">    \t<span class=\"type\">int</span> y=x;x=<span class=\"built_in\">QueryRank_pos</span>(x);</span><br><span class=\"line\">    \t<span class=\"type\">int</span> ls=<span class=\"built_in\">nex</span>(x);</span><br><span class=\"line\">    \t<span class=\"built_in\">Delete</span>(y);</span><br><span class=\"line\">    \t<span class=\"keyword\">return</span> ls;</span><br><span class=\"line\">  \t&#125;</span><br><span class=\"line\">  \t<span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">find</span><span class=\"params\">(<span class=\"type\">int</span> k)</span></span>&#123;</span><br><span class=\"line\">  \t\t<span class=\"type\">int</span> rt=root;</span><br><span class=\"line\">  \t\t<span class=\"keyword\">while</span>(<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">  \t\t\t<span class=\"built_in\">pushdown</span>(rt);</span><br><span class=\"line\">  \t\t\t<span class=\"keyword\">if</span>(sum[lson]&gt;=k)rt=lson;</span><br><span class=\"line\">  \t\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(sum[lson]+<span class=\"number\">1</span>==k)<span class=\"keyword\">return</span> rt;</span><br><span class=\"line\">  \t\t\t<span class=\"keyword\">else</span> k-=sum[lson]+<span class=\"number\">1</span>,rt=rson;</span><br><span class=\"line\">    \t&#125;</span><br><span class=\"line\">  \t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">revse</span><span class=\"params\">(<span class=\"type\">int</span> a,<span class=\"type\">int</span> b)</span></span>&#123;</span><br><span class=\"line\">\t\ta=<span class=\"built_in\">find</span>(a);</span><br><span class=\"line\">  \t\tb=<span class=\"built_in\">find</span>(b+<span class=\"number\">2</span>);</span><br><span class=\"line\">  \t\t<span class=\"built_in\">splay</span>(a,<span class=\"number\">0</span>);<span class=\"built_in\">splay</span>(b,a);</span><br><span class=\"line\">  \t\tlazy[son[<span class=\"number\">0</span>][son[<span class=\"number\">1</span>][root]]]^=<span class=\"number\">1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;Spl;</span><br></pre></td></tr></table></figure>\n<h2 id=\"两个模板题：\"><a href=\"#两个模板题：\" class=\"headerlink\" title=\"两个模板题：\"></a>两个模板题：</h2><ul>\n<li><a href=\"https://www.luogu.org/problemnew/show/P3369\">P3369 【模板】普通平衡树</a><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdlib&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cctype&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;stack&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;map&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;set&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> inf=<span class=\"number\">0x7fffffff</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">double</span> eps=<span class=\"number\">1e-10</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">double</span> pi=<span class=\"built_in\">acos</span>(<span class=\"number\">-1.0</span>);</span><br><span class=\"line\"><span class=\"comment\">//char buf[1&lt;&lt;15],*S=buf,*T=buf;</span></span><br><span class=\"line\"><span class=\"comment\">//char getch()&#123;return S==T&amp;&amp;(T=(S=buf)+fread(buf,1,1&lt;&lt;15,stdin),S==T)?0:*S++;&#125;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">int</span> <span class=\"title\">read</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> x=<span class=\"number\">0</span>,f=<span class=\"number\">1</span>;<span class=\"type\">char</span> ch;ch=<span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(ch&lt;<span class=\"string\">&#x27;0&#x27;</span>||ch&gt;<span class=\"string\">&#x27;9&#x27;</span>)&#123;<span class=\"keyword\">if</span>(ch==<span class=\"string\">&#x27;-&#x27;</span>) f=<span class=\"number\">0</span>;ch=<span class=\"built_in\">getchar</span>();&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(ch&gt;=<span class=\"string\">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class=\"string\">&#x27;9&#x27;</span>)&#123;x=(x&lt;&lt;<span class=\"number\">1</span>)+(x&lt;&lt;<span class=\"number\">3</span>)+(ch&amp;<span class=\"number\">15</span>);ch=<span class=\"built_in\">getchar</span>();&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(f)<span class=\"keyword\">return</span> x;<span class=\"keyword\">else</span> <span class=\"keyword\">return</span>-x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">1e5</span>+<span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> a[N],n,m;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Splay</span>&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;Spl;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  \t<span class=\"type\">int</span> n=<span class=\"built_in\">read</span>();</span><br><span class=\"line\">  \t<span class=\"keyword\">while</span>(n--)&#123;</span><br><span class=\"line\">    \t<span class=\"type\">int</span> opt=<span class=\"built_in\">read</span>(),x=<span class=\"built_in\">read</span>();</span><br><span class=\"line\">    \t<span class=\"keyword\">if</span>(opt==<span class=\"number\">1</span>)&#123;Spl.<span class=\"built_in\">Insert</span>(x);<span class=\"keyword\">continue</span>;&#125;</span><br><span class=\"line\">    \t<span class=\"keyword\">if</span>(opt==<span class=\"number\">2</span>)&#123;Spl.<span class=\"built_in\">Delete</span>(x);<span class=\"keyword\">continue</span>;&#125;</span><br><span class=\"line\">    \t<span class=\"keyword\">if</span>(opt==<span class=\"number\">3</span>)&#123;<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>,Spl.<span class=\"built_in\">Rank</span>(x));<span class=\"keyword\">continue</span>;&#125;</span><br><span class=\"line\">    \t<span class=\"keyword\">if</span>(opt==<span class=\"number\">4</span>)&#123;<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>,Spl.<span class=\"built_in\">QueryRank</span>(x));<span class=\"keyword\">continue</span>;&#125;</span><br><span class=\"line\">    \t<span class=\"keyword\">if</span>(opt==<span class=\"number\">5</span>)&#123;<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>,Spl.<span class=\"built_in\">Numpre</span>(x));<span class=\"keyword\">continue</span>;&#125;</span><br><span class=\"line\">    \t<span class=\"keyword\">if</span>(opt==<span class=\"number\">6</span>)&#123;<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>,Spl.<span class=\"built_in\">Numnex</span>(x));<span class=\"keyword\">continue</span>;&#125;</span><br><span class=\"line\">  \t&#125;</span><br><span class=\"line\">  \t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><a href=\"https://www.luogu.org/problemnew/show/P3391\">P3391 【模板】文艺平衡树（Splay）</a><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdlib&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cctype&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;stack&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;map&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;set&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> inf=<span class=\"number\">0x7fffffff</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">double</span> eps=<span class=\"number\">1e-10</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">double</span> pi=<span class=\"built_in\">acos</span>(<span class=\"number\">-1.0</span>);</span><br><span class=\"line\"><span class=\"comment\">//char buf[1&lt;&lt;15],*S=buf,*T=buf;</span></span><br><span class=\"line\"><span class=\"comment\">//char getch()&#123;return S==T&amp;&amp;(T=(S=buf)+fread(buf,1,1&lt;&lt;15,stdin),S==T)?0:*S++;&#125;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">int</span> <span class=\"title\">read</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> x=<span class=\"number\">0</span>,f=<span class=\"number\">1</span>;<span class=\"type\">char</span> ch;ch=<span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(ch&lt;<span class=\"string\">&#x27;0&#x27;</span>||ch&gt;<span class=\"string\">&#x27;9&#x27;</span>)&#123;<span class=\"keyword\">if</span>(ch==<span class=\"string\">&#x27;-&#x27;</span>) f=<span class=\"number\">0</span>;ch=<span class=\"built_in\">getchar</span>();&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(ch&gt;=<span class=\"string\">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class=\"string\">&#x27;9&#x27;</span>)&#123;x=(x&lt;&lt;<span class=\"number\">1</span>)+(x&lt;&lt;<span class=\"number\">3</span>)+(ch&amp;<span class=\"number\">15</span>);ch=<span class=\"built_in\">getchar</span>();&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(f)<span class=\"keyword\">return</span> x;<span class=\"keyword\">else</span> <span class=\"keyword\">return</span>-x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">1e5</span>+<span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> a[N],n,m;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Splay</span>&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;Spl;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">write</span><span class=\"params\">(<span class=\"type\">int</span> rt)</span></span>&#123;</span><br><span class=\"line\">  \tSpl.<span class=\"built_in\">pushdown</span>(rt);</span><br><span class=\"line\">  \t<span class=\"keyword\">if</span>(Spl.lson)<span class=\"built_in\">write</span>(Spl.lson);</span><br><span class=\"line\">  \t<span class=\"keyword\">if</span>(Spl.val[rt]&gt;<span class=\"number\">1</span>&amp;&amp;Spl.val[rt]&lt;n+<span class=\"number\">2</span>)</span><br><span class=\"line\">  \t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d &quot;</span>,Spl.val[rt]<span class=\"number\">-1</span>);</span><br><span class=\"line\">  \t<span class=\"keyword\">if</span>(Spl.rson)<span class=\"built_in\">write</span>(Spl.rson); </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tn=<span class=\"built_in\">read</span>();m=<span class=\"built_in\">read</span>();</span><br><span class=\"line\"> \t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n+<span class=\"number\">2</span>;i++)a[i]=i;</span><br><span class=\"line\"> \tSpl.<span class=\"built_in\">Build</span>(Spl.root,<span class=\"number\">1</span>,n+<span class=\"number\">2</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\"> \t<span class=\"keyword\">while</span>(m--)&#123;</span><br><span class=\"line\">    \t<span class=\"type\">int</span> l=<span class=\"built_in\">read</span>(),r=<span class=\"built_in\">read</span>();</span><br><span class=\"line\">  \t\tSpl.<span class=\"built_in\">revse</span>(l,r);</span><br><span class=\"line\">  \t&#125;</span><br><span class=\"line\">  \t<span class=\"built_in\">write</span>(Spl.root);</span><br><span class=\"line\">  \t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n</ul>"},{"title":"关于整型异或的线性基","date":"2018-12-29T06:30:15.000Z","mathjax":true,"_content":"\n$\\ \\ \\ \\ \\ \\ \\ \\,$关于线性基的复习笔记：\n\n$\\ \\ \\ \\ \\ \\ \\,$基（$\\tt basis$）是线性代数中的一个概念，它是描述、刻画向量空间的基本工具。而在现行的 OI 题目中，通常在利用基在异或空间中的一些特殊性质来解决题目，而这一类题目所涉及的知识点被称作线性基。\n\n<!-- more -->\n\n$\\ \\ \\ \\ \\ \\ \\,$具体证明先不谈，[【给个链接】](https://blog.sengxian.com/algorithms/linear-basis)，下面主要讲关于整型异或的线性基的代码实现和操作。\n\n$\\ \\ \\ \\ \\ \\ \\,$简单来说，线性基是解决一系列整形集合异或值的轻量数据结构，主要思想在于贪心，空间复杂度很低，只有$\\log n$的级别（$n$为元素大小上界）:\n\n\n``` cpp\nstruct Linear_Base{\n  long long a[Lim+10];\n}LB;\n\n```\n\n$\\ \\ \\ \\ \\ \\ \\,$他支持的操作有（$n$为元素大小上界）：\n\n1.  向集合中插入一个整形元素（$O(\\log n)$）\n\n2. 询问集合的中元素是否可以相互异或出某个整形（$O(\\log n)$）\n\n3. 询问集合的中元素与某个整形可以相互异或出的最大值（$O(\\log n)$）\n\n4. 询问集合的中元素与某个整形可以相互异或出的最小值（$O(\\log n)$）\n\n5. 询问集合的中元素可以相互异或出的第$k$大值（$O(\\log^2 n)$）\n\n6. 合并两个集合(线性基)（$O(\\log^2 n)$）\n\n\n## 插入\n\n$\\ \\ \\ \\ \\ \\ \\,$考虑按位异或其实只与每一个位数有关，并且要这个位数为$1$的时候才会造成贡献。问题是如何用 $\\log n$ 的空间来描述整个集合的异或集合，我们的想法是：\n\n- 如果这个数前面高数位的值可以被已有集合表达，那么我们用插入的数异或掉这个可以表达的数，就可以把插入的数化为低位。\n\n- 如果这个数前面高数位的值不能被已有集合表达，那么我们就顺势插入集合，然后弹出。\n\n$\\ \\ \\ \\ \\ \\ \\,$这样我们就可以保证，集合的异或值都可以表达出来，没有遗漏，代码如下：\n\n``` cpp\nvoid insert(long long x){\n  for(int i=Lim;i>=0;i--)if(x&(1ll<<i)){\n    if(!a[i]){a[i]=x;return;}\n    else x^=a[i];\n  }\n}\n```\n\n\n## 查询是否存在\n\n$\\ \\ \\ \\ \\ \\ \\,$在插入完成后，线性基的每一一个位置存放的都是这个集合可以通过异或表达的元素，并且最高位就是这个数位，于是查询存在就边成了：\n\n- 如果询问的数在这个数位为$1$,那么要表达询问的数的一个元素，肯定是这个位数上的元素，于是我们拿询问的数去异或他，询问的数将会成功减少至少一个数位。\n\n- 如果询问的数在这个数位为$0$,那么要表达询问的数的元素肯定没有这个位数上的元素，不然后面再怎么异或，这个位数就消不掉了，所以直接跳过这种位数。\n\n$\\ \\ \\ \\ \\ \\ \\,$当然了，要是最后把要查询的这个数都异或为$0$了,这个数当然就存在了，若是异或到后面的位数上的元素都是空的了还没有归$0$，那么肯定就不存在了，代码如下：\n\n``` cpp\nbool check(long long x){\n  for(int i=Lim;i>=0;i--)if(x&(1ll<<i)){\n    if(!a[i])break;\n    x^=a[i];\n  }\n  return x>0;\n}\n```\n\n\n## 查询最大\n\n$\\ \\ \\ \\ \\ \\ \\,$这个比较好想，我们依然从高位到地位枚举，若是询问的数这一个数位的元素异或起来变大了，那么就异或起来，最后便可以得到答案：\n\n``` cpp\nlong long querymax(long long res){\n  for(int i=Lim;i>=0;i--)\n  if((res^a[i])>res)res^=a[i];\n  return res;\n}\n```\n\n\n## 查询最小\n\n$\\ \\ \\ \\ \\ \\ \\,$查询最小的话，我们的策略就需要改变一下了，应该是尽量把为搞数位降成低数位，那么我们的操作和插入的操作其实差不多：\n\n``` cpp\nlong long querymax(long long res){\n  for(int i=Lim;i>=0;i--)\n  if(res&(1ll<<i))res^=a[i];\n  return res;\n}\n```\n\n\n##  查询组合第$k$大\n\n$\\ \\ \\ \\ \\ \\ \\,$这个是最复杂的操作了，简单说一下就好了，主要记板子，主要的想法是我们需要将每一位数的元素后面的位数也消掉，那么我们每一数位的元素就差不多变成了$2^i$，然后把$k$位数拆分就好了：\n\n``` cpp\nlong long querykth(int k){\n  long long tmp[Lim+10],res=0,cnt=0;\n  for(int i=0;i<=Lim;i++){\n    for(int j=i-1;j>=0;j--)if(a[i]&(1ll<<j))a[i]^=a[j];\n    if(a[i])tmp[cnt++]=a[i];\n  }\n  for(int i=0;i<cnt;i++)if(k&(1ll<<i))res^=tmp[i];\n  return res;\n}\n```\n\n\n##  合并\n\n$\\ \\ \\ \\ \\ \\ \\,$合并的话，就是把一个线性基里面整合的元素再插入另一个就好了呗：\n\n``` cpp\nvoid merge(const Linear_Base &other)\n{for(int i=0;i<=Lim;i++) insert(other.a[i]);}\n```\n\n\n## 完整模板代码：\n\n``` cpp\nstruct Linear_Base{\n  long long a[Lim+10];\n  void insert(long long x){\n    for(int i=Lim;i>=0;i--)if(x&(1ll<<i)){\n      if(!a[i]){a[i]=x;return;}\n      else x^=a[i];\n    }\n  }\n  bool check(long long x){\n    for(int i=Lim;i>=0;i--)if(x&(1ll<<i)){\n      if(!a[i])break;\n      x^=a[i];\n    }\n    return x>0;\n  }\n  long long querymax(long long res){\n    for(int i=Lim;i>=0;i--)if((res^a[i])>res)res^=a[i];\n    return res;\n  }\n  long long querymin(long long res){\n    for(int i=Lim;i>=0;i--)if(res&(1ll<<i))res^=a[i];\n    return res;\n  }\n  long long querykth(int k){\n    long long tmp[Lim+10],res=0,cnt=0;\n    for(int i=0;i<=Lim;i++){\n      for(int j=i-1;j>=0;j--)if(a[i]&(1ll<<j))a[i]^=a[j];\n      if(a[i])tmp[cnt++]=a[i];\n    }\n    for(int i=0;i<cnt;i++)if(k&(1ll<<i))res^=tmp[i];\n    return res;\n  }\n  void merge(const Linear_Base &other)\n  {for(int i=0;i<=Lim;i++) insert(other.a[i]);}\n}LB;\n```\n![](https://img-blog.csdnimg.cn/img_convert/f9d91e62d79d8b79f4252ecb6a8ead32.gif)\n\n","source":"_posts/关于整型异或的线性基.md","raw":"---\ntitle: '关于整型异或的线性基'\ndate: 2018-12-29 14:30:15\ncategories:\n- 学习笔记\ntags:\n- OI\n- 异或\n- 数学\n- 线性基\n- 修勾勾\nmathjax: true\n---\n\n$\\ \\ \\ \\ \\ \\ \\ \\,$关于线性基的复习笔记：\n\n$\\ \\ \\ \\ \\ \\ \\,$基（$\\tt basis$）是线性代数中的一个概念，它是描述、刻画向量空间的基本工具。而在现行的 OI 题目中，通常在利用基在异或空间中的一些特殊性质来解决题目，而这一类题目所涉及的知识点被称作线性基。\n\n<!-- more -->\n\n$\\ \\ \\ \\ \\ \\ \\,$具体证明先不谈，[【给个链接】](https://blog.sengxian.com/algorithms/linear-basis)，下面主要讲关于整型异或的线性基的代码实现和操作。\n\n$\\ \\ \\ \\ \\ \\ \\,$简单来说，线性基是解决一系列整形集合异或值的轻量数据结构，主要思想在于贪心，空间复杂度很低，只有$\\log n$的级别（$n$为元素大小上界）:\n\n\n``` cpp\nstruct Linear_Base{\n  long long a[Lim+10];\n}LB;\n\n```\n\n$\\ \\ \\ \\ \\ \\ \\,$他支持的操作有（$n$为元素大小上界）：\n\n1.  向集合中插入一个整形元素（$O(\\log n)$）\n\n2. 询问集合的中元素是否可以相互异或出某个整形（$O(\\log n)$）\n\n3. 询问集合的中元素与某个整形可以相互异或出的最大值（$O(\\log n)$）\n\n4. 询问集合的中元素与某个整形可以相互异或出的最小值（$O(\\log n)$）\n\n5. 询问集合的中元素可以相互异或出的第$k$大值（$O(\\log^2 n)$）\n\n6. 合并两个集合(线性基)（$O(\\log^2 n)$）\n\n\n## 插入\n\n$\\ \\ \\ \\ \\ \\ \\,$考虑按位异或其实只与每一个位数有关，并且要这个位数为$1$的时候才会造成贡献。问题是如何用 $\\log n$ 的空间来描述整个集合的异或集合，我们的想法是：\n\n- 如果这个数前面高数位的值可以被已有集合表达，那么我们用插入的数异或掉这个可以表达的数，就可以把插入的数化为低位。\n\n- 如果这个数前面高数位的值不能被已有集合表达，那么我们就顺势插入集合，然后弹出。\n\n$\\ \\ \\ \\ \\ \\ \\,$这样我们就可以保证，集合的异或值都可以表达出来，没有遗漏，代码如下：\n\n``` cpp\nvoid insert(long long x){\n  for(int i=Lim;i>=0;i--)if(x&(1ll<<i)){\n    if(!a[i]){a[i]=x;return;}\n    else x^=a[i];\n  }\n}\n```\n\n\n## 查询是否存在\n\n$\\ \\ \\ \\ \\ \\ \\,$在插入完成后，线性基的每一一个位置存放的都是这个集合可以通过异或表达的元素，并且最高位就是这个数位，于是查询存在就边成了：\n\n- 如果询问的数在这个数位为$1$,那么要表达询问的数的一个元素，肯定是这个位数上的元素，于是我们拿询问的数去异或他，询问的数将会成功减少至少一个数位。\n\n- 如果询问的数在这个数位为$0$,那么要表达询问的数的元素肯定没有这个位数上的元素，不然后面再怎么异或，这个位数就消不掉了，所以直接跳过这种位数。\n\n$\\ \\ \\ \\ \\ \\ \\,$当然了，要是最后把要查询的这个数都异或为$0$了,这个数当然就存在了，若是异或到后面的位数上的元素都是空的了还没有归$0$，那么肯定就不存在了，代码如下：\n\n``` cpp\nbool check(long long x){\n  for(int i=Lim;i>=0;i--)if(x&(1ll<<i)){\n    if(!a[i])break;\n    x^=a[i];\n  }\n  return x>0;\n}\n```\n\n\n## 查询最大\n\n$\\ \\ \\ \\ \\ \\ \\,$这个比较好想，我们依然从高位到地位枚举，若是询问的数这一个数位的元素异或起来变大了，那么就异或起来，最后便可以得到答案：\n\n``` cpp\nlong long querymax(long long res){\n  for(int i=Lim;i>=0;i--)\n  if((res^a[i])>res)res^=a[i];\n  return res;\n}\n```\n\n\n## 查询最小\n\n$\\ \\ \\ \\ \\ \\ \\,$查询最小的话，我们的策略就需要改变一下了，应该是尽量把为搞数位降成低数位，那么我们的操作和插入的操作其实差不多：\n\n``` cpp\nlong long querymax(long long res){\n  for(int i=Lim;i>=0;i--)\n  if(res&(1ll<<i))res^=a[i];\n  return res;\n}\n```\n\n\n##  查询组合第$k$大\n\n$\\ \\ \\ \\ \\ \\ \\,$这个是最复杂的操作了，简单说一下就好了，主要记板子，主要的想法是我们需要将每一位数的元素后面的位数也消掉，那么我们每一数位的元素就差不多变成了$2^i$，然后把$k$位数拆分就好了：\n\n``` cpp\nlong long querykth(int k){\n  long long tmp[Lim+10],res=0,cnt=0;\n  for(int i=0;i<=Lim;i++){\n    for(int j=i-1;j>=0;j--)if(a[i]&(1ll<<j))a[i]^=a[j];\n    if(a[i])tmp[cnt++]=a[i];\n  }\n  for(int i=0;i<cnt;i++)if(k&(1ll<<i))res^=tmp[i];\n  return res;\n}\n```\n\n\n##  合并\n\n$\\ \\ \\ \\ \\ \\ \\,$合并的话，就是把一个线性基里面整合的元素再插入另一个就好了呗：\n\n``` cpp\nvoid merge(const Linear_Base &other)\n{for(int i=0;i<=Lim;i++) insert(other.a[i]);}\n```\n\n\n## 完整模板代码：\n\n``` cpp\nstruct Linear_Base{\n  long long a[Lim+10];\n  void insert(long long x){\n    for(int i=Lim;i>=0;i--)if(x&(1ll<<i)){\n      if(!a[i]){a[i]=x;return;}\n      else x^=a[i];\n    }\n  }\n  bool check(long long x){\n    for(int i=Lim;i>=0;i--)if(x&(1ll<<i)){\n      if(!a[i])break;\n      x^=a[i];\n    }\n    return x>0;\n  }\n  long long querymax(long long res){\n    for(int i=Lim;i>=0;i--)if((res^a[i])>res)res^=a[i];\n    return res;\n  }\n  long long querymin(long long res){\n    for(int i=Lim;i>=0;i--)if(res&(1ll<<i))res^=a[i];\n    return res;\n  }\n  long long querykth(int k){\n    long long tmp[Lim+10],res=0,cnt=0;\n    for(int i=0;i<=Lim;i++){\n      for(int j=i-1;j>=0;j--)if(a[i]&(1ll<<j))a[i]^=a[j];\n      if(a[i])tmp[cnt++]=a[i];\n    }\n    for(int i=0;i<cnt;i++)if(k&(1ll<<i))res^=tmp[i];\n    return res;\n  }\n  void merge(const Linear_Base &other)\n  {for(int i=0;i<=Lim;i++) insert(other.a[i]);}\n}LB;\n```\n![](https://img-blog.csdnimg.cn/img_convert/f9d91e62d79d8b79f4252ecb6a8ead32.gif)\n\n","slug":"关于整型异或的线性基","published":1,"updated":"2022-02-14T03:26:14.775Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0i63w63000vu4gb0y3e1e51","content":"<p>$\\ \\ \\ \\ \\ \\ \\ \\,$关于线性基的复习笔记：</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$基（$\\tt basis$）是线性代数中的一个概念，它是描述、刻画向量空间的基本工具。而在现行的 OI 题目中，通常在利用基在异或空间中的一些特殊性质来解决题目，而这一类题目所涉及的知识点被称作线性基。</p>\n<span id=\"more\"></span>\n<p>$\\ \\ \\ \\ \\ \\ \\,$具体证明先不谈，<a href=\"https://blog.sengxian.com/algorithms/linear-basis\">【给个链接】</a>，下面主要讲关于整型异或的线性基的代码实现和操作。</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$简单来说，线性基是解决一系列整形集合异或值的轻量数据结构，主要思想在于贪心，空间复杂度很低，只有$\\log n$的级别（$n$为元素大小上界）:</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Linear_Base</span>&#123;</span><br><span class=\"line\">  <span class=\"type\">long</span> <span class=\"type\">long</span> a[Lim+<span class=\"number\">10</span>];</span><br><span class=\"line\">&#125;LB;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>$\\ \\ \\ \\ \\ \\ \\,$他支持的操作有（$n$为元素大小上界）：</p>\n<ol>\n<li><p>向集合中插入一个整形元素（$O(\\log n)$）</p>\n</li>\n<li><p>询问集合的中元素是否可以相互异或出某个整形（$O(\\log n)$）</p>\n</li>\n<li><p>询问集合的中元素与某个整形可以相互异或出的最大值（$O(\\log n)$）</p>\n</li>\n<li><p>询问集合的中元素与某个整形可以相互异或出的最小值（$O(\\log n)$）</p>\n</li>\n<li><p>询问集合的中元素可以相互异或出的第$k$大值（$O(\\log^2 n)$）</p>\n</li>\n<li><p>合并两个集合(线性基)（$O(\\log^2 n)$）</p>\n</li>\n</ol>\n<h2 id=\"插入\"><a href=\"#插入\" class=\"headerlink\" title=\"插入\"></a>插入</h2><p>$\\ \\ \\ \\ \\ \\ \\,$考虑按位异或其实只与每一个位数有关，并且要这个位数为$1$的时候才会造成贡献。问题是如何用 $\\log n$ 的空间来描述整个集合的异或集合，我们的想法是：</p>\n<ul>\n<li><p>如果这个数前面高数位的值可以被已有集合表达，那么我们用插入的数异或掉这个可以表达的数，就可以把插入的数化为低位。</p>\n</li>\n<li><p>如果这个数前面高数位的值不能被已有集合表达，那么我们就顺势插入集合，然后弹出。</p>\n</li>\n</ul>\n<p>$\\ \\ \\ \\ \\ \\ \\,$这样我们就可以保证，集合的异或值都可以表达出来，没有遗漏，代码如下：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">insert</span><span class=\"params\">(<span class=\"type\">long</span> <span class=\"type\">long</span> x)</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=Lim;i&gt;=<span class=\"number\">0</span>;i--)<span class=\"keyword\">if</span>(x&amp;(<span class=\"number\">1ll</span>&lt;&lt;i))&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!a[i])&#123;a[i]=x;<span class=\"keyword\">return</span>;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> x^=a[i];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"查询是否存在\"><a href=\"#查询是否存在\" class=\"headerlink\" title=\"查询是否存在\"></a>查询是否存在</h2><p>$\\ \\ \\ \\ \\ \\ \\,$在插入完成后，线性基的每一一个位置存放的都是这个集合可以通过异或表达的元素，并且最高位就是这个数位，于是查询存在就边成了：</p>\n<ul>\n<li><p>如果询问的数在这个数位为$1$,那么要表达询问的数的一个元素，肯定是这个位数上的元素，于是我们拿询问的数去异或他，询问的数将会成功减少至少一个数位。</p>\n</li>\n<li><p>如果询问的数在这个数位为$0$,那么要表达询问的数的元素肯定没有这个位数上的元素，不然后面再怎么异或，这个位数就消不掉了，所以直接跳过这种位数。</p>\n</li>\n</ul>\n<p>$\\ \\ \\ \\ \\ \\ \\,$当然了，要是最后把要查询的这个数都异或为$0$了,这个数当然就存在了，若是异或到后面的位数上的元素都是空的了还没有归$0$，那么肯定就不存在了，代码如下：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">check</span><span class=\"params\">(<span class=\"type\">long</span> <span class=\"type\">long</span> x)</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=Lim;i&gt;=<span class=\"number\">0</span>;i--)<span class=\"keyword\">if</span>(x&amp;(<span class=\"number\">1ll</span>&lt;&lt;i))&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!a[i])<span class=\"keyword\">break</span>;</span><br><span class=\"line\">    x^=a[i];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> x&gt;<span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"查询最大\"><a href=\"#查询最大\" class=\"headerlink\" title=\"查询最大\"></a>查询最大</h2><p>$\\ \\ \\ \\ \\ \\ \\,$这个比较好想，我们依然从高位到地位枚举，若是询问的数这一个数位的元素异或起来变大了，那么就异或起来，最后便可以得到答案：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"title\">querymax</span><span class=\"params\">(<span class=\"type\">long</span> <span class=\"type\">long</span> res)</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=Lim;i&gt;=<span class=\"number\">0</span>;i--)</span><br><span class=\"line\">  <span class=\"keyword\">if</span>((res^a[i])&gt;res)res^=a[i];</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"查询最小\"><a href=\"#查询最小\" class=\"headerlink\" title=\"查询最小\"></a>查询最小</h2><p>$\\ \\ \\ \\ \\ \\ \\,$查询最小的话，我们的策略就需要改变一下了，应该是尽量把为搞数位降成低数位，那么我们的操作和插入的操作其实差不多：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"title\">querymax</span><span class=\"params\">(<span class=\"type\">long</span> <span class=\"type\">long</span> res)</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=Lim;i&gt;=<span class=\"number\">0</span>;i--)</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(res&amp;(<span class=\"number\">1ll</span>&lt;&lt;i))res^=a[i];</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"查询组合第-k-大\"><a href=\"#查询组合第-k-大\" class=\"headerlink\" title=\"查询组合第$k$大\"></a>查询组合第$k$大</h2><p>$\\ \\ \\ \\ \\ \\ \\,$这个是最复杂的操作了，简单说一下就好了，主要记板子，主要的想法是我们需要将每一位数的元素后面的位数也消掉，那么我们每一数位的元素就差不多变成了$2^i$，然后把$k$位数拆分就好了：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"title\">querykth</span><span class=\"params\">(<span class=\"type\">int</span> k)</span></span>&#123;</span><br><span class=\"line\">  <span class=\"type\">long</span> <span class=\"type\">long</span> tmp[Lim+<span class=\"number\">10</span>],res=<span class=\"number\">0</span>,cnt=<span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;=Lim;i++)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=i<span class=\"number\">-1</span>;j&gt;=<span class=\"number\">0</span>;j--)<span class=\"keyword\">if</span>(a[i]&amp;(<span class=\"number\">1ll</span>&lt;&lt;j))a[i]^=a[j];</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(a[i])tmp[cnt++]=a[i];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;cnt;i++)<span class=\"keyword\">if</span>(k&amp;(<span class=\"number\">1ll</span>&lt;&lt;i))res^=tmp[i];</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"合并\"><a href=\"#合并\" class=\"headerlink\" title=\"合并\"></a>合并</h2><p>$\\ \\ \\ \\ \\ \\ \\,$合并的话，就是把一个线性基里面整合的元素再插入另一个就好了呗：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">merge</span><span class=\"params\">(<span class=\"type\">const</span> Linear_Base &amp;other)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;=Lim;i++) <span class=\"built_in\">insert</span>(other.a[i]);&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"完整模板代码：\"><a href=\"#完整模板代码：\" class=\"headerlink\" title=\"完整模板代码：\"></a>完整模板代码：</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Linear_Base</span>&#123;</span><br><span class=\"line\">  <span class=\"type\">long</span> <span class=\"type\">long</span> a[Lim+<span class=\"number\">10</span>];</span><br><span class=\"line\">  <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">insert</span><span class=\"params\">(<span class=\"type\">long</span> <span class=\"type\">long</span> x)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=Lim;i&gt;=<span class=\"number\">0</span>;i--)<span class=\"keyword\">if</span>(x&amp;(<span class=\"number\">1ll</span>&lt;&lt;i))&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(!a[i])&#123;a[i]=x;<span class=\"keyword\">return</span>;&#125;</span><br><span class=\"line\">      <span class=\"keyword\">else</span> x^=a[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">check</span><span class=\"params\">(<span class=\"type\">long</span> <span class=\"type\">long</span> x)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=Lim;i&gt;=<span class=\"number\">0</span>;i--)<span class=\"keyword\">if</span>(x&amp;(<span class=\"number\">1ll</span>&lt;&lt;i))&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(!a[i])<span class=\"keyword\">break</span>;</span><br><span class=\"line\">      x^=a[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x&gt;<span class=\"number\">0</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"title\">querymax</span><span class=\"params\">(<span class=\"type\">long</span> <span class=\"type\">long</span> res)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=Lim;i&gt;=<span class=\"number\">0</span>;i--)<span class=\"keyword\">if</span>((res^a[i])&gt;res)res^=a[i];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"title\">querymin</span><span class=\"params\">(<span class=\"type\">long</span> <span class=\"type\">long</span> res)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=Lim;i&gt;=<span class=\"number\">0</span>;i--)<span class=\"keyword\">if</span>(res&amp;(<span class=\"number\">1ll</span>&lt;&lt;i))res^=a[i];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"title\">querykth</span><span class=\"params\">(<span class=\"type\">int</span> k)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">long</span> <span class=\"type\">long</span> tmp[Lim+<span class=\"number\">10</span>],res=<span class=\"number\">0</span>,cnt=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;=Lim;i++)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=i<span class=\"number\">-1</span>;j&gt;=<span class=\"number\">0</span>;j--)<span class=\"keyword\">if</span>(a[i]&amp;(<span class=\"number\">1ll</span>&lt;&lt;j))a[i]^=a[j];</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(a[i])tmp[cnt++]=a[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;cnt;i++)<span class=\"keyword\">if</span>(k&amp;(<span class=\"number\">1ll</span>&lt;&lt;i))res^=tmp[i];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">merge</span><span class=\"params\">(<span class=\"type\">const</span> Linear_Base &amp;other)</span></span></span><br><span class=\"line\"><span class=\"function\">  </span>&#123;<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;=Lim;i++) <span class=\"built_in\">insert</span>(other.a[i]);&#125;</span><br><span class=\"line\">&#125;LB;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/f9d91e62d79d8b79f4252ecb6a8ead32.gif\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"<p>$\\ \\ \\ \\ \\ \\ \\ \\,$关于线性基的复习笔记：</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$基（$\\tt basis$）是线性代数中的一个概念，它是描述、刻画向量空间的基本工具。而在现行的 OI 题目中，通常在利用基在异或空间中的一些特殊性质来解决题目，而这一类题目所涉及的知识点被称作线性基。</p>","more":"<p>$\\ \\ \\ \\ \\ \\ \\,$具体证明先不谈，<a href=\"https://blog.sengxian.com/algorithms/linear-basis\">【给个链接】</a>，下面主要讲关于整型异或的线性基的代码实现和操作。</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$简单来说，线性基是解决一系列整形集合异或值的轻量数据结构，主要思想在于贪心，空间复杂度很低，只有$\\log n$的级别（$n$为元素大小上界）:</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Linear_Base</span>&#123;</span><br><span class=\"line\">  <span class=\"type\">long</span> <span class=\"type\">long</span> a[Lim+<span class=\"number\">10</span>];</span><br><span class=\"line\">&#125;LB;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>$\\ \\ \\ \\ \\ \\ \\,$他支持的操作有（$n$为元素大小上界）：</p>\n<ol>\n<li><p>向集合中插入一个整形元素（$O(\\log n)$）</p>\n</li>\n<li><p>询问集合的中元素是否可以相互异或出某个整形（$O(\\log n)$）</p>\n</li>\n<li><p>询问集合的中元素与某个整形可以相互异或出的最大值（$O(\\log n)$）</p>\n</li>\n<li><p>询问集合的中元素与某个整形可以相互异或出的最小值（$O(\\log n)$）</p>\n</li>\n<li><p>询问集合的中元素可以相互异或出的第$k$大值（$O(\\log^2 n)$）</p>\n</li>\n<li><p>合并两个集合(线性基)（$O(\\log^2 n)$）</p>\n</li>\n</ol>\n<h2 id=\"插入\"><a href=\"#插入\" class=\"headerlink\" title=\"插入\"></a>插入</h2><p>$\\ \\ \\ \\ \\ \\ \\,$考虑按位异或其实只与每一个位数有关，并且要这个位数为$1$的时候才会造成贡献。问题是如何用 $\\log n$ 的空间来描述整个集合的异或集合，我们的想法是：</p>\n<ul>\n<li><p>如果这个数前面高数位的值可以被已有集合表达，那么我们用插入的数异或掉这个可以表达的数，就可以把插入的数化为低位。</p>\n</li>\n<li><p>如果这个数前面高数位的值不能被已有集合表达，那么我们就顺势插入集合，然后弹出。</p>\n</li>\n</ul>\n<p>$\\ \\ \\ \\ \\ \\ \\,$这样我们就可以保证，集合的异或值都可以表达出来，没有遗漏，代码如下：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">insert</span><span class=\"params\">(<span class=\"type\">long</span> <span class=\"type\">long</span> x)</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=Lim;i&gt;=<span class=\"number\">0</span>;i--)<span class=\"keyword\">if</span>(x&amp;(<span class=\"number\">1ll</span>&lt;&lt;i))&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!a[i])&#123;a[i]=x;<span class=\"keyword\">return</span>;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> x^=a[i];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"查询是否存在\"><a href=\"#查询是否存在\" class=\"headerlink\" title=\"查询是否存在\"></a>查询是否存在</h2><p>$\\ \\ \\ \\ \\ \\ \\,$在插入完成后，线性基的每一一个位置存放的都是这个集合可以通过异或表达的元素，并且最高位就是这个数位，于是查询存在就边成了：</p>\n<ul>\n<li><p>如果询问的数在这个数位为$1$,那么要表达询问的数的一个元素，肯定是这个位数上的元素，于是我们拿询问的数去异或他，询问的数将会成功减少至少一个数位。</p>\n</li>\n<li><p>如果询问的数在这个数位为$0$,那么要表达询问的数的元素肯定没有这个位数上的元素，不然后面再怎么异或，这个位数就消不掉了，所以直接跳过这种位数。</p>\n</li>\n</ul>\n<p>$\\ \\ \\ \\ \\ \\ \\,$当然了，要是最后把要查询的这个数都异或为$0$了,这个数当然就存在了，若是异或到后面的位数上的元素都是空的了还没有归$0$，那么肯定就不存在了，代码如下：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">check</span><span class=\"params\">(<span class=\"type\">long</span> <span class=\"type\">long</span> x)</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=Lim;i&gt;=<span class=\"number\">0</span>;i--)<span class=\"keyword\">if</span>(x&amp;(<span class=\"number\">1ll</span>&lt;&lt;i))&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!a[i])<span class=\"keyword\">break</span>;</span><br><span class=\"line\">    x^=a[i];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> x&gt;<span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"查询最大\"><a href=\"#查询最大\" class=\"headerlink\" title=\"查询最大\"></a>查询最大</h2><p>$\\ \\ \\ \\ \\ \\ \\,$这个比较好想，我们依然从高位到地位枚举，若是询问的数这一个数位的元素异或起来变大了，那么就异或起来，最后便可以得到答案：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"title\">querymax</span><span class=\"params\">(<span class=\"type\">long</span> <span class=\"type\">long</span> res)</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=Lim;i&gt;=<span class=\"number\">0</span>;i--)</span><br><span class=\"line\">  <span class=\"keyword\">if</span>((res^a[i])&gt;res)res^=a[i];</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"查询最小\"><a href=\"#查询最小\" class=\"headerlink\" title=\"查询最小\"></a>查询最小</h2><p>$\\ \\ \\ \\ \\ \\ \\,$查询最小的话，我们的策略就需要改变一下了，应该是尽量把为搞数位降成低数位，那么我们的操作和插入的操作其实差不多：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"title\">querymax</span><span class=\"params\">(<span class=\"type\">long</span> <span class=\"type\">long</span> res)</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=Lim;i&gt;=<span class=\"number\">0</span>;i--)</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(res&amp;(<span class=\"number\">1ll</span>&lt;&lt;i))res^=a[i];</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"查询组合第-k-大\"><a href=\"#查询组合第-k-大\" class=\"headerlink\" title=\"查询组合第$k$大\"></a>查询组合第$k$大</h2><p>$\\ \\ \\ \\ \\ \\ \\,$这个是最复杂的操作了，简单说一下就好了，主要记板子，主要的想法是我们需要将每一位数的元素后面的位数也消掉，那么我们每一数位的元素就差不多变成了$2^i$，然后把$k$位数拆分就好了：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"title\">querykth</span><span class=\"params\">(<span class=\"type\">int</span> k)</span></span>&#123;</span><br><span class=\"line\">  <span class=\"type\">long</span> <span class=\"type\">long</span> tmp[Lim+<span class=\"number\">10</span>],res=<span class=\"number\">0</span>,cnt=<span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;=Lim;i++)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=i<span class=\"number\">-1</span>;j&gt;=<span class=\"number\">0</span>;j--)<span class=\"keyword\">if</span>(a[i]&amp;(<span class=\"number\">1ll</span>&lt;&lt;j))a[i]^=a[j];</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(a[i])tmp[cnt++]=a[i];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;cnt;i++)<span class=\"keyword\">if</span>(k&amp;(<span class=\"number\">1ll</span>&lt;&lt;i))res^=tmp[i];</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"合并\"><a href=\"#合并\" class=\"headerlink\" title=\"合并\"></a>合并</h2><p>$\\ \\ \\ \\ \\ \\ \\,$合并的话，就是把一个线性基里面整合的元素再插入另一个就好了呗：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">merge</span><span class=\"params\">(<span class=\"type\">const</span> Linear_Base &amp;other)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;=Lim;i++) <span class=\"built_in\">insert</span>(other.a[i]);&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"完整模板代码：\"><a href=\"#完整模板代码：\" class=\"headerlink\" title=\"完整模板代码：\"></a>完整模板代码：</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Linear_Base</span>&#123;</span><br><span class=\"line\">  <span class=\"type\">long</span> <span class=\"type\">long</span> a[Lim+<span class=\"number\">10</span>];</span><br><span class=\"line\">  <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">insert</span><span class=\"params\">(<span class=\"type\">long</span> <span class=\"type\">long</span> x)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=Lim;i&gt;=<span class=\"number\">0</span>;i--)<span class=\"keyword\">if</span>(x&amp;(<span class=\"number\">1ll</span>&lt;&lt;i))&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(!a[i])&#123;a[i]=x;<span class=\"keyword\">return</span>;&#125;</span><br><span class=\"line\">      <span class=\"keyword\">else</span> x^=a[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">check</span><span class=\"params\">(<span class=\"type\">long</span> <span class=\"type\">long</span> x)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=Lim;i&gt;=<span class=\"number\">0</span>;i--)<span class=\"keyword\">if</span>(x&amp;(<span class=\"number\">1ll</span>&lt;&lt;i))&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(!a[i])<span class=\"keyword\">break</span>;</span><br><span class=\"line\">      x^=a[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x&gt;<span class=\"number\">0</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"title\">querymax</span><span class=\"params\">(<span class=\"type\">long</span> <span class=\"type\">long</span> res)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=Lim;i&gt;=<span class=\"number\">0</span>;i--)<span class=\"keyword\">if</span>((res^a[i])&gt;res)res^=a[i];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"title\">querymin</span><span class=\"params\">(<span class=\"type\">long</span> <span class=\"type\">long</span> res)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=Lim;i&gt;=<span class=\"number\">0</span>;i--)<span class=\"keyword\">if</span>(res&amp;(<span class=\"number\">1ll</span>&lt;&lt;i))res^=a[i];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"title\">querykth</span><span class=\"params\">(<span class=\"type\">int</span> k)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">long</span> <span class=\"type\">long</span> tmp[Lim+<span class=\"number\">10</span>],res=<span class=\"number\">0</span>,cnt=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;=Lim;i++)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=i<span class=\"number\">-1</span>;j&gt;=<span class=\"number\">0</span>;j--)<span class=\"keyword\">if</span>(a[i]&amp;(<span class=\"number\">1ll</span>&lt;&lt;j))a[i]^=a[j];</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(a[i])tmp[cnt++]=a[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;cnt;i++)<span class=\"keyword\">if</span>(k&amp;(<span class=\"number\">1ll</span>&lt;&lt;i))res^=tmp[i];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">merge</span><span class=\"params\">(<span class=\"type\">const</span> Linear_Base &amp;other)</span></span></span><br><span class=\"line\"><span class=\"function\">  </span>&#123;<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;=Lim;i++) <span class=\"built_in\">insert</span>(other.a[i]);&#125;</span><br><span class=\"line\">&#125;LB;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/f9d91e62d79d8b79f4252ecb6a8ead32.gif\" alt=\"\"></p>"},{"title":"tarjian算法的运用","date":"2019-01-02T11:23:06.000Z","mathjax":true,"_content":"\n$\\ \\ \\ \\ \\ \\ \\ \\,$tarjian算法及其相关算法的复习笔记：\n\n<!-- more -->\n\n## 边双连通分量\n\n$\\ \\ \\ \\ \\ \\ \\ \\,$对于一个有向图，能互相到达的点在一个连通分量，很多时候一个连通分量的点对答案没有影响，或者可以统一安排，那么我们就用tarjan算法把它们缩在一起。\n\n$\\ \\ \\ \\ \\ \\ \\ \\,$这样就把有向图转换为了一个DAG，会方便处理很多。\n\n``` cpp\nint U[N],V[N],p;\nvector<int> G[N];\nvoid add(int a,int b){U[++p]=a;V[p]=b;G[a].push_back(b);}\nint sta[N],top;\nint low[N],dfn[N],tim;\nint col[N],mark;\nvoid tarjan(int x){\n  sta[++top]=x;\n  low[x]=dfn[x]=++tim;\n  for(auto v:G[x]){\n  \tif(!dfn[v])tarjan(v);\n    if(!col[v])low[x]=min(low[x],low[v]);\n\t}\n  if(low[x]==dfn[x]){\n    mark++; \n    while(sta[top+1]!=x)col[sta[top]]=mark,top--;\n  }\n}\n//main():\n//  for(int i=1;i<=n;i++)\n//  if(!dfn[i]) tarjan(i);\n```\n\n\n## 割点\n\n$\\ \\ \\ \\ \\ \\ \\ \\,$在一个无向图中，去掉一个点，使得图不连通，这个点就叫割点（sta[]中）：\n\n``` cpp\nvector<int> G[N];\nvoid add(int a,int b){G[a].push_back(b);G[b].push_back(a);}\nint sta[N],top;\nint low[N],dfn[N],tim;\nbool used[N];\nvoid tarjan(int x,int rt){\n  int cnt=0;\n  low[x]=dfn[x]=++tim;\n  for(auto v:G[x]){\n  \tif(!dfn[v]){\n      tarjan(v,rt);\n      low[x]=min(low[x],low[v]);\n      if(low[v]>=dfn[x]&&x!=rt&&used[x]==0)\n      {sta[++top]=x;used[x]=1;}\n      if(x==rt)cnt++;\n    }\n    low[x]=min(low[x],dfn[v]);\n  }\n  if(x==rt&&cnt>=2&&used[x]==0)\n  {sta[++top]=x;used[x]=1;}\n}\n//main():\n//  for(int i=1;i<=n;i++)\n//  if(!dfn[i]) tarjan(i,i);\n```\n\n\n## 圆方树\n\n$\\ \\ \\ \\ \\ \\ \\ \\,$专门处理仙人掌的做法，把一个环转换为一个方点，把一个仙人掌转换为一棵树，方便处理：\n\n$\\ \\ \\ \\ \\ \\ \\ \\,$（方点之间连接的圆点为割点）\n\n``` cpp\nint sta[N],top,size,tim,dfn[N],low[N];\nvector<int> G[N],E[N<<1];\nvoid add1(int a,int b){G[a].push_back(b);G[b].push_back(a);}\nvoid add2(int a,int b){E[a].push_back(b);E[b].push_back(a);}\nvoid tarjan(int x){\n  dfn[x]=low[x]=++tim;\n  sta[++top]=x;\n  for(auto v:G[x]){\n    if(!dfn[v]){\n      tarjan(v),low[x]=min(low[x],low[v]);\n      if(low[v]>=dfn[x]){\n        ++size;\n        while(sta[top+1]!=v)add2(sta[top],size),top--;\n        add2(x,size);\n      }\n    }\n\t\tlow[x]=min(low[x],dfn[v]);\n  }\n}\n```","source":"_posts/tarjian算法的运用.md","raw":"---\ntitle: 'tarjian算法的运用'\ndate: 2019-01-02 19:23:06\ncategories:\n- 学习笔记\ntags:\n- OI\n- 图论\n- Tarjian\n- 连通分量\n- 圆方树\n- 割点\nmathjax: true\n---\n\n$\\ \\ \\ \\ \\ \\ \\ \\,$tarjian算法及其相关算法的复习笔记：\n\n<!-- more -->\n\n## 边双连通分量\n\n$\\ \\ \\ \\ \\ \\ \\ \\,$对于一个有向图，能互相到达的点在一个连通分量，很多时候一个连通分量的点对答案没有影响，或者可以统一安排，那么我们就用tarjan算法把它们缩在一起。\n\n$\\ \\ \\ \\ \\ \\ \\ \\,$这样就把有向图转换为了一个DAG，会方便处理很多。\n\n``` cpp\nint U[N],V[N],p;\nvector<int> G[N];\nvoid add(int a,int b){U[++p]=a;V[p]=b;G[a].push_back(b);}\nint sta[N],top;\nint low[N],dfn[N],tim;\nint col[N],mark;\nvoid tarjan(int x){\n  sta[++top]=x;\n  low[x]=dfn[x]=++tim;\n  for(auto v:G[x]){\n  \tif(!dfn[v])tarjan(v);\n    if(!col[v])low[x]=min(low[x],low[v]);\n\t}\n  if(low[x]==dfn[x]){\n    mark++; \n    while(sta[top+1]!=x)col[sta[top]]=mark,top--;\n  }\n}\n//main():\n//  for(int i=1;i<=n;i++)\n//  if(!dfn[i]) tarjan(i);\n```\n\n\n## 割点\n\n$\\ \\ \\ \\ \\ \\ \\ \\,$在一个无向图中，去掉一个点，使得图不连通，这个点就叫割点（sta[]中）：\n\n``` cpp\nvector<int> G[N];\nvoid add(int a,int b){G[a].push_back(b);G[b].push_back(a);}\nint sta[N],top;\nint low[N],dfn[N],tim;\nbool used[N];\nvoid tarjan(int x,int rt){\n  int cnt=0;\n  low[x]=dfn[x]=++tim;\n  for(auto v:G[x]){\n  \tif(!dfn[v]){\n      tarjan(v,rt);\n      low[x]=min(low[x],low[v]);\n      if(low[v]>=dfn[x]&&x!=rt&&used[x]==0)\n      {sta[++top]=x;used[x]=1;}\n      if(x==rt)cnt++;\n    }\n    low[x]=min(low[x],dfn[v]);\n  }\n  if(x==rt&&cnt>=2&&used[x]==0)\n  {sta[++top]=x;used[x]=1;}\n}\n//main():\n//  for(int i=1;i<=n;i++)\n//  if(!dfn[i]) tarjan(i,i);\n```\n\n\n## 圆方树\n\n$\\ \\ \\ \\ \\ \\ \\ \\,$专门处理仙人掌的做法，把一个环转换为一个方点，把一个仙人掌转换为一棵树，方便处理：\n\n$\\ \\ \\ \\ \\ \\ \\ \\,$（方点之间连接的圆点为割点）\n\n``` cpp\nint sta[N],top,size,tim,dfn[N],low[N];\nvector<int> G[N],E[N<<1];\nvoid add1(int a,int b){G[a].push_back(b);G[b].push_back(a);}\nvoid add2(int a,int b){E[a].push_back(b);E[b].push_back(a);}\nvoid tarjan(int x){\n  dfn[x]=low[x]=++tim;\n  sta[++top]=x;\n  for(auto v:G[x]){\n    if(!dfn[v]){\n      tarjan(v),low[x]=min(low[x],low[v]);\n      if(low[v]>=dfn[x]){\n        ++size;\n        while(sta[top+1]!=v)add2(sta[top],size),top--;\n        add2(x,size);\n      }\n    }\n\t\tlow[x]=min(low[x],dfn[v]);\n  }\n}\n```","slug":"tarjian算法的运用","published":1,"updated":"2022-02-13T13:23:47.569Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0i63w63000xu4gba4xj6gft","content":"<p>$\\ \\ \\ \\ \\ \\ \\ \\,$tarjian算法及其相关算法的复习笔记：</p>\n<span id=\"more\"></span>\n<h2 id=\"边双连通分量\"><a href=\"#边双连通分量\" class=\"headerlink\" title=\"边双连通分量\"></a>边双连通分量</h2><p>$\\ \\ \\ \\ \\ \\ \\ \\,$对于一个有向图，能互相到达的点在一个连通分量，很多时候一个连通分量的点对答案没有影响，或者可以统一安排，那么我们就用tarjan算法把它们缩在一起。</p>\n<p>$\\ \\ \\ \\ \\ \\ \\ \\,$这样就把有向图转换为了一个DAG，会方便处理很多。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> U[N],V[N],p;</span><br><span class=\"line\">vector&lt;<span class=\"type\">int</span>&gt; G[N];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"type\">int</span> a,<span class=\"type\">int</span> b)</span></span>&#123;U[++p]=a;V[p]=b;G[a].<span class=\"built_in\">push_back</span>(b);&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> sta[N],top;</span><br><span class=\"line\"><span class=\"type\">int</span> low[N],dfn[N],tim;</span><br><span class=\"line\"><span class=\"type\">int</span> col[N],mark;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">tarjan</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span>&#123;</span><br><span class=\"line\">  sta[++top]=x;</span><br><span class=\"line\">  low[x]=dfn[x]=++tim;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> v:G[x])&#123;</span><br><span class=\"line\">  \t<span class=\"keyword\">if</span>(!dfn[v])<span class=\"built_in\">tarjan</span>(v);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!col[v])low[x]=<span class=\"built_in\">min</span>(low[x],low[v]);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(low[x]==dfn[x])&#123;</span><br><span class=\"line\">    mark++; </span><br><span class=\"line\">    <span class=\"keyword\">while</span>(sta[top+<span class=\"number\">1</span>]!=x)col[sta[top]]=mark,top--;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//main():</span></span><br><span class=\"line\"><span class=\"comment\">//  for(int i=1;i&lt;=n;i++)</span></span><br><span class=\"line\"><span class=\"comment\">//  if(!dfn[i]) tarjan(i);</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"割点\"><a href=\"#割点\" class=\"headerlink\" title=\"割点\"></a>割点</h2><p>$\\ \\ \\ \\ \\ \\ \\ \\,$在一个无向图中，去掉一个点，使得图不连通，这个点就叫割点（sta[]中）：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vector&lt;<span class=\"type\">int</span>&gt; G[N];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"type\">int</span> a,<span class=\"type\">int</span> b)</span></span>&#123;G[a].<span class=\"built_in\">push_back</span>(b);G[b].<span class=\"built_in\">push_back</span>(a);&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> sta[N],top;</span><br><span class=\"line\"><span class=\"type\">int</span> low[N],dfn[N],tim;</span><br><span class=\"line\"><span class=\"type\">bool</span> used[N];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">tarjan</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> rt)</span></span>&#123;</span><br><span class=\"line\">  <span class=\"type\">int</span> cnt=<span class=\"number\">0</span>;</span><br><span class=\"line\">  low[x]=dfn[x]=++tim;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> v:G[x])&#123;</span><br><span class=\"line\">  \t<span class=\"keyword\">if</span>(!dfn[v])&#123;</span><br><span class=\"line\">      <span class=\"built_in\">tarjan</span>(v,rt);</span><br><span class=\"line\">      low[x]=<span class=\"built_in\">min</span>(low[x],low[v]);</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(low[v]&gt;=dfn[x]&amp;&amp;x!=rt&amp;&amp;used[x]==<span class=\"number\">0</span>)</span><br><span class=\"line\">      &#123;sta[++top]=x;used[x]=<span class=\"number\">1</span>;&#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(x==rt)cnt++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    low[x]=<span class=\"built_in\">min</span>(low[x],dfn[v]);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(x==rt&amp;&amp;cnt&gt;=<span class=\"number\">2</span>&amp;&amp;used[x]==<span class=\"number\">0</span>)</span><br><span class=\"line\">  &#123;sta[++top]=x;used[x]=<span class=\"number\">1</span>;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//main():</span></span><br><span class=\"line\"><span class=\"comment\">//  for(int i=1;i&lt;=n;i++)</span></span><br><span class=\"line\"><span class=\"comment\">//  if(!dfn[i]) tarjan(i,i);</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"圆方树\"><a href=\"#圆方树\" class=\"headerlink\" title=\"圆方树\"></a>圆方树</h2><p>$\\ \\ \\ \\ \\ \\ \\ \\,$专门处理仙人掌的做法，把一个环转换为一个方点，把一个仙人掌转换为一棵树，方便处理：</p>\n<p>$\\ \\ \\ \\ \\ \\ \\ \\,$（方点之间连接的圆点为割点）</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> sta[N],top,size,tim,dfn[N],low[N];</span><br><span class=\"line\">vector&lt;<span class=\"type\">int</span>&gt; G[N],E[N&lt;&lt;<span class=\"number\">1</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">add1</span><span class=\"params\">(<span class=\"type\">int</span> a,<span class=\"type\">int</span> b)</span></span>&#123;G[a].<span class=\"built_in\">push_back</span>(b);G[b].<span class=\"built_in\">push_back</span>(a);&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">add2</span><span class=\"params\">(<span class=\"type\">int</span> a,<span class=\"type\">int</span> b)</span></span>&#123;E[a].<span class=\"built_in\">push_back</span>(b);E[b].<span class=\"built_in\">push_back</span>(a);&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">tarjan</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span>&#123;</span><br><span class=\"line\">  dfn[x]=low[x]=++tim;</span><br><span class=\"line\">  sta[++top]=x;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> v:G[x])&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!dfn[v])&#123;</span><br><span class=\"line\">      <span class=\"built_in\">tarjan</span>(v),low[x]=<span class=\"built_in\">min</span>(low[x],low[v]);</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(low[v]&gt;=dfn[x])&#123;</span><br><span class=\"line\">        ++size;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(sta[top+<span class=\"number\">1</span>]!=v)<span class=\"built_in\">add2</span>(sta[top],size),top--;</span><br><span class=\"line\">        <span class=\"built_in\">add2</span>(x,size);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t\tlow[x]=<span class=\"built_in\">min</span>(low[x],dfn[v]);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p>$\\ \\ \\ \\ \\ \\ \\ \\,$tarjian算法及其相关算法的复习笔记：</p>","more":"<h2 id=\"边双连通分量\"><a href=\"#边双连通分量\" class=\"headerlink\" title=\"边双连通分量\"></a>边双连通分量</h2><p>$\\ \\ \\ \\ \\ \\ \\ \\,$对于一个有向图，能互相到达的点在一个连通分量，很多时候一个连通分量的点对答案没有影响，或者可以统一安排，那么我们就用tarjan算法把它们缩在一起。</p>\n<p>$\\ \\ \\ \\ \\ \\ \\ \\,$这样就把有向图转换为了一个DAG，会方便处理很多。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> U[N],V[N],p;</span><br><span class=\"line\">vector&lt;<span class=\"type\">int</span>&gt; G[N];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"type\">int</span> a,<span class=\"type\">int</span> b)</span></span>&#123;U[++p]=a;V[p]=b;G[a].<span class=\"built_in\">push_back</span>(b);&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> sta[N],top;</span><br><span class=\"line\"><span class=\"type\">int</span> low[N],dfn[N],tim;</span><br><span class=\"line\"><span class=\"type\">int</span> col[N],mark;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">tarjan</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span>&#123;</span><br><span class=\"line\">  sta[++top]=x;</span><br><span class=\"line\">  low[x]=dfn[x]=++tim;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> v:G[x])&#123;</span><br><span class=\"line\">  \t<span class=\"keyword\">if</span>(!dfn[v])<span class=\"built_in\">tarjan</span>(v);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!col[v])low[x]=<span class=\"built_in\">min</span>(low[x],low[v]);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(low[x]==dfn[x])&#123;</span><br><span class=\"line\">    mark++; </span><br><span class=\"line\">    <span class=\"keyword\">while</span>(sta[top+<span class=\"number\">1</span>]!=x)col[sta[top]]=mark,top--;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//main():</span></span><br><span class=\"line\"><span class=\"comment\">//  for(int i=1;i&lt;=n;i++)</span></span><br><span class=\"line\"><span class=\"comment\">//  if(!dfn[i]) tarjan(i);</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"割点\"><a href=\"#割点\" class=\"headerlink\" title=\"割点\"></a>割点</h2><p>$\\ \\ \\ \\ \\ \\ \\ \\,$在一个无向图中，去掉一个点，使得图不连通，这个点就叫割点（sta[]中）：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vector&lt;<span class=\"type\">int</span>&gt; G[N];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"type\">int</span> a,<span class=\"type\">int</span> b)</span></span>&#123;G[a].<span class=\"built_in\">push_back</span>(b);G[b].<span class=\"built_in\">push_back</span>(a);&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> sta[N],top;</span><br><span class=\"line\"><span class=\"type\">int</span> low[N],dfn[N],tim;</span><br><span class=\"line\"><span class=\"type\">bool</span> used[N];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">tarjan</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> rt)</span></span>&#123;</span><br><span class=\"line\">  <span class=\"type\">int</span> cnt=<span class=\"number\">0</span>;</span><br><span class=\"line\">  low[x]=dfn[x]=++tim;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> v:G[x])&#123;</span><br><span class=\"line\">  \t<span class=\"keyword\">if</span>(!dfn[v])&#123;</span><br><span class=\"line\">      <span class=\"built_in\">tarjan</span>(v,rt);</span><br><span class=\"line\">      low[x]=<span class=\"built_in\">min</span>(low[x],low[v]);</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(low[v]&gt;=dfn[x]&amp;&amp;x!=rt&amp;&amp;used[x]==<span class=\"number\">0</span>)</span><br><span class=\"line\">      &#123;sta[++top]=x;used[x]=<span class=\"number\">1</span>;&#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(x==rt)cnt++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    low[x]=<span class=\"built_in\">min</span>(low[x],dfn[v]);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(x==rt&amp;&amp;cnt&gt;=<span class=\"number\">2</span>&amp;&amp;used[x]==<span class=\"number\">0</span>)</span><br><span class=\"line\">  &#123;sta[++top]=x;used[x]=<span class=\"number\">1</span>;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//main():</span></span><br><span class=\"line\"><span class=\"comment\">//  for(int i=1;i&lt;=n;i++)</span></span><br><span class=\"line\"><span class=\"comment\">//  if(!dfn[i]) tarjan(i,i);</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"圆方树\"><a href=\"#圆方树\" class=\"headerlink\" title=\"圆方树\"></a>圆方树</h2><p>$\\ \\ \\ \\ \\ \\ \\ \\,$专门处理仙人掌的做法，把一个环转换为一个方点，把一个仙人掌转换为一棵树，方便处理：</p>\n<p>$\\ \\ \\ \\ \\ \\ \\ \\,$（方点之间连接的圆点为割点）</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> sta[N],top,size,tim,dfn[N],low[N];</span><br><span class=\"line\">vector&lt;<span class=\"type\">int</span>&gt; G[N],E[N&lt;&lt;<span class=\"number\">1</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">add1</span><span class=\"params\">(<span class=\"type\">int</span> a,<span class=\"type\">int</span> b)</span></span>&#123;G[a].<span class=\"built_in\">push_back</span>(b);G[b].<span class=\"built_in\">push_back</span>(a);&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">add2</span><span class=\"params\">(<span class=\"type\">int</span> a,<span class=\"type\">int</span> b)</span></span>&#123;E[a].<span class=\"built_in\">push_back</span>(b);E[b].<span class=\"built_in\">push_back</span>(a);&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">tarjan</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span>&#123;</span><br><span class=\"line\">  dfn[x]=low[x]=++tim;</span><br><span class=\"line\">  sta[++top]=x;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> v:G[x])&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!dfn[v])&#123;</span><br><span class=\"line\">      <span class=\"built_in\">tarjan</span>(v),low[x]=<span class=\"built_in\">min</span>(low[x],low[v]);</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(low[v]&gt;=dfn[x])&#123;</span><br><span class=\"line\">        ++size;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(sta[top+<span class=\"number\">1</span>]!=v)<span class=\"built_in\">add2</span>(sta[top],size),top--;</span><br><span class=\"line\">        <span class=\"built_in\">add2</span>(x,size);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t\tlow[x]=<span class=\"built_in\">min</span>(low[x],dfn[v]);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"关于DP的优化","date":"2018-12-29T06:21:33.000Z","mathjax":true,"_content":"\n$\\ \\ \\ \\ \\ \\ \\ \\,$动态规划及其相优化方法的复习笔记：\n\n<!-- more -->\n\n## 矩阵快速幂\n\n$\\ \\ \\ \\ \\ \\ \\,$很多时候我们的dp式子如下形式，是一个递推形式$f_{(m,n)}$：\n\n$f_{(i,j)}=a_{(1,j)}\\cdot f_{(i-1,1)}+a_{(2,j)}\\cdot f_{(i-1,2)}+\\cdots+a_{(n,j)}\\cdot f_{(i-1,n)}$\n\n$\\ \\ \\ \\ \\ \\ \\,$显然，若是$a_{(i,j)}$参数确定,复杂度也是$O(mn^2)$的，多数情况下不会达到这个复杂度，但是也是接受不了的，有些题目$m$给的特别大，$n$比较小，我们就考虑矩阵优化：\n\n$\\ \\ \\ \\ \\ \\ \\,$首先设定初始矩阵$A$，也就是原dp式子的初始化项：\n\n$A= \\begin{bmatrix} f_{(0,1)} & f_{(0,2)} & \\cdots & f_{(0,n)}\\\\ \\end{bmatrix} $\n\n$\\ \\ \\ \\ \\ \\ \\,$然后设定转移矩阵$B$：\n\n$B= \\begin{bmatrix} a_{(1,1)} & a_{(1,2)} & \\cdots & a_{(1,n)}\\\\a_{(2,1)} & a_{(2,2)} & \\cdots & a_{(2,n)}\\\\\\vdots\\\\a_{(n,1)} & a_{(n,2)} & \\cdots & a_{(n,n)}\\\\ \\end{bmatrix} $\n\n$\\ \\ \\ \\ \\ \\ \\,$根据矩阵乘法的定义，很容易得到：\n\n$A\\times B=\\begin{bmatrix} f_{(1,1)} & f_{(1,2)} & \\cdots & f_{(1,n)}\\\\ \\end{bmatrix}$\n\n$\\ \\ \\ \\ \\ \\ \\,$推广得到：\n\n$A\\times B^m=\\begin{bmatrix} f_{(m,1)} & f_{(m,2)} & \\cdots & f_{(m,n)}\\\\ \\end{bmatrix}$\n\n$\\ \\ \\ \\ \\ \\ \\,$根据矩阵乘法满足交换律，所以我们可以先算出$B^m$，再$A$乘之，即可得到答案，矩阵快速幂如下，复杂度优化到$O(\\log m \\cdot n^3)$：\n\n``` cpp\nstruct matrix{int n,m,a[N][N];};\ninline matrix operator *(const matrix &a,const matrix &b){\n\tmatrix ret;ret.n=a.n;ret.m=b.m;\n\tfor(int i=1;i<=a.n;i++)\n\tfor(int j=1;j<=b.m;j++){\n\t  ret.a[i][j]=0;\n\t  for(int k=1;k<=a.m;k++)\n\t  ret.a[i][j]+=a.a[i][k]*b.a[k][j];\n\t}\n\treturn ret;\n}\ninline matrix power(matrix A,matrix B,int m){\n\tfor(;m;m>>=1,B=B*B)if(m&1)A=A*B;\n\treturn A;\n}\n```\n\n### [P1349 广义斐波那契数列](https://www.luogu.org/problemnew/show/P1349)\n\n$\\ \\ \\ \\ \\ \\ \\,$模板题目，递推式是：\n\n$a_{n}=p\\cdot a_{(n-1)}+q\\cdot a_{(n-2)}$\n\n$\\ \\ \\ \\ \\ \\ \\,$所以我们令：\n\n$f_{i,2}=[a_{i-1},a_{i}]$\n\n$\\ \\ \\ \\ \\ \\ \\,$那么有：\n\n$f_{(i,1)}=0\\cdot f_{(i-1,1)}+1\\cdot f_{(i-1,2)}$\n\n$f_{(i,2)}=p\\cdot f_{(i-1,1)}+q\\cdot f_{(i-1,2)}$\n\n$\\ \\ \\ \\ \\ \\ \\,$所以我们把$A$，$B$矩阵设置为：\n\n$A= \\begin{bmatrix} a_{1} & a_{2} \\end{bmatrix} $\n\n$B= \\begin{bmatrix} 0 & q\\\\1 &p \\end{bmatrix} $\n\n$\\ \\ \\ \\ \\ \\ \\,$那么我们的答案就在$A\\times B^{n-2}$的第二项。\n\n``` cpp\n#include<algorithm>\n#include<iostream>\n#include<cstdlib>\n#include<cstring>\n#include<cctype>\n#include<cstdio>\n#include<vector>\n#include<string>\n#include<queue>\n#include<stack>\n#include<cmath>\n#include<map>\n#include<set>\nusing namespace std;\nconst int inf=0x7fffffff;\nconst double eps=1e-10;\nconst double pi=acos(-1.0);\n//char buf[1<<15],*S=buf,*T=buf;\n//char getch(){return S==T&&(T=(S=buf)+fread(buf,1,1<<15,stdin),S==T)?0:*S++;}\ninline int read(){\n\tint x=0,f=1;char ch;ch=getchar();\n\twhile(ch<'0'||ch>'9'){if(ch=='-') f=0;ch=getchar();}\n\twhile(ch>='0'&&ch<='9'){x=(x<<1)+(x<<3)+(ch&15);ch=getchar();}\n\tif(f)return x;else return -x;\n}\nconst int N=5;\nlong long n,m;\nint p,q;\nstruct matrix{int n,m;long long a[N][N];}A,B;\ninline matrix operator *(const matrix &a,const matrix &b){\n\tmatrix ret;ret.n=a.n;ret.m=b.m;\n\tfor(int i=1;i<=a.n;i++)\n\tfor(int j=1;j<=b.m;j++){\n\t  ret.a[i][j]=0ll;\n\t  for(int k=1;k<=a.m;k++)\n\t  ret.a[i][j]=(ret.a[i][j]+a.a[i][k]*b.a[k][j]%m)%m;\n\t}\n\treturn ret;\n}\ninline matrix power(matrix A,matrix B,int m){\n\tfor(;m;m>>=1,B=B*B)if(m&1)A=A*B;\n\treturn A;\n}\nint main()\n{\n\tA.n=1;A.m=B.m=B.n=2;\n\tp=read();q=read();\n\tA.a[1][1]=read();A.a[1][2]=read();\n\tB.a[1][1]=0;B.a[1][2]=q;\n\tB.a[2][1]=1;B.a[2][2]=p;\n\tscanf(\"%lld%lld\",&n,&m);\n\tA=power(A,B,n-2);\n\tprintf(\"%lld\\n\",A.a[1][2]);\n\treturn 0;\n}\n\n```\n\n\n## 单调队列\n\n$\\ \\ \\ \\ \\ \\ \\,$对于一个dp转移方程式，其中取最小或最大：\n\n$f_{i}={\\rm solve}(i,j)[l<j<r]$\n\n$\\ \\ \\ \\ \\ \\ \\,$若是可以化成如下形式：\n\n$f_(i)=F(j)+g(i)[l<j<r]$\n\n$\\ \\ \\ \\ \\ \\ \\,$既 $j$ 造成的贡献与 $i$ 没有关系，并且 $j$ 造成的贡献我们需要取最大或者最小时，并且范围$[l<j<r]$有单调性时，我们可以利用单调队列来优化dp，从$O(n^2)$优化到$O(n)$。\n\n$\\ \\ \\ \\ \\ \\ \\,$核心想法是，建立一个容器，我们把 $F(j)$ 造成的贡献按照单调性加入该容器，若是现在需要新加入一个元素，那么就从队尾开始，把比他造成贡献不优的踢出去（原dp取 $\\rm Min$ 的话就是需要 $F(j)$ 比队尾小，反之就是要大）。\n\n$\\ \\ \\ \\ \\ \\ \\,$当然这个时候队首将会是最优秀的 $j$，不过我们的范围限制还可能单调变化，于是我们又需要把队首那些范围不对的都踢掉，于是现在队首就是我们要的 $j$ 了，带入原dp即可。\n\n$\\ \\ \\ \\ \\ \\ \\,$由于所有元素都最多进入容器一次，又最多被踢一次，所以复杂度是$O(n)$的，模板如下：\n\n``` cpp\nint q=1,p=0,Q[N];\nfor(int i=1;i<=n;i--){\n  while(q<=p&&better(F(i),F(Q[p])))p--;\n  Q[++p]=i;\n  while(q<=p&&!in_lim(i,Q[q]))q++;\n  if(q<=p)f[i]=F(Q[q])+g(i); \n}\n```\n\n### [P2569 [SCOI2010]股票交易](https://www.luogu.org/problemnew/show/P2569)\n\n$\\ \\ \\ \\ \\ \\ \\,$这题显然会有一个dp方程，$f_{(i,j)}$表示在第$i$天手里有$j$张股票的最大收益：\n\n- 直接购买：\n\n  $f_{(i,j)}=-aP_i\\times j[0\\leq j\\leq aS_i]$\n\n- 不行动：\n\n  $f_{(i,j)}=f_{(i-1,j)}$\n\n- 买入：\n\n  $f_{(i,j)}={\\rm Max}_{k=j-aS_i}^{j-1}\\left(f_{(i-w-1,k)}-(j-k)\\times aP_i\\right)$\n\n- 卖出：\n\n  $f_{(i,j)}={\\rm Max}_{k=j+1}^{j+bS_i}\\left(f_{(i-w-1,k)}+(k-j)\\times bP_i\\right)$\n  \n$\\ \\ \\ \\ \\ \\ \\,$复杂度为$O(n^3)$，主要是后面两个操作花时间了，所幸，后面两个都可以斜率优化，复杂度优化为$O(n^2)$\n\n``` cpp\n#include<algorithm>\n#include<iostream>\n#include<cstdlib>\n#include<cstring>\n#include<cctype>\n#include<cstdio>\n#include<vector>\n#include<string>\n#include<queue>\n#include<stack>\n#include<cmath>\n#include<map>\n#include<set>\nusing namespace std;\nconst int inf=0x7fffffff;\nconst double eps=1e-10;\nconst double pi=acos(-1.0);\n//char buf[1<<15],*S=buf,*T=buf;\n//char getch(){return S==T&&(T=(S=buf)+fread(buf,1,1<<15,stdin),S==T)?0:*S++;}\ninline int read(){\n\tint x=0,f=1;char ch;ch=getchar();\n\twhile(ch<'0'||ch>'9'){if(ch=='-') f=0;ch=getchar();}\n\twhile(ch>='0'&&ch<='9'){x=(x<<1)+(x<<3)+(ch&15);ch=getchar();}\n\tif(f)return x;else return -x;\n}\nconst int N=2010;\nint n,m,w;\nint f[N][N];\nint aP[N],bP[N],aS[N],bS[N];\nint q,p,Q[N];\nint main()\n{\n\tn=read();m=read();w=read();\n\tfor(int i=1;i<=n;i++)\n\taP[i]=read(),bP[i]=read(),\n\taS[i]=read(),bS[i]=read();\n  memset(f,128,sizeof(f));\n  for(int i=1;i<=n;i++){\n  \tfor(int j=0;j<=aS[i];j++)f[i][j]=-j*aP[i];\n  \tfor(int j=0;j<=m;j++)f[i][j]=max(f[i][j],f[i-1][j]);\n  \tif(i<=w)continue;\n    q=1,p=0; \n    for(int j=0;j<=m;j++){\n      while(q<=p&&f[i-w-1][Q[p]]+Q[p]*aP[i]<=f[i-w-1][j]+j*aP[i])p--;\n      Q[++p]=j;\n      while(q<=p&&Q[q]<j-aS[i])q++;\n      if(q<=p)f[i][j]=max(f[i][j],f[i-w-1][Q[q]]+(Q[q]-j)*aP[i]); \n    }\n\t  q=1,p=0;\n\t\tfor(int j=m;j>=0;j--){\n      while(q<=p&&f[i-w-1][Q[p]]+Q[p]*bP[i]<=f[i-w-1][j]+j*bP[i])p--;\n      Q[++p]=j;\n      while(q<=p&&Q[q]>j+bS[i])q++;\n      if(q<=p)f[i][j]=max(f[i][j],f[i-w-1][Q[q]]+(Q[q]-j)*bP[i]); \n    }\n\t}\n\tint ans=0;\n\tfor(int i=0;i<=m;i++)ans=max(ans,f[n][i]);\n  printf(\"%d\\n\",ans);\n\treturn 0;\n}\n\n```\n\n\n## 斜率优化\n\n$\\ \\ \\ \\ \\ \\ \\,$对于一个dp式子，我们尝试将它化成3个部分：\n\n- 只与 $i$ 有关的（$A_i$）；\n- 只与 $j$ 有关的（$D_j$）；\n- 与 $i$ 和 $j$ 同时有关的（$B_i\\cdot C_j$）；\n\n$\\ \\ \\ \\ \\ \\ \\,$所以我们会得到形如这样子的式子：\n\n${B_i}\\cdot C_j+{A_i}={D_j}$\n\n$\\ \\ \\ \\ \\ \\ \\,$那么这个时候，我们把$B_i$当做斜率，$C_j$是横坐标，$D_j$是纵坐标，我们想要的是$A_i$最大或者是最小，那么答案一定是下面的那一层点里面诞生，需要满足的是：\n\n- 两个点之间的斜率必须优于$B_i$，若是取$\\rm Max$就是需要大于，否者就是小于。\n\n- 最优的$j$取值一定是斜率尽量优的。\n\n$\\ \\ \\ \\ \\ \\ \\,$那么我们的想法是维护这个斜率组成的凸壳，若是$B_i$单调，我们可以考虑单调队列，若是不单调，那么我们在单调队列的基础上面，就不能从队首踢，就是维护一整个凸壳，每次询问在上面二分。\n\n$\\ \\ \\ \\ \\ \\ \\,$下面给出单调队列版的模板：\n\n``` cpp\nint Q[N],q,p;\nlong double Slope(int i){};//B(i)\nlong long X(int i){}//C(j)\nlong long Y(int j){}//D(j)\nlong double slope(int i,int j){\n\tif(X(i)==X(j))return 1.0*inf;//max_inf,min_-inf;\n\treturn (1.0*(Y(i)-Y(j)))/(1.0*(X(i)-X(j)));\n}\nint main()\n{\n\tq=p=1;\n\tfor(int i=1;i<=n;i++){\n\t\twhile(q<p&&better(slope(Q[q],Q[q+1]),Slope))++q;\n\t\tf[i]=F(Q[q]);//原dp方程\n\t\twhile(q<p&&better(slope(i,Q[p-1]),slope(Q[p],Q[p-1])))--p;\n\t\tQ[++p]=i;\n\t}\n\treturn 0;\n}\n```\n### [P3195 [HNOI2008]玩具装箱TOY](https://www.luogu.org/problemnew/show/P3195)\n\n$\\ \\ \\ \\ \\ \\ \\,$本题dp方程如下：\n\n$f_i={\\rm Min}_{j=1}^{i-1}\\left(f_j+(Sum_i-Sum_j+i-j-L-1)^2\\right)$\n\n$\\ \\ \\ \\ \\ \\ \\,$化成如下形式：\n\n${2\\times(Sum_i+i)}(Sum_j+j+L+1)+{\\left(f_i-(Sum_i+i)^2\\right)}={\\left(f_j+(Sum_j+j+L+1)^2\\right)}$\n\n$\\ \\ \\ \\ \\ \\ \\,$我们发现${2\\times(Sum_i+i)}$是单调的，于是我们想用单调队列来维护这个凸壳：\n\n``` cpp\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#include<cstdlib>\n#include<cstring>\n#include<string>\n#include<queue>\n#include<map>\n#include<set>\n#include<stack>\n#include<cmath>\n#include<cctype>\nusing namespace std;\nconst int inf=0x7fffffff;\nconst double eps=1e-10;\nconst double pi=acos(-1.0);\n//char buf[1<<15],*S=buf,*T=buf;\n//char getch(){return S==T&&(T=(S=buf)+fread(buf,1,1<<15,stdin),S==T)?0:*S++;}\ninline long long read(){\n\tlong long x=0,f=1;char ch;ch=getchar();\n\twhile(ch<'0'||ch>'9'){if(ch=='-') f=0;ch=getchar();}\n\twhile(ch>='0'&&ch<='9'){x=(x<<1)+(x<<3)+(ch&15);ch=getchar();}\n\tif(f)return x;else return -x;\n}\nconst int N=50010;\ndouble f[N],sum[N],L;\nint q,p,Q[N];\nint n;\ndouble fn(int i){return sum[i]+(double)i;}\ndouble X(int i){return fn(i)+L;}\ndouble Y(int i){return f[i]+(fn(i)+L)*(fn(i)+L);}\ndouble slope(int i,int j){return (Y(i)-Y(j))/(X(i)-X(j));}\nint main()\n{\n\tn=(int)read();L=(double)read()+1.0;\n\tfor(int i=1;i<=n;i++)\n\tsum[i]=(double)read(),sum[i]+=sum[i-1];\n\tq=p=1;\n\tfor(int i=1;i<=n;i++){\n\t\twhile(q<p&&slope(Q[q],Q[q+1])<2*fn(i))++q;\n\t\tf[i]=f[Q[q]]+(fn(i)-fn(Q[q])-L)*(fn(i)-fn(Q[q])-L);\n\t\twhile(q<p&&slope(i,Q[p-1])<slope(Q[p-1],Q[p])) --p;\n    \tQ[++p]=i;\n\t}\n\tprintf(\"%lld\\n\",(long long)f[n]);\n\treturn 0;\n}\n\n```\n\n## WQS二分\n\n$\\ \\ \\ \\ \\ \\ \\,$WQS二分和斜率优化很相似，多了一个宽度限制，既需要干好取$m$个。和斜率优化一样，我们需要把式子化成下面的形式：\n\n${B_i}\\cdot C_j+{A_i}={D_j}$\n\n$\\ \\ \\ \\ \\ \\ \\,$在二分之前，我们二分一个特殊的值 $v$，取$k$个物品时，总贡献会多$kv$，在进行dp的同时，若$v$越大，取的物品越少，那么我们检查在$v$，的时候有多少个物品被选就好了，**注意使用WQS二分需要满足$v$越大，取的物品越少**，既需要满足取$x$个时的总贡献斜率不增，说白了，就是需要满足选的越多越好。\n\n$\\ \\ \\ \\ \\ \\ \\,$模板如下：\n\n``` cpp\nint Q[N],q,p;\nlong double Slope(int i){};//B(i)\nlong long X(int i){}//C(j)\nlong long Y(int j){}//D(j)\nlong double slope(int i,int j){\n\tif(X(i)==X(j))return 1.0*inf;//max_inf,min_-inf;\n\treturn (1.0*(Y(i)-Y(j)))/(1.0*(X(i)-X(j)));\n}\nbool cheak(long long v){\n\tq=p=1;\n\tfor(int i=1;i<=n;i++){\n\t\twhile(q<p&&better(slope(Q[q],Q[q+1]),Slope))++q;\n\t\tf[i]=F(Q[q])+v;//原dp方程\n\t\ttot[i]=tot[Q[q]]+1;\n\t\twhile(q<p&&better(slope(i,Q[p-1]),slope(Q[p],Q[p-1])))--p;\n\t\tQ[++q]=i;\n\t}\n  return tot[n]<=m;\n}\nint main()\n{\n  while(l<r){\n    long long mid=l+r>>1;\n    if(cheak(mid))r=mid;\n    else l=mid+1;\n  }\n  cheak(l);\n  printf(\"%lld\\n\",f[n]-l*m);\n\treturn 0;\n}\n```\n\n### [P4983 忘情](https://www.luogu.org/problemnew/show/P4983)\n\n$\\ \\ \\ \\ \\ \\ \\,$这个题是我们团队准备的，原式是来恶心人的，化简下来就是这个东西：\n\n$\\left(\\sum_{i=1}^nx_i+1\\right)^2$\n\n$\\ \\ \\ \\ \\ \\ \\,$dp方程显然就是这个东西：\n\n$f_i={\\rm Min}_{j=1}^{i-1}f_j+\\left(Sum_i-Sum_j+1\\right)^2$\n\n$\\ \\ \\ \\ \\ \\ \\,$化成如下形式：\n\n${2\\times Sum_i}\\cdot Sum_j+{\\left(f_i-(Sum_i+1)^2\\right)}={f_j+Sum_j^2-2\\times Sum_j}$\n\n$\\ \\ \\ \\ \\ \\ \\,$感性思考一下，当$m$越大，答案一定小越小，那么我们就可以使用WQS二分：\n\n``` cpp\n#include<algorithm>\n#include<iostream>\n#include<cstdlib>\n#include<cstring>\n#include<cctype>\n#include<cstdio>\n#include<vector>\n#include<string>\n#include<queue>\n#include<stack>\n#include<cmath>\n#include<map>\n#include<set>\nusing namespace std;\nconst int inf=0x7fffffff;\nconst double eps=1e-10;\nconst double pi=acos(-1.0);\n//char buf[1<<15],*S=buf,*T=buf;\n//char getch(){return S==T&&(T=(S=buf)+fread(buf,1,1<<15,stdin),S==T)?0:*S++;}\ninline int read(){\n\tint x=0,f=1;char ch;ch=getchar();\n\twhile(ch<'0'||ch>'9'){if(ch=='-') f=0;ch=getchar();}\n\twhile(ch>='0'&&ch<='9'){x=(x<<1)+(x<<3)+(ch&15);ch=getchar();}\n\tif(f)return x;else return -x;\n}\nconst int N=100010;\nint n,m,tot[N];\nlong long sum[N],f[N],Q[N];\nlong long X(int a){return sum[a];}\nlong long Y(int a){return f[a]+sum[a]*sum[a]-2ll*sum[a];}\ndouble solpe(int i,int j){return 1.0*(Y(i)-Y(j))/(X(i)-X(j));}\nbool cheak(long long v){\n\tint q=1,p=1;\n  for(int i=1;i<=n;i++){\n  \twhile(q<p&&solpe(Q[q+1],Q[q])<2.0*sum[i])q++;\n    f[i]=f[Q[q]]+(sum[i]-sum[Q[q]]+1)*(sum[i]-sum[Q[q]]+1)+v;\n\t\ttot[i]=tot[Q[q]]+1;\n    while(q<p&&solpe(i,Q[p])<solpe(Q[p-1],Q[p]))p--;\n    Q[++p]=i;\n\t}\n  return tot[n]<=m;\n}\nint main()\n{\n\tn=read();m=read();\n\tfor(int i=1;i<=n;i++)sum[i]=sum[i-1]+1ll*read();\n\tlong long l=1,r=(sum[n]*sum[n])/2,mid;\n\twhile(l<r){\n    long long mid=l+r>>1;\n    if(cheak(mid))r=mid;\n    else l=mid+1;\n  }\n  cheak(l);\n  printf(\"%lld\\n\",f[n]-l*m);\n\treturn 0;\n}\n\n```\n\n\n","source":"_posts/关于DP的优化.md","raw":"---\ntitle: '关于DP的优化'\ndate: 2018-12-29 14:21:33\ncategories:\n- 学习笔记\ntags:\n- OI\n- 动态规划\n- 矩阵乘法\n- 单调队列\n- 斜率优化\n- WQS二分\nmathjax: true\n---\n\n$\\ \\ \\ \\ \\ \\ \\ \\,$动态规划及其相优化方法的复习笔记：\n\n<!-- more -->\n\n## 矩阵快速幂\n\n$\\ \\ \\ \\ \\ \\ \\,$很多时候我们的dp式子如下形式，是一个递推形式$f_{(m,n)}$：\n\n$f_{(i,j)}=a_{(1,j)}\\cdot f_{(i-1,1)}+a_{(2,j)}\\cdot f_{(i-1,2)}+\\cdots+a_{(n,j)}\\cdot f_{(i-1,n)}$\n\n$\\ \\ \\ \\ \\ \\ \\,$显然，若是$a_{(i,j)}$参数确定,复杂度也是$O(mn^2)$的，多数情况下不会达到这个复杂度，但是也是接受不了的，有些题目$m$给的特别大，$n$比较小，我们就考虑矩阵优化：\n\n$\\ \\ \\ \\ \\ \\ \\,$首先设定初始矩阵$A$，也就是原dp式子的初始化项：\n\n$A= \\begin{bmatrix} f_{(0,1)} & f_{(0,2)} & \\cdots & f_{(0,n)}\\\\ \\end{bmatrix} $\n\n$\\ \\ \\ \\ \\ \\ \\,$然后设定转移矩阵$B$：\n\n$B= \\begin{bmatrix} a_{(1,1)} & a_{(1,2)} & \\cdots & a_{(1,n)}\\\\a_{(2,1)} & a_{(2,2)} & \\cdots & a_{(2,n)}\\\\\\vdots\\\\a_{(n,1)} & a_{(n,2)} & \\cdots & a_{(n,n)}\\\\ \\end{bmatrix} $\n\n$\\ \\ \\ \\ \\ \\ \\,$根据矩阵乘法的定义，很容易得到：\n\n$A\\times B=\\begin{bmatrix} f_{(1,1)} & f_{(1,2)} & \\cdots & f_{(1,n)}\\\\ \\end{bmatrix}$\n\n$\\ \\ \\ \\ \\ \\ \\,$推广得到：\n\n$A\\times B^m=\\begin{bmatrix} f_{(m,1)} & f_{(m,2)} & \\cdots & f_{(m,n)}\\\\ \\end{bmatrix}$\n\n$\\ \\ \\ \\ \\ \\ \\,$根据矩阵乘法满足交换律，所以我们可以先算出$B^m$，再$A$乘之，即可得到答案，矩阵快速幂如下，复杂度优化到$O(\\log m \\cdot n^3)$：\n\n``` cpp\nstruct matrix{int n,m,a[N][N];};\ninline matrix operator *(const matrix &a,const matrix &b){\n\tmatrix ret;ret.n=a.n;ret.m=b.m;\n\tfor(int i=1;i<=a.n;i++)\n\tfor(int j=1;j<=b.m;j++){\n\t  ret.a[i][j]=0;\n\t  for(int k=1;k<=a.m;k++)\n\t  ret.a[i][j]+=a.a[i][k]*b.a[k][j];\n\t}\n\treturn ret;\n}\ninline matrix power(matrix A,matrix B,int m){\n\tfor(;m;m>>=1,B=B*B)if(m&1)A=A*B;\n\treturn A;\n}\n```\n\n### [P1349 广义斐波那契数列](https://www.luogu.org/problemnew/show/P1349)\n\n$\\ \\ \\ \\ \\ \\ \\,$模板题目，递推式是：\n\n$a_{n}=p\\cdot a_{(n-1)}+q\\cdot a_{(n-2)}$\n\n$\\ \\ \\ \\ \\ \\ \\,$所以我们令：\n\n$f_{i,2}=[a_{i-1},a_{i}]$\n\n$\\ \\ \\ \\ \\ \\ \\,$那么有：\n\n$f_{(i,1)}=0\\cdot f_{(i-1,1)}+1\\cdot f_{(i-1,2)}$\n\n$f_{(i,2)}=p\\cdot f_{(i-1,1)}+q\\cdot f_{(i-1,2)}$\n\n$\\ \\ \\ \\ \\ \\ \\,$所以我们把$A$，$B$矩阵设置为：\n\n$A= \\begin{bmatrix} a_{1} & a_{2} \\end{bmatrix} $\n\n$B= \\begin{bmatrix} 0 & q\\\\1 &p \\end{bmatrix} $\n\n$\\ \\ \\ \\ \\ \\ \\,$那么我们的答案就在$A\\times B^{n-2}$的第二项。\n\n``` cpp\n#include<algorithm>\n#include<iostream>\n#include<cstdlib>\n#include<cstring>\n#include<cctype>\n#include<cstdio>\n#include<vector>\n#include<string>\n#include<queue>\n#include<stack>\n#include<cmath>\n#include<map>\n#include<set>\nusing namespace std;\nconst int inf=0x7fffffff;\nconst double eps=1e-10;\nconst double pi=acos(-1.0);\n//char buf[1<<15],*S=buf,*T=buf;\n//char getch(){return S==T&&(T=(S=buf)+fread(buf,1,1<<15,stdin),S==T)?0:*S++;}\ninline int read(){\n\tint x=0,f=1;char ch;ch=getchar();\n\twhile(ch<'0'||ch>'9'){if(ch=='-') f=0;ch=getchar();}\n\twhile(ch>='0'&&ch<='9'){x=(x<<1)+(x<<3)+(ch&15);ch=getchar();}\n\tif(f)return x;else return -x;\n}\nconst int N=5;\nlong long n,m;\nint p,q;\nstruct matrix{int n,m;long long a[N][N];}A,B;\ninline matrix operator *(const matrix &a,const matrix &b){\n\tmatrix ret;ret.n=a.n;ret.m=b.m;\n\tfor(int i=1;i<=a.n;i++)\n\tfor(int j=1;j<=b.m;j++){\n\t  ret.a[i][j]=0ll;\n\t  for(int k=1;k<=a.m;k++)\n\t  ret.a[i][j]=(ret.a[i][j]+a.a[i][k]*b.a[k][j]%m)%m;\n\t}\n\treturn ret;\n}\ninline matrix power(matrix A,matrix B,int m){\n\tfor(;m;m>>=1,B=B*B)if(m&1)A=A*B;\n\treturn A;\n}\nint main()\n{\n\tA.n=1;A.m=B.m=B.n=2;\n\tp=read();q=read();\n\tA.a[1][1]=read();A.a[1][2]=read();\n\tB.a[1][1]=0;B.a[1][2]=q;\n\tB.a[2][1]=1;B.a[2][2]=p;\n\tscanf(\"%lld%lld\",&n,&m);\n\tA=power(A,B,n-2);\n\tprintf(\"%lld\\n\",A.a[1][2]);\n\treturn 0;\n}\n\n```\n\n\n## 单调队列\n\n$\\ \\ \\ \\ \\ \\ \\,$对于一个dp转移方程式，其中取最小或最大：\n\n$f_{i}={\\rm solve}(i,j)[l<j<r]$\n\n$\\ \\ \\ \\ \\ \\ \\,$若是可以化成如下形式：\n\n$f_(i)=F(j)+g(i)[l<j<r]$\n\n$\\ \\ \\ \\ \\ \\ \\,$既 $j$ 造成的贡献与 $i$ 没有关系，并且 $j$ 造成的贡献我们需要取最大或者最小时，并且范围$[l<j<r]$有单调性时，我们可以利用单调队列来优化dp，从$O(n^2)$优化到$O(n)$。\n\n$\\ \\ \\ \\ \\ \\ \\,$核心想法是，建立一个容器，我们把 $F(j)$ 造成的贡献按照单调性加入该容器，若是现在需要新加入一个元素，那么就从队尾开始，把比他造成贡献不优的踢出去（原dp取 $\\rm Min$ 的话就是需要 $F(j)$ 比队尾小，反之就是要大）。\n\n$\\ \\ \\ \\ \\ \\ \\,$当然这个时候队首将会是最优秀的 $j$，不过我们的范围限制还可能单调变化，于是我们又需要把队首那些范围不对的都踢掉，于是现在队首就是我们要的 $j$ 了，带入原dp即可。\n\n$\\ \\ \\ \\ \\ \\ \\,$由于所有元素都最多进入容器一次，又最多被踢一次，所以复杂度是$O(n)$的，模板如下：\n\n``` cpp\nint q=1,p=0,Q[N];\nfor(int i=1;i<=n;i--){\n  while(q<=p&&better(F(i),F(Q[p])))p--;\n  Q[++p]=i;\n  while(q<=p&&!in_lim(i,Q[q]))q++;\n  if(q<=p)f[i]=F(Q[q])+g(i); \n}\n```\n\n### [P2569 [SCOI2010]股票交易](https://www.luogu.org/problemnew/show/P2569)\n\n$\\ \\ \\ \\ \\ \\ \\,$这题显然会有一个dp方程，$f_{(i,j)}$表示在第$i$天手里有$j$张股票的最大收益：\n\n- 直接购买：\n\n  $f_{(i,j)}=-aP_i\\times j[0\\leq j\\leq aS_i]$\n\n- 不行动：\n\n  $f_{(i,j)}=f_{(i-1,j)}$\n\n- 买入：\n\n  $f_{(i,j)}={\\rm Max}_{k=j-aS_i}^{j-1}\\left(f_{(i-w-1,k)}-(j-k)\\times aP_i\\right)$\n\n- 卖出：\n\n  $f_{(i,j)}={\\rm Max}_{k=j+1}^{j+bS_i}\\left(f_{(i-w-1,k)}+(k-j)\\times bP_i\\right)$\n  \n$\\ \\ \\ \\ \\ \\ \\,$复杂度为$O(n^3)$，主要是后面两个操作花时间了，所幸，后面两个都可以斜率优化，复杂度优化为$O(n^2)$\n\n``` cpp\n#include<algorithm>\n#include<iostream>\n#include<cstdlib>\n#include<cstring>\n#include<cctype>\n#include<cstdio>\n#include<vector>\n#include<string>\n#include<queue>\n#include<stack>\n#include<cmath>\n#include<map>\n#include<set>\nusing namespace std;\nconst int inf=0x7fffffff;\nconst double eps=1e-10;\nconst double pi=acos(-1.0);\n//char buf[1<<15],*S=buf,*T=buf;\n//char getch(){return S==T&&(T=(S=buf)+fread(buf,1,1<<15,stdin),S==T)?0:*S++;}\ninline int read(){\n\tint x=0,f=1;char ch;ch=getchar();\n\twhile(ch<'0'||ch>'9'){if(ch=='-') f=0;ch=getchar();}\n\twhile(ch>='0'&&ch<='9'){x=(x<<1)+(x<<3)+(ch&15);ch=getchar();}\n\tif(f)return x;else return -x;\n}\nconst int N=2010;\nint n,m,w;\nint f[N][N];\nint aP[N],bP[N],aS[N],bS[N];\nint q,p,Q[N];\nint main()\n{\n\tn=read();m=read();w=read();\n\tfor(int i=1;i<=n;i++)\n\taP[i]=read(),bP[i]=read(),\n\taS[i]=read(),bS[i]=read();\n  memset(f,128,sizeof(f));\n  for(int i=1;i<=n;i++){\n  \tfor(int j=0;j<=aS[i];j++)f[i][j]=-j*aP[i];\n  \tfor(int j=0;j<=m;j++)f[i][j]=max(f[i][j],f[i-1][j]);\n  \tif(i<=w)continue;\n    q=1,p=0; \n    for(int j=0;j<=m;j++){\n      while(q<=p&&f[i-w-1][Q[p]]+Q[p]*aP[i]<=f[i-w-1][j]+j*aP[i])p--;\n      Q[++p]=j;\n      while(q<=p&&Q[q]<j-aS[i])q++;\n      if(q<=p)f[i][j]=max(f[i][j],f[i-w-1][Q[q]]+(Q[q]-j)*aP[i]); \n    }\n\t  q=1,p=0;\n\t\tfor(int j=m;j>=0;j--){\n      while(q<=p&&f[i-w-1][Q[p]]+Q[p]*bP[i]<=f[i-w-1][j]+j*bP[i])p--;\n      Q[++p]=j;\n      while(q<=p&&Q[q]>j+bS[i])q++;\n      if(q<=p)f[i][j]=max(f[i][j],f[i-w-1][Q[q]]+(Q[q]-j)*bP[i]); \n    }\n\t}\n\tint ans=0;\n\tfor(int i=0;i<=m;i++)ans=max(ans,f[n][i]);\n  printf(\"%d\\n\",ans);\n\treturn 0;\n}\n\n```\n\n\n## 斜率优化\n\n$\\ \\ \\ \\ \\ \\ \\,$对于一个dp式子，我们尝试将它化成3个部分：\n\n- 只与 $i$ 有关的（$A_i$）；\n- 只与 $j$ 有关的（$D_j$）；\n- 与 $i$ 和 $j$ 同时有关的（$B_i\\cdot C_j$）；\n\n$\\ \\ \\ \\ \\ \\ \\,$所以我们会得到形如这样子的式子：\n\n${B_i}\\cdot C_j+{A_i}={D_j}$\n\n$\\ \\ \\ \\ \\ \\ \\,$那么这个时候，我们把$B_i$当做斜率，$C_j$是横坐标，$D_j$是纵坐标，我们想要的是$A_i$最大或者是最小，那么答案一定是下面的那一层点里面诞生，需要满足的是：\n\n- 两个点之间的斜率必须优于$B_i$，若是取$\\rm Max$就是需要大于，否者就是小于。\n\n- 最优的$j$取值一定是斜率尽量优的。\n\n$\\ \\ \\ \\ \\ \\ \\,$那么我们的想法是维护这个斜率组成的凸壳，若是$B_i$单调，我们可以考虑单调队列，若是不单调，那么我们在单调队列的基础上面，就不能从队首踢，就是维护一整个凸壳，每次询问在上面二分。\n\n$\\ \\ \\ \\ \\ \\ \\,$下面给出单调队列版的模板：\n\n``` cpp\nint Q[N],q,p;\nlong double Slope(int i){};//B(i)\nlong long X(int i){}//C(j)\nlong long Y(int j){}//D(j)\nlong double slope(int i,int j){\n\tif(X(i)==X(j))return 1.0*inf;//max_inf,min_-inf;\n\treturn (1.0*(Y(i)-Y(j)))/(1.0*(X(i)-X(j)));\n}\nint main()\n{\n\tq=p=1;\n\tfor(int i=1;i<=n;i++){\n\t\twhile(q<p&&better(slope(Q[q],Q[q+1]),Slope))++q;\n\t\tf[i]=F(Q[q]);//原dp方程\n\t\twhile(q<p&&better(slope(i,Q[p-1]),slope(Q[p],Q[p-1])))--p;\n\t\tQ[++p]=i;\n\t}\n\treturn 0;\n}\n```\n### [P3195 [HNOI2008]玩具装箱TOY](https://www.luogu.org/problemnew/show/P3195)\n\n$\\ \\ \\ \\ \\ \\ \\,$本题dp方程如下：\n\n$f_i={\\rm Min}_{j=1}^{i-1}\\left(f_j+(Sum_i-Sum_j+i-j-L-1)^2\\right)$\n\n$\\ \\ \\ \\ \\ \\ \\,$化成如下形式：\n\n${2\\times(Sum_i+i)}(Sum_j+j+L+1)+{\\left(f_i-(Sum_i+i)^2\\right)}={\\left(f_j+(Sum_j+j+L+1)^2\\right)}$\n\n$\\ \\ \\ \\ \\ \\ \\,$我们发现${2\\times(Sum_i+i)}$是单调的，于是我们想用单调队列来维护这个凸壳：\n\n``` cpp\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#include<cstdlib>\n#include<cstring>\n#include<string>\n#include<queue>\n#include<map>\n#include<set>\n#include<stack>\n#include<cmath>\n#include<cctype>\nusing namespace std;\nconst int inf=0x7fffffff;\nconst double eps=1e-10;\nconst double pi=acos(-1.0);\n//char buf[1<<15],*S=buf,*T=buf;\n//char getch(){return S==T&&(T=(S=buf)+fread(buf,1,1<<15,stdin),S==T)?0:*S++;}\ninline long long read(){\n\tlong long x=0,f=1;char ch;ch=getchar();\n\twhile(ch<'0'||ch>'9'){if(ch=='-') f=0;ch=getchar();}\n\twhile(ch>='0'&&ch<='9'){x=(x<<1)+(x<<3)+(ch&15);ch=getchar();}\n\tif(f)return x;else return -x;\n}\nconst int N=50010;\ndouble f[N],sum[N],L;\nint q,p,Q[N];\nint n;\ndouble fn(int i){return sum[i]+(double)i;}\ndouble X(int i){return fn(i)+L;}\ndouble Y(int i){return f[i]+(fn(i)+L)*(fn(i)+L);}\ndouble slope(int i,int j){return (Y(i)-Y(j))/(X(i)-X(j));}\nint main()\n{\n\tn=(int)read();L=(double)read()+1.0;\n\tfor(int i=1;i<=n;i++)\n\tsum[i]=(double)read(),sum[i]+=sum[i-1];\n\tq=p=1;\n\tfor(int i=1;i<=n;i++){\n\t\twhile(q<p&&slope(Q[q],Q[q+1])<2*fn(i))++q;\n\t\tf[i]=f[Q[q]]+(fn(i)-fn(Q[q])-L)*(fn(i)-fn(Q[q])-L);\n\t\twhile(q<p&&slope(i,Q[p-1])<slope(Q[p-1],Q[p])) --p;\n    \tQ[++p]=i;\n\t}\n\tprintf(\"%lld\\n\",(long long)f[n]);\n\treturn 0;\n}\n\n```\n\n## WQS二分\n\n$\\ \\ \\ \\ \\ \\ \\,$WQS二分和斜率优化很相似，多了一个宽度限制，既需要干好取$m$个。和斜率优化一样，我们需要把式子化成下面的形式：\n\n${B_i}\\cdot C_j+{A_i}={D_j}$\n\n$\\ \\ \\ \\ \\ \\ \\,$在二分之前，我们二分一个特殊的值 $v$，取$k$个物品时，总贡献会多$kv$，在进行dp的同时，若$v$越大，取的物品越少，那么我们检查在$v$，的时候有多少个物品被选就好了，**注意使用WQS二分需要满足$v$越大，取的物品越少**，既需要满足取$x$个时的总贡献斜率不增，说白了，就是需要满足选的越多越好。\n\n$\\ \\ \\ \\ \\ \\ \\,$模板如下：\n\n``` cpp\nint Q[N],q,p;\nlong double Slope(int i){};//B(i)\nlong long X(int i){}//C(j)\nlong long Y(int j){}//D(j)\nlong double slope(int i,int j){\n\tif(X(i)==X(j))return 1.0*inf;//max_inf,min_-inf;\n\treturn (1.0*(Y(i)-Y(j)))/(1.0*(X(i)-X(j)));\n}\nbool cheak(long long v){\n\tq=p=1;\n\tfor(int i=1;i<=n;i++){\n\t\twhile(q<p&&better(slope(Q[q],Q[q+1]),Slope))++q;\n\t\tf[i]=F(Q[q])+v;//原dp方程\n\t\ttot[i]=tot[Q[q]]+1;\n\t\twhile(q<p&&better(slope(i,Q[p-1]),slope(Q[p],Q[p-1])))--p;\n\t\tQ[++q]=i;\n\t}\n  return tot[n]<=m;\n}\nint main()\n{\n  while(l<r){\n    long long mid=l+r>>1;\n    if(cheak(mid))r=mid;\n    else l=mid+1;\n  }\n  cheak(l);\n  printf(\"%lld\\n\",f[n]-l*m);\n\treturn 0;\n}\n```\n\n### [P4983 忘情](https://www.luogu.org/problemnew/show/P4983)\n\n$\\ \\ \\ \\ \\ \\ \\,$这个题是我们团队准备的，原式是来恶心人的，化简下来就是这个东西：\n\n$\\left(\\sum_{i=1}^nx_i+1\\right)^2$\n\n$\\ \\ \\ \\ \\ \\ \\,$dp方程显然就是这个东西：\n\n$f_i={\\rm Min}_{j=1}^{i-1}f_j+\\left(Sum_i-Sum_j+1\\right)^2$\n\n$\\ \\ \\ \\ \\ \\ \\,$化成如下形式：\n\n${2\\times Sum_i}\\cdot Sum_j+{\\left(f_i-(Sum_i+1)^2\\right)}={f_j+Sum_j^2-2\\times Sum_j}$\n\n$\\ \\ \\ \\ \\ \\ \\,$感性思考一下，当$m$越大，答案一定小越小，那么我们就可以使用WQS二分：\n\n``` cpp\n#include<algorithm>\n#include<iostream>\n#include<cstdlib>\n#include<cstring>\n#include<cctype>\n#include<cstdio>\n#include<vector>\n#include<string>\n#include<queue>\n#include<stack>\n#include<cmath>\n#include<map>\n#include<set>\nusing namespace std;\nconst int inf=0x7fffffff;\nconst double eps=1e-10;\nconst double pi=acos(-1.0);\n//char buf[1<<15],*S=buf,*T=buf;\n//char getch(){return S==T&&(T=(S=buf)+fread(buf,1,1<<15,stdin),S==T)?0:*S++;}\ninline int read(){\n\tint x=0,f=1;char ch;ch=getchar();\n\twhile(ch<'0'||ch>'9'){if(ch=='-') f=0;ch=getchar();}\n\twhile(ch>='0'&&ch<='9'){x=(x<<1)+(x<<3)+(ch&15);ch=getchar();}\n\tif(f)return x;else return -x;\n}\nconst int N=100010;\nint n,m,tot[N];\nlong long sum[N],f[N],Q[N];\nlong long X(int a){return sum[a];}\nlong long Y(int a){return f[a]+sum[a]*sum[a]-2ll*sum[a];}\ndouble solpe(int i,int j){return 1.0*(Y(i)-Y(j))/(X(i)-X(j));}\nbool cheak(long long v){\n\tint q=1,p=1;\n  for(int i=1;i<=n;i++){\n  \twhile(q<p&&solpe(Q[q+1],Q[q])<2.0*sum[i])q++;\n    f[i]=f[Q[q]]+(sum[i]-sum[Q[q]]+1)*(sum[i]-sum[Q[q]]+1)+v;\n\t\ttot[i]=tot[Q[q]]+1;\n    while(q<p&&solpe(i,Q[p])<solpe(Q[p-1],Q[p]))p--;\n    Q[++p]=i;\n\t}\n  return tot[n]<=m;\n}\nint main()\n{\n\tn=read();m=read();\n\tfor(int i=1;i<=n;i++)sum[i]=sum[i-1]+1ll*read();\n\tlong long l=1,r=(sum[n]*sum[n])/2,mid;\n\twhile(l<r){\n    long long mid=l+r>>1;\n    if(cheak(mid))r=mid;\n    else l=mid+1;\n  }\n  cheak(l);\n  printf(\"%lld\\n\",f[n]-l*m);\n\treturn 0;\n}\n\n```\n\n\n","slug":"关于DP的优化","published":1,"updated":"2022-02-13T13:38:04.161Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0i63w64000zu4gb6qwcgy7z","content":"<p>$\\ \\ \\ \\ \\ \\ \\ \\,$动态规划及其相优化方法的复习笔记：</p>\n<span id=\"more\"></span>\n<h2 id=\"矩阵快速幂\"><a href=\"#矩阵快速幂\" class=\"headerlink\" title=\"矩阵快速幂\"></a>矩阵快速幂</h2><p>$\\ \\ \\ \\ \\ \\ \\,$很多时候我们的dp式子如下形式，是一个递推形式$f_{(m,n)}$：</p>\n<p>$f_{(i,j)}=a_{(1,j)}\\cdot f_{(i-1,1)}+a_{(2,j)}\\cdot f_{(i-1,2)}+\\cdots+a_{(n,j)}\\cdot f_{(i-1,n)}$</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$显然，若是$a_{(i,j)}$参数确定,复杂度也是$O(mn^2)$的，多数情况下不会达到这个复杂度，但是也是接受不了的，有些题目$m$给的特别大，$n$比较小，我们就考虑矩阵优化：</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$首先设定初始矩阵$A$，也就是原dp式子的初始化项：</p>\n<p>$A= \\begin{bmatrix} f_{(0,1)} &amp; f_{(0,2)} &amp; \\cdots &amp; f_{(0,n)}\\\\ \\end{bmatrix} $</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$然后设定转移矩阵$B$：</p>\n<p>$B= \\begin{bmatrix} a_{(1,1)} &amp; a_{(1,2)} &amp; \\cdots &amp; a_{(1,n)}\\\\a_{(2,1)} &amp; a_{(2,2)} &amp; \\cdots &amp; a_{(2,n)}\\\\\\vdots\\\\a_{(n,1)} &amp; a_{(n,2)} &amp; \\cdots &amp; a_{(n,n)}\\\\ \\end{bmatrix} $</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$根据矩阵乘法的定义，很容易得到：</p>\n<p>$A\\times B=\\begin{bmatrix} f_{(1,1)} &amp; f_{(1,2)} &amp; \\cdots &amp; f_{(1,n)}\\\\ \\end{bmatrix}$</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$推广得到：</p>\n<p>$A\\times B^m=\\begin{bmatrix} f_{(m,1)} &amp; f_{(m,2)} &amp; \\cdots &amp; f_{(m,n)}\\\\ \\end{bmatrix}$</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$根据矩阵乘法满足交换律，所以我们可以先算出$B^m$，再$A$乘之，即可得到答案，矩阵快速幂如下，复杂度优化到$O(\\log m \\cdot n^3)$：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">matrix</span>&#123;<span class=\"type\">int</span> n,m,a[N][N];&#125;;</span><br><span class=\"line\"><span class=\"keyword\">inline</span> matrix <span class=\"keyword\">operator</span> *(<span class=\"type\">const</span> matrix &amp;a,<span class=\"type\">const</span> matrix &amp;b)&#123;</span><br><span class=\"line\">\tmatrix ret;ret.n=a.n;ret.m=b.m;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=a.n;i++)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;=b.m;j++)&#123;</span><br><span class=\"line\">\t  ret.a[i][j]=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> k=<span class=\"number\">1</span>;k&lt;=a.m;k++)</span><br><span class=\"line\">\t  ret.a[i][j]+=a.a[i][k]*b.a[k][j];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> matrix <span class=\"title\">power</span><span class=\"params\">(matrix A,matrix B,<span class=\"type\">int</span> m)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(;m;m&gt;&gt;=<span class=\"number\">1</span>,B=B*B)<span class=\"keyword\">if</span>(m&amp;<span class=\"number\">1</span>)A=A*B;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> A;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"P1349-广义斐波那契数列\"><a href=\"#P1349-广义斐波那契数列\" class=\"headerlink\" title=\"P1349 广义斐波那契数列\"></a><a href=\"https://www.luogu.org/problemnew/show/P1349\">P1349 广义斐波那契数列</a></h3><p>$\\ \\ \\ \\ \\ \\ \\,$模板题目，递推式是：</p>\n<p>$a_{n}=p\\cdot a_{(n-1)}+q\\cdot a_{(n-2)}$</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$所以我们令：</p>\n<p>$f_{i,2}=[a_{i-1},a_{i}]$</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$那么有：</p>\n<p>$f_{(i,1)}=0\\cdot f_{(i-1,1)}+1\\cdot f_{(i-1,2)}$</p>\n<p>$f_{(i,2)}=p\\cdot f_{(i-1,1)}+q\\cdot f_{(i-1,2)}$</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$所以我们把$A$，$B$矩阵设置为：</p>\n<p>$A= \\begin{bmatrix} a_{1} &amp; a_{2} \\end{bmatrix} $</p>\n<p>$B= \\begin{bmatrix} 0 &amp; q\\\\1 &amp;p \\end{bmatrix} $</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$那么我们的答案就在$A\\times B^{n-2}$的第二项。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdlib&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cctype&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;stack&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;map&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;set&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> inf=<span class=\"number\">0x7fffffff</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">double</span> eps=<span class=\"number\">1e-10</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">double</span> pi=<span class=\"built_in\">acos</span>(<span class=\"number\">-1.0</span>);</span><br><span class=\"line\"><span class=\"comment\">//char buf[1&lt;&lt;15],*S=buf,*T=buf;</span></span><br><span class=\"line\"><span class=\"comment\">//char getch()&#123;return S==T&amp;&amp;(T=(S=buf)+fread(buf,1,1&lt;&lt;15,stdin),S==T)?0:*S++;&#125;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">int</span> <span class=\"title\">read</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> x=<span class=\"number\">0</span>,f=<span class=\"number\">1</span>;<span class=\"type\">char</span> ch;ch=<span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(ch&lt;<span class=\"string\">&#x27;0&#x27;</span>||ch&gt;<span class=\"string\">&#x27;9&#x27;</span>)&#123;<span class=\"keyword\">if</span>(ch==<span class=\"string\">&#x27;-&#x27;</span>) f=<span class=\"number\">0</span>;ch=<span class=\"built_in\">getchar</span>();&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(ch&gt;=<span class=\"string\">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class=\"string\">&#x27;9&#x27;</span>)&#123;x=(x&lt;&lt;<span class=\"number\">1</span>)+(x&lt;&lt;<span class=\"number\">3</span>)+(ch&amp;<span class=\"number\">15</span>);ch=<span class=\"built_in\">getchar</span>();&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(f)<span class=\"keyword\">return</span> x;<span class=\"keyword\">else</span> <span class=\"keyword\">return</span> -x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">5</span>;</span><br><span class=\"line\"><span class=\"type\">long</span> <span class=\"type\">long</span> n,m;</span><br><span class=\"line\"><span class=\"type\">int</span> p,q;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">matrix</span>&#123;<span class=\"type\">int</span> n,m;<span class=\"type\">long</span> <span class=\"type\">long</span> a[N][N];&#125;A,B;</span><br><span class=\"line\"><span class=\"keyword\">inline</span> matrix <span class=\"keyword\">operator</span> *(<span class=\"type\">const</span> matrix &amp;a,<span class=\"type\">const</span> matrix &amp;b)&#123;</span><br><span class=\"line\">\tmatrix ret;ret.n=a.n;ret.m=b.m;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=a.n;i++)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;=b.m;j++)&#123;</span><br><span class=\"line\">\t  ret.a[i][j]=<span class=\"number\">0ll</span>;</span><br><span class=\"line\">\t  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> k=<span class=\"number\">1</span>;k&lt;=a.m;k++)</span><br><span class=\"line\">\t  ret.a[i][j]=(ret.a[i][j]+a.a[i][k]*b.a[k][j]%m)%m;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> matrix <span class=\"title\">power</span><span class=\"params\">(matrix A,matrix B,<span class=\"type\">int</span> m)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(;m;m&gt;&gt;=<span class=\"number\">1</span>,B=B*B)<span class=\"keyword\">if</span>(m&amp;<span class=\"number\">1</span>)A=A*B;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> A;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tA.n=<span class=\"number\">1</span>;A.m=B.m=B.n=<span class=\"number\">2</span>;</span><br><span class=\"line\">\tp=<span class=\"built_in\">read</span>();q=<span class=\"built_in\">read</span>();</span><br><span class=\"line\">\tA.a[<span class=\"number\">1</span>][<span class=\"number\">1</span>]=<span class=\"built_in\">read</span>();A.a[<span class=\"number\">1</span>][<span class=\"number\">2</span>]=<span class=\"built_in\">read</span>();</span><br><span class=\"line\">\tB.a[<span class=\"number\">1</span>][<span class=\"number\">1</span>]=<span class=\"number\">0</span>;B.a[<span class=\"number\">1</span>][<span class=\"number\">2</span>]=q;</span><br><span class=\"line\">\tB.a[<span class=\"number\">2</span>][<span class=\"number\">1</span>]=<span class=\"number\">1</span>;B.a[<span class=\"number\">2</span>][<span class=\"number\">2</span>]=p;</span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%lld%lld&quot;</span>,&amp;n,&amp;m);</span><br><span class=\"line\">\tA=<span class=\"built_in\">power</span>(A,B,n<span class=\"number\">-2</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%lld\\n&quot;</span>,A.a[<span class=\"number\">1</span>][<span class=\"number\">2</span>]);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"单调队列\"><a href=\"#单调队列\" class=\"headerlink\" title=\"单调队列\"></a>单调队列</h2><p>$\\ \\ \\ \\ \\ \\ \\,$对于一个dp转移方程式，其中取最小或最大：</p>\n<p>$f_{i}={\\rm solve}(i,j)[l&lt;j&lt;r]$</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$若是可以化成如下形式：</p>\n<p>$f_(i)=F(j)+g(i)[l&lt;j&lt;r]$</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$既 $j$ 造成的贡献与 $i$ 没有关系，并且 $j$ 造成的贡献我们需要取最大或者最小时，并且范围$[l&lt;j&lt;r]$有单调性时，我们可以利用单调队列来优化dp，从$O(n^2)$优化到$O(n)$。</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$核心想法是，建立一个容器，我们把 $F(j)$ 造成的贡献按照单调性加入该容器，若是现在需要新加入一个元素，那么就从队尾开始，把比他造成贡献不优的踢出去（原dp取 $\\rm Min$ 的话就是需要 $F(j)$ 比队尾小，反之就是要大）。</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$当然这个时候队首将会是最优秀的 $j$，不过我们的范围限制还可能单调变化，于是我们又需要把队首那些范围不对的都踢掉，于是现在队首就是我们要的 $j$ 了，带入原dp即可。</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$由于所有元素都最多进入容器一次，又最多被踢一次，所以复杂度是$O(n)$的，模板如下：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> q=<span class=\"number\">1</span>,p=<span class=\"number\">0</span>,Q[N];</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i--)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(q&lt;=p&amp;&amp;<span class=\"built_in\">better</span>(<span class=\"built_in\">F</span>(i),<span class=\"built_in\">F</span>(Q[p])))p--;</span><br><span class=\"line\">  Q[++p]=i;</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(q&lt;=p&amp;&amp;!<span class=\"built_in\">in_lim</span>(i,Q[q]))q++;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(q&lt;=p)f[i]=<span class=\"built_in\">F</span>(Q[q])+<span class=\"built_in\">g</span>(i); </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"P2569-SCOI2010-股票交易\"><a href=\"#P2569-SCOI2010-股票交易\" class=\"headerlink\" title=\"P2569 [SCOI2010]股票交易\"></a><a href=\"https://www.luogu.org/problemnew/show/P2569\">P2569 [SCOI2010]股票交易</a></h3><p>$\\ \\ \\ \\ \\ \\ \\,$这题显然会有一个dp方程，$f_{(i,j)}$表示在第$i$天手里有$j$张股票的最大收益：</p>\n<ul>\n<li><p>直接购买：</p>\n<p>$f_{(i,j)}=-aP_i\\times j[0\\leq j\\leq aS_i]$</p>\n</li>\n<li><p>不行动：</p>\n<p>$f_{(i,j)}=f_{(i-1,j)}$</p>\n</li>\n<li><p>买入：</p>\n<p>$f_{(i,j)}={\\rm Max}_{k=j-aS_i}^{j-1}\\left(f_{(i-w-1,k)}-(j-k)\\times aP_i\\right)$</p>\n</li>\n<li><p>卖出：</p>\n<p>$f_{(i,j)}={\\rm Max}_{k=j+1}^{j+bS_i}\\left(f_{(i-w-1,k)}+(k-j)\\times bP_i\\right)$</p>\n</li>\n</ul>\n<p>$\\ \\ \\ \\ \\ \\ \\,$复杂度为$O(n^3)$，主要是后面两个操作花时间了，所幸，后面两个都可以斜率优化，复杂度优化为$O(n^2)$</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdlib&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cctype&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;stack&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;map&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;set&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> inf=<span class=\"number\">0x7fffffff</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">double</span> eps=<span class=\"number\">1e-10</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">double</span> pi=<span class=\"built_in\">acos</span>(<span class=\"number\">-1.0</span>);</span><br><span class=\"line\"><span class=\"comment\">//char buf[1&lt;&lt;15],*S=buf,*T=buf;</span></span><br><span class=\"line\"><span class=\"comment\">//char getch()&#123;return S==T&amp;&amp;(T=(S=buf)+fread(buf,1,1&lt;&lt;15,stdin),S==T)?0:*S++;&#125;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">int</span> <span class=\"title\">read</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> x=<span class=\"number\">0</span>,f=<span class=\"number\">1</span>;<span class=\"type\">char</span> ch;ch=<span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(ch&lt;<span class=\"string\">&#x27;0&#x27;</span>||ch&gt;<span class=\"string\">&#x27;9&#x27;</span>)&#123;<span class=\"keyword\">if</span>(ch==<span class=\"string\">&#x27;-&#x27;</span>) f=<span class=\"number\">0</span>;ch=<span class=\"built_in\">getchar</span>();&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(ch&gt;=<span class=\"string\">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class=\"string\">&#x27;9&#x27;</span>)&#123;x=(x&lt;&lt;<span class=\"number\">1</span>)+(x&lt;&lt;<span class=\"number\">3</span>)+(ch&amp;<span class=\"number\">15</span>);ch=<span class=\"built_in\">getchar</span>();&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(f)<span class=\"keyword\">return</span> x;<span class=\"keyword\">else</span> <span class=\"keyword\">return</span> -x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">2010</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> n,m,w;</span><br><span class=\"line\"><span class=\"type\">int</span> f[N][N];</span><br><span class=\"line\"><span class=\"type\">int</span> aP[N],bP[N],aS[N],bS[N];</span><br><span class=\"line\"><span class=\"type\">int</span> q,p,Q[N];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tn=<span class=\"built_in\">read</span>();m=<span class=\"built_in\">read</span>();w=<span class=\"built_in\">read</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)</span><br><span class=\"line\">\taP[i]=<span class=\"built_in\">read</span>(),bP[i]=<span class=\"built_in\">read</span>(),</span><br><span class=\"line\">\taS[i]=<span class=\"built_in\">read</span>(),bS[i]=<span class=\"built_in\">read</span>();</span><br><span class=\"line\">  <span class=\"built_in\">memset</span>(f,<span class=\"number\">128</span>,<span class=\"built_in\">sizeof</span>(f));</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">  \t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">0</span>;j&lt;=aS[i];j++)f[i][j]=-j*aP[i];</span><br><span class=\"line\">  \t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">0</span>;j&lt;=m;j++)f[i][j]=<span class=\"built_in\">max</span>(f[i][j],f[i<span class=\"number\">-1</span>][j]);</span><br><span class=\"line\">  \t<span class=\"keyword\">if</span>(i&lt;=w)<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">    q=<span class=\"number\">1</span>,p=<span class=\"number\">0</span>; </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">0</span>;j&lt;=m;j++)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">while</span>(q&lt;=p&amp;&amp;f[i-w<span class=\"number\">-1</span>][Q[p]]+Q[p]*aP[i]&lt;=f[i-w<span class=\"number\">-1</span>][j]+j*aP[i])p--;</span><br><span class=\"line\">      Q[++p]=j;</span><br><span class=\"line\">      <span class=\"keyword\">while</span>(q&lt;=p&amp;&amp;Q[q]&lt;j-aS[i])q++;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(q&lt;=p)f[i][j]=<span class=\"built_in\">max</span>(f[i][j],f[i-w<span class=\"number\">-1</span>][Q[q]]+(Q[q]-j)*aP[i]); </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t  q=<span class=\"number\">1</span>,p=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=m;j&gt;=<span class=\"number\">0</span>;j--)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">while</span>(q&lt;=p&amp;&amp;f[i-w<span class=\"number\">-1</span>][Q[p]]+Q[p]*bP[i]&lt;=f[i-w<span class=\"number\">-1</span>][j]+j*bP[i])p--;</span><br><span class=\"line\">      Q[++p]=j;</span><br><span class=\"line\">      <span class=\"keyword\">while</span>(q&lt;=p&amp;&amp;Q[q]&gt;j+bS[i])q++;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(q&lt;=p)f[i][j]=<span class=\"built_in\">max</span>(f[i][j],f[i-w<span class=\"number\">-1</span>][Q[q]]+(Q[q]-j)*bP[i]); </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"type\">int</span> ans=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;=m;i++)ans=<span class=\"built_in\">max</span>(ans,f[n][i]);</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>,ans);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"斜率优化\"><a href=\"#斜率优化\" class=\"headerlink\" title=\"斜率优化\"></a>斜率优化</h2><p>$\\ \\ \\ \\ \\ \\ \\,$对于一个dp式子，我们尝试将它化成3个部分：</p>\n<ul>\n<li>只与 $i$ 有关的（$A_i$）；</li>\n<li>只与 $j$ 有关的（$D_j$）；</li>\n<li>与 $i$ 和 $j$ 同时有关的（$B_i\\cdot C_j$）；</li>\n</ul>\n<p>$\\ \\ \\ \\ \\ \\ \\,$所以我们会得到形如这样子的式子：</p>\n<p>${B_i}\\cdot C_j+{A_i}={D_j}$</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$那么这个时候，我们把$B_i$当做斜率，$C_j$是横坐标，$D_j$是纵坐标，我们想要的是$A_i$最大或者是最小，那么答案一定是下面的那一层点里面诞生，需要满足的是：</p>\n<ul>\n<li><p>两个点之间的斜率必须优于$B_i$，若是取$\\rm Max$就是需要大于，否者就是小于。</p>\n</li>\n<li><p>最优的$j$取值一定是斜率尽量优的。</p>\n</li>\n</ul>\n<p>$\\ \\ \\ \\ \\ \\ \\,$那么我们的想法是维护这个斜率组成的凸壳，若是$B_i$单调，我们可以考虑单调队列，若是不单调，那么我们在单调队列的基础上面，就不能从队首踢，就是维护一整个凸壳，每次询问在上面二分。</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$下面给出单调队列版的模板：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> Q[N],q,p;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">long</span> <span class=\"type\">double</span> <span class=\"title\">Slope</span><span class=\"params\">(<span class=\"type\">int</span> i)</span></span>&#123;&#125;;<span class=\"comment\">//B(i)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"title\">X</span><span class=\"params\">(<span class=\"type\">int</span> i)</span></span>&#123;&#125;<span class=\"comment\">//C(j)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"title\">Y</span><span class=\"params\">(<span class=\"type\">int</span> j)</span></span>&#123;&#125;<span class=\"comment\">//D(j)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">long</span> <span class=\"type\">double</span> <span class=\"title\">slope</span><span class=\"params\">(<span class=\"type\">int</span> i,<span class=\"type\">int</span> j)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(<span class=\"built_in\">X</span>(i)==<span class=\"built_in\">X</span>(j))<span class=\"keyword\">return</span> <span class=\"number\">1.0</span>*inf;<span class=\"comment\">//max_inf,min_-inf;</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> (<span class=\"number\">1.0</span>*(<span class=\"built_in\">Y</span>(i)-<span class=\"built_in\">Y</span>(j)))/(<span class=\"number\">1.0</span>*(<span class=\"built_in\">X</span>(i)-<span class=\"built_in\">X</span>(j)));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tq=p=<span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(q&lt;p&amp;&amp;<span class=\"built_in\">better</span>(<span class=\"built_in\">slope</span>(Q[q],Q[q+<span class=\"number\">1</span>]),Slope))++q;</span><br><span class=\"line\">\t\tf[i]=<span class=\"built_in\">F</span>(Q[q]);<span class=\"comment\">//原dp方程</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(q&lt;p&amp;&amp;<span class=\"built_in\">better</span>(<span class=\"built_in\">slope</span>(i,Q[p<span class=\"number\">-1</span>]),<span class=\"built_in\">slope</span>(Q[p],Q[p<span class=\"number\">-1</span>])))--p;</span><br><span class=\"line\">\t\tQ[++p]=i;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"P3195-HNOI2008-玩具装箱TOY\"><a href=\"#P3195-HNOI2008-玩具装箱TOY\" class=\"headerlink\" title=\"P3195 [HNOI2008]玩具装箱TOY\"></a><a href=\"https://www.luogu.org/problemnew/show/P3195\">P3195 [HNOI2008]玩具装箱TOY</a></h3><p>$\\ \\ \\ \\ \\ \\ \\,$本题dp方程如下：</p>\n<p>$f_i={\\rm Min}_{j=1}^{i-1}\\left(f_j+(Sum_i-Sum_j+i-j-L-1)^2\\right)$</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$化成如下形式：</p>\n<p>${2\\times(Sum_i+i)}(Sum_j+j+L+1)+{\\left(f_i-(Sum_i+i)^2\\right)}={\\left(f_j+(Sum_j+j+L+1)^2\\right)}$</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$我们发现${2\\times(Sum_i+i)}$是单调的，于是我们想用单调队列来维护这个凸壳：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdlib&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;map&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;set&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;stack&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cctype&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> inf=<span class=\"number\">0x7fffffff</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">double</span> eps=<span class=\"number\">1e-10</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">double</span> pi=<span class=\"built_in\">acos</span>(<span class=\"number\">-1.0</span>);</span><br><span class=\"line\"><span class=\"comment\">//char buf[1&lt;&lt;15],*S=buf,*T=buf;</span></span><br><span class=\"line\"><span class=\"comment\">//char getch()&#123;return S==T&amp;&amp;(T=(S=buf)+fread(buf,1,1&lt;&lt;15,stdin),S==T)?0:*S++;&#125;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"title\">read</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">long</span> <span class=\"type\">long</span> x=<span class=\"number\">0</span>,f=<span class=\"number\">1</span>;<span class=\"type\">char</span> ch;ch=<span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(ch&lt;<span class=\"string\">&#x27;0&#x27;</span>||ch&gt;<span class=\"string\">&#x27;9&#x27;</span>)&#123;<span class=\"keyword\">if</span>(ch==<span class=\"string\">&#x27;-&#x27;</span>) f=<span class=\"number\">0</span>;ch=<span class=\"built_in\">getchar</span>();&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(ch&gt;=<span class=\"string\">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class=\"string\">&#x27;9&#x27;</span>)&#123;x=(x&lt;&lt;<span class=\"number\">1</span>)+(x&lt;&lt;<span class=\"number\">3</span>)+(ch&amp;<span class=\"number\">15</span>);ch=<span class=\"built_in\">getchar</span>();&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(f)<span class=\"keyword\">return</span> x;<span class=\"keyword\">else</span> <span class=\"keyword\">return</span> -x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">50010</span>;</span><br><span class=\"line\"><span class=\"type\">double</span> f[N],sum[N],L;</span><br><span class=\"line\"><span class=\"type\">int</span> q,p,Q[N];</span><br><span class=\"line\"><span class=\"type\">int</span> n;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">double</span> <span class=\"title\">fn</span><span class=\"params\">(<span class=\"type\">int</span> i)</span></span>&#123;<span class=\"keyword\">return</span> sum[i]+(<span class=\"type\">double</span>)i;&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">double</span> <span class=\"title\">X</span><span class=\"params\">(<span class=\"type\">int</span> i)</span></span>&#123;<span class=\"keyword\">return</span> <span class=\"built_in\">fn</span>(i)+L;&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">double</span> <span class=\"title\">Y</span><span class=\"params\">(<span class=\"type\">int</span> i)</span></span>&#123;<span class=\"keyword\">return</span> f[i]+(<span class=\"built_in\">fn</span>(i)+L)*(<span class=\"built_in\">fn</span>(i)+L);&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">double</span> <span class=\"title\">slope</span><span class=\"params\">(<span class=\"type\">int</span> i,<span class=\"type\">int</span> j)</span></span>&#123;<span class=\"keyword\">return</span> (<span class=\"built_in\">Y</span>(i)-<span class=\"built_in\">Y</span>(j))/(<span class=\"built_in\">X</span>(i)-<span class=\"built_in\">X</span>(j));&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tn=(<span class=\"type\">int</span>)<span class=\"built_in\">read</span>();L=(<span class=\"type\">double</span>)<span class=\"built_in\">read</span>()+<span class=\"number\">1.0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)</span><br><span class=\"line\">\tsum[i]=(<span class=\"type\">double</span>)<span class=\"built_in\">read</span>(),sum[i]+=sum[i<span class=\"number\">-1</span>];</span><br><span class=\"line\">\tq=p=<span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(q&lt;p&amp;&amp;<span class=\"built_in\">slope</span>(Q[q],Q[q+<span class=\"number\">1</span>])&lt;<span class=\"number\">2</span>*<span class=\"built_in\">fn</span>(i))++q;</span><br><span class=\"line\">\t\tf[i]=f[Q[q]]+(<span class=\"built_in\">fn</span>(i)-<span class=\"built_in\">fn</span>(Q[q])-L)*(<span class=\"built_in\">fn</span>(i)-<span class=\"built_in\">fn</span>(Q[q])-L);</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(q&lt;p&amp;&amp;<span class=\"built_in\">slope</span>(i,Q[p<span class=\"number\">-1</span>])&lt;<span class=\"built_in\">slope</span>(Q[p<span class=\"number\">-1</span>],Q[p])) --p;</span><br><span class=\"line\">    \tQ[++p]=i;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%lld\\n&quot;</span>,(<span class=\"type\">long</span> <span class=\"type\">long</span>)f[n]);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"WQS二分\"><a href=\"#WQS二分\" class=\"headerlink\" title=\"WQS二分\"></a>WQS二分</h2><p>$\\ \\ \\ \\ \\ \\ \\,$WQS二分和斜率优化很相似，多了一个宽度限制，既需要干好取$m$个。和斜率优化一样，我们需要把式子化成下面的形式：</p>\n<p>${B_i}\\cdot C_j+{A_i}={D_j}$</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$在二分之前，我们二分一个特殊的值 $v$，取$k$个物品时，总贡献会多$kv$，在进行dp的同时，若$v$越大，取的物品越少，那么我们检查在$v$，的时候有多少个物品被选就好了，<strong>注意使用WQS二分需要满足$v$越大，取的物品越少</strong>，既需要满足取$x$个时的总贡献斜率不增，说白了，就是需要满足选的越多越好。</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$模板如下：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> Q[N],q,p;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">long</span> <span class=\"type\">double</span> <span class=\"title\">Slope</span><span class=\"params\">(<span class=\"type\">int</span> i)</span></span>&#123;&#125;;<span class=\"comment\">//B(i)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"title\">X</span><span class=\"params\">(<span class=\"type\">int</span> i)</span></span>&#123;&#125;<span class=\"comment\">//C(j)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"title\">Y</span><span class=\"params\">(<span class=\"type\">int</span> j)</span></span>&#123;&#125;<span class=\"comment\">//D(j)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">long</span> <span class=\"type\">double</span> <span class=\"title\">slope</span><span class=\"params\">(<span class=\"type\">int</span> i,<span class=\"type\">int</span> j)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(<span class=\"built_in\">X</span>(i)==<span class=\"built_in\">X</span>(j))<span class=\"keyword\">return</span> <span class=\"number\">1.0</span>*inf;<span class=\"comment\">//max_inf,min_-inf;</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> (<span class=\"number\">1.0</span>*(<span class=\"built_in\">Y</span>(i)-<span class=\"built_in\">Y</span>(j)))/(<span class=\"number\">1.0</span>*(<span class=\"built_in\">X</span>(i)-<span class=\"built_in\">X</span>(j)));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">cheak</span><span class=\"params\">(<span class=\"type\">long</span> <span class=\"type\">long</span> v)</span></span>&#123;</span><br><span class=\"line\">\tq=p=<span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(q&lt;p&amp;&amp;<span class=\"built_in\">better</span>(<span class=\"built_in\">slope</span>(Q[q],Q[q+<span class=\"number\">1</span>]),Slope))++q;</span><br><span class=\"line\">\t\tf[i]=<span class=\"built_in\">F</span>(Q[q])+v;<span class=\"comment\">//原dp方程</span></span><br><span class=\"line\">\t\ttot[i]=tot[Q[q]]+<span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(q&lt;p&amp;&amp;<span class=\"built_in\">better</span>(<span class=\"built_in\">slope</span>(i,Q[p<span class=\"number\">-1</span>]),<span class=\"built_in\">slope</span>(Q[p],Q[p<span class=\"number\">-1</span>])))--p;</span><br><span class=\"line\">\t\tQ[++q]=i;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> tot[n]&lt;=m;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(l&lt;r)&#123;</span><br><span class=\"line\">    <span class=\"type\">long</span> <span class=\"type\">long</span> mid=l+r&gt;&gt;<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">cheak</span>(mid))r=mid;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> l=mid+<span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">cheak</span>(l);</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%lld\\n&quot;</span>,f[n]-l*m);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"P4983-忘情\"><a href=\"#P4983-忘情\" class=\"headerlink\" title=\"P4983 忘情\"></a><a href=\"https://www.luogu.org/problemnew/show/P4983\">P4983 忘情</a></h3><p>$\\ \\ \\ \\ \\ \\ \\,$这个题是我们团队准备的，原式是来恶心人的，化简下来就是这个东西：</p>\n<p>$\\left(\\sum_{i=1}^nx_i+1\\right)^2$</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$dp方程显然就是这个东西：</p>\n<p>$f_i={\\rm Min}_{j=1}^{i-1}f_j+\\left(Sum_i-Sum_j+1\\right)^2$</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$化成如下形式：</p>\n<p>${2\\times Sum_i}\\cdot Sum_j+{\\left(f_i-(Sum_i+1)^2\\right)}={f_j+Sum_j^2-2\\times Sum_j}$</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$感性思考一下，当$m$越大，答案一定小越小，那么我们就可以使用WQS二分：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdlib&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cctype&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;stack&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;map&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;set&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> inf=<span class=\"number\">0x7fffffff</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">double</span> eps=<span class=\"number\">1e-10</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">double</span> pi=<span class=\"built_in\">acos</span>(<span class=\"number\">-1.0</span>);</span><br><span class=\"line\"><span class=\"comment\">//char buf[1&lt;&lt;15],*S=buf,*T=buf;</span></span><br><span class=\"line\"><span class=\"comment\">//char getch()&#123;return S==T&amp;&amp;(T=(S=buf)+fread(buf,1,1&lt;&lt;15,stdin),S==T)?0:*S++;&#125;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">int</span> <span class=\"title\">read</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> x=<span class=\"number\">0</span>,f=<span class=\"number\">1</span>;<span class=\"type\">char</span> ch;ch=<span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(ch&lt;<span class=\"string\">&#x27;0&#x27;</span>||ch&gt;<span class=\"string\">&#x27;9&#x27;</span>)&#123;<span class=\"keyword\">if</span>(ch==<span class=\"string\">&#x27;-&#x27;</span>) f=<span class=\"number\">0</span>;ch=<span class=\"built_in\">getchar</span>();&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(ch&gt;=<span class=\"string\">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class=\"string\">&#x27;9&#x27;</span>)&#123;x=(x&lt;&lt;<span class=\"number\">1</span>)+(x&lt;&lt;<span class=\"number\">3</span>)+(ch&amp;<span class=\"number\">15</span>);ch=<span class=\"built_in\">getchar</span>();&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(f)<span class=\"keyword\">return</span> x;<span class=\"keyword\">else</span> <span class=\"keyword\">return</span> -x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">100010</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> n,m,tot[N];</span><br><span class=\"line\"><span class=\"type\">long</span> <span class=\"type\">long</span> sum[N],f[N],Q[N];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"title\">X</span><span class=\"params\">(<span class=\"type\">int</span> a)</span></span>&#123;<span class=\"keyword\">return</span> sum[a];&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"title\">Y</span><span class=\"params\">(<span class=\"type\">int</span> a)</span></span>&#123;<span class=\"keyword\">return</span> f[a]+sum[a]*sum[a]<span class=\"number\">-2ll</span>*sum[a];&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">double</span> <span class=\"title\">solpe</span><span class=\"params\">(<span class=\"type\">int</span> i,<span class=\"type\">int</span> j)</span></span>&#123;<span class=\"keyword\">return</span> <span class=\"number\">1.0</span>*(<span class=\"built_in\">Y</span>(i)-<span class=\"built_in\">Y</span>(j))/(<span class=\"built_in\">X</span>(i)-<span class=\"built_in\">X</span>(j));&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">cheak</span><span class=\"params\">(<span class=\"type\">long</span> <span class=\"type\">long</span> v)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> q=<span class=\"number\">1</span>,p=<span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">  \t<span class=\"keyword\">while</span>(q&lt;p&amp;&amp;<span class=\"built_in\">solpe</span>(Q[q+<span class=\"number\">1</span>],Q[q])&lt;<span class=\"number\">2.0</span>*sum[i])q++;</span><br><span class=\"line\">    f[i]=f[Q[q]]+(sum[i]-sum[Q[q]]+<span class=\"number\">1</span>)*(sum[i]-sum[Q[q]]+<span class=\"number\">1</span>)+v;</span><br><span class=\"line\">\t\ttot[i]=tot[Q[q]]+<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(q&lt;p&amp;&amp;<span class=\"built_in\">solpe</span>(i,Q[p])&lt;<span class=\"built_in\">solpe</span>(Q[p<span class=\"number\">-1</span>],Q[p]))p--;</span><br><span class=\"line\">    Q[++p]=i;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> tot[n]&lt;=m;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tn=<span class=\"built_in\">read</span>();m=<span class=\"built_in\">read</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)sum[i]=sum[i<span class=\"number\">-1</span>]+<span class=\"number\">1ll</span>*<span class=\"built_in\">read</span>();</span><br><span class=\"line\">\t<span class=\"type\">long</span> <span class=\"type\">long</span> l=<span class=\"number\">1</span>,r=(sum[n]*sum[n])/<span class=\"number\">2</span>,mid;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(l&lt;r)&#123;</span><br><span class=\"line\">    <span class=\"type\">long</span> <span class=\"type\">long</span> mid=l+r&gt;&gt;<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">cheak</span>(mid))r=mid;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> l=mid+<span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">cheak</span>(l);</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%lld\\n&quot;</span>,f[n]-l*m);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>$\\ \\ \\ \\ \\ \\ \\ \\,$动态规划及其相优化方法的复习笔记：</p>","more":"<h2 id=\"矩阵快速幂\"><a href=\"#矩阵快速幂\" class=\"headerlink\" title=\"矩阵快速幂\"></a>矩阵快速幂</h2><p>$\\ \\ \\ \\ \\ \\ \\,$很多时候我们的dp式子如下形式，是一个递推形式$f_{(m,n)}$：</p>\n<p>$f_{(i,j)}=a_{(1,j)}\\cdot f_{(i-1,1)}+a_{(2,j)}\\cdot f_{(i-1,2)}+\\cdots+a_{(n,j)}\\cdot f_{(i-1,n)}$</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$显然，若是$a_{(i,j)}$参数确定,复杂度也是$O(mn^2)$的，多数情况下不会达到这个复杂度，但是也是接受不了的，有些题目$m$给的特别大，$n$比较小，我们就考虑矩阵优化：</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$首先设定初始矩阵$A$，也就是原dp式子的初始化项：</p>\n<p>$A= \\begin{bmatrix} f_{(0,1)} &amp; f_{(0,2)} &amp; \\cdots &amp; f_{(0,n)}\\\\ \\end{bmatrix} $</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$然后设定转移矩阵$B$：</p>\n<p>$B= \\begin{bmatrix} a_{(1,1)} &amp; a_{(1,2)} &amp; \\cdots &amp; a_{(1,n)}\\\\a_{(2,1)} &amp; a_{(2,2)} &amp; \\cdots &amp; a_{(2,n)}\\\\\\vdots\\\\a_{(n,1)} &amp; a_{(n,2)} &amp; \\cdots &amp; a_{(n,n)}\\\\ \\end{bmatrix} $</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$根据矩阵乘法的定义，很容易得到：</p>\n<p>$A\\times B=\\begin{bmatrix} f_{(1,1)} &amp; f_{(1,2)} &amp; \\cdots &amp; f_{(1,n)}\\\\ \\end{bmatrix}$</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$推广得到：</p>\n<p>$A\\times B^m=\\begin{bmatrix} f_{(m,1)} &amp; f_{(m,2)} &amp; \\cdots &amp; f_{(m,n)}\\\\ \\end{bmatrix}$</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$根据矩阵乘法满足交换律，所以我们可以先算出$B^m$，再$A$乘之，即可得到答案，矩阵快速幂如下，复杂度优化到$O(\\log m \\cdot n^3)$：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">matrix</span>&#123;<span class=\"type\">int</span> n,m,a[N][N];&#125;;</span><br><span class=\"line\"><span class=\"keyword\">inline</span> matrix <span class=\"keyword\">operator</span> *(<span class=\"type\">const</span> matrix &amp;a,<span class=\"type\">const</span> matrix &amp;b)&#123;</span><br><span class=\"line\">\tmatrix ret;ret.n=a.n;ret.m=b.m;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=a.n;i++)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;=b.m;j++)&#123;</span><br><span class=\"line\">\t  ret.a[i][j]=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> k=<span class=\"number\">1</span>;k&lt;=a.m;k++)</span><br><span class=\"line\">\t  ret.a[i][j]+=a.a[i][k]*b.a[k][j];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> matrix <span class=\"title\">power</span><span class=\"params\">(matrix A,matrix B,<span class=\"type\">int</span> m)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(;m;m&gt;&gt;=<span class=\"number\">1</span>,B=B*B)<span class=\"keyword\">if</span>(m&amp;<span class=\"number\">1</span>)A=A*B;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> A;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"P1349-广义斐波那契数列\"><a href=\"#P1349-广义斐波那契数列\" class=\"headerlink\" title=\"P1349 广义斐波那契数列\"></a><a href=\"https://www.luogu.org/problemnew/show/P1349\">P1349 广义斐波那契数列</a></h3><p>$\\ \\ \\ \\ \\ \\ \\,$模板题目，递推式是：</p>\n<p>$a_{n}=p\\cdot a_{(n-1)}+q\\cdot a_{(n-2)}$</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$所以我们令：</p>\n<p>$f_{i,2}=[a_{i-1},a_{i}]$</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$那么有：</p>\n<p>$f_{(i,1)}=0\\cdot f_{(i-1,1)}+1\\cdot f_{(i-1,2)}$</p>\n<p>$f_{(i,2)}=p\\cdot f_{(i-1,1)}+q\\cdot f_{(i-1,2)}$</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$所以我们把$A$，$B$矩阵设置为：</p>\n<p>$A= \\begin{bmatrix} a_{1} &amp; a_{2} \\end{bmatrix} $</p>\n<p>$B= \\begin{bmatrix} 0 &amp; q\\\\1 &amp;p \\end{bmatrix} $</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$那么我们的答案就在$A\\times B^{n-2}$的第二项。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdlib&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cctype&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;stack&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;map&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;set&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> inf=<span class=\"number\">0x7fffffff</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">double</span> eps=<span class=\"number\">1e-10</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">double</span> pi=<span class=\"built_in\">acos</span>(<span class=\"number\">-1.0</span>);</span><br><span class=\"line\"><span class=\"comment\">//char buf[1&lt;&lt;15],*S=buf,*T=buf;</span></span><br><span class=\"line\"><span class=\"comment\">//char getch()&#123;return S==T&amp;&amp;(T=(S=buf)+fread(buf,1,1&lt;&lt;15,stdin),S==T)?0:*S++;&#125;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">int</span> <span class=\"title\">read</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> x=<span class=\"number\">0</span>,f=<span class=\"number\">1</span>;<span class=\"type\">char</span> ch;ch=<span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(ch&lt;<span class=\"string\">&#x27;0&#x27;</span>||ch&gt;<span class=\"string\">&#x27;9&#x27;</span>)&#123;<span class=\"keyword\">if</span>(ch==<span class=\"string\">&#x27;-&#x27;</span>) f=<span class=\"number\">0</span>;ch=<span class=\"built_in\">getchar</span>();&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(ch&gt;=<span class=\"string\">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class=\"string\">&#x27;9&#x27;</span>)&#123;x=(x&lt;&lt;<span class=\"number\">1</span>)+(x&lt;&lt;<span class=\"number\">3</span>)+(ch&amp;<span class=\"number\">15</span>);ch=<span class=\"built_in\">getchar</span>();&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(f)<span class=\"keyword\">return</span> x;<span class=\"keyword\">else</span> <span class=\"keyword\">return</span> -x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">5</span>;</span><br><span class=\"line\"><span class=\"type\">long</span> <span class=\"type\">long</span> n,m;</span><br><span class=\"line\"><span class=\"type\">int</span> p,q;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">matrix</span>&#123;<span class=\"type\">int</span> n,m;<span class=\"type\">long</span> <span class=\"type\">long</span> a[N][N];&#125;A,B;</span><br><span class=\"line\"><span class=\"keyword\">inline</span> matrix <span class=\"keyword\">operator</span> *(<span class=\"type\">const</span> matrix &amp;a,<span class=\"type\">const</span> matrix &amp;b)&#123;</span><br><span class=\"line\">\tmatrix ret;ret.n=a.n;ret.m=b.m;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=a.n;i++)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;=b.m;j++)&#123;</span><br><span class=\"line\">\t  ret.a[i][j]=<span class=\"number\">0ll</span>;</span><br><span class=\"line\">\t  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> k=<span class=\"number\">1</span>;k&lt;=a.m;k++)</span><br><span class=\"line\">\t  ret.a[i][j]=(ret.a[i][j]+a.a[i][k]*b.a[k][j]%m)%m;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> matrix <span class=\"title\">power</span><span class=\"params\">(matrix A,matrix B,<span class=\"type\">int</span> m)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(;m;m&gt;&gt;=<span class=\"number\">1</span>,B=B*B)<span class=\"keyword\">if</span>(m&amp;<span class=\"number\">1</span>)A=A*B;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> A;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tA.n=<span class=\"number\">1</span>;A.m=B.m=B.n=<span class=\"number\">2</span>;</span><br><span class=\"line\">\tp=<span class=\"built_in\">read</span>();q=<span class=\"built_in\">read</span>();</span><br><span class=\"line\">\tA.a[<span class=\"number\">1</span>][<span class=\"number\">1</span>]=<span class=\"built_in\">read</span>();A.a[<span class=\"number\">1</span>][<span class=\"number\">2</span>]=<span class=\"built_in\">read</span>();</span><br><span class=\"line\">\tB.a[<span class=\"number\">1</span>][<span class=\"number\">1</span>]=<span class=\"number\">0</span>;B.a[<span class=\"number\">1</span>][<span class=\"number\">2</span>]=q;</span><br><span class=\"line\">\tB.a[<span class=\"number\">2</span>][<span class=\"number\">1</span>]=<span class=\"number\">1</span>;B.a[<span class=\"number\">2</span>][<span class=\"number\">2</span>]=p;</span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%lld%lld&quot;</span>,&amp;n,&amp;m);</span><br><span class=\"line\">\tA=<span class=\"built_in\">power</span>(A,B,n<span class=\"number\">-2</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%lld\\n&quot;</span>,A.a[<span class=\"number\">1</span>][<span class=\"number\">2</span>]);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"单调队列\"><a href=\"#单调队列\" class=\"headerlink\" title=\"单调队列\"></a>单调队列</h2><p>$\\ \\ \\ \\ \\ \\ \\,$对于一个dp转移方程式，其中取最小或最大：</p>\n<p>$f_{i}={\\rm solve}(i,j)[l&lt;j&lt;r]$</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$若是可以化成如下形式：</p>\n<p>$f_(i)=F(j)+g(i)[l&lt;j&lt;r]$</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$既 $j$ 造成的贡献与 $i$ 没有关系，并且 $j$ 造成的贡献我们需要取最大或者最小时，并且范围$[l&lt;j&lt;r]$有单调性时，我们可以利用单调队列来优化dp，从$O(n^2)$优化到$O(n)$。</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$核心想法是，建立一个容器，我们把 $F(j)$ 造成的贡献按照单调性加入该容器，若是现在需要新加入一个元素，那么就从队尾开始，把比他造成贡献不优的踢出去（原dp取 $\\rm Min$ 的话就是需要 $F(j)$ 比队尾小，反之就是要大）。</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$当然这个时候队首将会是最优秀的 $j$，不过我们的范围限制还可能单调变化，于是我们又需要把队首那些范围不对的都踢掉，于是现在队首就是我们要的 $j$ 了，带入原dp即可。</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$由于所有元素都最多进入容器一次，又最多被踢一次，所以复杂度是$O(n)$的，模板如下：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> q=<span class=\"number\">1</span>,p=<span class=\"number\">0</span>,Q[N];</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i--)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(q&lt;=p&amp;&amp;<span class=\"built_in\">better</span>(<span class=\"built_in\">F</span>(i),<span class=\"built_in\">F</span>(Q[p])))p--;</span><br><span class=\"line\">  Q[++p]=i;</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(q&lt;=p&amp;&amp;!<span class=\"built_in\">in_lim</span>(i,Q[q]))q++;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(q&lt;=p)f[i]=<span class=\"built_in\">F</span>(Q[q])+<span class=\"built_in\">g</span>(i); </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"P2569-SCOI2010-股票交易\"><a href=\"#P2569-SCOI2010-股票交易\" class=\"headerlink\" title=\"P2569 [SCOI2010]股票交易\"></a><a href=\"https://www.luogu.org/problemnew/show/P2569\">P2569 [SCOI2010]股票交易</a></h3><p>$\\ \\ \\ \\ \\ \\ \\,$这题显然会有一个dp方程，$f_{(i,j)}$表示在第$i$天手里有$j$张股票的最大收益：</p>\n<ul>\n<li><p>直接购买：</p>\n<p>$f_{(i,j)}=-aP_i\\times j[0\\leq j\\leq aS_i]$</p>\n</li>\n<li><p>不行动：</p>\n<p>$f_{(i,j)}=f_{(i-1,j)}$</p>\n</li>\n<li><p>买入：</p>\n<p>$f_{(i,j)}={\\rm Max}_{k=j-aS_i}^{j-1}\\left(f_{(i-w-1,k)}-(j-k)\\times aP_i\\right)$</p>\n</li>\n<li><p>卖出：</p>\n<p>$f_{(i,j)}={\\rm Max}_{k=j+1}^{j+bS_i}\\left(f_{(i-w-1,k)}+(k-j)\\times bP_i\\right)$</p>\n</li>\n</ul>\n<p>$\\ \\ \\ \\ \\ \\ \\,$复杂度为$O(n^3)$，主要是后面两个操作花时间了，所幸，后面两个都可以斜率优化，复杂度优化为$O(n^2)$</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdlib&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cctype&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;stack&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;map&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;set&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> inf=<span class=\"number\">0x7fffffff</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">double</span> eps=<span class=\"number\">1e-10</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">double</span> pi=<span class=\"built_in\">acos</span>(<span class=\"number\">-1.0</span>);</span><br><span class=\"line\"><span class=\"comment\">//char buf[1&lt;&lt;15],*S=buf,*T=buf;</span></span><br><span class=\"line\"><span class=\"comment\">//char getch()&#123;return S==T&amp;&amp;(T=(S=buf)+fread(buf,1,1&lt;&lt;15,stdin),S==T)?0:*S++;&#125;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">int</span> <span class=\"title\">read</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> x=<span class=\"number\">0</span>,f=<span class=\"number\">1</span>;<span class=\"type\">char</span> ch;ch=<span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(ch&lt;<span class=\"string\">&#x27;0&#x27;</span>||ch&gt;<span class=\"string\">&#x27;9&#x27;</span>)&#123;<span class=\"keyword\">if</span>(ch==<span class=\"string\">&#x27;-&#x27;</span>) f=<span class=\"number\">0</span>;ch=<span class=\"built_in\">getchar</span>();&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(ch&gt;=<span class=\"string\">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class=\"string\">&#x27;9&#x27;</span>)&#123;x=(x&lt;&lt;<span class=\"number\">1</span>)+(x&lt;&lt;<span class=\"number\">3</span>)+(ch&amp;<span class=\"number\">15</span>);ch=<span class=\"built_in\">getchar</span>();&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(f)<span class=\"keyword\">return</span> x;<span class=\"keyword\">else</span> <span class=\"keyword\">return</span> -x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">2010</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> n,m,w;</span><br><span class=\"line\"><span class=\"type\">int</span> f[N][N];</span><br><span class=\"line\"><span class=\"type\">int</span> aP[N],bP[N],aS[N],bS[N];</span><br><span class=\"line\"><span class=\"type\">int</span> q,p,Q[N];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tn=<span class=\"built_in\">read</span>();m=<span class=\"built_in\">read</span>();w=<span class=\"built_in\">read</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)</span><br><span class=\"line\">\taP[i]=<span class=\"built_in\">read</span>(),bP[i]=<span class=\"built_in\">read</span>(),</span><br><span class=\"line\">\taS[i]=<span class=\"built_in\">read</span>(),bS[i]=<span class=\"built_in\">read</span>();</span><br><span class=\"line\">  <span class=\"built_in\">memset</span>(f,<span class=\"number\">128</span>,<span class=\"built_in\">sizeof</span>(f));</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">  \t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">0</span>;j&lt;=aS[i];j++)f[i][j]=-j*aP[i];</span><br><span class=\"line\">  \t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">0</span>;j&lt;=m;j++)f[i][j]=<span class=\"built_in\">max</span>(f[i][j],f[i<span class=\"number\">-1</span>][j]);</span><br><span class=\"line\">  \t<span class=\"keyword\">if</span>(i&lt;=w)<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">    q=<span class=\"number\">1</span>,p=<span class=\"number\">0</span>; </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">0</span>;j&lt;=m;j++)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">while</span>(q&lt;=p&amp;&amp;f[i-w<span class=\"number\">-1</span>][Q[p]]+Q[p]*aP[i]&lt;=f[i-w<span class=\"number\">-1</span>][j]+j*aP[i])p--;</span><br><span class=\"line\">      Q[++p]=j;</span><br><span class=\"line\">      <span class=\"keyword\">while</span>(q&lt;=p&amp;&amp;Q[q]&lt;j-aS[i])q++;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(q&lt;=p)f[i][j]=<span class=\"built_in\">max</span>(f[i][j],f[i-w<span class=\"number\">-1</span>][Q[q]]+(Q[q]-j)*aP[i]); </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t  q=<span class=\"number\">1</span>,p=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=m;j&gt;=<span class=\"number\">0</span>;j--)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">while</span>(q&lt;=p&amp;&amp;f[i-w<span class=\"number\">-1</span>][Q[p]]+Q[p]*bP[i]&lt;=f[i-w<span class=\"number\">-1</span>][j]+j*bP[i])p--;</span><br><span class=\"line\">      Q[++p]=j;</span><br><span class=\"line\">      <span class=\"keyword\">while</span>(q&lt;=p&amp;&amp;Q[q]&gt;j+bS[i])q++;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(q&lt;=p)f[i][j]=<span class=\"built_in\">max</span>(f[i][j],f[i-w<span class=\"number\">-1</span>][Q[q]]+(Q[q]-j)*bP[i]); </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"type\">int</span> ans=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;=m;i++)ans=<span class=\"built_in\">max</span>(ans,f[n][i]);</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>,ans);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"斜率优化\"><a href=\"#斜率优化\" class=\"headerlink\" title=\"斜率优化\"></a>斜率优化</h2><p>$\\ \\ \\ \\ \\ \\ \\,$对于一个dp式子，我们尝试将它化成3个部分：</p>\n<ul>\n<li>只与 $i$ 有关的（$A_i$）；</li>\n<li>只与 $j$ 有关的（$D_j$）；</li>\n<li>与 $i$ 和 $j$ 同时有关的（$B_i\\cdot C_j$）；</li>\n</ul>\n<p>$\\ \\ \\ \\ \\ \\ \\,$所以我们会得到形如这样子的式子：</p>\n<p>${B_i}\\cdot C_j+{A_i}={D_j}$</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$那么这个时候，我们把$B_i$当做斜率，$C_j$是横坐标，$D_j$是纵坐标，我们想要的是$A_i$最大或者是最小，那么答案一定是下面的那一层点里面诞生，需要满足的是：</p>\n<ul>\n<li><p>两个点之间的斜率必须优于$B_i$，若是取$\\rm Max$就是需要大于，否者就是小于。</p>\n</li>\n<li><p>最优的$j$取值一定是斜率尽量优的。</p>\n</li>\n</ul>\n<p>$\\ \\ \\ \\ \\ \\ \\,$那么我们的想法是维护这个斜率组成的凸壳，若是$B_i$单调，我们可以考虑单调队列，若是不单调，那么我们在单调队列的基础上面，就不能从队首踢，就是维护一整个凸壳，每次询问在上面二分。</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$下面给出单调队列版的模板：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> Q[N],q,p;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">long</span> <span class=\"type\">double</span> <span class=\"title\">Slope</span><span class=\"params\">(<span class=\"type\">int</span> i)</span></span>&#123;&#125;;<span class=\"comment\">//B(i)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"title\">X</span><span class=\"params\">(<span class=\"type\">int</span> i)</span></span>&#123;&#125;<span class=\"comment\">//C(j)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"title\">Y</span><span class=\"params\">(<span class=\"type\">int</span> j)</span></span>&#123;&#125;<span class=\"comment\">//D(j)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">long</span> <span class=\"type\">double</span> <span class=\"title\">slope</span><span class=\"params\">(<span class=\"type\">int</span> i,<span class=\"type\">int</span> j)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(<span class=\"built_in\">X</span>(i)==<span class=\"built_in\">X</span>(j))<span class=\"keyword\">return</span> <span class=\"number\">1.0</span>*inf;<span class=\"comment\">//max_inf,min_-inf;</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> (<span class=\"number\">1.0</span>*(<span class=\"built_in\">Y</span>(i)-<span class=\"built_in\">Y</span>(j)))/(<span class=\"number\">1.0</span>*(<span class=\"built_in\">X</span>(i)-<span class=\"built_in\">X</span>(j)));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tq=p=<span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(q&lt;p&amp;&amp;<span class=\"built_in\">better</span>(<span class=\"built_in\">slope</span>(Q[q],Q[q+<span class=\"number\">1</span>]),Slope))++q;</span><br><span class=\"line\">\t\tf[i]=<span class=\"built_in\">F</span>(Q[q]);<span class=\"comment\">//原dp方程</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(q&lt;p&amp;&amp;<span class=\"built_in\">better</span>(<span class=\"built_in\">slope</span>(i,Q[p<span class=\"number\">-1</span>]),<span class=\"built_in\">slope</span>(Q[p],Q[p<span class=\"number\">-1</span>])))--p;</span><br><span class=\"line\">\t\tQ[++p]=i;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"P3195-HNOI2008-玩具装箱TOY\"><a href=\"#P3195-HNOI2008-玩具装箱TOY\" class=\"headerlink\" title=\"P3195 [HNOI2008]玩具装箱TOY\"></a><a href=\"https://www.luogu.org/problemnew/show/P3195\">P3195 [HNOI2008]玩具装箱TOY</a></h3><p>$\\ \\ \\ \\ \\ \\ \\,$本题dp方程如下：</p>\n<p>$f_i={\\rm Min}_{j=1}^{i-1}\\left(f_j+(Sum_i-Sum_j+i-j-L-1)^2\\right)$</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$化成如下形式：</p>\n<p>${2\\times(Sum_i+i)}(Sum_j+j+L+1)+{\\left(f_i-(Sum_i+i)^2\\right)}={\\left(f_j+(Sum_j+j+L+1)^2\\right)}$</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$我们发现${2\\times(Sum_i+i)}$是单调的，于是我们想用单调队列来维护这个凸壳：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdlib&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;map&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;set&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;stack&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cctype&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> inf=<span class=\"number\">0x7fffffff</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">double</span> eps=<span class=\"number\">1e-10</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">double</span> pi=<span class=\"built_in\">acos</span>(<span class=\"number\">-1.0</span>);</span><br><span class=\"line\"><span class=\"comment\">//char buf[1&lt;&lt;15],*S=buf,*T=buf;</span></span><br><span class=\"line\"><span class=\"comment\">//char getch()&#123;return S==T&amp;&amp;(T=(S=buf)+fread(buf,1,1&lt;&lt;15,stdin),S==T)?0:*S++;&#125;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"title\">read</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">long</span> <span class=\"type\">long</span> x=<span class=\"number\">0</span>,f=<span class=\"number\">1</span>;<span class=\"type\">char</span> ch;ch=<span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(ch&lt;<span class=\"string\">&#x27;0&#x27;</span>||ch&gt;<span class=\"string\">&#x27;9&#x27;</span>)&#123;<span class=\"keyword\">if</span>(ch==<span class=\"string\">&#x27;-&#x27;</span>) f=<span class=\"number\">0</span>;ch=<span class=\"built_in\">getchar</span>();&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(ch&gt;=<span class=\"string\">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class=\"string\">&#x27;9&#x27;</span>)&#123;x=(x&lt;&lt;<span class=\"number\">1</span>)+(x&lt;&lt;<span class=\"number\">3</span>)+(ch&amp;<span class=\"number\">15</span>);ch=<span class=\"built_in\">getchar</span>();&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(f)<span class=\"keyword\">return</span> x;<span class=\"keyword\">else</span> <span class=\"keyword\">return</span> -x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">50010</span>;</span><br><span class=\"line\"><span class=\"type\">double</span> f[N],sum[N],L;</span><br><span class=\"line\"><span class=\"type\">int</span> q,p,Q[N];</span><br><span class=\"line\"><span class=\"type\">int</span> n;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">double</span> <span class=\"title\">fn</span><span class=\"params\">(<span class=\"type\">int</span> i)</span></span>&#123;<span class=\"keyword\">return</span> sum[i]+(<span class=\"type\">double</span>)i;&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">double</span> <span class=\"title\">X</span><span class=\"params\">(<span class=\"type\">int</span> i)</span></span>&#123;<span class=\"keyword\">return</span> <span class=\"built_in\">fn</span>(i)+L;&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">double</span> <span class=\"title\">Y</span><span class=\"params\">(<span class=\"type\">int</span> i)</span></span>&#123;<span class=\"keyword\">return</span> f[i]+(<span class=\"built_in\">fn</span>(i)+L)*(<span class=\"built_in\">fn</span>(i)+L);&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">double</span> <span class=\"title\">slope</span><span class=\"params\">(<span class=\"type\">int</span> i,<span class=\"type\">int</span> j)</span></span>&#123;<span class=\"keyword\">return</span> (<span class=\"built_in\">Y</span>(i)-<span class=\"built_in\">Y</span>(j))/(<span class=\"built_in\">X</span>(i)-<span class=\"built_in\">X</span>(j));&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tn=(<span class=\"type\">int</span>)<span class=\"built_in\">read</span>();L=(<span class=\"type\">double</span>)<span class=\"built_in\">read</span>()+<span class=\"number\">1.0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)</span><br><span class=\"line\">\tsum[i]=(<span class=\"type\">double</span>)<span class=\"built_in\">read</span>(),sum[i]+=sum[i<span class=\"number\">-1</span>];</span><br><span class=\"line\">\tq=p=<span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(q&lt;p&amp;&amp;<span class=\"built_in\">slope</span>(Q[q],Q[q+<span class=\"number\">1</span>])&lt;<span class=\"number\">2</span>*<span class=\"built_in\">fn</span>(i))++q;</span><br><span class=\"line\">\t\tf[i]=f[Q[q]]+(<span class=\"built_in\">fn</span>(i)-<span class=\"built_in\">fn</span>(Q[q])-L)*(<span class=\"built_in\">fn</span>(i)-<span class=\"built_in\">fn</span>(Q[q])-L);</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(q&lt;p&amp;&amp;<span class=\"built_in\">slope</span>(i,Q[p<span class=\"number\">-1</span>])&lt;<span class=\"built_in\">slope</span>(Q[p<span class=\"number\">-1</span>],Q[p])) --p;</span><br><span class=\"line\">    \tQ[++p]=i;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%lld\\n&quot;</span>,(<span class=\"type\">long</span> <span class=\"type\">long</span>)f[n]);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"WQS二分\"><a href=\"#WQS二分\" class=\"headerlink\" title=\"WQS二分\"></a>WQS二分</h2><p>$\\ \\ \\ \\ \\ \\ \\,$WQS二分和斜率优化很相似，多了一个宽度限制，既需要干好取$m$个。和斜率优化一样，我们需要把式子化成下面的形式：</p>\n<p>${B_i}\\cdot C_j+{A_i}={D_j}$</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$在二分之前，我们二分一个特殊的值 $v$，取$k$个物品时，总贡献会多$kv$，在进行dp的同时，若$v$越大，取的物品越少，那么我们检查在$v$，的时候有多少个物品被选就好了，<strong>注意使用WQS二分需要满足$v$越大，取的物品越少</strong>，既需要满足取$x$个时的总贡献斜率不增，说白了，就是需要满足选的越多越好。</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$模板如下：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> Q[N],q,p;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">long</span> <span class=\"type\">double</span> <span class=\"title\">Slope</span><span class=\"params\">(<span class=\"type\">int</span> i)</span></span>&#123;&#125;;<span class=\"comment\">//B(i)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"title\">X</span><span class=\"params\">(<span class=\"type\">int</span> i)</span></span>&#123;&#125;<span class=\"comment\">//C(j)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"title\">Y</span><span class=\"params\">(<span class=\"type\">int</span> j)</span></span>&#123;&#125;<span class=\"comment\">//D(j)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">long</span> <span class=\"type\">double</span> <span class=\"title\">slope</span><span class=\"params\">(<span class=\"type\">int</span> i,<span class=\"type\">int</span> j)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(<span class=\"built_in\">X</span>(i)==<span class=\"built_in\">X</span>(j))<span class=\"keyword\">return</span> <span class=\"number\">1.0</span>*inf;<span class=\"comment\">//max_inf,min_-inf;</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> (<span class=\"number\">1.0</span>*(<span class=\"built_in\">Y</span>(i)-<span class=\"built_in\">Y</span>(j)))/(<span class=\"number\">1.0</span>*(<span class=\"built_in\">X</span>(i)-<span class=\"built_in\">X</span>(j)));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">cheak</span><span class=\"params\">(<span class=\"type\">long</span> <span class=\"type\">long</span> v)</span></span>&#123;</span><br><span class=\"line\">\tq=p=<span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(q&lt;p&amp;&amp;<span class=\"built_in\">better</span>(<span class=\"built_in\">slope</span>(Q[q],Q[q+<span class=\"number\">1</span>]),Slope))++q;</span><br><span class=\"line\">\t\tf[i]=<span class=\"built_in\">F</span>(Q[q])+v;<span class=\"comment\">//原dp方程</span></span><br><span class=\"line\">\t\ttot[i]=tot[Q[q]]+<span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(q&lt;p&amp;&amp;<span class=\"built_in\">better</span>(<span class=\"built_in\">slope</span>(i,Q[p<span class=\"number\">-1</span>]),<span class=\"built_in\">slope</span>(Q[p],Q[p<span class=\"number\">-1</span>])))--p;</span><br><span class=\"line\">\t\tQ[++q]=i;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> tot[n]&lt;=m;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(l&lt;r)&#123;</span><br><span class=\"line\">    <span class=\"type\">long</span> <span class=\"type\">long</span> mid=l+r&gt;&gt;<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">cheak</span>(mid))r=mid;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> l=mid+<span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">cheak</span>(l);</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%lld\\n&quot;</span>,f[n]-l*m);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"P4983-忘情\"><a href=\"#P4983-忘情\" class=\"headerlink\" title=\"P4983 忘情\"></a><a href=\"https://www.luogu.org/problemnew/show/P4983\">P4983 忘情</a></h3><p>$\\ \\ \\ \\ \\ \\ \\,$这个题是我们团队准备的，原式是来恶心人的，化简下来就是这个东西：</p>\n<p>$\\left(\\sum_{i=1}^nx_i+1\\right)^2$</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$dp方程显然就是这个东西：</p>\n<p>$f_i={\\rm Min}_{j=1}^{i-1}f_j+\\left(Sum_i-Sum_j+1\\right)^2$</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$化成如下形式：</p>\n<p>${2\\times Sum_i}\\cdot Sum_j+{\\left(f_i-(Sum_i+1)^2\\right)}={f_j+Sum_j^2-2\\times Sum_j}$</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$感性思考一下，当$m$越大，答案一定小越小，那么我们就可以使用WQS二分：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdlib&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cctype&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;stack&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;map&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;set&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> inf=<span class=\"number\">0x7fffffff</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">double</span> eps=<span class=\"number\">1e-10</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">double</span> pi=<span class=\"built_in\">acos</span>(<span class=\"number\">-1.0</span>);</span><br><span class=\"line\"><span class=\"comment\">//char buf[1&lt;&lt;15],*S=buf,*T=buf;</span></span><br><span class=\"line\"><span class=\"comment\">//char getch()&#123;return S==T&amp;&amp;(T=(S=buf)+fread(buf,1,1&lt;&lt;15,stdin),S==T)?0:*S++;&#125;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">int</span> <span class=\"title\">read</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> x=<span class=\"number\">0</span>,f=<span class=\"number\">1</span>;<span class=\"type\">char</span> ch;ch=<span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(ch&lt;<span class=\"string\">&#x27;0&#x27;</span>||ch&gt;<span class=\"string\">&#x27;9&#x27;</span>)&#123;<span class=\"keyword\">if</span>(ch==<span class=\"string\">&#x27;-&#x27;</span>) f=<span class=\"number\">0</span>;ch=<span class=\"built_in\">getchar</span>();&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(ch&gt;=<span class=\"string\">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class=\"string\">&#x27;9&#x27;</span>)&#123;x=(x&lt;&lt;<span class=\"number\">1</span>)+(x&lt;&lt;<span class=\"number\">3</span>)+(ch&amp;<span class=\"number\">15</span>);ch=<span class=\"built_in\">getchar</span>();&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(f)<span class=\"keyword\">return</span> x;<span class=\"keyword\">else</span> <span class=\"keyword\">return</span> -x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">100010</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> n,m,tot[N];</span><br><span class=\"line\"><span class=\"type\">long</span> <span class=\"type\">long</span> sum[N],f[N],Q[N];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"title\">X</span><span class=\"params\">(<span class=\"type\">int</span> a)</span></span>&#123;<span class=\"keyword\">return</span> sum[a];&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"title\">Y</span><span class=\"params\">(<span class=\"type\">int</span> a)</span></span>&#123;<span class=\"keyword\">return</span> f[a]+sum[a]*sum[a]<span class=\"number\">-2ll</span>*sum[a];&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">double</span> <span class=\"title\">solpe</span><span class=\"params\">(<span class=\"type\">int</span> i,<span class=\"type\">int</span> j)</span></span>&#123;<span class=\"keyword\">return</span> <span class=\"number\">1.0</span>*(<span class=\"built_in\">Y</span>(i)-<span class=\"built_in\">Y</span>(j))/(<span class=\"built_in\">X</span>(i)-<span class=\"built_in\">X</span>(j));&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">cheak</span><span class=\"params\">(<span class=\"type\">long</span> <span class=\"type\">long</span> v)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> q=<span class=\"number\">1</span>,p=<span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">  \t<span class=\"keyword\">while</span>(q&lt;p&amp;&amp;<span class=\"built_in\">solpe</span>(Q[q+<span class=\"number\">1</span>],Q[q])&lt;<span class=\"number\">2.0</span>*sum[i])q++;</span><br><span class=\"line\">    f[i]=f[Q[q]]+(sum[i]-sum[Q[q]]+<span class=\"number\">1</span>)*(sum[i]-sum[Q[q]]+<span class=\"number\">1</span>)+v;</span><br><span class=\"line\">\t\ttot[i]=tot[Q[q]]+<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(q&lt;p&amp;&amp;<span class=\"built_in\">solpe</span>(i,Q[p])&lt;<span class=\"built_in\">solpe</span>(Q[p<span class=\"number\">-1</span>],Q[p]))p--;</span><br><span class=\"line\">    Q[++p]=i;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> tot[n]&lt;=m;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tn=<span class=\"built_in\">read</span>();m=<span class=\"built_in\">read</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)sum[i]=sum[i<span class=\"number\">-1</span>]+<span class=\"number\">1ll</span>*<span class=\"built_in\">read</span>();</span><br><span class=\"line\">\t<span class=\"type\">long</span> <span class=\"type\">long</span> l=<span class=\"number\">1</span>,r=(sum[n]*sum[n])/<span class=\"number\">2</span>,mid;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(l&lt;r)&#123;</span><br><span class=\"line\">    <span class=\"type\">long</span> <span class=\"type\">long</span> mid=l+r&gt;&gt;<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">cheak</span>(mid))r=mid;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> l=mid+<span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">cheak</span>(l);</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%lld\\n&quot;</span>,f[n]-l*m);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>"},{"title":"后缀自动机","date":"2018-12-29T06:28:15.000Z","mathjax":true,"_content":"\n$\\ \\ \\ \\ \\ \\ \\ \\,$关于后缀自动机性质的复习笔记：\n\n<!-- more -->\n\n$\\ \\ \\ \\ \\ \\ \\ \\,$后缀自动机是一个可以解决大多数字符串问题的字符串数据结构，可以识别该字符串的所有子串，其时空复杂度也比较优秀，对于一个字符集大小为$m$，长度为$n$的字符串，建立一个后缀自动机的时间复杂度为$O(nm)$，空间复杂度为 $O(2nm)$。\n\n$\\ \\ \\ \\ \\ \\ \\ \\,$讲后缀自动机的博客很多，这里直接给出模板，重点讲讲后缀自动机长什么样子，怎么用它：\n\n``` cpp\nstruct Suffix_Automaton{\n  int len[N<<1],fa[N<<1],son[N<<1][26];\n  int size,last;\n  void Init(){size=last=1;}\n  void insert(char c){\n  \tint s=c-'a';\n  \tint p=last,np=++size;last=np;\n  \tlen[np]=len[p]+1;\n  \tfor(;p&&!son[p][s];p=fa[p])son[p][s]=np;\n  \tif(!p)fa[np]=1;\n  \telse{\n  \t\tint q=son[p][s];\n  \t\tif(len[p]+1==len[q])fa[np]=q;\n  \t\telse{\n  \t\t\tint nq=++size;len[nq]=len[p]+1;\n\t\t\t\tmemcpy(son[nq],son[q],sizeof(son[q]));\n  \t\t\tfa[nq]=fa[q];fa[q]=fa[np]=nq;\n  \t\t\tfor(;son[p][s]==q;p=fa[p])son[p][s]=nq;\n      }\n    }\n  }\n  void Insert(char *s){\n  \tInit();\n  \tint len=strlen(s);\n  \tfor(int i=0;i<len;i++)\n  \tinsert(s[i]);\n  }\n}Sam;\n```\n$\\ \\ \\ \\ \\ \\ \\ \\,$对于一个串 $abcabbca$，我们建立的后缀自动机就是这个样子的：\n\n![FgcB5V.md.png](https://img-blog.csdnimg.cn/img_convert/7d92af985e9c0bc856c6540d026440d2.png)\n（注意点12到点6少了一条边b）\n\n$\\ \\ \\ \\ \\ \\ \\ \\,$其中我们如下规定：\n\n- 红色，蓝色，绿色的边构成一个尾部收束的$Trie$树，用来高效表示这个串的后缀集合，就是$son$数组构成的。并且我们把红色的链叫做主链，蓝色叫做扩展链，同一水平面的点叫做扩展点对（在模板中，每个$last$的取值都是主链，每个$np$和$nq$都是扩展点对）~~（都是我自己取的名字）~~\n\n- 黄色构成$parents$树，就是$fa$数组构成的，这棵树爸爸不认儿子，儿子认爸爸。\n\n- 在点旁边的灰色数字就是$len$数组。\n\n$\\ \\ \\ \\ \\ \\ \\ \\,$其实这张图看上去还是挺麻烦的，我们不如将它分开来看：\n\n## 尾部收束的$Trie$树：\n\n![Fgc7xe.md.png](https://img-blog.csdnimg.cn/img_convert/1f18cdea677c5f50e8046a4ded937fb9.png)\n（注意点12到点6少了一条边b）\n\n$\\ \\ \\ \\ \\ \\ \\ \\,$尾部收束的$Trie$树，用来高效表示这个串的后缀集合，可以发现，我们从节点 $1$ 开始走，在走到没有儿子的节点的时候，必然是原串的一个后缀，并且是覆盖完了的，换句话说，**这个串的任意子串都可以在这棵树上表示出来，且仅有这个串的子串才能表示**。\n\n$\\ \\ \\ \\ \\ \\ \\ \\,$不妨来观察一下，每一个节点上都有哪些子串的信息：\n\n** 2：a **\n  \n** 3：ab **\n  \n** 4：abc **\n  \n** 5：abca **\n  \n** 6：abcab，bcab，cab **\n  \n** 7：abcabb，bcabb，cabb，abb，bb **\n  \n** 8：b **\n  \n** 9：abcabbc，bcabbc，cabbc，abbc，bbc **\n  \n** 10：bc，c **\n  \n** 11：abcabbca，bcabbca，cabbca，abbca，bbca **\n  \n** 12：bca，ca **\n\n$\\ \\ \\ \\ \\ \\ \\ \\,$这样一来，很多性质都出来了：\n\n** 在$Trie$上，父亲是儿子上的子串的公共前缀~~（废话）~~； **\n\n** 在主链上的点，最长的子串都是原串的前缀； **\n\n** 在一个点上的子串，短的为长的的后缀； **\n\n** $len$数组表示的是这个节上的子串最长长度； **\n\n** 扩展点对一个在主链上一个在扩展链上，在扩展链上的点上的子串是在主链上的点上的子串的公共后缀。 **\n\n## $parents$树：\n\n![Fg2dhV.png](https://img-blog.csdnimg.cn/img_convert/c3221ce482a1ff2ce6b53fb9b1d20638.png)\n\n$\\ \\ \\ \\ \\ \\ \\ \\,$这样看起来好像不是特别方便，我们把他整合一下：\n\n![Fg26B9.png](https://img-blog.csdnimg.cn/img_convert/3da88966e5b248626cf33b5c6d868c74.png)\n\n$\\ \\ \\ \\ \\ \\ \\ \\,$回想一下每一个节点上都有哪些子串的信息和出现次数，顺便看看每个子串出现的终点：\n\n** 2：a (3：1,4,8) **\n  \n** 3：ab (2：2,5) **\n  \n** 4：abc (1：3) **\n  \n** 5：abca (1：4) **\n  \n** 6：abcab (1：5)，bcab (1：5)，cab (1：5) **\n  \n** 7：abcabb (1：6)，bcabb (1：6)，cabb (1：6)，abb (1：6)，bb (1：6) **\n  \n** 8：b (3：2,5,6) **\n  \n** 9：abcabbc (1：7)，bcabbc (1：7)，cabbc (1：7)，abbc (1：7)，bbc (1：7) **\n  \n** 10：bc (2：3,7)，c (2：3,7) **\n  \n** 11：abcabbca (1：8)，bcabbca (1：8)，cabbca (1：8)，abbca (1：8)，bbca (1：8) **\n  \n** 12：bca (2：4,8)，ca (2：4,8) **\n\n\n$\\ \\ \\ \\ \\ \\ \\ \\,$很多性质又都出来了：\n\n** 在$parents$上，父亲是儿子上的子串的公共后缀； **\n\n** 叶子节点都是主链上的节点； **\n\n** 主链上的节点上的子串的出现终点，都有$len$数组描述的位置； **\n\n** 一个节点上的子串出现次数是一样的； **\n\n** 父亲上的子串出现次数，是儿子上的子串出现次数之和； **\n\n** 儿子上的子串出现的终点，是父亲上的子串出现的终点的子集； **\n\n** 点$i$上面表示子串的数量为$len[fa[i]]-len[i]$。 **\n\n---\n\n$\\ \\ \\ \\ \\ \\ \\ \\,$最后我们总结一下：\n** 在$Trie$上，父亲是儿子上的子串的公共前缀； **\n\n** 在$parents$上，父亲是儿子上的子串的公共后缀； **\n\n** 在一个点上的子串，短的为长的的后缀； **\n\n** 一个节点上的子串出现次数是一样的； **\n\n** $len$数组表示的是这个节上的子串最长长度； **\n\n** $parents$上叶子节点都是主链上的节点； **\n\n** 在主链上的点，最长的子串都是原串的前缀； **\n\n** 主链上的节点上的子串的出现终点，都有$len$数组描述的位置； **\n\n** 扩展点对一个在主链上一个在扩展链上，在扩展链上的点上的子串是在主链上的点上的子串的公共后缀； **\n\n** $parents$上父亲上的子串出现次数，是儿子上的子串出现次数之和，如果父亲在主链上，就再加一； **\n\n** $parents$上儿子上的子串出现的终点，是父亲上的子串出现的终点的子集； **\n\n** 点$i$上面表示子串的数量为$len[fa[i]]-len[i]$。 **\n\n---\n\n$\\ \\ \\ \\ \\ \\ \\ \\,$如此多的性质，我们就可以拿后缀自动机解决很多问题了：\n\n## 字符串匹配\n  \n  文本串建立后缀自动机，模式串在$Trie$上面跑一次，跑完了就匹配到了，利用了$Trie$上面包含了原串所有子串的性质，多文本串的话，就在文本串之间插入奇怪字符，然后一起建立后缀自动机就行了就可以解决了，或者建广义后缀自动机。\n  \n## 子串查询出现次数\n  \n  文本串建立后缀自动机，然后在$parents$上做$dp$，询问就让模式串在$Trie$上面跑一次，找到自动机上点，输出就好了，利用了$parents$上父亲上的子串出现次数，是儿子上的子串出现次数之和的性质。因为$parents$上是儿子认爸爸，爸爸不认儿子，所以我们需要跑个拓扑，拓扑序就是$y$的倒叙了啊：\n  \n``` cpp\nfor(int i=1;i<=size;i++)x[len[i]]++;\nfor(int i=1;i<=size;i++)x[i]+=x[i-1];\nfor(int i=1;i<=size;i++)y[x[len[i]]--]=i;\n//for(int i=size;i>=1;i--)tim[fa[y[i]]]+=tim[y[i]];\n```\n  \n## 子串查询出现位置\n\n  文本串建立后缀自动机，让模式串在$Trie$上面跑一次，找到自动机上点，再从这个点开始，在$parents$上跑，遇到在主链上的点，它的$len$值就是终点了，要是求起点坐标，终点减去长度加上$1$就好了。\n  \n## 最长回文串\n\n  文本串倍增，后半截翻转，查询子串出现次数大于$2$，并且位置换算一下，如果相解就是合法，取最大值就好了，实现起来略复杂，没有Manacher算法优秀。\n  \n## 子串的子串\n\n  子串的子串要么是它的前缀的后缀，要么是它的前缀，要么是他的后缀，所以说只需要找到子串这个点，他在$parents$上的子树和他在$Trie$的祖先，还有他在$parents$上的子树的$Trie$的祖先，都是他的子串。\n  \n## 后缀自动机的合并（广义后缀自动机）\n\n  后缀自动机的合并，我们可以理解为，在后缀自动机上新加入一个字符串，其实只需要将 $last$ 重新赋为 $1$ ，注意新串的点打上不一样的标记，这个差不多就是广义后缀自动机，广义后缀自动机还有一步判断这个点有没有被建过的操作，但个人感觉实际上没有必要，最坏空间复杂度依然是$O(2nm)$的：\n  \n``` cpp\nvoid Insert(char *s){\n  col++;last=1;\n  int len=strlen(s);\n  for(int i=0;i<len;i++)\n  insert(s[i]);\n}\n```\n  \n$\\ \\ \\ \\ \\ \\ \\ \\,$还有很多关于子串，前缀，后缀的问题或者可以转换为子串，前缀，后缀的问题，用后缀自动机在大多数情况下都是不二之选，一般字符串的字符集都比较小，所以复杂度也很优秀，但要是字符集大小太大的话，还是仔细想想其他算法吧。\n\n$\\ \\ \\ \\ \\ \\ \\ \\,$还有，后缀自动机处理的字符串是静态的，最多就是在后面加后缀，要是需要处理动态的字符串的话，多半也是不合算的，需要考虑其他算法。\n\n$\\ \\ \\ \\ \\ \\ \\ \\,$不过，后缀自动机依然是一个优秀的字符串数据结构，代码量小，适用性高，是一个万金油算法。","source":"_posts/后缀自动机.md","raw":"---\ntitle: '后缀自动机'\ndate: 2018-12-29 14:28:15\ncategories:\n- 学习笔记\ntags:\n- OI\n- 字符串\n- 数据结构\n- 后缀自动机\nmathjax: true\n---\n\n$\\ \\ \\ \\ \\ \\ \\ \\,$关于后缀自动机性质的复习笔记：\n\n<!-- more -->\n\n$\\ \\ \\ \\ \\ \\ \\ \\,$后缀自动机是一个可以解决大多数字符串问题的字符串数据结构，可以识别该字符串的所有子串，其时空复杂度也比较优秀，对于一个字符集大小为$m$，长度为$n$的字符串，建立一个后缀自动机的时间复杂度为$O(nm)$，空间复杂度为 $O(2nm)$。\n\n$\\ \\ \\ \\ \\ \\ \\ \\,$讲后缀自动机的博客很多，这里直接给出模板，重点讲讲后缀自动机长什么样子，怎么用它：\n\n``` cpp\nstruct Suffix_Automaton{\n  int len[N<<1],fa[N<<1],son[N<<1][26];\n  int size,last;\n  void Init(){size=last=1;}\n  void insert(char c){\n  \tint s=c-'a';\n  \tint p=last,np=++size;last=np;\n  \tlen[np]=len[p]+1;\n  \tfor(;p&&!son[p][s];p=fa[p])son[p][s]=np;\n  \tif(!p)fa[np]=1;\n  \telse{\n  \t\tint q=son[p][s];\n  \t\tif(len[p]+1==len[q])fa[np]=q;\n  \t\telse{\n  \t\t\tint nq=++size;len[nq]=len[p]+1;\n\t\t\t\tmemcpy(son[nq],son[q],sizeof(son[q]));\n  \t\t\tfa[nq]=fa[q];fa[q]=fa[np]=nq;\n  \t\t\tfor(;son[p][s]==q;p=fa[p])son[p][s]=nq;\n      }\n    }\n  }\n  void Insert(char *s){\n  \tInit();\n  \tint len=strlen(s);\n  \tfor(int i=0;i<len;i++)\n  \tinsert(s[i]);\n  }\n}Sam;\n```\n$\\ \\ \\ \\ \\ \\ \\ \\,$对于一个串 $abcabbca$，我们建立的后缀自动机就是这个样子的：\n\n![FgcB5V.md.png](https://img-blog.csdnimg.cn/img_convert/7d92af985e9c0bc856c6540d026440d2.png)\n（注意点12到点6少了一条边b）\n\n$\\ \\ \\ \\ \\ \\ \\ \\,$其中我们如下规定：\n\n- 红色，蓝色，绿色的边构成一个尾部收束的$Trie$树，用来高效表示这个串的后缀集合，就是$son$数组构成的。并且我们把红色的链叫做主链，蓝色叫做扩展链，同一水平面的点叫做扩展点对（在模板中，每个$last$的取值都是主链，每个$np$和$nq$都是扩展点对）~~（都是我自己取的名字）~~\n\n- 黄色构成$parents$树，就是$fa$数组构成的，这棵树爸爸不认儿子，儿子认爸爸。\n\n- 在点旁边的灰色数字就是$len$数组。\n\n$\\ \\ \\ \\ \\ \\ \\ \\,$其实这张图看上去还是挺麻烦的，我们不如将它分开来看：\n\n## 尾部收束的$Trie$树：\n\n![Fgc7xe.md.png](https://img-blog.csdnimg.cn/img_convert/1f18cdea677c5f50e8046a4ded937fb9.png)\n（注意点12到点6少了一条边b）\n\n$\\ \\ \\ \\ \\ \\ \\ \\,$尾部收束的$Trie$树，用来高效表示这个串的后缀集合，可以发现，我们从节点 $1$ 开始走，在走到没有儿子的节点的时候，必然是原串的一个后缀，并且是覆盖完了的，换句话说，**这个串的任意子串都可以在这棵树上表示出来，且仅有这个串的子串才能表示**。\n\n$\\ \\ \\ \\ \\ \\ \\ \\,$不妨来观察一下，每一个节点上都有哪些子串的信息：\n\n** 2：a **\n  \n** 3：ab **\n  \n** 4：abc **\n  \n** 5：abca **\n  \n** 6：abcab，bcab，cab **\n  \n** 7：abcabb，bcabb，cabb，abb，bb **\n  \n** 8：b **\n  \n** 9：abcabbc，bcabbc，cabbc，abbc，bbc **\n  \n** 10：bc，c **\n  \n** 11：abcabbca，bcabbca，cabbca，abbca，bbca **\n  \n** 12：bca，ca **\n\n$\\ \\ \\ \\ \\ \\ \\ \\,$这样一来，很多性质都出来了：\n\n** 在$Trie$上，父亲是儿子上的子串的公共前缀~~（废话）~~； **\n\n** 在主链上的点，最长的子串都是原串的前缀； **\n\n** 在一个点上的子串，短的为长的的后缀； **\n\n** $len$数组表示的是这个节上的子串最长长度； **\n\n** 扩展点对一个在主链上一个在扩展链上，在扩展链上的点上的子串是在主链上的点上的子串的公共后缀。 **\n\n## $parents$树：\n\n![Fg2dhV.png](https://img-blog.csdnimg.cn/img_convert/c3221ce482a1ff2ce6b53fb9b1d20638.png)\n\n$\\ \\ \\ \\ \\ \\ \\ \\,$这样看起来好像不是特别方便，我们把他整合一下：\n\n![Fg26B9.png](https://img-blog.csdnimg.cn/img_convert/3da88966e5b248626cf33b5c6d868c74.png)\n\n$\\ \\ \\ \\ \\ \\ \\ \\,$回想一下每一个节点上都有哪些子串的信息和出现次数，顺便看看每个子串出现的终点：\n\n** 2：a (3：1,4,8) **\n  \n** 3：ab (2：2,5) **\n  \n** 4：abc (1：3) **\n  \n** 5：abca (1：4) **\n  \n** 6：abcab (1：5)，bcab (1：5)，cab (1：5) **\n  \n** 7：abcabb (1：6)，bcabb (1：6)，cabb (1：6)，abb (1：6)，bb (1：6) **\n  \n** 8：b (3：2,5,6) **\n  \n** 9：abcabbc (1：7)，bcabbc (1：7)，cabbc (1：7)，abbc (1：7)，bbc (1：7) **\n  \n** 10：bc (2：3,7)，c (2：3,7) **\n  \n** 11：abcabbca (1：8)，bcabbca (1：8)，cabbca (1：8)，abbca (1：8)，bbca (1：8) **\n  \n** 12：bca (2：4,8)，ca (2：4,8) **\n\n\n$\\ \\ \\ \\ \\ \\ \\ \\,$很多性质又都出来了：\n\n** 在$parents$上，父亲是儿子上的子串的公共后缀； **\n\n** 叶子节点都是主链上的节点； **\n\n** 主链上的节点上的子串的出现终点，都有$len$数组描述的位置； **\n\n** 一个节点上的子串出现次数是一样的； **\n\n** 父亲上的子串出现次数，是儿子上的子串出现次数之和； **\n\n** 儿子上的子串出现的终点，是父亲上的子串出现的终点的子集； **\n\n** 点$i$上面表示子串的数量为$len[fa[i]]-len[i]$。 **\n\n---\n\n$\\ \\ \\ \\ \\ \\ \\ \\,$最后我们总结一下：\n** 在$Trie$上，父亲是儿子上的子串的公共前缀； **\n\n** 在$parents$上，父亲是儿子上的子串的公共后缀； **\n\n** 在一个点上的子串，短的为长的的后缀； **\n\n** 一个节点上的子串出现次数是一样的； **\n\n** $len$数组表示的是这个节上的子串最长长度； **\n\n** $parents$上叶子节点都是主链上的节点； **\n\n** 在主链上的点，最长的子串都是原串的前缀； **\n\n** 主链上的节点上的子串的出现终点，都有$len$数组描述的位置； **\n\n** 扩展点对一个在主链上一个在扩展链上，在扩展链上的点上的子串是在主链上的点上的子串的公共后缀； **\n\n** $parents$上父亲上的子串出现次数，是儿子上的子串出现次数之和，如果父亲在主链上，就再加一； **\n\n** $parents$上儿子上的子串出现的终点，是父亲上的子串出现的终点的子集； **\n\n** 点$i$上面表示子串的数量为$len[fa[i]]-len[i]$。 **\n\n---\n\n$\\ \\ \\ \\ \\ \\ \\ \\,$如此多的性质，我们就可以拿后缀自动机解决很多问题了：\n\n## 字符串匹配\n  \n  文本串建立后缀自动机，模式串在$Trie$上面跑一次，跑完了就匹配到了，利用了$Trie$上面包含了原串所有子串的性质，多文本串的话，就在文本串之间插入奇怪字符，然后一起建立后缀自动机就行了就可以解决了，或者建广义后缀自动机。\n  \n## 子串查询出现次数\n  \n  文本串建立后缀自动机，然后在$parents$上做$dp$，询问就让模式串在$Trie$上面跑一次，找到自动机上点，输出就好了，利用了$parents$上父亲上的子串出现次数，是儿子上的子串出现次数之和的性质。因为$parents$上是儿子认爸爸，爸爸不认儿子，所以我们需要跑个拓扑，拓扑序就是$y$的倒叙了啊：\n  \n``` cpp\nfor(int i=1;i<=size;i++)x[len[i]]++;\nfor(int i=1;i<=size;i++)x[i]+=x[i-1];\nfor(int i=1;i<=size;i++)y[x[len[i]]--]=i;\n//for(int i=size;i>=1;i--)tim[fa[y[i]]]+=tim[y[i]];\n```\n  \n## 子串查询出现位置\n\n  文本串建立后缀自动机，让模式串在$Trie$上面跑一次，找到自动机上点，再从这个点开始，在$parents$上跑，遇到在主链上的点，它的$len$值就是终点了，要是求起点坐标，终点减去长度加上$1$就好了。\n  \n## 最长回文串\n\n  文本串倍增，后半截翻转，查询子串出现次数大于$2$，并且位置换算一下，如果相解就是合法，取最大值就好了，实现起来略复杂，没有Manacher算法优秀。\n  \n## 子串的子串\n\n  子串的子串要么是它的前缀的后缀，要么是它的前缀，要么是他的后缀，所以说只需要找到子串这个点，他在$parents$上的子树和他在$Trie$的祖先，还有他在$parents$上的子树的$Trie$的祖先，都是他的子串。\n  \n## 后缀自动机的合并（广义后缀自动机）\n\n  后缀自动机的合并，我们可以理解为，在后缀自动机上新加入一个字符串，其实只需要将 $last$ 重新赋为 $1$ ，注意新串的点打上不一样的标记，这个差不多就是广义后缀自动机，广义后缀自动机还有一步判断这个点有没有被建过的操作，但个人感觉实际上没有必要，最坏空间复杂度依然是$O(2nm)$的：\n  \n``` cpp\nvoid Insert(char *s){\n  col++;last=1;\n  int len=strlen(s);\n  for(int i=0;i<len;i++)\n  insert(s[i]);\n}\n```\n  \n$\\ \\ \\ \\ \\ \\ \\ \\,$还有很多关于子串，前缀，后缀的问题或者可以转换为子串，前缀，后缀的问题，用后缀自动机在大多数情况下都是不二之选，一般字符串的字符集都比较小，所以复杂度也很优秀，但要是字符集大小太大的话，还是仔细想想其他算法吧。\n\n$\\ \\ \\ \\ \\ \\ \\ \\,$还有，后缀自动机处理的字符串是静态的，最多就是在后面加后缀，要是需要处理动态的字符串的话，多半也是不合算的，需要考虑其他算法。\n\n$\\ \\ \\ \\ \\ \\ \\ \\,$不过，后缀自动机依然是一个优秀的字符串数据结构，代码量小，适用性高，是一个万金油算法。","slug":"后缀自动机","published":1,"updated":"2022-02-13T13:53:30.003Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0i63w670013u4gbaloahzxl","content":"<p>$\\ \\ \\ \\ \\ \\ \\ \\,$关于后缀自动机性质的复习笔记：</p>\n<span id=\"more\"></span>\n<p>$\\ \\ \\ \\ \\ \\ \\ \\,$后缀自动机是一个可以解决大多数字符串问题的字符串数据结构，可以识别该字符串的所有子串，其时空复杂度也比较优秀，对于一个字符集大小为$m$，长度为$n$的字符串，建立一个后缀自动机的时间复杂度为$O(nm)$，空间复杂度为 $O(2nm)$。</p>\n<p>$\\ \\ \\ \\ \\ \\ \\ \\,$讲后缀自动机的博客很多，这里直接给出模板，重点讲讲后缀自动机长什么样子，怎么用它：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Suffix_Automaton</span>&#123;</span><br><span class=\"line\">  <span class=\"type\">int</span> len[N&lt;&lt;<span class=\"number\">1</span>],fa[N&lt;&lt;<span class=\"number\">1</span>],son[N&lt;&lt;<span class=\"number\">1</span>][<span class=\"number\">26</span>];</span><br><span class=\"line\">  <span class=\"type\">int</span> size,last;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Init</span><span class=\"params\">()</span></span>&#123;size=last=<span class=\"number\">1</span>;&#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">insert</span><span class=\"params\">(<span class=\"type\">char</span> c)</span></span>&#123;</span><br><span class=\"line\">  \t<span class=\"type\">int</span> s=c-<span class=\"string\">&#x27;a&#x27;</span>;</span><br><span class=\"line\">  \t<span class=\"type\">int</span> p=last,np=++size;last=np;</span><br><span class=\"line\">  \tlen[np]=len[p]+<span class=\"number\">1</span>;</span><br><span class=\"line\">  \t<span class=\"keyword\">for</span>(;p&amp;&amp;!son[p][s];p=fa[p])son[p][s]=np;</span><br><span class=\"line\">  \t<span class=\"keyword\">if</span>(!p)fa[np]=<span class=\"number\">1</span>;</span><br><span class=\"line\">  \t<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">  \t\t<span class=\"type\">int</span> q=son[p][s];</span><br><span class=\"line\">  \t\t<span class=\"keyword\">if</span>(len[p]+<span class=\"number\">1</span>==len[q])fa[np]=q;</span><br><span class=\"line\">  \t\t<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">  \t\t\t<span class=\"type\">int</span> nq=++size;len[nq]=len[p]+<span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">memcpy</span>(son[nq],son[q],<span class=\"built_in\">sizeof</span>(son[q]));</span><br><span class=\"line\">  \t\t\tfa[nq]=fa[q];fa[q]=fa[np]=nq;</span><br><span class=\"line\">  \t\t\t<span class=\"keyword\">for</span>(;son[p][s]==q;p=fa[p])son[p][s]=nq;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Insert</span><span class=\"params\">(<span class=\"type\">char</span> *s)</span></span>&#123;</span><br><span class=\"line\">  \t<span class=\"built_in\">Init</span>();</span><br><span class=\"line\">  \t<span class=\"type\">int</span> len=<span class=\"built_in\">strlen</span>(s);</span><br><span class=\"line\">  \t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;len;i++)</span><br><span class=\"line\">  \t<span class=\"built_in\">insert</span>(s[i]);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;Sam;</span><br></pre></td></tr></table></figure>\n<p>$\\ \\ \\ \\ \\ \\ \\ \\,$对于一个串 $abcabbca$，我们建立的后缀自动机就是这个样子的：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/7d92af985e9c0bc856c6540d026440d2.png\" alt=\"FgcB5V.md.png\"><br>（注意点12到点6少了一条边b）</p>\n<p>$\\ \\ \\ \\ \\ \\ \\ \\,$其中我们如下规定：</p>\n<ul>\n<li><p>红色，蓝色，绿色的边构成一个尾部收束的$Trie$树，用来高效表示这个串的后缀集合，就是$son$数组构成的。并且我们把红色的链叫做主链，蓝色叫做扩展链，同一水平面的点叫做扩展点对（在模板中，每个$last$的取值都是主链，每个$np$和$nq$都是扩展点对）<del>（都是我自己取的名字）</del></p>\n</li>\n<li><p>黄色构成$parents$树，就是$fa$数组构成的，这棵树爸爸不认儿子，儿子认爸爸。</p>\n</li>\n<li><p>在点旁边的灰色数字就是$len$数组。</p>\n</li>\n</ul>\n<p>$\\ \\ \\ \\ \\ \\ \\ \\,$其实这张图看上去还是挺麻烦的，我们不如将它分开来看：</p>\n<h2 id=\"尾部收束的-Trie-树：\"><a href=\"#尾部收束的-Trie-树：\" class=\"headerlink\" title=\"尾部收束的$Trie$树：\"></a>尾部收束的$Trie$树：</h2><p><img src=\"https://img-blog.csdnimg.cn/img_convert/1f18cdea677c5f50e8046a4ded937fb9.png\" alt=\"Fgc7xe.md.png\"><br>（注意点12到点6少了一条边b）</p>\n<p>$\\ \\ \\ \\ \\ \\ \\ \\,$尾部收束的$Trie$树，用来高效表示这个串的后缀集合，可以发现，我们从节点 $1$ 开始走，在走到没有儿子的节点的时候，必然是原串的一个后缀，并且是覆盖完了的，换句话说，<strong>这个串的任意子串都可以在这棵树上表示出来，且仅有这个串的子串才能表示</strong>。</p>\n<p>$\\ \\ \\ \\ \\ \\ \\ \\,$不妨来观察一下，每一个节点上都有哪些子串的信息：</p>\n<p><strong> 2：a </strong></p>\n<p><strong> 3：ab </strong></p>\n<p><strong> 4：abc </strong></p>\n<p><strong> 5：abca </strong></p>\n<p><strong> 6：abcab，bcab，cab </strong></p>\n<p><strong> 7：abcabb，bcabb，cabb，abb，bb </strong></p>\n<p><strong> 8：b </strong></p>\n<p><strong> 9：abcabbc，bcabbc，cabbc，abbc，bbc </strong></p>\n<p><strong> 10：bc，c </strong></p>\n<p><strong> 11：abcabbca，bcabbca，cabbca，abbca，bbca </strong></p>\n<p><strong> 12：bca，ca </strong></p>\n<p>$\\ \\ \\ \\ \\ \\ \\ \\,$这样一来，很多性质都出来了：</p>\n<p><strong> 在$Trie$上，父亲是儿子上的子串的公共前缀<del>（废话）</del>； </strong></p>\n<p><strong> 在主链上的点，最长的子串都是原串的前缀； </strong></p>\n<p><strong> 在一个点上的子串，短的为长的的后缀； </strong></p>\n<p><strong> $len$数组表示的是这个节上的子串最长长度； </strong></p>\n<p><strong> 扩展点对一个在主链上一个在扩展链上，在扩展链上的点上的子串是在主链上的点上的子串的公共后缀。 </strong></p>\n<h2 id=\"parents-树：\"><a href=\"#parents-树：\" class=\"headerlink\" title=\"$parents$树：\"></a>$parents$树：</h2><p><img src=\"https://img-blog.csdnimg.cn/img_convert/c3221ce482a1ff2ce6b53fb9b1d20638.png\" alt=\"Fg2dhV.png\"></p>\n<p>$\\ \\ \\ \\ \\ \\ \\ \\,$这样看起来好像不是特别方便，我们把他整合一下：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/3da88966e5b248626cf33b5c6d868c74.png\" alt=\"Fg26B9.png\"></p>\n<p>$\\ \\ \\ \\ \\ \\ \\ \\,$回想一下每一个节点上都有哪些子串的信息和出现次数，顺便看看每个子串出现的终点：</p>\n<p><strong> 2：a (3：1,4,8) </strong></p>\n<p><strong> 3：ab (2：2,5) </strong></p>\n<p><strong> 4：abc (1：3) </strong></p>\n<p><strong> 5：abca (1：4) </strong></p>\n<p><strong> 6：abcab (1：5)，bcab (1：5)，cab (1：5) </strong></p>\n<p><strong> 7：abcabb (1：6)，bcabb (1：6)，cabb (1：6)，abb (1：6)，bb (1：6) </strong></p>\n<p><strong> 8：b (3：2,5,6) </strong></p>\n<p><strong> 9：abcabbc (1：7)，bcabbc (1：7)，cabbc (1：7)，abbc (1：7)，bbc (1：7) </strong></p>\n<p><strong> 10：bc (2：3,7)，c (2：3,7) </strong></p>\n<p><strong> 11：abcabbca (1：8)，bcabbca (1：8)，cabbca (1：8)，abbca (1：8)，bbca (1：8) </strong></p>\n<p><strong> 12：bca (2：4,8)，ca (2：4,8) </strong></p>\n<p>$\\ \\ \\ \\ \\ \\ \\ \\,$很多性质又都出来了：</p>\n<p><strong> 在$parents$上，父亲是儿子上的子串的公共后缀； </strong></p>\n<p><strong> 叶子节点都是主链上的节点； </strong></p>\n<p><strong> 主链上的节点上的子串的出现终点，都有$len$数组描述的位置； </strong></p>\n<p><strong> 一个节点上的子串出现次数是一样的； </strong></p>\n<p><strong> 父亲上的子串出现次数，是儿子上的子串出现次数之和； </strong></p>\n<p><strong> 儿子上的子串出现的终点，是父亲上的子串出现的终点的子集； </strong></p>\n<p><strong> 点$i$上面表示子串的数量为$len[fa[i]]-len[i]$。 </strong></p>\n<hr>\n<p>$\\ \\ \\ \\ \\ \\ \\ \\,$最后我们总结一下：<br><strong> 在$Trie$上，父亲是儿子上的子串的公共前缀； </strong></p>\n<p><strong> 在$parents$上，父亲是儿子上的子串的公共后缀； </strong></p>\n<p><strong> 在一个点上的子串，短的为长的的后缀； </strong></p>\n<p><strong> 一个节点上的子串出现次数是一样的； </strong></p>\n<p><strong> $len$数组表示的是这个节上的子串最长长度； </strong></p>\n<p><strong> $parents$上叶子节点都是主链上的节点； </strong></p>\n<p><strong> 在主链上的点，最长的子串都是原串的前缀； </strong></p>\n<p><strong> 主链上的节点上的子串的出现终点，都有$len$数组描述的位置； </strong></p>\n<p><strong> 扩展点对一个在主链上一个在扩展链上，在扩展链上的点上的子串是在主链上的点上的子串的公共后缀； </strong></p>\n<p><strong> $parents$上父亲上的子串出现次数，是儿子上的子串出现次数之和，如果父亲在主链上，就再加一； </strong></p>\n<p><strong> $parents$上儿子上的子串出现的终点，是父亲上的子串出现的终点的子集； </strong></p>\n<p><strong> 点$i$上面表示子串的数量为$len[fa[i]]-len[i]$。 </strong></p>\n<hr>\n<p>$\\ \\ \\ \\ \\ \\ \\ \\,$如此多的性质，我们就可以拿后缀自动机解决很多问题了：</p>\n<h2 id=\"字符串匹配\"><a href=\"#字符串匹配\" class=\"headerlink\" title=\"字符串匹配\"></a>字符串匹配</h2><p>  文本串建立后缀自动机，模式串在$Trie$上面跑一次，跑完了就匹配到了，利用了$Trie$上面包含了原串所有子串的性质，多文本串的话，就在文本串之间插入奇怪字符，然后一起建立后缀自动机就行了就可以解决了，或者建广义后缀自动机。</p>\n<h2 id=\"子串查询出现次数\"><a href=\"#子串查询出现次数\" class=\"headerlink\" title=\"子串查询出现次数\"></a>子串查询出现次数</h2><p>  文本串建立后缀自动机，然后在$parents$上做$dp$，询问就让模式串在$Trie$上面跑一次，找到自动机上点，输出就好了，利用了$parents$上父亲上的子串出现次数，是儿子上的子串出现次数之和的性质。因为$parents$上是儿子认爸爸，爸爸不认儿子，所以我们需要跑个拓扑，拓扑序就是$y$的倒叙了啊：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=size;i++)x[len[i]]++;</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=size;i++)x[i]+=x[i<span class=\"number\">-1</span>];</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=size;i++)y[x[len[i]]--]=i;</span><br><span class=\"line\"><span class=\"comment\">//for(int i=size;i&gt;=1;i--)tim[fa[y[i]]]+=tim[y[i]];</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"子串查询出现位置\"><a href=\"#子串查询出现位置\" class=\"headerlink\" title=\"子串查询出现位置\"></a>子串查询出现位置</h2><p>  文本串建立后缀自动机，让模式串在$Trie$上面跑一次，找到自动机上点，再从这个点开始，在$parents$上跑，遇到在主链上的点，它的$len$值就是终点了，要是求起点坐标，终点减去长度加上$1$就好了。</p>\n<h2 id=\"最长回文串\"><a href=\"#最长回文串\" class=\"headerlink\" title=\"最长回文串\"></a>最长回文串</h2><p>  文本串倍增，后半截翻转，查询子串出现次数大于$2$，并且位置换算一下，如果相解就是合法，取最大值就好了，实现起来略复杂，没有Manacher算法优秀。</p>\n<h2 id=\"子串的子串\"><a href=\"#子串的子串\" class=\"headerlink\" title=\"子串的子串\"></a>子串的子串</h2><p>  子串的子串要么是它的前缀的后缀，要么是它的前缀，要么是他的后缀，所以说只需要找到子串这个点，他在$parents$上的子树和他在$Trie$的祖先，还有他在$parents$上的子树的$Trie$的祖先，都是他的子串。</p>\n<h2 id=\"后缀自动机的合并（广义后缀自动机）\"><a href=\"#后缀自动机的合并（广义后缀自动机）\" class=\"headerlink\" title=\"后缀自动机的合并（广义后缀自动机）\"></a>后缀自动机的合并（广义后缀自动机）</h2><p>  后缀自动机的合并，我们可以理解为，在后缀自动机上新加入一个字符串，其实只需要将 $last$ 重新赋为 $1$ ，注意新串的点打上不一样的标记，这个差不多就是广义后缀自动机，广义后缀自动机还有一步判断这个点有没有被建过的操作，但个人感觉实际上没有必要，最坏空间复杂度依然是$O(2nm)$的：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Insert</span><span class=\"params\">(<span class=\"type\">char</span> *s)</span></span>&#123;</span><br><span class=\"line\">  col++;last=<span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"type\">int</span> len=<span class=\"built_in\">strlen</span>(s);</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;len;i++)</span><br><span class=\"line\">  <span class=\"built_in\">insert</span>(s[i]);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>$\\ \\ \\ \\ \\ \\ \\ \\,$还有很多关于子串，前缀，后缀的问题或者可以转换为子串，前缀，后缀的问题，用后缀自动机在大多数情况下都是不二之选，一般字符串的字符集都比较小，所以复杂度也很优秀，但要是字符集大小太大的话，还是仔细想想其他算法吧。</p>\n<p>$\\ \\ \\ \\ \\ \\ \\ \\,$还有，后缀自动机处理的字符串是静态的，最多就是在后面加后缀，要是需要处理动态的字符串的话，多半也是不合算的，需要考虑其他算法。</p>\n<p>$\\ \\ \\ \\ \\ \\ \\ \\,$不过，后缀自动机依然是一个优秀的字符串数据结构，代码量小，适用性高，是一个万金油算法。</p>\n","site":{"data":{}},"excerpt":"<p>$\\ \\ \\ \\ \\ \\ \\ \\,$关于后缀自动机性质的复习笔记：</p>","more":"<p>$\\ \\ \\ \\ \\ \\ \\ \\,$后缀自动机是一个可以解决大多数字符串问题的字符串数据结构，可以识别该字符串的所有子串，其时空复杂度也比较优秀，对于一个字符集大小为$m$，长度为$n$的字符串，建立一个后缀自动机的时间复杂度为$O(nm)$，空间复杂度为 $O(2nm)$。</p>\n<p>$\\ \\ \\ \\ \\ \\ \\ \\,$讲后缀自动机的博客很多，这里直接给出模板，重点讲讲后缀自动机长什么样子，怎么用它：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Suffix_Automaton</span>&#123;</span><br><span class=\"line\">  <span class=\"type\">int</span> len[N&lt;&lt;<span class=\"number\">1</span>],fa[N&lt;&lt;<span class=\"number\">1</span>],son[N&lt;&lt;<span class=\"number\">1</span>][<span class=\"number\">26</span>];</span><br><span class=\"line\">  <span class=\"type\">int</span> size,last;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Init</span><span class=\"params\">()</span></span>&#123;size=last=<span class=\"number\">1</span>;&#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">insert</span><span class=\"params\">(<span class=\"type\">char</span> c)</span></span>&#123;</span><br><span class=\"line\">  \t<span class=\"type\">int</span> s=c-<span class=\"string\">&#x27;a&#x27;</span>;</span><br><span class=\"line\">  \t<span class=\"type\">int</span> p=last,np=++size;last=np;</span><br><span class=\"line\">  \tlen[np]=len[p]+<span class=\"number\">1</span>;</span><br><span class=\"line\">  \t<span class=\"keyword\">for</span>(;p&amp;&amp;!son[p][s];p=fa[p])son[p][s]=np;</span><br><span class=\"line\">  \t<span class=\"keyword\">if</span>(!p)fa[np]=<span class=\"number\">1</span>;</span><br><span class=\"line\">  \t<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">  \t\t<span class=\"type\">int</span> q=son[p][s];</span><br><span class=\"line\">  \t\t<span class=\"keyword\">if</span>(len[p]+<span class=\"number\">1</span>==len[q])fa[np]=q;</span><br><span class=\"line\">  \t\t<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">  \t\t\t<span class=\"type\">int</span> nq=++size;len[nq]=len[p]+<span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">memcpy</span>(son[nq],son[q],<span class=\"built_in\">sizeof</span>(son[q]));</span><br><span class=\"line\">  \t\t\tfa[nq]=fa[q];fa[q]=fa[np]=nq;</span><br><span class=\"line\">  \t\t\t<span class=\"keyword\">for</span>(;son[p][s]==q;p=fa[p])son[p][s]=nq;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Insert</span><span class=\"params\">(<span class=\"type\">char</span> *s)</span></span>&#123;</span><br><span class=\"line\">  \t<span class=\"built_in\">Init</span>();</span><br><span class=\"line\">  \t<span class=\"type\">int</span> len=<span class=\"built_in\">strlen</span>(s);</span><br><span class=\"line\">  \t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;len;i++)</span><br><span class=\"line\">  \t<span class=\"built_in\">insert</span>(s[i]);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;Sam;</span><br></pre></td></tr></table></figure>\n<p>$\\ \\ \\ \\ \\ \\ \\ \\,$对于一个串 $abcabbca$，我们建立的后缀自动机就是这个样子的：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/7d92af985e9c0bc856c6540d026440d2.png\" alt=\"FgcB5V.md.png\"><br>（注意点12到点6少了一条边b）</p>\n<p>$\\ \\ \\ \\ \\ \\ \\ \\,$其中我们如下规定：</p>\n<ul>\n<li><p>红色，蓝色，绿色的边构成一个尾部收束的$Trie$树，用来高效表示这个串的后缀集合，就是$son$数组构成的。并且我们把红色的链叫做主链，蓝色叫做扩展链，同一水平面的点叫做扩展点对（在模板中，每个$last$的取值都是主链，每个$np$和$nq$都是扩展点对）<del>（都是我自己取的名字）</del></p>\n</li>\n<li><p>黄色构成$parents$树，就是$fa$数组构成的，这棵树爸爸不认儿子，儿子认爸爸。</p>\n</li>\n<li><p>在点旁边的灰色数字就是$len$数组。</p>\n</li>\n</ul>\n<p>$\\ \\ \\ \\ \\ \\ \\ \\,$其实这张图看上去还是挺麻烦的，我们不如将它分开来看：</p>\n<h2 id=\"尾部收束的-Trie-树：\"><a href=\"#尾部收束的-Trie-树：\" class=\"headerlink\" title=\"尾部收束的$Trie$树：\"></a>尾部收束的$Trie$树：</h2><p><img src=\"https://img-blog.csdnimg.cn/img_convert/1f18cdea677c5f50e8046a4ded937fb9.png\" alt=\"Fgc7xe.md.png\"><br>（注意点12到点6少了一条边b）</p>\n<p>$\\ \\ \\ \\ \\ \\ \\ \\,$尾部收束的$Trie$树，用来高效表示这个串的后缀集合，可以发现，我们从节点 $1$ 开始走，在走到没有儿子的节点的时候，必然是原串的一个后缀，并且是覆盖完了的，换句话说，<strong>这个串的任意子串都可以在这棵树上表示出来，且仅有这个串的子串才能表示</strong>。</p>\n<p>$\\ \\ \\ \\ \\ \\ \\ \\,$不妨来观察一下，每一个节点上都有哪些子串的信息：</p>\n<p><strong> 2：a </strong></p>\n<p><strong> 3：ab </strong></p>\n<p><strong> 4：abc </strong></p>\n<p><strong> 5：abca </strong></p>\n<p><strong> 6：abcab，bcab，cab </strong></p>\n<p><strong> 7：abcabb，bcabb，cabb，abb，bb </strong></p>\n<p><strong> 8：b </strong></p>\n<p><strong> 9：abcabbc，bcabbc，cabbc，abbc，bbc </strong></p>\n<p><strong> 10：bc，c </strong></p>\n<p><strong> 11：abcabbca，bcabbca，cabbca，abbca，bbca </strong></p>\n<p><strong> 12：bca，ca </strong></p>\n<p>$\\ \\ \\ \\ \\ \\ \\ \\,$这样一来，很多性质都出来了：</p>\n<p><strong> 在$Trie$上，父亲是儿子上的子串的公共前缀<del>（废话）</del>； </strong></p>\n<p><strong> 在主链上的点，最长的子串都是原串的前缀； </strong></p>\n<p><strong> 在一个点上的子串，短的为长的的后缀； </strong></p>\n<p><strong> $len$数组表示的是这个节上的子串最长长度； </strong></p>\n<p><strong> 扩展点对一个在主链上一个在扩展链上，在扩展链上的点上的子串是在主链上的点上的子串的公共后缀。 </strong></p>\n<h2 id=\"parents-树：\"><a href=\"#parents-树：\" class=\"headerlink\" title=\"$parents$树：\"></a>$parents$树：</h2><p><img src=\"https://img-blog.csdnimg.cn/img_convert/c3221ce482a1ff2ce6b53fb9b1d20638.png\" alt=\"Fg2dhV.png\"></p>\n<p>$\\ \\ \\ \\ \\ \\ \\ \\,$这样看起来好像不是特别方便，我们把他整合一下：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/3da88966e5b248626cf33b5c6d868c74.png\" alt=\"Fg26B9.png\"></p>\n<p>$\\ \\ \\ \\ \\ \\ \\ \\,$回想一下每一个节点上都有哪些子串的信息和出现次数，顺便看看每个子串出现的终点：</p>\n<p><strong> 2：a (3：1,4,8) </strong></p>\n<p><strong> 3：ab (2：2,5) </strong></p>\n<p><strong> 4：abc (1：3) </strong></p>\n<p><strong> 5：abca (1：4) </strong></p>\n<p><strong> 6：abcab (1：5)，bcab (1：5)，cab (1：5) </strong></p>\n<p><strong> 7：abcabb (1：6)，bcabb (1：6)，cabb (1：6)，abb (1：6)，bb (1：6) </strong></p>\n<p><strong> 8：b (3：2,5,6) </strong></p>\n<p><strong> 9：abcabbc (1：7)，bcabbc (1：7)，cabbc (1：7)，abbc (1：7)，bbc (1：7) </strong></p>\n<p><strong> 10：bc (2：3,7)，c (2：3,7) </strong></p>\n<p><strong> 11：abcabbca (1：8)，bcabbca (1：8)，cabbca (1：8)，abbca (1：8)，bbca (1：8) </strong></p>\n<p><strong> 12：bca (2：4,8)，ca (2：4,8) </strong></p>\n<p>$\\ \\ \\ \\ \\ \\ \\ \\,$很多性质又都出来了：</p>\n<p><strong> 在$parents$上，父亲是儿子上的子串的公共后缀； </strong></p>\n<p><strong> 叶子节点都是主链上的节点； </strong></p>\n<p><strong> 主链上的节点上的子串的出现终点，都有$len$数组描述的位置； </strong></p>\n<p><strong> 一个节点上的子串出现次数是一样的； </strong></p>\n<p><strong> 父亲上的子串出现次数，是儿子上的子串出现次数之和； </strong></p>\n<p><strong> 儿子上的子串出现的终点，是父亲上的子串出现的终点的子集； </strong></p>\n<p><strong> 点$i$上面表示子串的数量为$len[fa[i]]-len[i]$。 </strong></p>\n<hr>\n<p>$\\ \\ \\ \\ \\ \\ \\ \\,$最后我们总结一下：<br><strong> 在$Trie$上，父亲是儿子上的子串的公共前缀； </strong></p>\n<p><strong> 在$parents$上，父亲是儿子上的子串的公共后缀； </strong></p>\n<p><strong> 在一个点上的子串，短的为长的的后缀； </strong></p>\n<p><strong> 一个节点上的子串出现次数是一样的； </strong></p>\n<p><strong> $len$数组表示的是这个节上的子串最长长度； </strong></p>\n<p><strong> $parents$上叶子节点都是主链上的节点； </strong></p>\n<p><strong> 在主链上的点，最长的子串都是原串的前缀； </strong></p>\n<p><strong> 主链上的节点上的子串的出现终点，都有$len$数组描述的位置； </strong></p>\n<p><strong> 扩展点对一个在主链上一个在扩展链上，在扩展链上的点上的子串是在主链上的点上的子串的公共后缀； </strong></p>\n<p><strong> $parents$上父亲上的子串出现次数，是儿子上的子串出现次数之和，如果父亲在主链上，就再加一； </strong></p>\n<p><strong> $parents$上儿子上的子串出现的终点，是父亲上的子串出现的终点的子集； </strong></p>\n<p><strong> 点$i$上面表示子串的数量为$len[fa[i]]-len[i]$。 </strong></p>\n<hr>\n<p>$\\ \\ \\ \\ \\ \\ \\ \\,$如此多的性质，我们就可以拿后缀自动机解决很多问题了：</p>\n<h2 id=\"字符串匹配\"><a href=\"#字符串匹配\" class=\"headerlink\" title=\"字符串匹配\"></a>字符串匹配</h2><p>  文本串建立后缀自动机，模式串在$Trie$上面跑一次，跑完了就匹配到了，利用了$Trie$上面包含了原串所有子串的性质，多文本串的话，就在文本串之间插入奇怪字符，然后一起建立后缀自动机就行了就可以解决了，或者建广义后缀自动机。</p>\n<h2 id=\"子串查询出现次数\"><a href=\"#子串查询出现次数\" class=\"headerlink\" title=\"子串查询出现次数\"></a>子串查询出现次数</h2><p>  文本串建立后缀自动机，然后在$parents$上做$dp$，询问就让模式串在$Trie$上面跑一次，找到自动机上点，输出就好了，利用了$parents$上父亲上的子串出现次数，是儿子上的子串出现次数之和的性质。因为$parents$上是儿子认爸爸，爸爸不认儿子，所以我们需要跑个拓扑，拓扑序就是$y$的倒叙了啊：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=size;i++)x[len[i]]++;</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=size;i++)x[i]+=x[i<span class=\"number\">-1</span>];</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=size;i++)y[x[len[i]]--]=i;</span><br><span class=\"line\"><span class=\"comment\">//for(int i=size;i&gt;=1;i--)tim[fa[y[i]]]+=tim[y[i]];</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"子串查询出现位置\"><a href=\"#子串查询出现位置\" class=\"headerlink\" title=\"子串查询出现位置\"></a>子串查询出现位置</h2><p>  文本串建立后缀自动机，让模式串在$Trie$上面跑一次，找到自动机上点，再从这个点开始，在$parents$上跑，遇到在主链上的点，它的$len$值就是终点了，要是求起点坐标，终点减去长度加上$1$就好了。</p>\n<h2 id=\"最长回文串\"><a href=\"#最长回文串\" class=\"headerlink\" title=\"最长回文串\"></a>最长回文串</h2><p>  文本串倍增，后半截翻转，查询子串出现次数大于$2$，并且位置换算一下，如果相解就是合法，取最大值就好了，实现起来略复杂，没有Manacher算法优秀。</p>\n<h2 id=\"子串的子串\"><a href=\"#子串的子串\" class=\"headerlink\" title=\"子串的子串\"></a>子串的子串</h2><p>  子串的子串要么是它的前缀的后缀，要么是它的前缀，要么是他的后缀，所以说只需要找到子串这个点，他在$parents$上的子树和他在$Trie$的祖先，还有他在$parents$上的子树的$Trie$的祖先，都是他的子串。</p>\n<h2 id=\"后缀自动机的合并（广义后缀自动机）\"><a href=\"#后缀自动机的合并（广义后缀自动机）\" class=\"headerlink\" title=\"后缀自动机的合并（广义后缀自动机）\"></a>后缀自动机的合并（广义后缀自动机）</h2><p>  后缀自动机的合并，我们可以理解为，在后缀自动机上新加入一个字符串，其实只需要将 $last$ 重新赋为 $1$ ，注意新串的点打上不一样的标记，这个差不多就是广义后缀自动机，广义后缀自动机还有一步判断这个点有没有被建过的操作，但个人感觉实际上没有必要，最坏空间复杂度依然是$O(2nm)$的：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Insert</span><span class=\"params\">(<span class=\"type\">char</span> *s)</span></span>&#123;</span><br><span class=\"line\">  col++;last=<span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"type\">int</span> len=<span class=\"built_in\">strlen</span>(s);</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;len;i++)</span><br><span class=\"line\">  <span class=\"built_in\">insert</span>(s[i]);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>$\\ \\ \\ \\ \\ \\ \\ \\,$还有很多关于子串，前缀，后缀的问题或者可以转换为子串，前缀，后缀的问题，用后缀自动机在大多数情况下都是不二之选，一般字符串的字符集都比较小，所以复杂度也很优秀，但要是字符集大小太大的话，还是仔细想想其他算法吧。</p>\n<p>$\\ \\ \\ \\ \\ \\ \\ \\,$还有，后缀自动机处理的字符串是静态的，最多就是在后面加后缀，要是需要处理动态的字符串的话，多半也是不合算的，需要考虑其他算法。</p>\n<p>$\\ \\ \\ \\ \\ \\ \\ \\,$不过，后缀自动机依然是一个优秀的字符串数据结构，代码量小，适用性高，是一个万金油算法。</p>"},{"title":"多项式全家桶","date":"2019-04-03T07:37:09.000Z","mathjax":true,"_content":"\n$\\ \\ \\ \\ \\ \\ \\,$终于把多项式差不多弄完了，可以找个机会在退役前把多项式整理封装弄好，也算是留下了一点东西吧（嘿嘿。\n\n$\\ \\ \\ \\ \\ \\ \\,$这一部分实例的代码是用 $std::vector$ 封装好的：\n\n**2022-02-14 跟新：把这最长的一篇搬来新博客上面，然后做了一下整合**\n\n<!-- more -->\n\n## 基础\n\n### 定义\n\n$\\ \\ \\ \\ \\ \\ \\,$多项式（Polynomial）是代数学中的基础概念，是由称为未知数的变量和称为系数的常数通过有限次加减法、乘法以及自然数幂次的乘方运算得到的代数表达式。多项式是整式的一种。未知数只有一个的多项式称为一元多项式。\n  \n$\\ \\ \\ \\ \\ \\ \\,$一个$n$元多项式，也就是长度为$n$的多项式$f$，我们可以这样表达：\n  \n$f=\\sum_{i=0}^{n}f_i\\cdot x^i$\n  \n$\\ \\ \\ \\ \\ \\ \\,$我们一般简写为:\n  \n$f=\\sum_{i=0}^{n}f_i$\n\n$\\ \\ \\ \\ \\ \\ \\,$首先是可能需要用到的模板定义，都是比较基础的数论知识，不赘述了：\n``` cpp\n#define Polynomial vector<int>\n//封装多项式为 std::vector，方便resize等操作\nvoid print(Polynomial &a,int len){for(int i=0;i<len;i++)printf(\"%d \",a[i]);}\nconst int mod=998244353,mod_g=3,img=86583718;\n//mod为多项式系数的取模值，mod_g是它的原根，img为在模意义下的虚部，只有多项式三角函数会遇到。\nint gcd(int a,int b){return b?gcd(b,a%b):a;}\nvoid exgcd(int a,int b,int &x,int &y){\n\tif(!b){x=1;y=0;return;}\n\texgcd(b,a%b,y,x);y-=x*(a/b);\n}\n//gcd，exgcd只有在开根的时候会用到\nint power(int a,int b)\n{int ans=1;for(;b;b>>=1,a=1ll*a*a%mod)if(b&1)ans=1ll*ans*a%mod;return ans;}\n#define Inv(x) power(x,mod-2)\n```\n\n### NTT\n$\\ \\ \\ \\ \\ \\ \\,$然后是核心的快速数论变换 $NTT$，相关请看[【求多项式卷积的变换】](/2018/12/29/求多项式卷积的变换/)：\n``` cpp\nPolynomial R;\ninline int Binary_Rounding(const int &n)\n{int len=1;for(;len<n;len<<=1);return len;}\n//二进制向上取整，为方便NTT变换准备。\ninline int Prepare_Transformation(int n){\n  \tint L=0,len;for(len=1;len<n;len<<=1)L++;R.clear();R.resize(len);\n  \tfor(int i=0;i<len;i++)R[i]=(R[i>>1]>>1)|((i&1)<<(L-1));\n  \treturn len;\n}\n//预处理R数组，准备变换，在每次NTT之前理论都要调用此函数。\nvoid NTT(Polynomial &a,int f){\n\tint n=a.size();\n\tfor(int i=0;i<n;i++)if(i<R[i])swap(a[i],a[R[i]]);\n  \tfor(int i=1;i<n;i<<=1)\n  \tfor(int j=0,gn=power(mod_g,(mod-1)/(i<<1));j<n;j+=(i<<1))\n  \tfor(int k=0,g=1,x,y;k<i;k++,g=1ll*g*gn%mod)\n\t  \tx=a[j+k],y=1ll*g*a[i+j+k]%mod,\n\t  \ta[j+k]=(x+y)%mod,a[i+j+k]=(x-y+mod)%mod;\n  \tif(f==-1){\n   \t\treverse(a.begin()+1,a.end());\n    \tint inv=Inv(n);\n    \tfor(int i=0;i<n;i++)a[i]=1ll*a[i]*inv%mod;\n  \t}\n}\n```\n\n## 多项式的加，减，卷积\n\n  \n$\\ \\ \\ \\ \\ \\ \\,$对于一个长度为$n$的多项式$f$和长度为$m$的多项式$g$:\n  \n$\\begin{aligned}f+g&=\\sum_{i=0}^{n}f_i+\\sum_{i=0}^{m}g_i\\\\ &=\\sum_{i=0}^{max(n,m)}f_i+g_i\\end{aligned}$\n  \n$\\begin{aligned}f-g&=\\sum_{i=0}^{n}f_i-\\sum_{i=0}^{m}g_i\\\\ &=\\sum_{i=0}^{max(n,m)}f_i-g_i\\end{aligned}$\n\n$\\ \\ \\ \\ \\ \\ \\,$多项式的卷积，我们还是对于上文中的两个函数$f$和$g$，这个地方不展开写挺不方便的，我们就展开吧：\n  \n$\\begin{aligned}f\\bigotimes g&=\\sum_{i=0}^{n}f_i\\cdot  x^i\\times \\sum_{i=0}^{m}g_i\\cdot x^i \\\\ &=\\sum_{v=0}^{n+m}f_b\\cdot  x^b\\times g_a\\cdot  x^a[a+b=v]\\\\&=\\sum_{x=0}^{n+m}\\sum_{i=0}^{v}f_i\\cdot g_{v-i}\\cdot x^v\\end{aligned}$\n  \n$\\ \\ \\ \\ \\ \\ \\,$计算的复杂度呢，是$O(n^2)$的，可以用一些神奇算法优化成$O(n\\log n)$的具体看这里：[【求多项式卷积的变换】](/2018/12/29/求多项式卷积的变换/)\n  \n\n$\\ \\ \\ \\ \\ \\ \\,$多项式的加，减，卷积，是比较基本的多项式操作，以模拟和 $NTT$ 为主，主要是展示和记录模板的操作。\n\n$\\ \\ \\ \\ \\ \\ \\,$ ~~单项式其实就是常数。~~\n\n\n### 多项式加，减单项式\n\n``` cpp\ninline Polynomial operator +(const Polynomial &a,const int &b){\n\tint sizea=a.size();Polynomial ret=a;ret.resize(sizea);\n\tfor(int i=0;i<sizea;i++)ret[i]=(1ll*a[i]+b+mod)%mod;\n\treturn ret;\n}\ninline Polynomial operator -(const Polynomial &a,const int &b){\n\tint sizea=a.size();Polynomial ret=a;ret.resize(sizea);\n\tfor(int i=0;i<sizea;i++)ret[i]=(1ll*a[i]-b+mod)%mod;\n\treturn ret;\n}\n```\n\n\n### 多项式卷积单项式\n\n``` cpp\ninline Polynomial operator *(const Polynomial &a,const int &b){\n\tint sizea=a.size();Polynomial ret=a;ret.resize(sizea);\n\tfor(int i=0;i<sizea;i++)ret[i]=(1ll*a[i]*b%mod+mod)%mod;\n\treturn ret;\n}\n```\n\n\n### 多项式加，减多项式\n\n$\\ \\ \\ \\ \\ \\ \\,$注意 $vector$ 在赋值之前，一定先要 $resize$ 到合适的位置，不然就会一直 $RE$ 了。\n\n``` cpp\ninline Polynomial operator +(const Polynomial &a,const Polynomial &b){\n\tint sizea=a.size(),sizeb=b.size(),size=max(sizea,sizeb);\n\tPolynomial ret=a;ret.resize(size);\n\tfor(int i=0;i<sizeb;i++)ret[i]=(1ll*ret[i]+b[i])%mod;\n\treturn ret;\n}\ninline Polynomial operator -(const Polynomial &a,const Polynomial &b){\n\tint sizea=a.size(),sizeb=b.size(),size=max(sizea,sizeb);\n\tPolynomial ret=a;ret.resize(size);\n\tfor(int i=0;i<sizeb;i++)ret[i]=(1ll*ret[i]-b[i]+mod)%mod;\n\treturn ret;\n}\n```\n\n\n### 多项式卷积多项式\n $\\ \\ \\ \\ \\ \\ \\,$[P3803 【模板】多项式乘法（FFT）](https://www.luogu.org/problemnew/show/P3803)（可以NTT过\n\n``` cpp\ninline Polynomial operator *(const Polynomial &a,const Polynomial &b){\n\tPolynomial lsa=a,lsb=b,ret;\n\tint n=lsa.size(),m=lsb.size();\n\tn=Prepare_Transformation(n+m);\n  \tlsa.resize(n);lsb.resize(n);ret.resize(n);\n  \tNTT(lsa,1);NTT(lsb,1);\n  \tfor(int i=0;i<n;i++)ret[i]=1ll*lsa[i]*lsb[i]%mod;\n  \tNTT(ret,-1);return ret;\n}\n```\n\n\n### 多项式除法和取模\n\n $\\ \\ \\ \\ \\ \\ \\,$你问我多项式除法（[P4512 【模板】多项式除法](https://www.luogu.org/problemnew/show/P4512)）？？？多项式除法滚出多项式全家桶！！！（超凶\n \n $\\ \\ \\ \\ \\ \\ \\,$看了下一篇 求逆 过后，应该可以自己完成多项式除法了，但是在很多小地方……容易自闭。\n \n $\\ \\ \\ \\ \\ \\ \\,$还是贴一下板子吧，小心别一开始二进制取整了：\n\n``` cpp\ninline Polynomial operator /(const Polynomial &a,const Polynomial &b){\n\tPolynomial ret=a,ls=b;\n  \treverse(ret.begin(),ret.end());\n  \treverse(ls.begin(),ls.end());\n\tls.resize(Binary_Rounding(a.size()+b.size()));\n\tls=Inverse(ls);\n\tls.resize(a.size()+b.size());\n\tret=ret*ls;ret.resize(a.size()-b.size()+1);\n  \treverse(ret.begin(),ret.end());\n\treturn ret;\n}\ninline Polynomial operator %(const Polynomial &a,const Polynomial &b){\n\tPolynomial ret=a/b;\n\tret=ret*b;ret.resize(a.size()+b.size());\n\tret=a-ret;ret.resize(a.size()+b.size());\n\treturn ret;\n}\n```\n\n## 多项式的逆，导，积\n\n$\\ \\ \\ \\ \\ \\ \\,$这一部分麻烦一点了，但是很重要，几乎所有多项式都得用的，不过好在也不是很复杂的。\n\n### 多项式求逆\n$\\ \\ \\ \\ \\ \\ \\,$[P4238 【模板】多项式求逆](https://www.luogu.org/problemnew/show/P4238)\n\n$\\ \\ \\ \\ \\ \\ \\,$求一个多项式 $A$ 的模 $x^n$ 的逆元$B$ 时，假设先求出了模$x^{\\frac{n}{2}}$ 的逆元 $B'$，既：\n\n$A*B' \\equiv 1\\ (mod\\ x^{\\frac{n}{2}})$\n\n$A*B \\equiv 1\\ (mod\\ x^{n})$\n\n$\\ \\ \\ \\ \\ \\ \\,$那么显然存在：\n\n$A*B \\equiv 1\\ (mod\\ x^{\\frac{n}{2}})=A*B'$\n\n$B-B' \\equiv 0\\ (mod\\ x^{\\frac{n}{2}})$\n\n$\\ \\ \\ \\ \\ \\ \\,$两边同时平方：\n\n$B^2-2BB'+B'^2 \\equiv 0\\ (mod\\ x^n)$\n\n$\\ \\ \\ \\ \\ \\ \\,$再把 $A$ 乘回去：\n\n$(A*B)*B-(A*B)*2B'+A*B'^2 \\equiv A*0\\ (mod\\ x^n)$\n\n$B-2B'+A*B'^2 \\equiv 0\\ (mod\\ x^n)$\n\n$B \\equiv 2B'-A*B'^2\\ (mod\\ x^n)$\n\n$\\ \\ \\ \\ \\ \\ \\,$我们就可以倍增来处理它了，起点是$B_0 \\equiv A_0^{-1}(mod\\ x^1)$\n\n``` cpp\ninline Polynomial Inverse(const Polynomial &a){\n\tPolynomial ret,inv_a; \n\tret.resize(1);\n  \tret[0]=Inv(a[0]);int ed=a.size();\n\tfor(int len=2;len<=ed;len<<=1){\n\t \tint n=Prepare_Transformation(len+len);\n\t  \tinv_a=a;inv_a.resize(n);ret.resize(n);\n\t  \tfor(int i=len;i<n;i++)inv_a[i]=0;\n\t  \tNTT(inv_a,1);NTT(ret,1);\n\t  \tfor(int i=0;i<n;i++)ret[i]=1ll*(2ll-1ll*inv_a[i]*ret[i]%mod+mod)%mod*ret[i]%mod;\n\t  \tNTT(ret,-1);\n\t  \t//这里把比较复杂的卷积过程拖下来了。\n\t  \tfor(int i=len;i<n;i++)ret[i]=0;\n\t  \t//这里不resize了，直接把多余的清零。\n\t}\n\tret.resize(ed);\n\t//resize回来，防止以后长度爆炸。\n\treturn ret;\n}\n\n```\n\n\n### 多项式求导\n\n$\\ \\ \\ \\ \\ \\ \\,$按照公式来，公式挺简单的，设多项式 $A$ 的导数为 $A'$。\n\n$\\ \\ \\ \\ \\ \\ \\,$那么有：\n\n$x^{A'}=Ax^{A-1}$\n\n$\\ \\ \\ \\ \\ \\ \\,$既：\n\n$A'_{i}=i\\times A_{i+1}$\n\n``` cpp\ninline Polynomial Derivation(const Polynomial &a){\n\tint size=a.size();Polynomial ret;ret.resize(size);\n  \tfor(int i=1;i<size;i++)ret[i-1]=1ll*i*a[i]%mod;\n  \tret[size-1]=0;\n\treturn ret;\n}\n```\n\n\n### 多项式求积\n\n$\\ \\ \\ \\ \\ \\ \\,$还是按照公式来，设多项式 $A$ 的积分为 $A'$。\n\n$\\ \\ \\ \\ \\ \\ \\,$那么有：\n\n$\\int x^{A'}dx=\\frac{1}{A+1}x^{A-1}$\n\n$\\ \\ \\ \\ \\ \\ \\,$既：\n\n$A'_{i}=\\frac{A_{i-1}}{i}$\n\n$\\ \\ \\ \\ \\ \\ \\,$那就是乘逆元咯 ~~（兄弟俩长得挺像~~\n\n``` cpp\ninline Polynomial Integral(const Polynomial &a){\n\tint size=a.size();Polynomial ret;ret.resize(size);\n  \tfor(int i=1;i<size;i++)ret[i]=1ll*Inv(i)*a[i-1]%mod;\n  \tret[0]=0;\n\treturn ret;\n}\n```\n\n### 多项式复合逆\n\n$\\ \\ \\ \\ \\ \\ \\,$[NFLSOJ #332. 多项式复合逆](https://acm.nflsoj.com/problem/332)\n\n$\\ \\ \\ \\ \\ \\ \\,$对于一个多项式$F$，若是存在一个多项式$G$，使得：\n\n$G(F(x))=x$\n\n$\\ \\ \\ \\ \\ \\ \\,$那么就称多项式$G$是多项式$F$的复合逆。\n\n$\\ \\ \\ \\ \\ \\ \\,$目前复合逆没有$O(n \\log n)$的做法，但是可以用拉格朗日反演做到$O(n^2 \\log n)$，既每一项每一项得求，求一项的时间是$O(n \\log n)$的，下面给出公式：\n\n$G_i=\\frac{\\left(\\frac{x}{F}\\right)^i_{i-1}}{i}$\n\n$\\ \\ \\ \\ \\ \\ \\,$那么求逆和卷积就好了，$x$都挺好处理的，证明很复杂，感兴趣可以看[这里](https://users.math.msu.edu/users/magyar/Math880/Lagrange.pdf)。\n\n$\\ \\ \\ \\ \\ \\ \\,$有一个值得注意的地方就是求逆的时候，应该直接求$\\frac{F}{x}$的逆，而不是$F$的逆，因为既然多项式 $F$ 存在复合逆，那么常数项就应该是 $0$ ，这是不可能求逆的，先算出$\\frac{F}{x}$即可。\n\n$\\ \\ \\ \\ \\ \\ \\,$若是需要$O(n \\log n)$只求一项，则需要用到快速幂，下一篇我们会讲到\n\n``` cpp\ninline Polynomial Composition_Inverse(const Polynomial &a){\n\tint n=a.size();\n  \tPolynomial ret,Cinv=a,Pow;\n  \tCinv.resize(n);ret.resize(n);Pow.resize(n);Pow[0]=1;\n  \tfor(register int i=0;i<n-1;i++)Cinv[i]=Cinv[i+1];Cinv[n-1]=0;\n  \tCinv=Inverse(Cinv);\n  \tfor(register int i=1;i<n;++i){\n  \t\tPow=Pow*Cinv;Pow.resize(n);\n  \t\tret[i]=1ll*Pow[i-1]*Inv(i)%mod;\n\t}\n  \treturn ret;\n}\n```\n\n## 多项式的ln，exp\n\n$\\ \\ \\ \\ \\ \\ \\,$对数和指数是很重要的东西了，复杂的多项式都和他们有关系，所以说掌握很重要，这里不建议光背板子，因为这两个板子都有致命的限制，而在实际操作的时候，可以通过一些方法绕过这个限制直接求解，这个就很重要了。\n\n\n### 多项式的$ln$\n$\\ \\ \\ \\ \\ \\ \\,$[P4725 【模板】多项式对数函数](https://www.luogu.org/problemnew/show/P4725)\n\n$\\ \\ \\ \\ \\ \\ \\,$公式先走起咯：\n\n$\\ln(A)=\\int \\frac{A'}{A}dx$\n\n$\\ \\ \\ \\ \\ \\ \\,$观察公式，一句话解决：\n\n$\\ \\ \\ \\ \\ \\ \\,$导卷逆的积：\n\n$\\ \\ \\ \\ \\ \\ \\,$看上去很模板，当然模板也是很短的：\n\n``` cpp\ninline Polynomial Logarithmic(const Polynomial &a){\n\tPolynomial ln_a=Derivation(a)*Inverse(a);\n  \tln_a.resize(a.size());\n  \t//这里resize一下，因为卷积后会倍增，防止变长爆掉\n  \treturn Integral(ln_a);\n}\n```\n$\\ \\ \\ \\ \\ \\ \\,$还有一个值得注意的问题，一般求对数的多项式，是需要要求常数项为 $1$ 的，因为我们知道：\n\n$e^0=1$\n\n$\\ \\ \\ \\ \\ \\ \\,$也就是：\n\n$ln(1)=0$\n\n$\\ \\ \\ \\ \\ \\ \\,$这样算出来的 $ln$ 常数项是 $0$，而我们追后一步在算积的时候，是默认把常数项补上 $0$ 的，这样就没有问题。可要是原多项式常数项不为 $1$ 呢？\n\n$\\ \\ \\ \\ \\ \\ \\,$显然应该算积的时候在常数项补上 $ln(C)$ （C为常数项），不过这个数在模的意义下应该是多少呢？这个问题周道确实不能解决了，所以说，模板题的话，会给出这个常数项为 $1$的条件的。\n\n$\\ \\ \\ \\ \\ \\ \\,$否认常数项不等于$1$，完全不能求 $ln$ 的说法。\n\n\n### 多项式的$exp$\n[P4726 【模板】多项式指数函数](https://www.luogu.org/problemnew/show/P4726)\n\n$\\ \\ \\ \\ \\ \\ \\,$这玩意说简单也简单，说复杂也挺复杂的，我们得引入一个新玩意，**【牛顿迭代】**，是求函数零点的玩意，收敛速度非常理想，我在这里有简略的讲过：[【导数和牛顿迭代】](/2018/12/30/导数和牛顿迭代/)，我也在洛谷出过一个牛顿迭代的裸题，感兴趣可以去体验一下牛顿迭代的神奇：[【P4986 逃离】](https://www.luogu.org/problemnew/show/P4986)。\n\n$\\ \\ \\ \\ \\ \\ \\,$说远了，现在我们来康康怎么求指数函数。\n\n$\\ \\ \\ \\ \\ \\ \\,$令我们要求的是 $A$ 的指数函数 $B$，既是：\n\n$B=e^A$\n\n$\\ \\ \\ \\ \\ \\ \\,$变形得：\n\n$\\ln(B)-A=0$\n\n$\\ \\ \\ \\ \\ \\ \\,$咦？$0$ ?，我们把多项式当做函数值看看？\n\n$\\ \\ \\ \\ \\ \\ \\,$哇，函数零点！马上牛顿迭代呀！\n\n$\\ \\ \\ \\ \\ \\ \\,$设$F(B)=\\ln (B)-A$，我们要求 $F$的零点，根据牛顿迭代的公式可得（注意这里B后面的括号的迭代版本的意思，不是多项式的项）：\n\n$B(x)=B(x-1)-\\frac{F\\left(B(x-1)\\right)}{F'\\left(B(x-1)\\right)}$\n\n$\\ \\ \\ \\ \\ \\ \\,$而根据导数的定义，$F'(B)=\\frac{1}{B}$，~~（[【导数和牛顿迭代】](/2018/12/30/导数和牛顿迭代/)里面有提到过一点，这里是把$A$当做常数舍去了）~~\n\n$\\ \\ \\ \\ \\ \\ \\,$那我们现在把牛顿迭代的公式化简：\n\n$\\begin{aligned}\nB(x)&\n=B(x-1)-F\\left(B(x-1)\\right)\\times B(x-1)\\\\&\n=B(x-1)-B(x-1)\\times F\\left(B(x-1)\\right)\\\\&\n=B(x-1)-B(x-1)\\times \\left(\\ln \\left(B(x-1)\\right)-A\\right)\\\\&\n=B(x-1)\\times  \\left(1-\\ln \\left(B(x-1)\\right)+A \\right)\n\\end{aligned}$\n\n$\\ \\ \\ \\ \\ \\ \\,$再次强调B后面的括号的迭代版本的意思，不是多项式的项。\n\n$\\ \\ \\ \\ \\ \\ \\,$现在看似分治可做，我们用两个容器相互装版本。每次老版本一卷，新版本长度就会倍增，所以说我们做 $\\log n$ 次迭代就好。我们的操作相当于把式子拆了求收敛值，所以不会有精度的问题，求出来就好了。\n\n$\\ \\ \\ \\ \\ \\ \\,$那么现在的问题是，第一个版本是怎么样，洛咕模板给的是保证 $A_0=0$，因为$e^0=1$，也就是$exp(0)=1$，所以说 $B_0=1$，也就是常数项为 $1$。\n\n$\\ \\ \\ \\ \\ \\ \\,$当然了，同理，他一般会保证$A_0=0$，我们不方便找到其他$exp(A_0)$模的意义下的值。如果可以算的话，可以在模板里面传入 $Constant$ 也就是 $exp(A_0)$ 的值。\n\n$\\ \\ \\ \\ \\ \\ \\,$否认$A_0$不等于$0$，完全不能求 $exp$ 的说法。\n\n``` cpp\ninline Polynomial Exponential(const Polynomial &a,int Constant=1){\n\tPolynomial ret,D;int ed=a.size();\n\tret.resize(1);ret[0]=Constant;\n\tfor(int len=2;len<=ed;len<<=1){\n\t  \tD=Logarithmic(ret);D.resize(len);\n\t  \tD[0]=(1ll*a[0]+1ll-D[0]+mod)%mod;\n\t  \tfor(int i=1;i<len;++i) D[i]=(1ll*a[i]-D[i]+mod)%mod;\n\t\tint n=Prepare_Transformation(len<<1);\n\t  \tret.resize(n);D.resize(n);\n\t  \tNTT(ret,1);NTT(D,1);\n\t  \tfor(int i=0;i<n;i++)ret[i]=1ll*ret[i]*D[i]%mod;\n\t  \tNTT(ret,-1);\n\t  \tfor(int i=len;i<(len<<1);++i)ret[i]=D[i]=0;\n\t}\n\tret.resize(ed);\n\treturn ret;\n}\n```\n\n## 多项式快速幂，开方\n\n$\\ \\ \\ \\ \\ \\ \\,$这是多项式的大头了，实际使用多项式的$ln$和$exp$，这里呢，也只讲$ln$和$exp$的做法。\n\n---\n\n### 多项式快速幂\n$\\ \\ \\ \\ \\ \\ \\,$[P5245 【模板】多项式快速幂](https://www.luogu.org/problemnew/show/P5245)\n$\\ \\ \\ \\ \\ \\ \\,$[P5273 【模板】多项式幂函数 (加强版)](https://www.luogu.org/problemnew/show/P5273)\n\n$\\ \\ \\ \\ \\ \\ \\,$已知：\n\n$A^k=exp\\left(ln(A)\\times k\\right)$\n\n$\\ \\ \\ \\ \\ \\ \\,$显然求$ln$和$exp$就可以出答案了。\n\n$\\ \\ \\ \\ \\ \\ \\,$既然要求$ln$和$exp$，那么一定要考虑的是常数项的问题，洛谷的常规题面有保证 $a_0=1$，所以说无脑套模板就对了。\n\n$\\ \\ \\ \\ \\ \\ \\,$那么加强版没有保证 $a_0=1$，我们如何算常数项呢？\n\n$\\ \\ \\ \\ \\ \\ \\,$容易知道，$ln$的常数项为 $ln(a_0)$ ，$exp$的常数项是$exp(ln(a_0)\\times k)$。好像算不出来呢。\n\n$\\ \\ \\ \\ \\ \\ \\,$可是$A^k=exp\\left(ln(A)\\times k\\right)$，所以说$exp$的常数项是就应该是$A^k$的常数项，既 $a_0^k$ 。\n\n$\\ \\ \\ \\ \\ \\ \\,$所以说我们直接知道$exp$的常数项了，就不管他$ln$的常数项啦。\n\n$\\ \\ \\ \\ \\ \\ \\,$注意当$a[0]=0$时，常数项也应该是$B_0=0$，可是……常数项真的可以为$0$吗？\n\n$\\ \\ \\ \\ \\ \\ \\,$我们是要求 $F'(B)=\\frac{1}{B}$ 的，分母当然不能为 $0$ 了，所以说我们还是要单独处理 $a[0]=0$ 的情况的。\n\n$\\ \\ \\ \\ \\ \\ \\,$把为$0$的前缀提出来，然后算，最后在答案前面加上提出的长度乘上$k$个$0$即可，模板没有管这个，需要自己注意。\n\n``` cpp\ninline Polynomial Power(const Polynomial &a,const int &K){\n\tint size=a.size();\n  \tPolynomial p_a=Logarithmic(a);\n  \tp_a.resize(size);\n  \tfor(register int i=1;i<size;++i)p_a[i]=1ll*p_a[i]*K%mod;\n  \treturn Exponential(p_a,power(a[0],K%(mod-1)));\n  \t//这里求a[0]^k，用了欧拉定理优化\n}\n```\n\n\n### 多项式开方\n$\\ \\ \\ \\ \\ \\ \\,$[P5205 【模板】多项式开根](https://www.luogu.org/problemnew/show/P5205)\n$\\ \\ \\ \\ \\ \\ \\,$[P5277 【模板】多项式开根 (加强版)](https://www.luogu.org/problemnew/show/P5277)\n\n$\\ \\ \\ \\ \\ \\ \\,$已知：\n\n$\\sqrt{A}=exp\\left(\\frac{ln(A)}{2}\\right)$\n\n$\\ \\ \\ \\ \\ \\ \\,$同理，求$ln$后，常数项带入$\\sqrt{A_0}$ 求 $exp$ 就可以出答案了，不是加强版的照样直接贴模板也可以。\n\n$\\ \\ \\ \\ \\ \\ \\,$那么求常数项就比较讲究了，我们要求的是$\\sqrt{A_0}\\% mod$，也就是 $A_0$ 在 $\\% mod$ 意义下的二次剩余。\n\n$\\ \\ \\ \\ \\ \\ \\,$如果会二次剩余，可以$O(\\log mod)$求，不行还可以$BSGS$花时间 $O(\\sqrt{mod})$ 求，时间差别不大，就先不放代码了，代码放在下一个环节，同理常数项为 $0$ 的时候要特殊判断。\n\n\n### 多项式开高次方\n$\\ \\ \\ \\ \\ \\ \\,$[U67388 【模板】多项式开高次根](https://www.luogu.org/problemnew/show/U67388)\n\n$\\ \\ \\ \\ \\ \\ \\,$已知：\n\n$\\sqrt[k]{A}=exp\\left(\\frac{ln(A)}{k}\\right)$\n\n$\\ \\ \\ \\ \\ \\ \\,$同理，求$ln$后，常数项带入$\\sqrt[k]{A_0}$ 求 $exp$ 就可以出答案了，现在主要是说一下如何用$BSGS$ 求 $\\sqrt[k]{A_0}\\% mod$，高次剩余。\n\n$\\ \\ \\ \\ \\ \\ \\,$因为需要保证有逆元或者可以直接除，所以需要保证 $k|(mod-1)$，或者 $k$ 与 $mod-1$ 互质。\n\n``` cpp\ninline int BSGS(int a,int b){\n  \tunordered_map<int,int>hash;hash.clear();b%=mod;\n  \tint t=(int)sqrt(mod)+1;\n  \tfor(register int j=0;j<t;j++)hash[(int)(1ll*b*power(a,j)%mod)]=j;\n  \ta=power(a,t);\n  \tif(a==0)return b?-1:1;\n  \tfor(register int i=0,val;i<=t;++i){\n    \tint j=hash.find(val=power(a,i))==hash.end()?-1:hash[val];\n    \tif(j>=0)return i*t-j;\n  \t}\n  \treturn -1;\n}\ninline int Kth_Remaining(int a,int K){\n\tint P=BSGS(mod_g,a);\n\tif(P%K==0)P/=K;\n\telse{int x,y;exgcd(K,mod-1,x,y);if(x<0)x+=(mod-1);P=1ll*P*x%(mod-1);}\n\tint ret=power(mod_g,P);\n\tif(!(K&1))ret=min(ret,mod-ret);\n\treturn ret;\n}\ninline Polynomial Kth_root(const Polynomial &a,const int &K){\n\tint size=a.size();\n  \tPolynomial s_a=Logarithmic(a);\n  \ts_a.resize(size);\n  \tint Kr=Inv(K);\n  \tfor(register int i=1;i<size;++i)s_a[i]=1ll*s_a[i]*Kr%mod;\n  \treturn Exponential(s_a,Kth_Remaining(a[0],K));\n}\n```\n\n $\\ \\ \\ \\ \\ \\ \\,$**模板题是周道用[P5273 【模板】多项式幂函数 (加强版)](https://www.luogu.org/problemnew/show/P5273)的板子出的数据，跑了一下应该没有问题，自己写也过了，感兴趣可以写一下。因为目前还不能保证完全的正确性，所以说没有计划申请加入题库。但是目前过开方，写过几道题，这代码还是没有问题的。欢迎$Hack$。**\n\n## 多项式三角函数，反三角函数\n\n $\\ \\ \\ \\ \\ \\ \\,$说好了，这个作用不大，主要是……过一下板子，赶时间的小朋友可以右上角叉叉了……\n\n\n### 多项式$Sin$ & 多项式$Cos$\n$\\ \\ \\ \\ \\ \\ \\,$[P5264 【模板】多项式三角函数](https://www.luogu.org/problemnew/show/P5264)\n\n$\\ \\ \\ \\ \\ \\ \\,$欧拉公式：\n\n$e^{ix}=\\cos x+i\\sin x$\n\n$\\ \\ \\ \\ \\ \\ \\,$直接推公式：\n\n$e^{-ix}=\\cos x-i\\sin x$\n\n$\\ \\ \\ \\ \\ \\ \\,$加减一下得到:\n\n$2\\cos x=e^{ix}+e^{-ix}$\n\n$2i\\sin x=e^{ix}-e^{-ix}$\n\n$\\ \\ \\ \\ \\ \\ \\,$所以有：\n\n$\\cos x=\\frac{e^{ix}+e^{-ix}}{i}$\n\n$\\sin x=\\frac{e^{ix}-e^{-ix}}{2i}$\n\n$\\ \\ \\ \\ \\ \\ \\,$用多项式$A$替换掉 $x$ 即可：\n\n$\\cos (A)=\\frac{exp(i\\cdot A)+exp(-i\\cdot A)}{i}$\n\n$\\sin (A)=\\frac{exp(i\\cdot A)-exp(-i\\cdot A)}{2i}$\n\n$\\ \\ \\ \\ \\ \\ \\,$多项式卷单项式，$exp$，求逆，多项式卷多项式就好了，现在问题是 $i$ 怎么搞：\n\n$\\ \\ \\ \\ \\ \\ \\,$已知 $i^2=-1$，所以说 $i$ 既是 $mod-1$ 在 $\\%mod$意义下的二次剩余，显然可以预处理出来，前置和目录里面已经说的有了，既为$img$。\n\n```cpp\ninline Polynomial Sin(const Polynomial &a){\n\treturn (Exponential(a*img)-Exponential(a*(mod-img)))*Inv(2ll*img%mod);\n}\ninline Polynomial Cos(const Polynomial &a){\n\treturn (Exponential(a*img)+Exponential(a*(mod-img)))*Inv(2);\n}\n```\n\n\n### 多项式$Asin$ & 多项式$Atan$\n$\\ \\ \\ \\ \\ \\ \\,$[P5265 【模板】多项式反三角函数](https://www.luogu.org/problemnew/show/P5265)\n\n$\\ \\ \\ \\ \\ \\ \\,$这个东西比较麻烦啦，直接给公式咯，具体证明可以看教材：\n\n$Asin(A)=\\int \\frac{A'}{\\sqrt{1-A^2}}dx$\n\n$Atan(A)=\\int \\frac{A'}{1+A^2}dx$\n\n```cpp\ninline Polynomial Asin(const Polynomial &a){\n\tPolynomial As_a=a*a;\n  \tAs_a.resize(a.size());\n  \tfor(int i=0;i<a.size();i++)As_a[i]=(mod-As_a[i]);\n\tAs_a[0]=(1+As_a[0])%mod;\n  \treturn Integral(Derivation(a)*Inverse(Kth_root(As_a,2)));\n}\ninline Polynomial Atan(const Polynomial &a){\n\tPolynomial At_a=a*a;\n  \tAt_a.resize(a.size());At_a[0]=(1+At_a[0])%mod;\n  \treturn Integral(Derivation(a)*Inverse(At_a));\n}\n```\n\n\n\n","source":"_posts/多项式全家桶.md","raw":"---\ntitle: '多项式全家桶'\ndate: 2019-04-03 15:37:09\ncategories:\n- 学习笔记\ntags:\n- OI\n- NTT\n- 多项式\n- 多项式卷积\n- 多项式求逆\n- 多项式求导\n- 多项式求积\n- 多项式复合逆\n- 多项式ln\n- 多项式exp\nmathjax: true\n---\n\n$\\ \\ \\ \\ \\ \\ \\,$终于把多项式差不多弄完了，可以找个机会在退役前把多项式整理封装弄好，也算是留下了一点东西吧（嘿嘿。\n\n$\\ \\ \\ \\ \\ \\ \\,$这一部分实例的代码是用 $std::vector$ 封装好的：\n\n**2022-02-14 跟新：把这最长的一篇搬来新博客上面，然后做了一下整合**\n\n<!-- more -->\n\n## 基础\n\n### 定义\n\n$\\ \\ \\ \\ \\ \\ \\,$多项式（Polynomial）是代数学中的基础概念，是由称为未知数的变量和称为系数的常数通过有限次加减法、乘法以及自然数幂次的乘方运算得到的代数表达式。多项式是整式的一种。未知数只有一个的多项式称为一元多项式。\n  \n$\\ \\ \\ \\ \\ \\ \\,$一个$n$元多项式，也就是长度为$n$的多项式$f$，我们可以这样表达：\n  \n$f=\\sum_{i=0}^{n}f_i\\cdot x^i$\n  \n$\\ \\ \\ \\ \\ \\ \\,$我们一般简写为:\n  \n$f=\\sum_{i=0}^{n}f_i$\n\n$\\ \\ \\ \\ \\ \\ \\,$首先是可能需要用到的模板定义，都是比较基础的数论知识，不赘述了：\n``` cpp\n#define Polynomial vector<int>\n//封装多项式为 std::vector，方便resize等操作\nvoid print(Polynomial &a,int len){for(int i=0;i<len;i++)printf(\"%d \",a[i]);}\nconst int mod=998244353,mod_g=3,img=86583718;\n//mod为多项式系数的取模值，mod_g是它的原根，img为在模意义下的虚部，只有多项式三角函数会遇到。\nint gcd(int a,int b){return b?gcd(b,a%b):a;}\nvoid exgcd(int a,int b,int &x,int &y){\n\tif(!b){x=1;y=0;return;}\n\texgcd(b,a%b,y,x);y-=x*(a/b);\n}\n//gcd，exgcd只有在开根的时候会用到\nint power(int a,int b)\n{int ans=1;for(;b;b>>=1,a=1ll*a*a%mod)if(b&1)ans=1ll*ans*a%mod;return ans;}\n#define Inv(x) power(x,mod-2)\n```\n\n### NTT\n$\\ \\ \\ \\ \\ \\ \\,$然后是核心的快速数论变换 $NTT$，相关请看[【求多项式卷积的变换】](/2018/12/29/求多项式卷积的变换/)：\n``` cpp\nPolynomial R;\ninline int Binary_Rounding(const int &n)\n{int len=1;for(;len<n;len<<=1);return len;}\n//二进制向上取整，为方便NTT变换准备。\ninline int Prepare_Transformation(int n){\n  \tint L=0,len;for(len=1;len<n;len<<=1)L++;R.clear();R.resize(len);\n  \tfor(int i=0;i<len;i++)R[i]=(R[i>>1]>>1)|((i&1)<<(L-1));\n  \treturn len;\n}\n//预处理R数组，准备变换，在每次NTT之前理论都要调用此函数。\nvoid NTT(Polynomial &a,int f){\n\tint n=a.size();\n\tfor(int i=0;i<n;i++)if(i<R[i])swap(a[i],a[R[i]]);\n  \tfor(int i=1;i<n;i<<=1)\n  \tfor(int j=0,gn=power(mod_g,(mod-1)/(i<<1));j<n;j+=(i<<1))\n  \tfor(int k=0,g=1,x,y;k<i;k++,g=1ll*g*gn%mod)\n\t  \tx=a[j+k],y=1ll*g*a[i+j+k]%mod,\n\t  \ta[j+k]=(x+y)%mod,a[i+j+k]=(x-y+mod)%mod;\n  \tif(f==-1){\n   \t\treverse(a.begin()+1,a.end());\n    \tint inv=Inv(n);\n    \tfor(int i=0;i<n;i++)a[i]=1ll*a[i]*inv%mod;\n  \t}\n}\n```\n\n## 多项式的加，减，卷积\n\n  \n$\\ \\ \\ \\ \\ \\ \\,$对于一个长度为$n$的多项式$f$和长度为$m$的多项式$g$:\n  \n$\\begin{aligned}f+g&=\\sum_{i=0}^{n}f_i+\\sum_{i=0}^{m}g_i\\\\ &=\\sum_{i=0}^{max(n,m)}f_i+g_i\\end{aligned}$\n  \n$\\begin{aligned}f-g&=\\sum_{i=0}^{n}f_i-\\sum_{i=0}^{m}g_i\\\\ &=\\sum_{i=0}^{max(n,m)}f_i-g_i\\end{aligned}$\n\n$\\ \\ \\ \\ \\ \\ \\,$多项式的卷积，我们还是对于上文中的两个函数$f$和$g$，这个地方不展开写挺不方便的，我们就展开吧：\n  \n$\\begin{aligned}f\\bigotimes g&=\\sum_{i=0}^{n}f_i\\cdot  x^i\\times \\sum_{i=0}^{m}g_i\\cdot x^i \\\\ &=\\sum_{v=0}^{n+m}f_b\\cdot  x^b\\times g_a\\cdot  x^a[a+b=v]\\\\&=\\sum_{x=0}^{n+m}\\sum_{i=0}^{v}f_i\\cdot g_{v-i}\\cdot x^v\\end{aligned}$\n  \n$\\ \\ \\ \\ \\ \\ \\,$计算的复杂度呢，是$O(n^2)$的，可以用一些神奇算法优化成$O(n\\log n)$的具体看这里：[【求多项式卷积的变换】](/2018/12/29/求多项式卷积的变换/)\n  \n\n$\\ \\ \\ \\ \\ \\ \\,$多项式的加，减，卷积，是比较基本的多项式操作，以模拟和 $NTT$ 为主，主要是展示和记录模板的操作。\n\n$\\ \\ \\ \\ \\ \\ \\,$ ~~单项式其实就是常数。~~\n\n\n### 多项式加，减单项式\n\n``` cpp\ninline Polynomial operator +(const Polynomial &a,const int &b){\n\tint sizea=a.size();Polynomial ret=a;ret.resize(sizea);\n\tfor(int i=0;i<sizea;i++)ret[i]=(1ll*a[i]+b+mod)%mod;\n\treturn ret;\n}\ninline Polynomial operator -(const Polynomial &a,const int &b){\n\tint sizea=a.size();Polynomial ret=a;ret.resize(sizea);\n\tfor(int i=0;i<sizea;i++)ret[i]=(1ll*a[i]-b+mod)%mod;\n\treturn ret;\n}\n```\n\n\n### 多项式卷积单项式\n\n``` cpp\ninline Polynomial operator *(const Polynomial &a,const int &b){\n\tint sizea=a.size();Polynomial ret=a;ret.resize(sizea);\n\tfor(int i=0;i<sizea;i++)ret[i]=(1ll*a[i]*b%mod+mod)%mod;\n\treturn ret;\n}\n```\n\n\n### 多项式加，减多项式\n\n$\\ \\ \\ \\ \\ \\ \\,$注意 $vector$ 在赋值之前，一定先要 $resize$ 到合适的位置，不然就会一直 $RE$ 了。\n\n``` cpp\ninline Polynomial operator +(const Polynomial &a,const Polynomial &b){\n\tint sizea=a.size(),sizeb=b.size(),size=max(sizea,sizeb);\n\tPolynomial ret=a;ret.resize(size);\n\tfor(int i=0;i<sizeb;i++)ret[i]=(1ll*ret[i]+b[i])%mod;\n\treturn ret;\n}\ninline Polynomial operator -(const Polynomial &a,const Polynomial &b){\n\tint sizea=a.size(),sizeb=b.size(),size=max(sizea,sizeb);\n\tPolynomial ret=a;ret.resize(size);\n\tfor(int i=0;i<sizeb;i++)ret[i]=(1ll*ret[i]-b[i]+mod)%mod;\n\treturn ret;\n}\n```\n\n\n### 多项式卷积多项式\n $\\ \\ \\ \\ \\ \\ \\,$[P3803 【模板】多项式乘法（FFT）](https://www.luogu.org/problemnew/show/P3803)（可以NTT过\n\n``` cpp\ninline Polynomial operator *(const Polynomial &a,const Polynomial &b){\n\tPolynomial lsa=a,lsb=b,ret;\n\tint n=lsa.size(),m=lsb.size();\n\tn=Prepare_Transformation(n+m);\n  \tlsa.resize(n);lsb.resize(n);ret.resize(n);\n  \tNTT(lsa,1);NTT(lsb,1);\n  \tfor(int i=0;i<n;i++)ret[i]=1ll*lsa[i]*lsb[i]%mod;\n  \tNTT(ret,-1);return ret;\n}\n```\n\n\n### 多项式除法和取模\n\n $\\ \\ \\ \\ \\ \\ \\,$你问我多项式除法（[P4512 【模板】多项式除法](https://www.luogu.org/problemnew/show/P4512)）？？？多项式除法滚出多项式全家桶！！！（超凶\n \n $\\ \\ \\ \\ \\ \\ \\,$看了下一篇 求逆 过后，应该可以自己完成多项式除法了，但是在很多小地方……容易自闭。\n \n $\\ \\ \\ \\ \\ \\ \\,$还是贴一下板子吧，小心别一开始二进制取整了：\n\n``` cpp\ninline Polynomial operator /(const Polynomial &a,const Polynomial &b){\n\tPolynomial ret=a,ls=b;\n  \treverse(ret.begin(),ret.end());\n  \treverse(ls.begin(),ls.end());\n\tls.resize(Binary_Rounding(a.size()+b.size()));\n\tls=Inverse(ls);\n\tls.resize(a.size()+b.size());\n\tret=ret*ls;ret.resize(a.size()-b.size()+1);\n  \treverse(ret.begin(),ret.end());\n\treturn ret;\n}\ninline Polynomial operator %(const Polynomial &a,const Polynomial &b){\n\tPolynomial ret=a/b;\n\tret=ret*b;ret.resize(a.size()+b.size());\n\tret=a-ret;ret.resize(a.size()+b.size());\n\treturn ret;\n}\n```\n\n## 多项式的逆，导，积\n\n$\\ \\ \\ \\ \\ \\ \\,$这一部分麻烦一点了，但是很重要，几乎所有多项式都得用的，不过好在也不是很复杂的。\n\n### 多项式求逆\n$\\ \\ \\ \\ \\ \\ \\,$[P4238 【模板】多项式求逆](https://www.luogu.org/problemnew/show/P4238)\n\n$\\ \\ \\ \\ \\ \\ \\,$求一个多项式 $A$ 的模 $x^n$ 的逆元$B$ 时，假设先求出了模$x^{\\frac{n}{2}}$ 的逆元 $B'$，既：\n\n$A*B' \\equiv 1\\ (mod\\ x^{\\frac{n}{2}})$\n\n$A*B \\equiv 1\\ (mod\\ x^{n})$\n\n$\\ \\ \\ \\ \\ \\ \\,$那么显然存在：\n\n$A*B \\equiv 1\\ (mod\\ x^{\\frac{n}{2}})=A*B'$\n\n$B-B' \\equiv 0\\ (mod\\ x^{\\frac{n}{2}})$\n\n$\\ \\ \\ \\ \\ \\ \\,$两边同时平方：\n\n$B^2-2BB'+B'^2 \\equiv 0\\ (mod\\ x^n)$\n\n$\\ \\ \\ \\ \\ \\ \\,$再把 $A$ 乘回去：\n\n$(A*B)*B-(A*B)*2B'+A*B'^2 \\equiv A*0\\ (mod\\ x^n)$\n\n$B-2B'+A*B'^2 \\equiv 0\\ (mod\\ x^n)$\n\n$B \\equiv 2B'-A*B'^2\\ (mod\\ x^n)$\n\n$\\ \\ \\ \\ \\ \\ \\,$我们就可以倍增来处理它了，起点是$B_0 \\equiv A_0^{-1}(mod\\ x^1)$\n\n``` cpp\ninline Polynomial Inverse(const Polynomial &a){\n\tPolynomial ret,inv_a; \n\tret.resize(1);\n  \tret[0]=Inv(a[0]);int ed=a.size();\n\tfor(int len=2;len<=ed;len<<=1){\n\t \tint n=Prepare_Transformation(len+len);\n\t  \tinv_a=a;inv_a.resize(n);ret.resize(n);\n\t  \tfor(int i=len;i<n;i++)inv_a[i]=0;\n\t  \tNTT(inv_a,1);NTT(ret,1);\n\t  \tfor(int i=0;i<n;i++)ret[i]=1ll*(2ll-1ll*inv_a[i]*ret[i]%mod+mod)%mod*ret[i]%mod;\n\t  \tNTT(ret,-1);\n\t  \t//这里把比较复杂的卷积过程拖下来了。\n\t  \tfor(int i=len;i<n;i++)ret[i]=0;\n\t  \t//这里不resize了，直接把多余的清零。\n\t}\n\tret.resize(ed);\n\t//resize回来，防止以后长度爆炸。\n\treturn ret;\n}\n\n```\n\n\n### 多项式求导\n\n$\\ \\ \\ \\ \\ \\ \\,$按照公式来，公式挺简单的，设多项式 $A$ 的导数为 $A'$。\n\n$\\ \\ \\ \\ \\ \\ \\,$那么有：\n\n$x^{A'}=Ax^{A-1}$\n\n$\\ \\ \\ \\ \\ \\ \\,$既：\n\n$A'_{i}=i\\times A_{i+1}$\n\n``` cpp\ninline Polynomial Derivation(const Polynomial &a){\n\tint size=a.size();Polynomial ret;ret.resize(size);\n  \tfor(int i=1;i<size;i++)ret[i-1]=1ll*i*a[i]%mod;\n  \tret[size-1]=0;\n\treturn ret;\n}\n```\n\n\n### 多项式求积\n\n$\\ \\ \\ \\ \\ \\ \\,$还是按照公式来，设多项式 $A$ 的积分为 $A'$。\n\n$\\ \\ \\ \\ \\ \\ \\,$那么有：\n\n$\\int x^{A'}dx=\\frac{1}{A+1}x^{A-1}$\n\n$\\ \\ \\ \\ \\ \\ \\,$既：\n\n$A'_{i}=\\frac{A_{i-1}}{i}$\n\n$\\ \\ \\ \\ \\ \\ \\,$那就是乘逆元咯 ~~（兄弟俩长得挺像~~\n\n``` cpp\ninline Polynomial Integral(const Polynomial &a){\n\tint size=a.size();Polynomial ret;ret.resize(size);\n  \tfor(int i=1;i<size;i++)ret[i]=1ll*Inv(i)*a[i-1]%mod;\n  \tret[0]=0;\n\treturn ret;\n}\n```\n\n### 多项式复合逆\n\n$\\ \\ \\ \\ \\ \\ \\,$[NFLSOJ #332. 多项式复合逆](https://acm.nflsoj.com/problem/332)\n\n$\\ \\ \\ \\ \\ \\ \\,$对于一个多项式$F$，若是存在一个多项式$G$，使得：\n\n$G(F(x))=x$\n\n$\\ \\ \\ \\ \\ \\ \\,$那么就称多项式$G$是多项式$F$的复合逆。\n\n$\\ \\ \\ \\ \\ \\ \\,$目前复合逆没有$O(n \\log n)$的做法，但是可以用拉格朗日反演做到$O(n^2 \\log n)$，既每一项每一项得求，求一项的时间是$O(n \\log n)$的，下面给出公式：\n\n$G_i=\\frac{\\left(\\frac{x}{F}\\right)^i_{i-1}}{i}$\n\n$\\ \\ \\ \\ \\ \\ \\,$那么求逆和卷积就好了，$x$都挺好处理的，证明很复杂，感兴趣可以看[这里](https://users.math.msu.edu/users/magyar/Math880/Lagrange.pdf)。\n\n$\\ \\ \\ \\ \\ \\ \\,$有一个值得注意的地方就是求逆的时候，应该直接求$\\frac{F}{x}$的逆，而不是$F$的逆，因为既然多项式 $F$ 存在复合逆，那么常数项就应该是 $0$ ，这是不可能求逆的，先算出$\\frac{F}{x}$即可。\n\n$\\ \\ \\ \\ \\ \\ \\,$若是需要$O(n \\log n)$只求一项，则需要用到快速幂，下一篇我们会讲到\n\n``` cpp\ninline Polynomial Composition_Inverse(const Polynomial &a){\n\tint n=a.size();\n  \tPolynomial ret,Cinv=a,Pow;\n  \tCinv.resize(n);ret.resize(n);Pow.resize(n);Pow[0]=1;\n  \tfor(register int i=0;i<n-1;i++)Cinv[i]=Cinv[i+1];Cinv[n-1]=0;\n  \tCinv=Inverse(Cinv);\n  \tfor(register int i=1;i<n;++i){\n  \t\tPow=Pow*Cinv;Pow.resize(n);\n  \t\tret[i]=1ll*Pow[i-1]*Inv(i)%mod;\n\t}\n  \treturn ret;\n}\n```\n\n## 多项式的ln，exp\n\n$\\ \\ \\ \\ \\ \\ \\,$对数和指数是很重要的东西了，复杂的多项式都和他们有关系，所以说掌握很重要，这里不建议光背板子，因为这两个板子都有致命的限制，而在实际操作的时候，可以通过一些方法绕过这个限制直接求解，这个就很重要了。\n\n\n### 多项式的$ln$\n$\\ \\ \\ \\ \\ \\ \\,$[P4725 【模板】多项式对数函数](https://www.luogu.org/problemnew/show/P4725)\n\n$\\ \\ \\ \\ \\ \\ \\,$公式先走起咯：\n\n$\\ln(A)=\\int \\frac{A'}{A}dx$\n\n$\\ \\ \\ \\ \\ \\ \\,$观察公式，一句话解决：\n\n$\\ \\ \\ \\ \\ \\ \\,$导卷逆的积：\n\n$\\ \\ \\ \\ \\ \\ \\,$看上去很模板，当然模板也是很短的：\n\n``` cpp\ninline Polynomial Logarithmic(const Polynomial &a){\n\tPolynomial ln_a=Derivation(a)*Inverse(a);\n  \tln_a.resize(a.size());\n  \t//这里resize一下，因为卷积后会倍增，防止变长爆掉\n  \treturn Integral(ln_a);\n}\n```\n$\\ \\ \\ \\ \\ \\ \\,$还有一个值得注意的问题，一般求对数的多项式，是需要要求常数项为 $1$ 的，因为我们知道：\n\n$e^0=1$\n\n$\\ \\ \\ \\ \\ \\ \\,$也就是：\n\n$ln(1)=0$\n\n$\\ \\ \\ \\ \\ \\ \\,$这样算出来的 $ln$ 常数项是 $0$，而我们追后一步在算积的时候，是默认把常数项补上 $0$ 的，这样就没有问题。可要是原多项式常数项不为 $1$ 呢？\n\n$\\ \\ \\ \\ \\ \\ \\,$显然应该算积的时候在常数项补上 $ln(C)$ （C为常数项），不过这个数在模的意义下应该是多少呢？这个问题周道确实不能解决了，所以说，模板题的话，会给出这个常数项为 $1$的条件的。\n\n$\\ \\ \\ \\ \\ \\ \\,$否认常数项不等于$1$，完全不能求 $ln$ 的说法。\n\n\n### 多项式的$exp$\n[P4726 【模板】多项式指数函数](https://www.luogu.org/problemnew/show/P4726)\n\n$\\ \\ \\ \\ \\ \\ \\,$这玩意说简单也简单，说复杂也挺复杂的，我们得引入一个新玩意，**【牛顿迭代】**，是求函数零点的玩意，收敛速度非常理想，我在这里有简略的讲过：[【导数和牛顿迭代】](/2018/12/30/导数和牛顿迭代/)，我也在洛谷出过一个牛顿迭代的裸题，感兴趣可以去体验一下牛顿迭代的神奇：[【P4986 逃离】](https://www.luogu.org/problemnew/show/P4986)。\n\n$\\ \\ \\ \\ \\ \\ \\,$说远了，现在我们来康康怎么求指数函数。\n\n$\\ \\ \\ \\ \\ \\ \\,$令我们要求的是 $A$ 的指数函数 $B$，既是：\n\n$B=e^A$\n\n$\\ \\ \\ \\ \\ \\ \\,$变形得：\n\n$\\ln(B)-A=0$\n\n$\\ \\ \\ \\ \\ \\ \\,$咦？$0$ ?，我们把多项式当做函数值看看？\n\n$\\ \\ \\ \\ \\ \\ \\,$哇，函数零点！马上牛顿迭代呀！\n\n$\\ \\ \\ \\ \\ \\ \\,$设$F(B)=\\ln (B)-A$，我们要求 $F$的零点，根据牛顿迭代的公式可得（注意这里B后面的括号的迭代版本的意思，不是多项式的项）：\n\n$B(x)=B(x-1)-\\frac{F\\left(B(x-1)\\right)}{F'\\left(B(x-1)\\right)}$\n\n$\\ \\ \\ \\ \\ \\ \\,$而根据导数的定义，$F'(B)=\\frac{1}{B}$，~~（[【导数和牛顿迭代】](/2018/12/30/导数和牛顿迭代/)里面有提到过一点，这里是把$A$当做常数舍去了）~~\n\n$\\ \\ \\ \\ \\ \\ \\,$那我们现在把牛顿迭代的公式化简：\n\n$\\begin{aligned}\nB(x)&\n=B(x-1)-F\\left(B(x-1)\\right)\\times B(x-1)\\\\&\n=B(x-1)-B(x-1)\\times F\\left(B(x-1)\\right)\\\\&\n=B(x-1)-B(x-1)\\times \\left(\\ln \\left(B(x-1)\\right)-A\\right)\\\\&\n=B(x-1)\\times  \\left(1-\\ln \\left(B(x-1)\\right)+A \\right)\n\\end{aligned}$\n\n$\\ \\ \\ \\ \\ \\ \\,$再次强调B后面的括号的迭代版本的意思，不是多项式的项。\n\n$\\ \\ \\ \\ \\ \\ \\,$现在看似分治可做，我们用两个容器相互装版本。每次老版本一卷，新版本长度就会倍增，所以说我们做 $\\log n$ 次迭代就好。我们的操作相当于把式子拆了求收敛值，所以不会有精度的问题，求出来就好了。\n\n$\\ \\ \\ \\ \\ \\ \\,$那么现在的问题是，第一个版本是怎么样，洛咕模板给的是保证 $A_0=0$，因为$e^0=1$，也就是$exp(0)=1$，所以说 $B_0=1$，也就是常数项为 $1$。\n\n$\\ \\ \\ \\ \\ \\ \\,$当然了，同理，他一般会保证$A_0=0$，我们不方便找到其他$exp(A_0)$模的意义下的值。如果可以算的话，可以在模板里面传入 $Constant$ 也就是 $exp(A_0)$ 的值。\n\n$\\ \\ \\ \\ \\ \\ \\,$否认$A_0$不等于$0$，完全不能求 $exp$ 的说法。\n\n``` cpp\ninline Polynomial Exponential(const Polynomial &a,int Constant=1){\n\tPolynomial ret,D;int ed=a.size();\n\tret.resize(1);ret[0]=Constant;\n\tfor(int len=2;len<=ed;len<<=1){\n\t  \tD=Logarithmic(ret);D.resize(len);\n\t  \tD[0]=(1ll*a[0]+1ll-D[0]+mod)%mod;\n\t  \tfor(int i=1;i<len;++i) D[i]=(1ll*a[i]-D[i]+mod)%mod;\n\t\tint n=Prepare_Transformation(len<<1);\n\t  \tret.resize(n);D.resize(n);\n\t  \tNTT(ret,1);NTT(D,1);\n\t  \tfor(int i=0;i<n;i++)ret[i]=1ll*ret[i]*D[i]%mod;\n\t  \tNTT(ret,-1);\n\t  \tfor(int i=len;i<(len<<1);++i)ret[i]=D[i]=0;\n\t}\n\tret.resize(ed);\n\treturn ret;\n}\n```\n\n## 多项式快速幂，开方\n\n$\\ \\ \\ \\ \\ \\ \\,$这是多项式的大头了，实际使用多项式的$ln$和$exp$，这里呢，也只讲$ln$和$exp$的做法。\n\n---\n\n### 多项式快速幂\n$\\ \\ \\ \\ \\ \\ \\,$[P5245 【模板】多项式快速幂](https://www.luogu.org/problemnew/show/P5245)\n$\\ \\ \\ \\ \\ \\ \\,$[P5273 【模板】多项式幂函数 (加强版)](https://www.luogu.org/problemnew/show/P5273)\n\n$\\ \\ \\ \\ \\ \\ \\,$已知：\n\n$A^k=exp\\left(ln(A)\\times k\\right)$\n\n$\\ \\ \\ \\ \\ \\ \\,$显然求$ln$和$exp$就可以出答案了。\n\n$\\ \\ \\ \\ \\ \\ \\,$既然要求$ln$和$exp$，那么一定要考虑的是常数项的问题，洛谷的常规题面有保证 $a_0=1$，所以说无脑套模板就对了。\n\n$\\ \\ \\ \\ \\ \\ \\,$那么加强版没有保证 $a_0=1$，我们如何算常数项呢？\n\n$\\ \\ \\ \\ \\ \\ \\,$容易知道，$ln$的常数项为 $ln(a_0)$ ，$exp$的常数项是$exp(ln(a_0)\\times k)$。好像算不出来呢。\n\n$\\ \\ \\ \\ \\ \\ \\,$可是$A^k=exp\\left(ln(A)\\times k\\right)$，所以说$exp$的常数项是就应该是$A^k$的常数项，既 $a_0^k$ 。\n\n$\\ \\ \\ \\ \\ \\ \\,$所以说我们直接知道$exp$的常数项了，就不管他$ln$的常数项啦。\n\n$\\ \\ \\ \\ \\ \\ \\,$注意当$a[0]=0$时，常数项也应该是$B_0=0$，可是……常数项真的可以为$0$吗？\n\n$\\ \\ \\ \\ \\ \\ \\,$我们是要求 $F'(B)=\\frac{1}{B}$ 的，分母当然不能为 $0$ 了，所以说我们还是要单独处理 $a[0]=0$ 的情况的。\n\n$\\ \\ \\ \\ \\ \\ \\,$把为$0$的前缀提出来，然后算，最后在答案前面加上提出的长度乘上$k$个$0$即可，模板没有管这个，需要自己注意。\n\n``` cpp\ninline Polynomial Power(const Polynomial &a,const int &K){\n\tint size=a.size();\n  \tPolynomial p_a=Logarithmic(a);\n  \tp_a.resize(size);\n  \tfor(register int i=1;i<size;++i)p_a[i]=1ll*p_a[i]*K%mod;\n  \treturn Exponential(p_a,power(a[0],K%(mod-1)));\n  \t//这里求a[0]^k，用了欧拉定理优化\n}\n```\n\n\n### 多项式开方\n$\\ \\ \\ \\ \\ \\ \\,$[P5205 【模板】多项式开根](https://www.luogu.org/problemnew/show/P5205)\n$\\ \\ \\ \\ \\ \\ \\,$[P5277 【模板】多项式开根 (加强版)](https://www.luogu.org/problemnew/show/P5277)\n\n$\\ \\ \\ \\ \\ \\ \\,$已知：\n\n$\\sqrt{A}=exp\\left(\\frac{ln(A)}{2}\\right)$\n\n$\\ \\ \\ \\ \\ \\ \\,$同理，求$ln$后，常数项带入$\\sqrt{A_0}$ 求 $exp$ 就可以出答案了，不是加强版的照样直接贴模板也可以。\n\n$\\ \\ \\ \\ \\ \\ \\,$那么求常数项就比较讲究了，我们要求的是$\\sqrt{A_0}\\% mod$，也就是 $A_0$ 在 $\\% mod$ 意义下的二次剩余。\n\n$\\ \\ \\ \\ \\ \\ \\,$如果会二次剩余，可以$O(\\log mod)$求，不行还可以$BSGS$花时间 $O(\\sqrt{mod})$ 求，时间差别不大，就先不放代码了，代码放在下一个环节，同理常数项为 $0$ 的时候要特殊判断。\n\n\n### 多项式开高次方\n$\\ \\ \\ \\ \\ \\ \\,$[U67388 【模板】多项式开高次根](https://www.luogu.org/problemnew/show/U67388)\n\n$\\ \\ \\ \\ \\ \\ \\,$已知：\n\n$\\sqrt[k]{A}=exp\\left(\\frac{ln(A)}{k}\\right)$\n\n$\\ \\ \\ \\ \\ \\ \\,$同理，求$ln$后，常数项带入$\\sqrt[k]{A_0}$ 求 $exp$ 就可以出答案了，现在主要是说一下如何用$BSGS$ 求 $\\sqrt[k]{A_0}\\% mod$，高次剩余。\n\n$\\ \\ \\ \\ \\ \\ \\,$因为需要保证有逆元或者可以直接除，所以需要保证 $k|(mod-1)$，或者 $k$ 与 $mod-1$ 互质。\n\n``` cpp\ninline int BSGS(int a,int b){\n  \tunordered_map<int,int>hash;hash.clear();b%=mod;\n  \tint t=(int)sqrt(mod)+1;\n  \tfor(register int j=0;j<t;j++)hash[(int)(1ll*b*power(a,j)%mod)]=j;\n  \ta=power(a,t);\n  \tif(a==0)return b?-1:1;\n  \tfor(register int i=0,val;i<=t;++i){\n    \tint j=hash.find(val=power(a,i))==hash.end()?-1:hash[val];\n    \tif(j>=0)return i*t-j;\n  \t}\n  \treturn -1;\n}\ninline int Kth_Remaining(int a,int K){\n\tint P=BSGS(mod_g,a);\n\tif(P%K==0)P/=K;\n\telse{int x,y;exgcd(K,mod-1,x,y);if(x<0)x+=(mod-1);P=1ll*P*x%(mod-1);}\n\tint ret=power(mod_g,P);\n\tif(!(K&1))ret=min(ret,mod-ret);\n\treturn ret;\n}\ninline Polynomial Kth_root(const Polynomial &a,const int &K){\n\tint size=a.size();\n  \tPolynomial s_a=Logarithmic(a);\n  \ts_a.resize(size);\n  \tint Kr=Inv(K);\n  \tfor(register int i=1;i<size;++i)s_a[i]=1ll*s_a[i]*Kr%mod;\n  \treturn Exponential(s_a,Kth_Remaining(a[0],K));\n}\n```\n\n $\\ \\ \\ \\ \\ \\ \\,$**模板题是周道用[P5273 【模板】多项式幂函数 (加强版)](https://www.luogu.org/problemnew/show/P5273)的板子出的数据，跑了一下应该没有问题，自己写也过了，感兴趣可以写一下。因为目前还不能保证完全的正确性，所以说没有计划申请加入题库。但是目前过开方，写过几道题，这代码还是没有问题的。欢迎$Hack$。**\n\n## 多项式三角函数，反三角函数\n\n $\\ \\ \\ \\ \\ \\ \\,$说好了，这个作用不大，主要是……过一下板子，赶时间的小朋友可以右上角叉叉了……\n\n\n### 多项式$Sin$ & 多项式$Cos$\n$\\ \\ \\ \\ \\ \\ \\,$[P5264 【模板】多项式三角函数](https://www.luogu.org/problemnew/show/P5264)\n\n$\\ \\ \\ \\ \\ \\ \\,$欧拉公式：\n\n$e^{ix}=\\cos x+i\\sin x$\n\n$\\ \\ \\ \\ \\ \\ \\,$直接推公式：\n\n$e^{-ix}=\\cos x-i\\sin x$\n\n$\\ \\ \\ \\ \\ \\ \\,$加减一下得到:\n\n$2\\cos x=e^{ix}+e^{-ix}$\n\n$2i\\sin x=e^{ix}-e^{-ix}$\n\n$\\ \\ \\ \\ \\ \\ \\,$所以有：\n\n$\\cos x=\\frac{e^{ix}+e^{-ix}}{i}$\n\n$\\sin x=\\frac{e^{ix}-e^{-ix}}{2i}$\n\n$\\ \\ \\ \\ \\ \\ \\,$用多项式$A$替换掉 $x$ 即可：\n\n$\\cos (A)=\\frac{exp(i\\cdot A)+exp(-i\\cdot A)}{i}$\n\n$\\sin (A)=\\frac{exp(i\\cdot A)-exp(-i\\cdot A)}{2i}$\n\n$\\ \\ \\ \\ \\ \\ \\,$多项式卷单项式，$exp$，求逆，多项式卷多项式就好了，现在问题是 $i$ 怎么搞：\n\n$\\ \\ \\ \\ \\ \\ \\,$已知 $i^2=-1$，所以说 $i$ 既是 $mod-1$ 在 $\\%mod$意义下的二次剩余，显然可以预处理出来，前置和目录里面已经说的有了，既为$img$。\n\n```cpp\ninline Polynomial Sin(const Polynomial &a){\n\treturn (Exponential(a*img)-Exponential(a*(mod-img)))*Inv(2ll*img%mod);\n}\ninline Polynomial Cos(const Polynomial &a){\n\treturn (Exponential(a*img)+Exponential(a*(mod-img)))*Inv(2);\n}\n```\n\n\n### 多项式$Asin$ & 多项式$Atan$\n$\\ \\ \\ \\ \\ \\ \\,$[P5265 【模板】多项式反三角函数](https://www.luogu.org/problemnew/show/P5265)\n\n$\\ \\ \\ \\ \\ \\ \\,$这个东西比较麻烦啦，直接给公式咯，具体证明可以看教材：\n\n$Asin(A)=\\int \\frac{A'}{\\sqrt{1-A^2}}dx$\n\n$Atan(A)=\\int \\frac{A'}{1+A^2}dx$\n\n```cpp\ninline Polynomial Asin(const Polynomial &a){\n\tPolynomial As_a=a*a;\n  \tAs_a.resize(a.size());\n  \tfor(int i=0;i<a.size();i++)As_a[i]=(mod-As_a[i]);\n\tAs_a[0]=(1+As_a[0])%mod;\n  \treturn Integral(Derivation(a)*Inverse(Kth_root(As_a,2)));\n}\ninline Polynomial Atan(const Polynomial &a){\n\tPolynomial At_a=a*a;\n  \tAt_a.resize(a.size());At_a[0]=(1+At_a[0])%mod;\n  \treturn Integral(Derivation(a)*Inverse(At_a));\n}\n```\n\n\n\n","slug":"多项式全家桶","published":1,"updated":"2022-02-14T05:32:41.478Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0i63w670016u4gb8blqgfri","content":"<p>$\\ \\ \\ \\ \\ \\ \\,$终于把多项式差不多弄完了，可以找个机会在退役前把多项式整理封装弄好，也算是留下了一点东西吧（嘿嘿。</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$这一部分实例的代码是用 $std::vector$ 封装好的：</p>\n<p><strong>2022-02-14 跟新：把这最长的一篇搬来新博客上面，然后做了一下整合</strong></p>\n<span id=\"more\"></span>\n<h2 id=\"基础\"><a href=\"#基础\" class=\"headerlink\" title=\"基础\"></a>基础</h2><h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><p>$\\ \\ \\ \\ \\ \\ \\,$多项式（Polynomial）是代数学中的基础概念，是由称为未知数的变量和称为系数的常数通过有限次加减法、乘法以及自然数幂次的乘方运算得到的代数表达式。多项式是整式的一种。未知数只有一个的多项式称为一元多项式。</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$一个$n$元多项式，也就是长度为$n$的多项式$f$，我们可以这样表达：</p>\n<p>$f=\\sum_{i=0}^{n}f_i\\cdot x^i$</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$我们一般简写为:</p>\n<p>$f=\\sum_{i=0}^{n}f_i$</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$首先是可能需要用到的模板定义，都是比较基础的数论知识，不赘述了：<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> Polynomial vector<span class=\"string\">&lt;int&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\">//封装多项式为 std::vector，方便resize等操作</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">print</span><span class=\"params\">(Polynomial &amp;a,<span class=\"type\">int</span> len)</span></span>&#123;<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;len;i++)<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d &quot;</span>,a[i]);&#125;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> mod=<span class=\"number\">998244353</span>,mod_g=<span class=\"number\">3</span>,img=<span class=\"number\">86583718</span>;</span><br><span class=\"line\"><span class=\"comment\">//mod为多项式系数的取模值，mod_g是它的原根，img为在模意义下的虚部，只有多项式三角函数会遇到。</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">gcd</span><span class=\"params\">(<span class=\"type\">int</span> a,<span class=\"type\">int</span> b)</span></span>&#123;<span class=\"keyword\">return</span> b?<span class=\"built_in\">gcd</span>(b,a%b):a;&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">exgcd</span><span class=\"params\">(<span class=\"type\">int</span> a,<span class=\"type\">int</span> b,<span class=\"type\">int</span> &amp;x,<span class=\"type\">int</span> &amp;y)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(!b)&#123;x=<span class=\"number\">1</span>;y=<span class=\"number\">0</span>;<span class=\"keyword\">return</span>;&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">exgcd</span>(b,a%b,y,x);y-=x*(a/b);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//gcd，exgcd只有在开根的时候会用到</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">power</span><span class=\"params\">(<span class=\"type\">int</span> a,<span class=\"type\">int</span> b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;<span class=\"type\">int</span> ans=<span class=\"number\">1</span>;<span class=\"keyword\">for</span>(;b;b&gt;&gt;=<span class=\"number\">1</span>,a=<span class=\"number\">1ll</span>*a*a%mod)<span class=\"keyword\">if</span>(b&amp;<span class=\"number\">1</span>)ans=<span class=\"number\">1ll</span>*ans*a%mod;<span class=\"keyword\">return</span> ans;&#125;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> Inv(x) power(x,mod-2)</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"NTT\"><a href=\"#NTT\" class=\"headerlink\" title=\"NTT\"></a>NTT</h3><p>$\\ \\ \\ \\ \\ \\ \\,$然后是核心的快速数论变换 $NTT$，相关请看<a href=\"/2018/12/29/求多项式卷积的变换/\">【求多项式卷积的变换】</a>：<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Polynomial R;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">int</span> <span class=\"title\">Binary_Rounding</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">int</span> &amp;n)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;<span class=\"type\">int</span> len=<span class=\"number\">1</span>;<span class=\"keyword\">for</span>(;len&lt;n;len&lt;&lt;=<span class=\"number\">1</span>);<span class=\"keyword\">return</span> len;&#125;</span><br><span class=\"line\"><span class=\"comment\">//二进制向上取整，为方便NTT变换准备。</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">int</span> <span class=\"title\">Prepare_Transformation</span><span class=\"params\">(<span class=\"type\">int</span> n)</span></span>&#123;</span><br><span class=\"line\">  \t<span class=\"type\">int</span> L=<span class=\"number\">0</span>,len;<span class=\"keyword\">for</span>(len=<span class=\"number\">1</span>;len&lt;n;len&lt;&lt;=<span class=\"number\">1</span>)L++;R.<span class=\"built_in\">clear</span>();R.<span class=\"built_in\">resize</span>(len);</span><br><span class=\"line\">  \t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;len;i++)R[i]=(R[i&gt;&gt;<span class=\"number\">1</span>]&gt;&gt;<span class=\"number\">1</span>)|((i&amp;<span class=\"number\">1</span>)&lt;&lt;(L<span class=\"number\">-1</span>));</span><br><span class=\"line\">  \t<span class=\"keyword\">return</span> len;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//预处理R数组，准备变换，在每次NTT之前理论都要调用此函数。</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">NTT</span><span class=\"params\">(Polynomial &amp;a,<span class=\"type\">int</span> f)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> n=a.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)<span class=\"keyword\">if</span>(i&lt;R[i])<span class=\"built_in\">swap</span>(a[i],a[R[i]]);</span><br><span class=\"line\">  \t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;n;i&lt;&lt;=<span class=\"number\">1</span>)</span><br><span class=\"line\">  \t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">0</span>,gn=<span class=\"built_in\">power</span>(mod_g,(mod<span class=\"number\">-1</span>)/(i&lt;&lt;<span class=\"number\">1</span>));j&lt;n;j+=(i&lt;&lt;<span class=\"number\">1</span>))</span><br><span class=\"line\">  \t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> k=<span class=\"number\">0</span>,g=<span class=\"number\">1</span>,x,y;k&lt;i;k++,g=<span class=\"number\">1ll</span>*g*gn%mod)</span><br><span class=\"line\">\t  \tx=a[j+k],y=<span class=\"number\">1ll</span>*g*a[i+j+k]%mod,</span><br><span class=\"line\">\t  \ta[j+k]=(x+y)%mod,a[i+j+k]=(x-y+mod)%mod;</span><br><span class=\"line\">  \t<span class=\"keyword\">if</span>(f==<span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">   \t\t<span class=\"built_in\">reverse</span>(a.<span class=\"built_in\">begin</span>()+<span class=\"number\">1</span>,a.<span class=\"built_in\">end</span>());</span><br><span class=\"line\">    \t<span class=\"type\">int</span> inv=<span class=\"built_in\">Inv</span>(n);</span><br><span class=\"line\">    \t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)a[i]=<span class=\"number\">1ll</span>*a[i]*inv%mod;</span><br><span class=\"line\">  \t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"多项式的加，减，卷积\"><a href=\"#多项式的加，减，卷积\" class=\"headerlink\" title=\"多项式的加，减，卷积\"></a>多项式的加，减，卷积</h2><p>$\\ \\ \\ \\ \\ \\ \\,$对于一个长度为$n$的多项式$f$和长度为$m$的多项式$g$:</p>\n<p>$\\begin{aligned}f+g&amp;=\\sum_{i=0}^{n}f_i+\\sum_{i=0}^{m}g_i\\\\ &amp;=\\sum_{i=0}^{max(n,m)}f_i+g_i\\end{aligned}$</p>\n<p>$\\begin{aligned}f-g&amp;=\\sum_{i=0}^{n}f_i-\\sum_{i=0}^{m}g_i\\\\ &amp;=\\sum_{i=0}^{max(n,m)}f_i-g_i\\end{aligned}$</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$多项式的卷积，我们还是对于上文中的两个函数$f$和$g$，这个地方不展开写挺不方便的，我们就展开吧：</p>\n<p>$\\begin{aligned}f\\bigotimes g&amp;=\\sum_{i=0}^{n}f_i\\cdot  x^i\\times \\sum_{i=0}^{m}g_i\\cdot x^i \\\\ &amp;=\\sum_{v=0}^{n+m}f_b\\cdot  x^b\\times g_a\\cdot  x^a[a+b=v]\\\\&amp;=\\sum_{x=0}^{n+m}\\sum_{i=0}^{v}f_i\\cdot g_{v-i}\\cdot x^v\\end{aligned}$</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$计算的复杂度呢，是$O(n^2)$的，可以用一些神奇算法优化成$O(n\\log n)$的具体看这里：<a href=\"/2018/12/29/求多项式卷积的变换/\">【求多项式卷积的变换】</a></p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$多项式的加，减，卷积，是比较基本的多项式操作，以模拟和 $NTT$ 为主，主要是展示和记录模板的操作。</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$ <del>单项式其实就是常数。</del></p>\n<h3 id=\"多项式加，减单项式\"><a href=\"#多项式加，减单项式\" class=\"headerlink\" title=\"多项式加，减单项式\"></a>多项式加，减单项式</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">inline</span> Polynomial <span class=\"keyword\">operator</span> +(<span class=\"type\">const</span> Polynomial &amp;a,<span class=\"type\">const</span> <span class=\"type\">int</span> &amp;b)&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> sizea=a.<span class=\"built_in\">size</span>();Polynomial ret=a;ret.<span class=\"built_in\">resize</span>(sizea);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;sizea;i++)ret[i]=(<span class=\"number\">1ll</span>*a[i]+b+mod)%mod;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">inline</span> Polynomial <span class=\"keyword\">operator</span> -(<span class=\"type\">const</span> Polynomial &amp;a,<span class=\"type\">const</span> <span class=\"type\">int</span> &amp;b)&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> sizea=a.<span class=\"built_in\">size</span>();Polynomial ret=a;ret.<span class=\"built_in\">resize</span>(sizea);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;sizea;i++)ret[i]=(<span class=\"number\">1ll</span>*a[i]-b+mod)%mod;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"多项式卷积单项式\"><a href=\"#多项式卷积单项式\" class=\"headerlink\" title=\"多项式卷积单项式\"></a>多项式卷积单项式</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">inline</span> Polynomial <span class=\"keyword\">operator</span> *(<span class=\"type\">const</span> Polynomial &amp;a,<span class=\"type\">const</span> <span class=\"type\">int</span> &amp;b)&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> sizea=a.<span class=\"built_in\">size</span>();Polynomial ret=a;ret.<span class=\"built_in\">resize</span>(sizea);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;sizea;i++)ret[i]=(<span class=\"number\">1ll</span>*a[i]*b%mod+mod)%mod;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"多项式加，减多项式\"><a href=\"#多项式加，减多项式\" class=\"headerlink\" title=\"多项式加，减多项式\"></a>多项式加，减多项式</h3><p>$\\ \\ \\ \\ \\ \\ \\,$注意 $vector$ 在赋值之前，一定先要 $resize$ 到合适的位置，不然就会一直 $RE$ 了。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">inline</span> Polynomial <span class=\"keyword\">operator</span> +(<span class=\"type\">const</span> Polynomial &amp;a,<span class=\"type\">const</span> Polynomial &amp;b)&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> sizea=a.<span class=\"built_in\">size</span>(),sizeb=b.<span class=\"built_in\">size</span>(),size=<span class=\"built_in\">max</span>(sizea,sizeb);</span><br><span class=\"line\">\tPolynomial ret=a;ret.<span class=\"built_in\">resize</span>(size);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;sizeb;i++)ret[i]=(<span class=\"number\">1ll</span>*ret[i]+b[i])%mod;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">inline</span> Polynomial <span class=\"keyword\">operator</span> -(<span class=\"type\">const</span> Polynomial &amp;a,<span class=\"type\">const</span> Polynomial &amp;b)&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> sizea=a.<span class=\"built_in\">size</span>(),sizeb=b.<span class=\"built_in\">size</span>(),size=<span class=\"built_in\">max</span>(sizea,sizeb);</span><br><span class=\"line\">\tPolynomial ret=a;ret.<span class=\"built_in\">resize</span>(size);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;sizeb;i++)ret[i]=(<span class=\"number\">1ll</span>*ret[i]-b[i]+mod)%mod;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"多项式卷积多项式\"><a href=\"#多项式卷积多项式\" class=\"headerlink\" title=\"多项式卷积多项式\"></a>多项式卷积多项式</h3><p> $\\ \\ \\ \\ \\ \\ \\,$<a href=\"https://www.luogu.org/problemnew/show/P3803\">P3803 【模板】多项式乘法（FFT）</a>（可以NTT过</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">inline</span> Polynomial <span class=\"keyword\">operator</span> *(<span class=\"type\">const</span> Polynomial &amp;a,<span class=\"type\">const</span> Polynomial &amp;b)&#123;</span><br><span class=\"line\">\tPolynomial lsa=a,lsb=b,ret;</span><br><span class=\"line\">\t<span class=\"type\">int</span> n=lsa.<span class=\"built_in\">size</span>(),m=lsb.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">\tn=<span class=\"built_in\">Prepare_Transformation</span>(n+m);</span><br><span class=\"line\">  \tlsa.<span class=\"built_in\">resize</span>(n);lsb.<span class=\"built_in\">resize</span>(n);ret.<span class=\"built_in\">resize</span>(n);</span><br><span class=\"line\">  \t<span class=\"built_in\">NTT</span>(lsa,<span class=\"number\">1</span>);<span class=\"built_in\">NTT</span>(lsb,<span class=\"number\">1</span>);</span><br><span class=\"line\">  \t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)ret[i]=<span class=\"number\">1ll</span>*lsa[i]*lsb[i]%mod;</span><br><span class=\"line\">  \t<span class=\"built_in\">NTT</span>(ret,<span class=\"number\">-1</span>);<span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"多项式除法和取模\"><a href=\"#多项式除法和取模\" class=\"headerlink\" title=\"多项式除法和取模\"></a>多项式除法和取模</h3><p> $\\ \\ \\ \\ \\ \\ \\,$你问我多项式除法（<a href=\"https://www.luogu.org/problemnew/show/P4512\">P4512 【模板】多项式除法</a>）？？？多项式除法滚出多项式全家桶！！！（超凶</p>\n<p> $\\ \\ \\ \\ \\ \\ \\,$看了下一篇 求逆 过后，应该可以自己完成多项式除法了，但是在很多小地方……容易自闭。</p>\n<p> $\\ \\ \\ \\ \\ \\ \\,$还是贴一下板子吧，小心别一开始二进制取整了：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">inline</span> Polynomial <span class=\"keyword\">operator</span> /(<span class=\"type\">const</span> Polynomial &amp;a,<span class=\"type\">const</span> Polynomial &amp;b)&#123;</span><br><span class=\"line\">\tPolynomial ret=a,ls=b;</span><br><span class=\"line\">  \t<span class=\"built_in\">reverse</span>(ret.<span class=\"built_in\">begin</span>(),ret.<span class=\"built_in\">end</span>());</span><br><span class=\"line\">  \t<span class=\"built_in\">reverse</span>(ls.<span class=\"built_in\">begin</span>(),ls.<span class=\"built_in\">end</span>());</span><br><span class=\"line\">\tls.<span class=\"built_in\">resize</span>(<span class=\"built_in\">Binary_Rounding</span>(a.<span class=\"built_in\">size</span>()+b.<span class=\"built_in\">size</span>()));</span><br><span class=\"line\">\tls=<span class=\"built_in\">Inverse</span>(ls);</span><br><span class=\"line\">\tls.<span class=\"built_in\">resize</span>(a.<span class=\"built_in\">size</span>()+b.<span class=\"built_in\">size</span>());</span><br><span class=\"line\">\tret=ret*ls;ret.<span class=\"built_in\">resize</span>(a.<span class=\"built_in\">size</span>()-b.<span class=\"built_in\">size</span>()+<span class=\"number\">1</span>);</span><br><span class=\"line\">  \t<span class=\"built_in\">reverse</span>(ret.<span class=\"built_in\">begin</span>(),ret.<span class=\"built_in\">end</span>());</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">inline</span> Polynomial <span class=\"keyword\">operator</span> %(<span class=\"type\">const</span> Polynomial &amp;a,<span class=\"type\">const</span> Polynomial &amp;b)&#123;</span><br><span class=\"line\">\tPolynomial ret=a/b;</span><br><span class=\"line\">\tret=ret*b;ret.<span class=\"built_in\">resize</span>(a.<span class=\"built_in\">size</span>()+b.<span class=\"built_in\">size</span>());</span><br><span class=\"line\">\tret=a-ret;ret.<span class=\"built_in\">resize</span>(a.<span class=\"built_in\">size</span>()+b.<span class=\"built_in\">size</span>());</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"多项式的逆，导，积\"><a href=\"#多项式的逆，导，积\" class=\"headerlink\" title=\"多项式的逆，导，积\"></a>多项式的逆，导，积</h2><p>$\\ \\ \\ \\ \\ \\ \\,$这一部分麻烦一点了，但是很重要，几乎所有多项式都得用的，不过好在也不是很复杂的。</p>\n<h3 id=\"多项式求逆\"><a href=\"#多项式求逆\" class=\"headerlink\" title=\"多项式求逆\"></a>多项式求逆</h3><p>$\\ \\ \\ \\ \\ \\ \\,$<a href=\"https://www.luogu.org/problemnew/show/P4238\">P4238 【模板】多项式求逆</a></p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$求一个多项式 $A$ 的模 $x^n$ 的逆元$B$ 时，假设先求出了模$x^{\\frac{n}{2}}$ 的逆元 $B’$，既：</p>\n<p>$A*B’ \\equiv 1\\ (mod\\ x^{\\frac{n}{2}})$</p>\n<p>$A*B \\equiv 1\\ (mod\\ x^{n})$</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$那么显然存在：</p>\n<p>$A<em>B \\equiv 1\\ (mod\\ x^{\\frac{n}{2}})=A</em>B’$</p>\n<p>$B-B’ \\equiv 0\\ (mod\\ x^{\\frac{n}{2}})$</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$两边同时平方：</p>\n<p>$B^2-2BB’+B’^2 \\equiv 0\\ (mod\\ x^n)$</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$再把 $A$ 乘回去：</p>\n<p>$(A<em>B)</em>B-(A<em>B)</em>2B’+A<em>B’^2 \\equiv A</em>0\\ (mod\\ x^n)$</p>\n<p>$B-2B’+A*B’^2 \\equiv 0\\ (mod\\ x^n)$</p>\n<p>$B \\equiv 2B’-A*B’^2\\ (mod\\ x^n)$</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$我们就可以倍增来处理它了，起点是$B_0 \\equiv A_0^{-1}(mod\\ x^1)$</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> Polynomial <span class=\"title\">Inverse</span><span class=\"params\">(<span class=\"type\">const</span> Polynomial &amp;a)</span></span>&#123;</span><br><span class=\"line\">\tPolynomial ret,inv_a; </span><br><span class=\"line\">\tret.<span class=\"built_in\">resize</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">  \tret[<span class=\"number\">0</span>]=<span class=\"built_in\">Inv</span>(a[<span class=\"number\">0</span>]);<span class=\"type\">int</span> ed=a.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> len=<span class=\"number\">2</span>;len&lt;=ed;len&lt;&lt;=<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">\t \t<span class=\"type\">int</span> n=<span class=\"built_in\">Prepare_Transformation</span>(len+len);</span><br><span class=\"line\">\t  \tinv_a=a;inv_a.<span class=\"built_in\">resize</span>(n);ret.<span class=\"built_in\">resize</span>(n);</span><br><span class=\"line\">\t  \t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=len;i&lt;n;i++)inv_a[i]=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t  \t<span class=\"built_in\">NTT</span>(inv_a,<span class=\"number\">1</span>);<span class=\"built_in\">NTT</span>(ret,<span class=\"number\">1</span>);</span><br><span class=\"line\">\t  \t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)ret[i]=<span class=\"number\">1ll</span>*(<span class=\"number\">2ll</span><span class=\"number\">-1ll</span>*inv_a[i]*ret[i]%mod+mod)%mod*ret[i]%mod;</span><br><span class=\"line\">\t  \t<span class=\"built_in\">NTT</span>(ret,<span class=\"number\">-1</span>);</span><br><span class=\"line\">\t  \t<span class=\"comment\">//这里把比较复杂的卷积过程拖下来了。</span></span><br><span class=\"line\">\t  \t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=len;i&lt;n;i++)ret[i]=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t  \t<span class=\"comment\">//这里不resize了，直接把多余的清零。</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tret.<span class=\"built_in\">resize</span>(ed);</span><br><span class=\"line\">\t<span class=\"comment\">//resize回来，防止以后长度爆炸。</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"多项式求导\"><a href=\"#多项式求导\" class=\"headerlink\" title=\"多项式求导\"></a>多项式求导</h3><p>$\\ \\ \\ \\ \\ \\ \\,$按照公式来，公式挺简单的，设多项式 $A$ 的导数为 $A’$。</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$那么有：</p>\n<p>$x^{A’}=Ax^{A-1}$</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$既：</p>\n<p>$A’_{i}=i\\times A_{i+1}$</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> Polynomial <span class=\"title\">Derivation</span><span class=\"params\">(<span class=\"type\">const</span> Polynomial &amp;a)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> size=a.<span class=\"built_in\">size</span>();Polynomial ret;ret.<span class=\"built_in\">resize</span>(size);</span><br><span class=\"line\">  \t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;size;i++)ret[i<span class=\"number\">-1</span>]=<span class=\"number\">1ll</span>*i*a[i]%mod;</span><br><span class=\"line\">  \tret[size<span class=\"number\">-1</span>]=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"多项式求积\"><a href=\"#多项式求积\" class=\"headerlink\" title=\"多项式求积\"></a>多项式求积</h3><p>$\\ \\ \\ \\ \\ \\ \\,$还是按照公式来，设多项式 $A$ 的积分为 $A’$。</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$那么有：</p>\n<p>$\\int x^{A’}dx=\\frac{1}{A+1}x^{A-1}$</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$既：</p>\n<p>$A’_{i}=\\frac{A_{i-1}}{i}$</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$那就是乘逆元咯 <del>（兄弟俩长得挺像</del></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> Polynomial <span class=\"title\">Integral</span><span class=\"params\">(<span class=\"type\">const</span> Polynomial &amp;a)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> size=a.<span class=\"built_in\">size</span>();Polynomial ret;ret.<span class=\"built_in\">resize</span>(size);</span><br><span class=\"line\">  \t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;size;i++)ret[i]=<span class=\"number\">1ll</span>*<span class=\"built_in\">Inv</span>(i)*a[i<span class=\"number\">-1</span>]%mod;</span><br><span class=\"line\">  \tret[<span class=\"number\">0</span>]=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"多项式复合逆\"><a href=\"#多项式复合逆\" class=\"headerlink\" title=\"多项式复合逆\"></a>多项式复合逆</h3><p>$\\ \\ \\ \\ \\ \\ \\,$<a href=\"https://acm.nflsoj.com/problem/332\">NFLSOJ #332. 多项式复合逆</a></p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$对于一个多项式$F$，若是存在一个多项式$G$，使得：</p>\n<p>$G(F(x))=x$</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$那么就称多项式$G$是多项式$F$的复合逆。</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$目前复合逆没有$O(n \\log n)$的做法，但是可以用拉格朗日反演做到$O(n^2 \\log n)$，既每一项每一项得求，求一项的时间是$O(n \\log n)$的，下面给出公式：</p>\n<p>$G_i=\\frac{\\left(\\frac{x}{F}\\right)^i_{i-1}}{i}$</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$那么求逆和卷积就好了，$x$都挺好处理的，证明很复杂，感兴趣可以看<a href=\"https://users.math.msu.edu/users/magyar/Math880/Lagrange.pdf\">这里</a>。</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$有一个值得注意的地方就是求逆的时候，应该直接求$\\frac{F}{x}$的逆，而不是$F$的逆，因为既然多项式 $F$ 存在复合逆，那么常数项就应该是 $0$ ，这是不可能求逆的，先算出$\\frac{F}{x}$即可。</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$若是需要$O(n \\log n)$只求一项，则需要用到快速幂，下一篇我们会讲到</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> Polynomial <span class=\"title\">Composition_Inverse</span><span class=\"params\">(<span class=\"type\">const</span> Polynomial &amp;a)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> n=a.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">  \tPolynomial ret,Cinv=a,Pow;</span><br><span class=\"line\">  \tCinv.<span class=\"built_in\">resize</span>(n);ret.<span class=\"built_in\">resize</span>(n);Pow.<span class=\"built_in\">resize</span>(n);Pow[<span class=\"number\">0</span>]=<span class=\"number\">1</span>;</span><br><span class=\"line\">  \t<span class=\"keyword\">for</span>(<span class=\"keyword\">register</span> <span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;n<span class=\"number\">-1</span>;i++)Cinv[i]=Cinv[i+<span class=\"number\">1</span>];Cinv[n<span class=\"number\">-1</span>]=<span class=\"number\">0</span>;</span><br><span class=\"line\">  \tCinv=<span class=\"built_in\">Inverse</span>(Cinv);</span><br><span class=\"line\">  \t<span class=\"keyword\">for</span>(<span class=\"keyword\">register</span> <span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;n;++i)&#123;</span><br><span class=\"line\">  \t\tPow=Pow*Cinv;Pow.<span class=\"built_in\">resize</span>(n);</span><br><span class=\"line\">  \t\tret[i]=<span class=\"number\">1ll</span>*Pow[i<span class=\"number\">-1</span>]*<span class=\"built_in\">Inv</span>(i)%mod;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">  \t<span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"多项式的ln，exp\"><a href=\"#多项式的ln，exp\" class=\"headerlink\" title=\"多项式的ln，exp\"></a>多项式的ln，exp</h2><p>$\\ \\ \\ \\ \\ \\ \\,$对数和指数是很重要的东西了，复杂的多项式都和他们有关系，所以说掌握很重要，这里不建议光背板子，因为这两个板子都有致命的限制，而在实际操作的时候，可以通过一些方法绕过这个限制直接求解，这个就很重要了。</p>\n<h3 id=\"多项式的-ln\"><a href=\"#多项式的-ln\" class=\"headerlink\" title=\"多项式的$ln$\"></a>多项式的$ln$</h3><p>$\\ \\ \\ \\ \\ \\ \\,$<a href=\"https://www.luogu.org/problemnew/show/P4725\">P4725 【模板】多项式对数函数</a></p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$公式先走起咯：</p>\n<p>$\\ln(A)=\\int \\frac{A’}{A}dx$</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$观察公式，一句话解决：</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$导卷逆的积：</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$看上去很模板，当然模板也是很短的：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> Polynomial <span class=\"title\">Logarithmic</span><span class=\"params\">(<span class=\"type\">const</span> Polynomial &amp;a)</span></span>&#123;</span><br><span class=\"line\">\tPolynomial ln_a=<span class=\"built_in\">Derivation</span>(a)*<span class=\"built_in\">Inverse</span>(a);</span><br><span class=\"line\">  \tln_a.<span class=\"built_in\">resize</span>(a.<span class=\"built_in\">size</span>());</span><br><span class=\"line\">  \t<span class=\"comment\">//这里resize一下，因为卷积后会倍增，防止变长爆掉</span></span><br><span class=\"line\">  \t<span class=\"keyword\">return</span> <span class=\"built_in\">Integral</span>(ln_a);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>$\\ \\ \\ \\ \\ \\ \\,$还有一个值得注意的问题，一般求对数的多项式，是需要要求常数项为 $1$ 的，因为我们知道：</p>\n<p>$e^0=1$</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$也就是：</p>\n<p>$ln(1)=0$</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$这样算出来的 $ln$ 常数项是 $0$，而我们追后一步在算积的时候，是默认把常数项补上 $0$ 的，这样就没有问题。可要是原多项式常数项不为 $1$ 呢？</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$显然应该算积的时候在常数项补上 $ln(C)$ （C为常数项），不过这个数在模的意义下应该是多少呢？这个问题周道确实不能解决了，所以说，模板题的话，会给出这个常数项为 $1$的条件的。</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$否认常数项不等于$1$，完全不能求 $ln$ 的说法。</p>\n<h3 id=\"多项式的-exp\"><a href=\"#多项式的-exp\" class=\"headerlink\" title=\"多项式的$exp$\"></a>多项式的$exp$</h3><p><a href=\"https://www.luogu.org/problemnew/show/P4726\">P4726 【模板】多项式指数函数</a></p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$这玩意说简单也简单，说复杂也挺复杂的，我们得引入一个新玩意，<strong>【牛顿迭代】</strong>，是求函数零点的玩意，收敛速度非常理想，我在这里有简略的讲过：<a href=\"/2018/12/30/导数和牛顿迭代/\">【导数和牛顿迭代】</a>，我也在洛谷出过一个牛顿迭代的裸题，感兴趣可以去体验一下牛顿迭代的神奇：<a href=\"https://www.luogu.org/problemnew/show/P4986\">【P4986 逃离】</a>。</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$说远了，现在我们来康康怎么求指数函数。</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$令我们要求的是 $A$ 的指数函数 $B$，既是：</p>\n<p>$B=e^A$</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$变形得：</p>\n<p>$\\ln(B)-A=0$</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$咦？$0$ ?，我们把多项式当做函数值看看？</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$哇，函数零点！马上牛顿迭代呀！</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$设$F(B)=\\ln (B)-A$，我们要求 $F$的零点，根据牛顿迭代的公式可得（注意这里B后面的括号的迭代版本的意思，不是多项式的项）：</p>\n<p>$B(x)=B(x-1)-\\frac{F\\left(B(x-1)\\right)}{F’\\left(B(x-1)\\right)}$</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$而根据导数的定义，$F’(B)=\\frac{1}{B}$，<del>（<a href=\"/2018/12/30/导数和牛顿迭代/\">【导数和牛顿迭代】</a>里面有提到过一点，这里是把$A$当做常数舍去了）</del></p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$那我们现在把牛顿迭代的公式化简：</p>\n<p>$\\begin{aligned}<br>B(x)&amp;<br>=B(x-1)-F\\left(B(x-1)\\right)\\times B(x-1)\\\\&amp;<br>=B(x-1)-B(x-1)\\times F\\left(B(x-1)\\right)\\\\&amp;<br>=B(x-1)-B(x-1)\\times \\left(\\ln \\left(B(x-1)\\right)-A\\right)\\\\&amp;<br>=B(x-1)\\times  \\left(1-\\ln \\left(B(x-1)\\right)+A \\right)<br>\\end{aligned}$</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$再次强调B后面的括号的迭代版本的意思，不是多项式的项。</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$现在看似分治可做，我们用两个容器相互装版本。每次老版本一卷，新版本长度就会倍增，所以说我们做 $\\log n$ 次迭代就好。我们的操作相当于把式子拆了求收敛值，所以不会有精度的问题，求出来就好了。</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$那么现在的问题是，第一个版本是怎么样，洛咕模板给的是保证 $A_0=0$，因为$e^0=1$，也就是$exp(0)=1$，所以说 $B_0=1$，也就是常数项为 $1$。</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$当然了，同理，他一般会保证$A_0=0$，我们不方便找到其他$exp(A_0)$模的意义下的值。如果可以算的话，可以在模板里面传入 $Constant$ 也就是 $exp(A_0)$ 的值。</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$否认$A_0$不等于$0$，完全不能求 $exp$ 的说法。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> Polynomial <span class=\"title\">Exponential</span><span class=\"params\">(<span class=\"type\">const</span> Polynomial &amp;a,<span class=\"type\">int</span> Constant=<span class=\"number\">1</span>)</span></span>&#123;</span><br><span class=\"line\">\tPolynomial ret,D;<span class=\"type\">int</span> ed=a.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">\tret.<span class=\"built_in\">resize</span>(<span class=\"number\">1</span>);ret[<span class=\"number\">0</span>]=Constant;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> len=<span class=\"number\">2</span>;len&lt;=ed;len&lt;&lt;=<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">\t  \tD=<span class=\"built_in\">Logarithmic</span>(ret);D.<span class=\"built_in\">resize</span>(len);</span><br><span class=\"line\">\t  \tD[<span class=\"number\">0</span>]=(<span class=\"number\">1ll</span>*a[<span class=\"number\">0</span>]+<span class=\"number\">1ll</span>-D[<span class=\"number\">0</span>]+mod)%mod;</span><br><span class=\"line\">\t  \t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;len;++i) D[i]=(<span class=\"number\">1ll</span>*a[i]-D[i]+mod)%mod;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> n=<span class=\"built_in\">Prepare_Transformation</span>(len&lt;&lt;<span class=\"number\">1</span>);</span><br><span class=\"line\">\t  \tret.<span class=\"built_in\">resize</span>(n);D.<span class=\"built_in\">resize</span>(n);</span><br><span class=\"line\">\t  \t<span class=\"built_in\">NTT</span>(ret,<span class=\"number\">1</span>);<span class=\"built_in\">NTT</span>(D,<span class=\"number\">1</span>);</span><br><span class=\"line\">\t  \t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)ret[i]=<span class=\"number\">1ll</span>*ret[i]*D[i]%mod;</span><br><span class=\"line\">\t  \t<span class=\"built_in\">NTT</span>(ret,<span class=\"number\">-1</span>);</span><br><span class=\"line\">\t  \t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=len;i&lt;(len&lt;&lt;<span class=\"number\">1</span>);++i)ret[i]=D[i]=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tret.<span class=\"built_in\">resize</span>(ed);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"多项式快速幂，开方\"><a href=\"#多项式快速幂，开方\" class=\"headerlink\" title=\"多项式快速幂，开方\"></a>多项式快速幂，开方</h2><p>$\\ \\ \\ \\ \\ \\ \\,$这是多项式的大头了，实际使用多项式的$ln$和$exp$，这里呢，也只讲$ln$和$exp$的做法。</p>\n<hr>\n<h3 id=\"多项式快速幂\"><a href=\"#多项式快速幂\" class=\"headerlink\" title=\"多项式快速幂\"></a>多项式快速幂</h3><p>$\\ \\ \\ \\ \\ \\ \\,$<a href=\"https://www.luogu.org/problemnew/show/P5245\">P5245 【模板】多项式快速幂</a><br>$\\ \\ \\ \\ \\ \\ \\,$<a href=\"https://www.luogu.org/problemnew/show/P5273\">P5273 【模板】多项式幂函数 (加强版)</a></p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$已知：</p>\n<p>$A^k=exp\\left(ln(A)\\times k\\right)$</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$显然求$ln$和$exp$就可以出答案了。</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$既然要求$ln$和$exp$，那么一定要考虑的是常数项的问题，洛谷的常规题面有保证 $a_0=1$，所以说无脑套模板就对了。</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$那么加强版没有保证 $a_0=1$，我们如何算常数项呢？</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$容易知道，$ln$的常数项为 $ln(a_0)$ ，$exp$的常数项是$exp(ln(a_0)\\times k)$。好像算不出来呢。</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$可是$A^k=exp\\left(ln(A)\\times k\\right)$，所以说$exp$的常数项是就应该是$A^k$的常数项，既 $a_0^k$ 。</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$所以说我们直接知道$exp$的常数项了，就不管他$ln$的常数项啦。</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$注意当$a[0]=0$时，常数项也应该是$B_0=0$，可是……常数项真的可以为$0$吗？</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$我们是要求 $F’(B)=\\frac{1}{B}$ 的，分母当然不能为 $0$ 了，所以说我们还是要单独处理 $a[0]=0$ 的情况的。</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$把为$0$的前缀提出来，然后算，最后在答案前面加上提出的长度乘上$k$个$0$即可，模板没有管这个，需要自己注意。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> Polynomial <span class=\"title\">Power</span><span class=\"params\">(<span class=\"type\">const</span> Polynomial &amp;a,<span class=\"type\">const</span> <span class=\"type\">int</span> &amp;K)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> size=a.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">  \tPolynomial p_a=<span class=\"built_in\">Logarithmic</span>(a);</span><br><span class=\"line\">  \tp_a.<span class=\"built_in\">resize</span>(size);</span><br><span class=\"line\">  \t<span class=\"keyword\">for</span>(<span class=\"keyword\">register</span> <span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;size;++i)p_a[i]=<span class=\"number\">1ll</span>*p_a[i]*K%mod;</span><br><span class=\"line\">  \t<span class=\"keyword\">return</span> <span class=\"built_in\">Exponential</span>(p_a,<span class=\"built_in\">power</span>(a[<span class=\"number\">0</span>],K%(mod<span class=\"number\">-1</span>)));</span><br><span class=\"line\">  \t<span class=\"comment\">//这里求a[0]^k，用了欧拉定理优化</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"多项式开方\"><a href=\"#多项式开方\" class=\"headerlink\" title=\"多项式开方\"></a>多项式开方</h3><p>$\\ \\ \\ \\ \\ \\ \\,$<a href=\"https://www.luogu.org/problemnew/show/P5205\">P5205 【模板】多项式开根</a><br>$\\ \\ \\ \\ \\ \\ \\,$<a href=\"https://www.luogu.org/problemnew/show/P5277\">P5277 【模板】多项式开根 (加强版)</a></p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$已知：</p>\n<p>$\\sqrt{A}=exp\\left(\\frac{ln(A)}{2}\\right)$</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$同理，求$ln$后，常数项带入$\\sqrt{A_0}$ 求 $exp$ 就可以出答案了，不是加强版的照样直接贴模板也可以。</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$那么求常数项就比较讲究了，我们要求的是$\\sqrt{A_0}\\% mod$，也就是 $A_0$ 在 $\\% mod$ 意义下的二次剩余。</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$如果会二次剩余，可以$O(\\log mod)$求，不行还可以$BSGS$花时间 $O(\\sqrt{mod})$ 求，时间差别不大，就先不放代码了，代码放在下一个环节，同理常数项为 $0$ 的时候要特殊判断。</p>\n<h3 id=\"多项式开高次方\"><a href=\"#多项式开高次方\" class=\"headerlink\" title=\"多项式开高次方\"></a>多项式开高次方</h3><p>$\\ \\ \\ \\ \\ \\ \\,$<a href=\"https://www.luogu.org/problemnew/show/U67388\">U67388 【模板】多项式开高次根</a></p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$已知：</p>\n<p>$\\sqrt[k]{A}=exp\\left(\\frac{ln(A)}{k}\\right)$</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$同理，求$ln$后，常数项带入$\\sqrt[k]{A_0}$ 求 $exp$ 就可以出答案了，现在主要是说一下如何用$BSGS$ 求 $\\sqrt[k]{A_0}\\% mod$，高次剩余。</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$因为需要保证有逆元或者可以直接除，所以需要保证 $k|(mod-1)$，或者 $k$ 与 $mod-1$ 互质。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">int</span> <span class=\"title\">BSGS</span><span class=\"params\">(<span class=\"type\">int</span> a,<span class=\"type\">int</span> b)</span></span>&#123;</span><br><span class=\"line\">  \tunordered_map&lt;<span class=\"type\">int</span>,<span class=\"type\">int</span>&gt;hash;hash.<span class=\"built_in\">clear</span>();b%=mod;</span><br><span class=\"line\">  \t<span class=\"type\">int</span> t=(<span class=\"type\">int</span>)<span class=\"built_in\">sqrt</span>(mod)+<span class=\"number\">1</span>;</span><br><span class=\"line\">  \t<span class=\"keyword\">for</span>(<span class=\"keyword\">register</span> <span class=\"type\">int</span> j=<span class=\"number\">0</span>;j&lt;t;j++)hash[(<span class=\"type\">int</span>)(<span class=\"number\">1ll</span>*b*<span class=\"built_in\">power</span>(a,j)%mod)]=j;</span><br><span class=\"line\">  \ta=<span class=\"built_in\">power</span>(a,t);</span><br><span class=\"line\">  \t<span class=\"keyword\">if</span>(a==<span class=\"number\">0</span>)<span class=\"keyword\">return</span> b?<span class=\"number\">-1</span>:<span class=\"number\">1</span>;</span><br><span class=\"line\">  \t<span class=\"keyword\">for</span>(<span class=\"keyword\">register</span> <span class=\"type\">int</span> i=<span class=\"number\">0</span>,val;i&lt;=t;++i)&#123;</span><br><span class=\"line\">    \t<span class=\"type\">int</span> j=hash.<span class=\"built_in\">find</span>(val=<span class=\"built_in\">power</span>(a,i))==hash.<span class=\"built_in\">end</span>()?<span class=\"number\">-1</span>:hash[val];</span><br><span class=\"line\">    \t<span class=\"keyword\">if</span>(j&gt;=<span class=\"number\">0</span>)<span class=\"keyword\">return</span> i*t-j;</span><br><span class=\"line\">  \t&#125;</span><br><span class=\"line\">  \t<span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">int</span> <span class=\"title\">Kth_Remaining</span><span class=\"params\">(<span class=\"type\">int</span> a,<span class=\"type\">int</span> K)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> P=<span class=\"built_in\">BSGS</span>(mod_g,a);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(P%K==<span class=\"number\">0</span>)P/=K;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span>&#123;<span class=\"type\">int</span> x,y;<span class=\"built_in\">exgcd</span>(K,mod<span class=\"number\">-1</span>,x,y);<span class=\"keyword\">if</span>(x&lt;<span class=\"number\">0</span>)x+=(mod<span class=\"number\">-1</span>);P=<span class=\"number\">1ll</span>*P*x%(mod<span class=\"number\">-1</span>);&#125;</span><br><span class=\"line\">\t<span class=\"type\">int</span> ret=<span class=\"built_in\">power</span>(mod_g,P);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(!(K&amp;<span class=\"number\">1</span>))ret=<span class=\"built_in\">min</span>(ret,mod-ret);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> Polynomial <span class=\"title\">Kth_root</span><span class=\"params\">(<span class=\"type\">const</span> Polynomial &amp;a,<span class=\"type\">const</span> <span class=\"type\">int</span> &amp;K)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> size=a.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">  \tPolynomial s_a=<span class=\"built_in\">Logarithmic</span>(a);</span><br><span class=\"line\">  \ts_a.<span class=\"built_in\">resize</span>(size);</span><br><span class=\"line\">  \t<span class=\"type\">int</span> Kr=<span class=\"built_in\">Inv</span>(K);</span><br><span class=\"line\">  \t<span class=\"keyword\">for</span>(<span class=\"keyword\">register</span> <span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;size;++i)s_a[i]=<span class=\"number\">1ll</span>*s_a[i]*Kr%mod;</span><br><span class=\"line\">  \t<span class=\"keyword\">return</span> <span class=\"built_in\">Exponential</span>(s_a,<span class=\"built_in\">Kth_Remaining</span>(a[<span class=\"number\">0</span>],K));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p> $\\ \\ \\ \\ \\ \\ \\,$<strong>模板题是周道用<a href=\"https://www.luogu.org/problemnew/show/P5273\">P5273 【模板】多项式幂函数 (加强版)</a>的板子出的数据，跑了一下应该没有问题，自己写也过了，感兴趣可以写一下。因为目前还不能保证完全的正确性，所以说没有计划申请加入题库。但是目前过开方，写过几道题，这代码还是没有问题的。欢迎$Hack$。</strong></p>\n<h2 id=\"多项式三角函数，反三角函数\"><a href=\"#多项式三角函数，反三角函数\" class=\"headerlink\" title=\"多项式三角函数，反三角函数\"></a>多项式三角函数，反三角函数</h2><p> $\\ \\ \\ \\ \\ \\ \\,$说好了，这个作用不大，主要是……过一下板子，赶时间的小朋友可以右上角叉叉了……</p>\n<h3 id=\"多项式-Sin-amp-多项式-Cos\"><a href=\"#多项式-Sin-amp-多项式-Cos\" class=\"headerlink\" title=\"多项式$Sin$ &amp; 多项式$Cos$\"></a>多项式$Sin$ &amp; 多项式$Cos$</h3><p>$\\ \\ \\ \\ \\ \\ \\,$<a href=\"https://www.luogu.org/problemnew/show/P5264\">P5264 【模板】多项式三角函数</a></p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$欧拉公式：</p>\n<p>$e^{ix}=\\cos x+i\\sin x$</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$直接推公式：</p>\n<p>$e^{-ix}=\\cos x-i\\sin x$</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$加减一下得到:</p>\n<p>$2\\cos x=e^{ix}+e^{-ix}$</p>\n<p>$2i\\sin x=e^{ix}-e^{-ix}$</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$所以有：</p>\n<p>$\\cos x=\\frac{e^{ix}+e^{-ix}}{i}$</p>\n<p>$\\sin x=\\frac{e^{ix}-e^{-ix}}{2i}$</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$用多项式$A$替换掉 $x$ 即可：</p>\n<p>$\\cos (A)=\\frac{exp(i\\cdot A)+exp(-i\\cdot A)}{i}$</p>\n<p>$\\sin (A)=\\frac{exp(i\\cdot A)-exp(-i\\cdot A)}{2i}$</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$多项式卷单项式，$exp$，求逆，多项式卷多项式就好了，现在问题是 $i$ 怎么搞：</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$已知 $i^2=-1$，所以说 $i$ 既是 $mod-1$ 在 $\\%mod$意义下的二次剩余，显然可以预处理出来，前置和目录里面已经说的有了，既为$img$。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> Polynomial <span class=\"title\">Sin</span><span class=\"params\">(<span class=\"type\">const</span> Polynomial &amp;a)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> (<span class=\"built_in\">Exponential</span>(a*img)-<span class=\"built_in\">Exponential</span>(a*(mod-img)))*<span class=\"built_in\">Inv</span>(<span class=\"number\">2ll</span>*img%mod);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> Polynomial <span class=\"title\">Cos</span><span class=\"params\">(<span class=\"type\">const</span> Polynomial &amp;a)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> (<span class=\"built_in\">Exponential</span>(a*img)+<span class=\"built_in\">Exponential</span>(a*(mod-img)))*<span class=\"built_in\">Inv</span>(<span class=\"number\">2</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"多项式-Asin-amp-多项式-Atan\"><a href=\"#多项式-Asin-amp-多项式-Atan\" class=\"headerlink\" title=\"多项式$Asin$ &amp; 多项式$Atan$\"></a>多项式$Asin$ &amp; 多项式$Atan$</h3><p>$\\ \\ \\ \\ \\ \\ \\,$<a href=\"https://www.luogu.org/problemnew/show/P5265\">P5265 【模板】多项式反三角函数</a></p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$这个东西比较麻烦啦，直接给公式咯，具体证明可以看教材：</p>\n<p>$Asin(A)=\\int \\frac{A’}{\\sqrt{1-A^2}}dx$</p>\n<p>$Atan(A)=\\int \\frac{A’}{1+A^2}dx$</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> Polynomial <span class=\"title\">Asin</span><span class=\"params\">(<span class=\"type\">const</span> Polynomial &amp;a)</span></span>&#123;</span><br><span class=\"line\">\tPolynomial As_a=a*a;</span><br><span class=\"line\">  \tAs_a.<span class=\"built_in\">resize</span>(a.<span class=\"built_in\">size</span>());</span><br><span class=\"line\">  \t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;a.<span class=\"built_in\">size</span>();i++)As_a[i]=(mod-As_a[i]);</span><br><span class=\"line\">\tAs_a[<span class=\"number\">0</span>]=(<span class=\"number\">1</span>+As_a[<span class=\"number\">0</span>])%mod;</span><br><span class=\"line\">  \t<span class=\"keyword\">return</span> <span class=\"built_in\">Integral</span>(<span class=\"built_in\">Derivation</span>(a)*<span class=\"built_in\">Inverse</span>(<span class=\"built_in\">Kth_root</span>(As_a,<span class=\"number\">2</span>)));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> Polynomial <span class=\"title\">Atan</span><span class=\"params\">(<span class=\"type\">const</span> Polynomial &amp;a)</span></span>&#123;</span><br><span class=\"line\">\tPolynomial At_a=a*a;</span><br><span class=\"line\">  \tAt_a.<span class=\"built_in\">resize</span>(a.<span class=\"built_in\">size</span>());At_a[<span class=\"number\">0</span>]=(<span class=\"number\">1</span>+At_a[<span class=\"number\">0</span>])%mod;</span><br><span class=\"line\">  \t<span class=\"keyword\">return</span> <span class=\"built_in\">Integral</span>(<span class=\"built_in\">Derivation</span>(a)*<span class=\"built_in\">Inverse</span>(At_a));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>$\\ \\ \\ \\ \\ \\ \\,$终于把多项式差不多弄完了，可以找个机会在退役前把多项式整理封装弄好，也算是留下了一点东西吧（嘿嘿。</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$这一部分实例的代码是用 $std::vector$ 封装好的：</p>\n<p><strong>2022-02-14 跟新：把这最长的一篇搬来新博客上面，然后做了一下整合</strong></p>","more":"<h2 id=\"基础\"><a href=\"#基础\" class=\"headerlink\" title=\"基础\"></a>基础</h2><h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><p>$\\ \\ \\ \\ \\ \\ \\,$多项式（Polynomial）是代数学中的基础概念，是由称为未知数的变量和称为系数的常数通过有限次加减法、乘法以及自然数幂次的乘方运算得到的代数表达式。多项式是整式的一种。未知数只有一个的多项式称为一元多项式。</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$一个$n$元多项式，也就是长度为$n$的多项式$f$，我们可以这样表达：</p>\n<p>$f=\\sum_{i=0}^{n}f_i\\cdot x^i$</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$我们一般简写为:</p>\n<p>$f=\\sum_{i=0}^{n}f_i$</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$首先是可能需要用到的模板定义，都是比较基础的数论知识，不赘述了：<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> Polynomial vector<span class=\"string\">&lt;int&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\">//封装多项式为 std::vector，方便resize等操作</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">print</span><span class=\"params\">(Polynomial &amp;a,<span class=\"type\">int</span> len)</span></span>&#123;<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;len;i++)<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d &quot;</span>,a[i]);&#125;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> mod=<span class=\"number\">998244353</span>,mod_g=<span class=\"number\">3</span>,img=<span class=\"number\">86583718</span>;</span><br><span class=\"line\"><span class=\"comment\">//mod为多项式系数的取模值，mod_g是它的原根，img为在模意义下的虚部，只有多项式三角函数会遇到。</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">gcd</span><span class=\"params\">(<span class=\"type\">int</span> a,<span class=\"type\">int</span> b)</span></span>&#123;<span class=\"keyword\">return</span> b?<span class=\"built_in\">gcd</span>(b,a%b):a;&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">exgcd</span><span class=\"params\">(<span class=\"type\">int</span> a,<span class=\"type\">int</span> b,<span class=\"type\">int</span> &amp;x,<span class=\"type\">int</span> &amp;y)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(!b)&#123;x=<span class=\"number\">1</span>;y=<span class=\"number\">0</span>;<span class=\"keyword\">return</span>;&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">exgcd</span>(b,a%b,y,x);y-=x*(a/b);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//gcd，exgcd只有在开根的时候会用到</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">power</span><span class=\"params\">(<span class=\"type\">int</span> a,<span class=\"type\">int</span> b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;<span class=\"type\">int</span> ans=<span class=\"number\">1</span>;<span class=\"keyword\">for</span>(;b;b&gt;&gt;=<span class=\"number\">1</span>,a=<span class=\"number\">1ll</span>*a*a%mod)<span class=\"keyword\">if</span>(b&amp;<span class=\"number\">1</span>)ans=<span class=\"number\">1ll</span>*ans*a%mod;<span class=\"keyword\">return</span> ans;&#125;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> Inv(x) power(x,mod-2)</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"NTT\"><a href=\"#NTT\" class=\"headerlink\" title=\"NTT\"></a>NTT</h3><p>$\\ \\ \\ \\ \\ \\ \\,$然后是核心的快速数论变换 $NTT$，相关请看<a href=\"/2018/12/29/求多项式卷积的变换/\">【求多项式卷积的变换】</a>：<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Polynomial R;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">int</span> <span class=\"title\">Binary_Rounding</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">int</span> &amp;n)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;<span class=\"type\">int</span> len=<span class=\"number\">1</span>;<span class=\"keyword\">for</span>(;len&lt;n;len&lt;&lt;=<span class=\"number\">1</span>);<span class=\"keyword\">return</span> len;&#125;</span><br><span class=\"line\"><span class=\"comment\">//二进制向上取整，为方便NTT变换准备。</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">int</span> <span class=\"title\">Prepare_Transformation</span><span class=\"params\">(<span class=\"type\">int</span> n)</span></span>&#123;</span><br><span class=\"line\">  \t<span class=\"type\">int</span> L=<span class=\"number\">0</span>,len;<span class=\"keyword\">for</span>(len=<span class=\"number\">1</span>;len&lt;n;len&lt;&lt;=<span class=\"number\">1</span>)L++;R.<span class=\"built_in\">clear</span>();R.<span class=\"built_in\">resize</span>(len);</span><br><span class=\"line\">  \t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;len;i++)R[i]=(R[i&gt;&gt;<span class=\"number\">1</span>]&gt;&gt;<span class=\"number\">1</span>)|((i&amp;<span class=\"number\">1</span>)&lt;&lt;(L<span class=\"number\">-1</span>));</span><br><span class=\"line\">  \t<span class=\"keyword\">return</span> len;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//预处理R数组，准备变换，在每次NTT之前理论都要调用此函数。</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">NTT</span><span class=\"params\">(Polynomial &amp;a,<span class=\"type\">int</span> f)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> n=a.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)<span class=\"keyword\">if</span>(i&lt;R[i])<span class=\"built_in\">swap</span>(a[i],a[R[i]]);</span><br><span class=\"line\">  \t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;n;i&lt;&lt;=<span class=\"number\">1</span>)</span><br><span class=\"line\">  \t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">0</span>,gn=<span class=\"built_in\">power</span>(mod_g,(mod<span class=\"number\">-1</span>)/(i&lt;&lt;<span class=\"number\">1</span>));j&lt;n;j+=(i&lt;&lt;<span class=\"number\">1</span>))</span><br><span class=\"line\">  \t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> k=<span class=\"number\">0</span>,g=<span class=\"number\">1</span>,x,y;k&lt;i;k++,g=<span class=\"number\">1ll</span>*g*gn%mod)</span><br><span class=\"line\">\t  \tx=a[j+k],y=<span class=\"number\">1ll</span>*g*a[i+j+k]%mod,</span><br><span class=\"line\">\t  \ta[j+k]=(x+y)%mod,a[i+j+k]=(x-y+mod)%mod;</span><br><span class=\"line\">  \t<span class=\"keyword\">if</span>(f==<span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">   \t\t<span class=\"built_in\">reverse</span>(a.<span class=\"built_in\">begin</span>()+<span class=\"number\">1</span>,a.<span class=\"built_in\">end</span>());</span><br><span class=\"line\">    \t<span class=\"type\">int</span> inv=<span class=\"built_in\">Inv</span>(n);</span><br><span class=\"line\">    \t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)a[i]=<span class=\"number\">1ll</span>*a[i]*inv%mod;</span><br><span class=\"line\">  \t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"多项式的加，减，卷积\"><a href=\"#多项式的加，减，卷积\" class=\"headerlink\" title=\"多项式的加，减，卷积\"></a>多项式的加，减，卷积</h2><p>$\\ \\ \\ \\ \\ \\ \\,$对于一个长度为$n$的多项式$f$和长度为$m$的多项式$g$:</p>\n<p>$\\begin{aligned}f+g&amp;=\\sum_{i=0}^{n}f_i+\\sum_{i=0}^{m}g_i\\\\ &amp;=\\sum_{i=0}^{max(n,m)}f_i+g_i\\end{aligned}$</p>\n<p>$\\begin{aligned}f-g&amp;=\\sum_{i=0}^{n}f_i-\\sum_{i=0}^{m}g_i\\\\ &amp;=\\sum_{i=0}^{max(n,m)}f_i-g_i\\end{aligned}$</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$多项式的卷积，我们还是对于上文中的两个函数$f$和$g$，这个地方不展开写挺不方便的，我们就展开吧：</p>\n<p>$\\begin{aligned}f\\bigotimes g&amp;=\\sum_{i=0}^{n}f_i\\cdot  x^i\\times \\sum_{i=0}^{m}g_i\\cdot x^i \\\\ &amp;=\\sum_{v=0}^{n+m}f_b\\cdot  x^b\\times g_a\\cdot  x^a[a+b=v]\\\\&amp;=\\sum_{x=0}^{n+m}\\sum_{i=0}^{v}f_i\\cdot g_{v-i}\\cdot x^v\\end{aligned}$</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$计算的复杂度呢，是$O(n^2)$的，可以用一些神奇算法优化成$O(n\\log n)$的具体看这里：<a href=\"/2018/12/29/求多项式卷积的变换/\">【求多项式卷积的变换】</a></p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$多项式的加，减，卷积，是比较基本的多项式操作，以模拟和 $NTT$ 为主，主要是展示和记录模板的操作。</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$ <del>单项式其实就是常数。</del></p>\n<h3 id=\"多项式加，减单项式\"><a href=\"#多项式加，减单项式\" class=\"headerlink\" title=\"多项式加，减单项式\"></a>多项式加，减单项式</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">inline</span> Polynomial <span class=\"keyword\">operator</span> +(<span class=\"type\">const</span> Polynomial &amp;a,<span class=\"type\">const</span> <span class=\"type\">int</span> &amp;b)&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> sizea=a.<span class=\"built_in\">size</span>();Polynomial ret=a;ret.<span class=\"built_in\">resize</span>(sizea);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;sizea;i++)ret[i]=(<span class=\"number\">1ll</span>*a[i]+b+mod)%mod;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">inline</span> Polynomial <span class=\"keyword\">operator</span> -(<span class=\"type\">const</span> Polynomial &amp;a,<span class=\"type\">const</span> <span class=\"type\">int</span> &amp;b)&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> sizea=a.<span class=\"built_in\">size</span>();Polynomial ret=a;ret.<span class=\"built_in\">resize</span>(sizea);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;sizea;i++)ret[i]=(<span class=\"number\">1ll</span>*a[i]-b+mod)%mod;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"多项式卷积单项式\"><a href=\"#多项式卷积单项式\" class=\"headerlink\" title=\"多项式卷积单项式\"></a>多项式卷积单项式</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">inline</span> Polynomial <span class=\"keyword\">operator</span> *(<span class=\"type\">const</span> Polynomial &amp;a,<span class=\"type\">const</span> <span class=\"type\">int</span> &amp;b)&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> sizea=a.<span class=\"built_in\">size</span>();Polynomial ret=a;ret.<span class=\"built_in\">resize</span>(sizea);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;sizea;i++)ret[i]=(<span class=\"number\">1ll</span>*a[i]*b%mod+mod)%mod;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"多项式加，减多项式\"><a href=\"#多项式加，减多项式\" class=\"headerlink\" title=\"多项式加，减多项式\"></a>多项式加，减多项式</h3><p>$\\ \\ \\ \\ \\ \\ \\,$注意 $vector$ 在赋值之前，一定先要 $resize$ 到合适的位置，不然就会一直 $RE$ 了。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">inline</span> Polynomial <span class=\"keyword\">operator</span> +(<span class=\"type\">const</span> Polynomial &amp;a,<span class=\"type\">const</span> Polynomial &amp;b)&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> sizea=a.<span class=\"built_in\">size</span>(),sizeb=b.<span class=\"built_in\">size</span>(),size=<span class=\"built_in\">max</span>(sizea,sizeb);</span><br><span class=\"line\">\tPolynomial ret=a;ret.<span class=\"built_in\">resize</span>(size);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;sizeb;i++)ret[i]=(<span class=\"number\">1ll</span>*ret[i]+b[i])%mod;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">inline</span> Polynomial <span class=\"keyword\">operator</span> -(<span class=\"type\">const</span> Polynomial &amp;a,<span class=\"type\">const</span> Polynomial &amp;b)&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> sizea=a.<span class=\"built_in\">size</span>(),sizeb=b.<span class=\"built_in\">size</span>(),size=<span class=\"built_in\">max</span>(sizea,sizeb);</span><br><span class=\"line\">\tPolynomial ret=a;ret.<span class=\"built_in\">resize</span>(size);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;sizeb;i++)ret[i]=(<span class=\"number\">1ll</span>*ret[i]-b[i]+mod)%mod;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"多项式卷积多项式\"><a href=\"#多项式卷积多项式\" class=\"headerlink\" title=\"多项式卷积多项式\"></a>多项式卷积多项式</h3><p> $\\ \\ \\ \\ \\ \\ \\,$<a href=\"https://www.luogu.org/problemnew/show/P3803\">P3803 【模板】多项式乘法（FFT）</a>（可以NTT过</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">inline</span> Polynomial <span class=\"keyword\">operator</span> *(<span class=\"type\">const</span> Polynomial &amp;a,<span class=\"type\">const</span> Polynomial &amp;b)&#123;</span><br><span class=\"line\">\tPolynomial lsa=a,lsb=b,ret;</span><br><span class=\"line\">\t<span class=\"type\">int</span> n=lsa.<span class=\"built_in\">size</span>(),m=lsb.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">\tn=<span class=\"built_in\">Prepare_Transformation</span>(n+m);</span><br><span class=\"line\">  \tlsa.<span class=\"built_in\">resize</span>(n);lsb.<span class=\"built_in\">resize</span>(n);ret.<span class=\"built_in\">resize</span>(n);</span><br><span class=\"line\">  \t<span class=\"built_in\">NTT</span>(lsa,<span class=\"number\">1</span>);<span class=\"built_in\">NTT</span>(lsb,<span class=\"number\">1</span>);</span><br><span class=\"line\">  \t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)ret[i]=<span class=\"number\">1ll</span>*lsa[i]*lsb[i]%mod;</span><br><span class=\"line\">  \t<span class=\"built_in\">NTT</span>(ret,<span class=\"number\">-1</span>);<span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"多项式除法和取模\"><a href=\"#多项式除法和取模\" class=\"headerlink\" title=\"多项式除法和取模\"></a>多项式除法和取模</h3><p> $\\ \\ \\ \\ \\ \\ \\,$你问我多项式除法（<a href=\"https://www.luogu.org/problemnew/show/P4512\">P4512 【模板】多项式除法</a>）？？？多项式除法滚出多项式全家桶！！！（超凶</p>\n<p> $\\ \\ \\ \\ \\ \\ \\,$看了下一篇 求逆 过后，应该可以自己完成多项式除法了，但是在很多小地方……容易自闭。</p>\n<p> $\\ \\ \\ \\ \\ \\ \\,$还是贴一下板子吧，小心别一开始二进制取整了：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">inline</span> Polynomial <span class=\"keyword\">operator</span> /(<span class=\"type\">const</span> Polynomial &amp;a,<span class=\"type\">const</span> Polynomial &amp;b)&#123;</span><br><span class=\"line\">\tPolynomial ret=a,ls=b;</span><br><span class=\"line\">  \t<span class=\"built_in\">reverse</span>(ret.<span class=\"built_in\">begin</span>(),ret.<span class=\"built_in\">end</span>());</span><br><span class=\"line\">  \t<span class=\"built_in\">reverse</span>(ls.<span class=\"built_in\">begin</span>(),ls.<span class=\"built_in\">end</span>());</span><br><span class=\"line\">\tls.<span class=\"built_in\">resize</span>(<span class=\"built_in\">Binary_Rounding</span>(a.<span class=\"built_in\">size</span>()+b.<span class=\"built_in\">size</span>()));</span><br><span class=\"line\">\tls=<span class=\"built_in\">Inverse</span>(ls);</span><br><span class=\"line\">\tls.<span class=\"built_in\">resize</span>(a.<span class=\"built_in\">size</span>()+b.<span class=\"built_in\">size</span>());</span><br><span class=\"line\">\tret=ret*ls;ret.<span class=\"built_in\">resize</span>(a.<span class=\"built_in\">size</span>()-b.<span class=\"built_in\">size</span>()+<span class=\"number\">1</span>);</span><br><span class=\"line\">  \t<span class=\"built_in\">reverse</span>(ret.<span class=\"built_in\">begin</span>(),ret.<span class=\"built_in\">end</span>());</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">inline</span> Polynomial <span class=\"keyword\">operator</span> %(<span class=\"type\">const</span> Polynomial &amp;a,<span class=\"type\">const</span> Polynomial &amp;b)&#123;</span><br><span class=\"line\">\tPolynomial ret=a/b;</span><br><span class=\"line\">\tret=ret*b;ret.<span class=\"built_in\">resize</span>(a.<span class=\"built_in\">size</span>()+b.<span class=\"built_in\">size</span>());</span><br><span class=\"line\">\tret=a-ret;ret.<span class=\"built_in\">resize</span>(a.<span class=\"built_in\">size</span>()+b.<span class=\"built_in\">size</span>());</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"多项式的逆，导，积\"><a href=\"#多项式的逆，导，积\" class=\"headerlink\" title=\"多项式的逆，导，积\"></a>多项式的逆，导，积</h2><p>$\\ \\ \\ \\ \\ \\ \\,$这一部分麻烦一点了，但是很重要，几乎所有多项式都得用的，不过好在也不是很复杂的。</p>\n<h3 id=\"多项式求逆\"><a href=\"#多项式求逆\" class=\"headerlink\" title=\"多项式求逆\"></a>多项式求逆</h3><p>$\\ \\ \\ \\ \\ \\ \\,$<a href=\"https://www.luogu.org/problemnew/show/P4238\">P4238 【模板】多项式求逆</a></p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$求一个多项式 $A$ 的模 $x^n$ 的逆元$B$ 时，假设先求出了模$x^{\\frac{n}{2}}$ 的逆元 $B’$，既：</p>\n<p>$A*B’ \\equiv 1\\ (mod\\ x^{\\frac{n}{2}})$</p>\n<p>$A*B \\equiv 1\\ (mod\\ x^{n})$</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$那么显然存在：</p>\n<p>$A<em>B \\equiv 1\\ (mod\\ x^{\\frac{n}{2}})=A</em>B’$</p>\n<p>$B-B’ \\equiv 0\\ (mod\\ x^{\\frac{n}{2}})$</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$两边同时平方：</p>\n<p>$B^2-2BB’+B’^2 \\equiv 0\\ (mod\\ x^n)$</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$再把 $A$ 乘回去：</p>\n<p>$(A<em>B)</em>B-(A<em>B)</em>2B’+A<em>B’^2 \\equiv A</em>0\\ (mod\\ x^n)$</p>\n<p>$B-2B’+A*B’^2 \\equiv 0\\ (mod\\ x^n)$</p>\n<p>$B \\equiv 2B’-A*B’^2\\ (mod\\ x^n)$</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$我们就可以倍增来处理它了，起点是$B_0 \\equiv A_0^{-1}(mod\\ x^1)$</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> Polynomial <span class=\"title\">Inverse</span><span class=\"params\">(<span class=\"type\">const</span> Polynomial &amp;a)</span></span>&#123;</span><br><span class=\"line\">\tPolynomial ret,inv_a; </span><br><span class=\"line\">\tret.<span class=\"built_in\">resize</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">  \tret[<span class=\"number\">0</span>]=<span class=\"built_in\">Inv</span>(a[<span class=\"number\">0</span>]);<span class=\"type\">int</span> ed=a.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> len=<span class=\"number\">2</span>;len&lt;=ed;len&lt;&lt;=<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">\t \t<span class=\"type\">int</span> n=<span class=\"built_in\">Prepare_Transformation</span>(len+len);</span><br><span class=\"line\">\t  \tinv_a=a;inv_a.<span class=\"built_in\">resize</span>(n);ret.<span class=\"built_in\">resize</span>(n);</span><br><span class=\"line\">\t  \t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=len;i&lt;n;i++)inv_a[i]=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t  \t<span class=\"built_in\">NTT</span>(inv_a,<span class=\"number\">1</span>);<span class=\"built_in\">NTT</span>(ret,<span class=\"number\">1</span>);</span><br><span class=\"line\">\t  \t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)ret[i]=<span class=\"number\">1ll</span>*(<span class=\"number\">2ll</span><span class=\"number\">-1ll</span>*inv_a[i]*ret[i]%mod+mod)%mod*ret[i]%mod;</span><br><span class=\"line\">\t  \t<span class=\"built_in\">NTT</span>(ret,<span class=\"number\">-1</span>);</span><br><span class=\"line\">\t  \t<span class=\"comment\">//这里把比较复杂的卷积过程拖下来了。</span></span><br><span class=\"line\">\t  \t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=len;i&lt;n;i++)ret[i]=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t  \t<span class=\"comment\">//这里不resize了，直接把多余的清零。</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tret.<span class=\"built_in\">resize</span>(ed);</span><br><span class=\"line\">\t<span class=\"comment\">//resize回来，防止以后长度爆炸。</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"多项式求导\"><a href=\"#多项式求导\" class=\"headerlink\" title=\"多项式求导\"></a>多项式求导</h3><p>$\\ \\ \\ \\ \\ \\ \\,$按照公式来，公式挺简单的，设多项式 $A$ 的导数为 $A’$。</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$那么有：</p>\n<p>$x^{A’}=Ax^{A-1}$</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$既：</p>\n<p>$A’_{i}=i\\times A_{i+1}$</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> Polynomial <span class=\"title\">Derivation</span><span class=\"params\">(<span class=\"type\">const</span> Polynomial &amp;a)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> size=a.<span class=\"built_in\">size</span>();Polynomial ret;ret.<span class=\"built_in\">resize</span>(size);</span><br><span class=\"line\">  \t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;size;i++)ret[i<span class=\"number\">-1</span>]=<span class=\"number\">1ll</span>*i*a[i]%mod;</span><br><span class=\"line\">  \tret[size<span class=\"number\">-1</span>]=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"多项式求积\"><a href=\"#多项式求积\" class=\"headerlink\" title=\"多项式求积\"></a>多项式求积</h3><p>$\\ \\ \\ \\ \\ \\ \\,$还是按照公式来，设多项式 $A$ 的积分为 $A’$。</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$那么有：</p>\n<p>$\\int x^{A’}dx=\\frac{1}{A+1}x^{A-1}$</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$既：</p>\n<p>$A’_{i}=\\frac{A_{i-1}}{i}$</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$那就是乘逆元咯 <del>（兄弟俩长得挺像</del></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> Polynomial <span class=\"title\">Integral</span><span class=\"params\">(<span class=\"type\">const</span> Polynomial &amp;a)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> size=a.<span class=\"built_in\">size</span>();Polynomial ret;ret.<span class=\"built_in\">resize</span>(size);</span><br><span class=\"line\">  \t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;size;i++)ret[i]=<span class=\"number\">1ll</span>*<span class=\"built_in\">Inv</span>(i)*a[i<span class=\"number\">-1</span>]%mod;</span><br><span class=\"line\">  \tret[<span class=\"number\">0</span>]=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"多项式复合逆\"><a href=\"#多项式复合逆\" class=\"headerlink\" title=\"多项式复合逆\"></a>多项式复合逆</h3><p>$\\ \\ \\ \\ \\ \\ \\,$<a href=\"https://acm.nflsoj.com/problem/332\">NFLSOJ #332. 多项式复合逆</a></p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$对于一个多项式$F$，若是存在一个多项式$G$，使得：</p>\n<p>$G(F(x))=x$</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$那么就称多项式$G$是多项式$F$的复合逆。</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$目前复合逆没有$O(n \\log n)$的做法，但是可以用拉格朗日反演做到$O(n^2 \\log n)$，既每一项每一项得求，求一项的时间是$O(n \\log n)$的，下面给出公式：</p>\n<p>$G_i=\\frac{\\left(\\frac{x}{F}\\right)^i_{i-1}}{i}$</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$那么求逆和卷积就好了，$x$都挺好处理的，证明很复杂，感兴趣可以看<a href=\"https://users.math.msu.edu/users/magyar/Math880/Lagrange.pdf\">这里</a>。</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$有一个值得注意的地方就是求逆的时候，应该直接求$\\frac{F}{x}$的逆，而不是$F$的逆，因为既然多项式 $F$ 存在复合逆，那么常数项就应该是 $0$ ，这是不可能求逆的，先算出$\\frac{F}{x}$即可。</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$若是需要$O(n \\log n)$只求一项，则需要用到快速幂，下一篇我们会讲到</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> Polynomial <span class=\"title\">Composition_Inverse</span><span class=\"params\">(<span class=\"type\">const</span> Polynomial &amp;a)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> n=a.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">  \tPolynomial ret,Cinv=a,Pow;</span><br><span class=\"line\">  \tCinv.<span class=\"built_in\">resize</span>(n);ret.<span class=\"built_in\">resize</span>(n);Pow.<span class=\"built_in\">resize</span>(n);Pow[<span class=\"number\">0</span>]=<span class=\"number\">1</span>;</span><br><span class=\"line\">  \t<span class=\"keyword\">for</span>(<span class=\"keyword\">register</span> <span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;n<span class=\"number\">-1</span>;i++)Cinv[i]=Cinv[i+<span class=\"number\">1</span>];Cinv[n<span class=\"number\">-1</span>]=<span class=\"number\">0</span>;</span><br><span class=\"line\">  \tCinv=<span class=\"built_in\">Inverse</span>(Cinv);</span><br><span class=\"line\">  \t<span class=\"keyword\">for</span>(<span class=\"keyword\">register</span> <span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;n;++i)&#123;</span><br><span class=\"line\">  \t\tPow=Pow*Cinv;Pow.<span class=\"built_in\">resize</span>(n);</span><br><span class=\"line\">  \t\tret[i]=<span class=\"number\">1ll</span>*Pow[i<span class=\"number\">-1</span>]*<span class=\"built_in\">Inv</span>(i)%mod;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">  \t<span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"多项式的ln，exp\"><a href=\"#多项式的ln，exp\" class=\"headerlink\" title=\"多项式的ln，exp\"></a>多项式的ln，exp</h2><p>$\\ \\ \\ \\ \\ \\ \\,$对数和指数是很重要的东西了，复杂的多项式都和他们有关系，所以说掌握很重要，这里不建议光背板子，因为这两个板子都有致命的限制，而在实际操作的时候，可以通过一些方法绕过这个限制直接求解，这个就很重要了。</p>\n<h3 id=\"多项式的-ln\"><a href=\"#多项式的-ln\" class=\"headerlink\" title=\"多项式的$ln$\"></a>多项式的$ln$</h3><p>$\\ \\ \\ \\ \\ \\ \\,$<a href=\"https://www.luogu.org/problemnew/show/P4725\">P4725 【模板】多项式对数函数</a></p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$公式先走起咯：</p>\n<p>$\\ln(A)=\\int \\frac{A’}{A}dx$</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$观察公式，一句话解决：</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$导卷逆的积：</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$看上去很模板，当然模板也是很短的：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> Polynomial <span class=\"title\">Logarithmic</span><span class=\"params\">(<span class=\"type\">const</span> Polynomial &amp;a)</span></span>&#123;</span><br><span class=\"line\">\tPolynomial ln_a=<span class=\"built_in\">Derivation</span>(a)*<span class=\"built_in\">Inverse</span>(a);</span><br><span class=\"line\">  \tln_a.<span class=\"built_in\">resize</span>(a.<span class=\"built_in\">size</span>());</span><br><span class=\"line\">  \t<span class=\"comment\">//这里resize一下，因为卷积后会倍增，防止变长爆掉</span></span><br><span class=\"line\">  \t<span class=\"keyword\">return</span> <span class=\"built_in\">Integral</span>(ln_a);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>$\\ \\ \\ \\ \\ \\ \\,$还有一个值得注意的问题，一般求对数的多项式，是需要要求常数项为 $1$ 的，因为我们知道：</p>\n<p>$e^0=1$</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$也就是：</p>\n<p>$ln(1)=0$</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$这样算出来的 $ln$ 常数项是 $0$，而我们追后一步在算积的时候，是默认把常数项补上 $0$ 的，这样就没有问题。可要是原多项式常数项不为 $1$ 呢？</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$显然应该算积的时候在常数项补上 $ln(C)$ （C为常数项），不过这个数在模的意义下应该是多少呢？这个问题周道确实不能解决了，所以说，模板题的话，会给出这个常数项为 $1$的条件的。</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$否认常数项不等于$1$，完全不能求 $ln$ 的说法。</p>\n<h3 id=\"多项式的-exp\"><a href=\"#多项式的-exp\" class=\"headerlink\" title=\"多项式的$exp$\"></a>多项式的$exp$</h3><p><a href=\"https://www.luogu.org/problemnew/show/P4726\">P4726 【模板】多项式指数函数</a></p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$这玩意说简单也简单，说复杂也挺复杂的，我们得引入一个新玩意，<strong>【牛顿迭代】</strong>，是求函数零点的玩意，收敛速度非常理想，我在这里有简略的讲过：<a href=\"/2018/12/30/导数和牛顿迭代/\">【导数和牛顿迭代】</a>，我也在洛谷出过一个牛顿迭代的裸题，感兴趣可以去体验一下牛顿迭代的神奇：<a href=\"https://www.luogu.org/problemnew/show/P4986\">【P4986 逃离】</a>。</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$说远了，现在我们来康康怎么求指数函数。</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$令我们要求的是 $A$ 的指数函数 $B$，既是：</p>\n<p>$B=e^A$</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$变形得：</p>\n<p>$\\ln(B)-A=0$</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$咦？$0$ ?，我们把多项式当做函数值看看？</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$哇，函数零点！马上牛顿迭代呀！</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$设$F(B)=\\ln (B)-A$，我们要求 $F$的零点，根据牛顿迭代的公式可得（注意这里B后面的括号的迭代版本的意思，不是多项式的项）：</p>\n<p>$B(x)=B(x-1)-\\frac{F\\left(B(x-1)\\right)}{F’\\left(B(x-1)\\right)}$</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$而根据导数的定义，$F’(B)=\\frac{1}{B}$，<del>（<a href=\"/2018/12/30/导数和牛顿迭代/\">【导数和牛顿迭代】</a>里面有提到过一点，这里是把$A$当做常数舍去了）</del></p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$那我们现在把牛顿迭代的公式化简：</p>\n<p>$\\begin{aligned}<br>B(x)&amp;<br>=B(x-1)-F\\left(B(x-1)\\right)\\times B(x-1)\\\\&amp;<br>=B(x-1)-B(x-1)\\times F\\left(B(x-1)\\right)\\\\&amp;<br>=B(x-1)-B(x-1)\\times \\left(\\ln \\left(B(x-1)\\right)-A\\right)\\\\&amp;<br>=B(x-1)\\times  \\left(1-\\ln \\left(B(x-1)\\right)+A \\right)<br>\\end{aligned}$</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$再次强调B后面的括号的迭代版本的意思，不是多项式的项。</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$现在看似分治可做，我们用两个容器相互装版本。每次老版本一卷，新版本长度就会倍增，所以说我们做 $\\log n$ 次迭代就好。我们的操作相当于把式子拆了求收敛值，所以不会有精度的问题，求出来就好了。</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$那么现在的问题是，第一个版本是怎么样，洛咕模板给的是保证 $A_0=0$，因为$e^0=1$，也就是$exp(0)=1$，所以说 $B_0=1$，也就是常数项为 $1$。</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$当然了，同理，他一般会保证$A_0=0$，我们不方便找到其他$exp(A_0)$模的意义下的值。如果可以算的话，可以在模板里面传入 $Constant$ 也就是 $exp(A_0)$ 的值。</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$否认$A_0$不等于$0$，完全不能求 $exp$ 的说法。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> Polynomial <span class=\"title\">Exponential</span><span class=\"params\">(<span class=\"type\">const</span> Polynomial &amp;a,<span class=\"type\">int</span> Constant=<span class=\"number\">1</span>)</span></span>&#123;</span><br><span class=\"line\">\tPolynomial ret,D;<span class=\"type\">int</span> ed=a.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">\tret.<span class=\"built_in\">resize</span>(<span class=\"number\">1</span>);ret[<span class=\"number\">0</span>]=Constant;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> len=<span class=\"number\">2</span>;len&lt;=ed;len&lt;&lt;=<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">\t  \tD=<span class=\"built_in\">Logarithmic</span>(ret);D.<span class=\"built_in\">resize</span>(len);</span><br><span class=\"line\">\t  \tD[<span class=\"number\">0</span>]=(<span class=\"number\">1ll</span>*a[<span class=\"number\">0</span>]+<span class=\"number\">1ll</span>-D[<span class=\"number\">0</span>]+mod)%mod;</span><br><span class=\"line\">\t  \t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;len;++i) D[i]=(<span class=\"number\">1ll</span>*a[i]-D[i]+mod)%mod;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> n=<span class=\"built_in\">Prepare_Transformation</span>(len&lt;&lt;<span class=\"number\">1</span>);</span><br><span class=\"line\">\t  \tret.<span class=\"built_in\">resize</span>(n);D.<span class=\"built_in\">resize</span>(n);</span><br><span class=\"line\">\t  \t<span class=\"built_in\">NTT</span>(ret,<span class=\"number\">1</span>);<span class=\"built_in\">NTT</span>(D,<span class=\"number\">1</span>);</span><br><span class=\"line\">\t  \t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)ret[i]=<span class=\"number\">1ll</span>*ret[i]*D[i]%mod;</span><br><span class=\"line\">\t  \t<span class=\"built_in\">NTT</span>(ret,<span class=\"number\">-1</span>);</span><br><span class=\"line\">\t  \t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=len;i&lt;(len&lt;&lt;<span class=\"number\">1</span>);++i)ret[i]=D[i]=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tret.<span class=\"built_in\">resize</span>(ed);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"多项式快速幂，开方\"><a href=\"#多项式快速幂，开方\" class=\"headerlink\" title=\"多项式快速幂，开方\"></a>多项式快速幂，开方</h2><p>$\\ \\ \\ \\ \\ \\ \\,$这是多项式的大头了，实际使用多项式的$ln$和$exp$，这里呢，也只讲$ln$和$exp$的做法。</p>\n<hr>\n<h3 id=\"多项式快速幂\"><a href=\"#多项式快速幂\" class=\"headerlink\" title=\"多项式快速幂\"></a>多项式快速幂</h3><p>$\\ \\ \\ \\ \\ \\ \\,$<a href=\"https://www.luogu.org/problemnew/show/P5245\">P5245 【模板】多项式快速幂</a><br>$\\ \\ \\ \\ \\ \\ \\,$<a href=\"https://www.luogu.org/problemnew/show/P5273\">P5273 【模板】多项式幂函数 (加强版)</a></p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$已知：</p>\n<p>$A^k=exp\\left(ln(A)\\times k\\right)$</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$显然求$ln$和$exp$就可以出答案了。</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$既然要求$ln$和$exp$，那么一定要考虑的是常数项的问题，洛谷的常规题面有保证 $a_0=1$，所以说无脑套模板就对了。</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$那么加强版没有保证 $a_0=1$，我们如何算常数项呢？</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$容易知道，$ln$的常数项为 $ln(a_0)$ ，$exp$的常数项是$exp(ln(a_0)\\times k)$。好像算不出来呢。</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$可是$A^k=exp\\left(ln(A)\\times k\\right)$，所以说$exp$的常数项是就应该是$A^k$的常数项，既 $a_0^k$ 。</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$所以说我们直接知道$exp$的常数项了，就不管他$ln$的常数项啦。</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$注意当$a[0]=0$时，常数项也应该是$B_0=0$，可是……常数项真的可以为$0$吗？</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$我们是要求 $F’(B)=\\frac{1}{B}$ 的，分母当然不能为 $0$ 了，所以说我们还是要单独处理 $a[0]=0$ 的情况的。</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$把为$0$的前缀提出来，然后算，最后在答案前面加上提出的长度乘上$k$个$0$即可，模板没有管这个，需要自己注意。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> Polynomial <span class=\"title\">Power</span><span class=\"params\">(<span class=\"type\">const</span> Polynomial &amp;a,<span class=\"type\">const</span> <span class=\"type\">int</span> &amp;K)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> size=a.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">  \tPolynomial p_a=<span class=\"built_in\">Logarithmic</span>(a);</span><br><span class=\"line\">  \tp_a.<span class=\"built_in\">resize</span>(size);</span><br><span class=\"line\">  \t<span class=\"keyword\">for</span>(<span class=\"keyword\">register</span> <span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;size;++i)p_a[i]=<span class=\"number\">1ll</span>*p_a[i]*K%mod;</span><br><span class=\"line\">  \t<span class=\"keyword\">return</span> <span class=\"built_in\">Exponential</span>(p_a,<span class=\"built_in\">power</span>(a[<span class=\"number\">0</span>],K%(mod<span class=\"number\">-1</span>)));</span><br><span class=\"line\">  \t<span class=\"comment\">//这里求a[0]^k，用了欧拉定理优化</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"多项式开方\"><a href=\"#多项式开方\" class=\"headerlink\" title=\"多项式开方\"></a>多项式开方</h3><p>$\\ \\ \\ \\ \\ \\ \\,$<a href=\"https://www.luogu.org/problemnew/show/P5205\">P5205 【模板】多项式开根</a><br>$\\ \\ \\ \\ \\ \\ \\,$<a href=\"https://www.luogu.org/problemnew/show/P5277\">P5277 【模板】多项式开根 (加强版)</a></p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$已知：</p>\n<p>$\\sqrt{A}=exp\\left(\\frac{ln(A)}{2}\\right)$</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$同理，求$ln$后，常数项带入$\\sqrt{A_0}$ 求 $exp$ 就可以出答案了，不是加强版的照样直接贴模板也可以。</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$那么求常数项就比较讲究了，我们要求的是$\\sqrt{A_0}\\% mod$，也就是 $A_0$ 在 $\\% mod$ 意义下的二次剩余。</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$如果会二次剩余，可以$O(\\log mod)$求，不行还可以$BSGS$花时间 $O(\\sqrt{mod})$ 求，时间差别不大，就先不放代码了，代码放在下一个环节，同理常数项为 $0$ 的时候要特殊判断。</p>\n<h3 id=\"多项式开高次方\"><a href=\"#多项式开高次方\" class=\"headerlink\" title=\"多项式开高次方\"></a>多项式开高次方</h3><p>$\\ \\ \\ \\ \\ \\ \\,$<a href=\"https://www.luogu.org/problemnew/show/U67388\">U67388 【模板】多项式开高次根</a></p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$已知：</p>\n<p>$\\sqrt[k]{A}=exp\\left(\\frac{ln(A)}{k}\\right)$</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$同理，求$ln$后，常数项带入$\\sqrt[k]{A_0}$ 求 $exp$ 就可以出答案了，现在主要是说一下如何用$BSGS$ 求 $\\sqrt[k]{A_0}\\% mod$，高次剩余。</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$因为需要保证有逆元或者可以直接除，所以需要保证 $k|(mod-1)$，或者 $k$ 与 $mod-1$ 互质。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">int</span> <span class=\"title\">BSGS</span><span class=\"params\">(<span class=\"type\">int</span> a,<span class=\"type\">int</span> b)</span></span>&#123;</span><br><span class=\"line\">  \tunordered_map&lt;<span class=\"type\">int</span>,<span class=\"type\">int</span>&gt;hash;hash.<span class=\"built_in\">clear</span>();b%=mod;</span><br><span class=\"line\">  \t<span class=\"type\">int</span> t=(<span class=\"type\">int</span>)<span class=\"built_in\">sqrt</span>(mod)+<span class=\"number\">1</span>;</span><br><span class=\"line\">  \t<span class=\"keyword\">for</span>(<span class=\"keyword\">register</span> <span class=\"type\">int</span> j=<span class=\"number\">0</span>;j&lt;t;j++)hash[(<span class=\"type\">int</span>)(<span class=\"number\">1ll</span>*b*<span class=\"built_in\">power</span>(a,j)%mod)]=j;</span><br><span class=\"line\">  \ta=<span class=\"built_in\">power</span>(a,t);</span><br><span class=\"line\">  \t<span class=\"keyword\">if</span>(a==<span class=\"number\">0</span>)<span class=\"keyword\">return</span> b?<span class=\"number\">-1</span>:<span class=\"number\">1</span>;</span><br><span class=\"line\">  \t<span class=\"keyword\">for</span>(<span class=\"keyword\">register</span> <span class=\"type\">int</span> i=<span class=\"number\">0</span>,val;i&lt;=t;++i)&#123;</span><br><span class=\"line\">    \t<span class=\"type\">int</span> j=hash.<span class=\"built_in\">find</span>(val=<span class=\"built_in\">power</span>(a,i))==hash.<span class=\"built_in\">end</span>()?<span class=\"number\">-1</span>:hash[val];</span><br><span class=\"line\">    \t<span class=\"keyword\">if</span>(j&gt;=<span class=\"number\">0</span>)<span class=\"keyword\">return</span> i*t-j;</span><br><span class=\"line\">  \t&#125;</span><br><span class=\"line\">  \t<span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">int</span> <span class=\"title\">Kth_Remaining</span><span class=\"params\">(<span class=\"type\">int</span> a,<span class=\"type\">int</span> K)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> P=<span class=\"built_in\">BSGS</span>(mod_g,a);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(P%K==<span class=\"number\">0</span>)P/=K;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span>&#123;<span class=\"type\">int</span> x,y;<span class=\"built_in\">exgcd</span>(K,mod<span class=\"number\">-1</span>,x,y);<span class=\"keyword\">if</span>(x&lt;<span class=\"number\">0</span>)x+=(mod<span class=\"number\">-1</span>);P=<span class=\"number\">1ll</span>*P*x%(mod<span class=\"number\">-1</span>);&#125;</span><br><span class=\"line\">\t<span class=\"type\">int</span> ret=<span class=\"built_in\">power</span>(mod_g,P);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(!(K&amp;<span class=\"number\">1</span>))ret=<span class=\"built_in\">min</span>(ret,mod-ret);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> Polynomial <span class=\"title\">Kth_root</span><span class=\"params\">(<span class=\"type\">const</span> Polynomial &amp;a,<span class=\"type\">const</span> <span class=\"type\">int</span> &amp;K)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> size=a.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">  \tPolynomial s_a=<span class=\"built_in\">Logarithmic</span>(a);</span><br><span class=\"line\">  \ts_a.<span class=\"built_in\">resize</span>(size);</span><br><span class=\"line\">  \t<span class=\"type\">int</span> Kr=<span class=\"built_in\">Inv</span>(K);</span><br><span class=\"line\">  \t<span class=\"keyword\">for</span>(<span class=\"keyword\">register</span> <span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;size;++i)s_a[i]=<span class=\"number\">1ll</span>*s_a[i]*Kr%mod;</span><br><span class=\"line\">  \t<span class=\"keyword\">return</span> <span class=\"built_in\">Exponential</span>(s_a,<span class=\"built_in\">Kth_Remaining</span>(a[<span class=\"number\">0</span>],K));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p> $\\ \\ \\ \\ \\ \\ \\,$<strong>模板题是周道用<a href=\"https://www.luogu.org/problemnew/show/P5273\">P5273 【模板】多项式幂函数 (加强版)</a>的板子出的数据，跑了一下应该没有问题，自己写也过了，感兴趣可以写一下。因为目前还不能保证完全的正确性，所以说没有计划申请加入题库。但是目前过开方，写过几道题，这代码还是没有问题的。欢迎$Hack$。</strong></p>\n<h2 id=\"多项式三角函数，反三角函数\"><a href=\"#多项式三角函数，反三角函数\" class=\"headerlink\" title=\"多项式三角函数，反三角函数\"></a>多项式三角函数，反三角函数</h2><p> $\\ \\ \\ \\ \\ \\ \\,$说好了，这个作用不大，主要是……过一下板子，赶时间的小朋友可以右上角叉叉了……</p>\n<h3 id=\"多项式-Sin-amp-多项式-Cos\"><a href=\"#多项式-Sin-amp-多项式-Cos\" class=\"headerlink\" title=\"多项式$Sin$ &amp; 多项式$Cos$\"></a>多项式$Sin$ &amp; 多项式$Cos$</h3><p>$\\ \\ \\ \\ \\ \\ \\,$<a href=\"https://www.luogu.org/problemnew/show/P5264\">P5264 【模板】多项式三角函数</a></p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$欧拉公式：</p>\n<p>$e^{ix}=\\cos x+i\\sin x$</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$直接推公式：</p>\n<p>$e^{-ix}=\\cos x-i\\sin x$</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$加减一下得到:</p>\n<p>$2\\cos x=e^{ix}+e^{-ix}$</p>\n<p>$2i\\sin x=e^{ix}-e^{-ix}$</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$所以有：</p>\n<p>$\\cos x=\\frac{e^{ix}+e^{-ix}}{i}$</p>\n<p>$\\sin x=\\frac{e^{ix}-e^{-ix}}{2i}$</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$用多项式$A$替换掉 $x$ 即可：</p>\n<p>$\\cos (A)=\\frac{exp(i\\cdot A)+exp(-i\\cdot A)}{i}$</p>\n<p>$\\sin (A)=\\frac{exp(i\\cdot A)-exp(-i\\cdot A)}{2i}$</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$多项式卷单项式，$exp$，求逆，多项式卷多项式就好了，现在问题是 $i$ 怎么搞：</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$已知 $i^2=-1$，所以说 $i$ 既是 $mod-1$ 在 $\\%mod$意义下的二次剩余，显然可以预处理出来，前置和目录里面已经说的有了，既为$img$。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> Polynomial <span class=\"title\">Sin</span><span class=\"params\">(<span class=\"type\">const</span> Polynomial &amp;a)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> (<span class=\"built_in\">Exponential</span>(a*img)-<span class=\"built_in\">Exponential</span>(a*(mod-img)))*<span class=\"built_in\">Inv</span>(<span class=\"number\">2ll</span>*img%mod);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> Polynomial <span class=\"title\">Cos</span><span class=\"params\">(<span class=\"type\">const</span> Polynomial &amp;a)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> (<span class=\"built_in\">Exponential</span>(a*img)+<span class=\"built_in\">Exponential</span>(a*(mod-img)))*<span class=\"built_in\">Inv</span>(<span class=\"number\">2</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"多项式-Asin-amp-多项式-Atan\"><a href=\"#多项式-Asin-amp-多项式-Atan\" class=\"headerlink\" title=\"多项式$Asin$ &amp; 多项式$Atan$\"></a>多项式$Asin$ &amp; 多项式$Atan$</h3><p>$\\ \\ \\ \\ \\ \\ \\,$<a href=\"https://www.luogu.org/problemnew/show/P5265\">P5265 【模板】多项式反三角函数</a></p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$这个东西比较麻烦啦，直接给公式咯，具体证明可以看教材：</p>\n<p>$Asin(A)=\\int \\frac{A’}{\\sqrt{1-A^2}}dx$</p>\n<p>$Atan(A)=\\int \\frac{A’}{1+A^2}dx$</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> Polynomial <span class=\"title\">Asin</span><span class=\"params\">(<span class=\"type\">const</span> Polynomial &amp;a)</span></span>&#123;</span><br><span class=\"line\">\tPolynomial As_a=a*a;</span><br><span class=\"line\">  \tAs_a.<span class=\"built_in\">resize</span>(a.<span class=\"built_in\">size</span>());</span><br><span class=\"line\">  \t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;a.<span class=\"built_in\">size</span>();i++)As_a[i]=(mod-As_a[i]);</span><br><span class=\"line\">\tAs_a[<span class=\"number\">0</span>]=(<span class=\"number\">1</span>+As_a[<span class=\"number\">0</span>])%mod;</span><br><span class=\"line\">  \t<span class=\"keyword\">return</span> <span class=\"built_in\">Integral</span>(<span class=\"built_in\">Derivation</span>(a)*<span class=\"built_in\">Inverse</span>(<span class=\"built_in\">Kth_root</span>(As_a,<span class=\"number\">2</span>)));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> Polynomial <span class=\"title\">Atan</span><span class=\"params\">(<span class=\"type\">const</span> Polynomial &amp;a)</span></span>&#123;</span><br><span class=\"line\">\tPolynomial At_a=a*a;</span><br><span class=\"line\">  \tAt_a.<span class=\"built_in\">resize</span>(a.<span class=\"built_in\">size</span>());At_a[<span class=\"number\">0</span>]=(<span class=\"number\">1</span>+At_a[<span class=\"number\">0</span>])%mod;</span><br><span class=\"line\">  \t<span class=\"keyword\">return</span> <span class=\"built_in\">Integral</span>(<span class=\"built_in\">Derivation</span>(a)*<span class=\"built_in\">Inverse</span>(At_a));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"扩展中国剩余定理","date":"2018-12-29T06:42:34.000Z","mathjax":true,"_content":"\n$\\ \\ \\ \\ \\ \\ \\ \\,$关于扩展中国剩余定理及扩展中国剩余定理的复习笔记：\n\n<!-- more -->\n\n## 中国剩余定理（CRT）\n\n  $\\ \\ \\ \\ \\ \\ \\ \\,$中国剩余定理是求解如下同余方程组的算法：\n  \n  $\\begin{cases}x\\equiv c_1\\ \\ ({\\rm mod}\\ m_1)\\\\x\\equiv c_2\\ \\ ({\\rm mod}\\ m_2)\\\\x\\equiv c_3\\ \\ ({\\rm mod}\\ m_3)\\\\\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\cdots\\\\x\\equiv c_n\\ \\ ({\\rm mod}\\ m_n)\\end{cases}$\n  $\\ \\ \\ \\ \\ \\ \\ \\,$当$m$都互质时，我们使用中国剩余定理（CRT）。\n  \n  \n  $\\ \\ \\ \\ \\ \\ \\ \\,$对于一个同余方程组，我们从简单的入手：\n    \n  $\\begin{cases}x\\equiv c_1\\ \\ ({\\rm mod}\\ m_1)\\\\x\\equiv c_2\\ \\ ({\\rm mod}\\ m_2)\\end{cases}$\n    \n  $\\ \\ \\ \\ \\ \\ \\ \\,$可以写成：$\\begin{cases}x= c_1+k_1m_1\\\\x=c_2+k_2 m_2\\end{cases}$\n    \n  $\\ \\ \\ \\ \\ \\ \\ \\,$联立式子：$x= c_1+k_1m_1=c_2+k_2 m_2$\n  $k_1m_1-k_2 m_2=c_2-c_1$\n  $\\ \\ \\ \\ \\ \\ \\ \\,$因为$m_1$和$m_2$互质，所以对于任意$c_2-c_1$的取值，肯定有一队合法解$k_1$，$k_2$.\n    \n  $\\ \\ \\ \\ \\ \\ \\ \\,$然而对于求形如$ax+by=c$的解，就是扩展欧几里得干的事情了:\n    \n  ``` cpp\n  void exgcd(int a,int b,int &d,int &x,int &y){\n\t    if(!b){d=a;x=1;y=0;return;}\n\t    exgcd(b,a%b,d,y,x);y-=x*(a/b);\n  }\n    ```\n  $\\ \\ \\ \\ \\ \\ \\ \\,$它求出的$x$，$y$，既是$ax+by=\\gcd (a,b)=1$的解。\n    \n  $\\ \\ \\ \\ \\ \\ \\ \\,$知道了$k'_1m_1+k'_2 (-m_2)=1$的解为$k'_1$，$k'_2$，那么就容易得到$k_1m_1-k_2 m_2=c_2-c_1$的解了:\n    \n  $k'_1m_1+k'_2 (-m_2)=1$\n    \n  $k'_1m_1-k'_2 m_2=1$\n    \n  $(k'_1(c_2-c_1))m_1-(k'_2(c_2-c_1)) m_2=c_2-c_1$\n    \n  $\\ \\ \\ \\ \\ \\ \\ \\,$既 $k_1=k'_1(c_2-c_1)$，$k_2=k'_2(c_2-c_1)$。\n    \n  $\\ \\ \\ \\ \\ \\ \\ \\,$现在我们带回去，就可以得到:\n  $x= c_1+(k'_1(c_2-c_1))m_1=c_2+(k'_2(c_2-c_2)) m_2$\n    \n  $\\ \\ \\ \\ \\ \\ \\ \\,$至此我们的答案就出来了，如果遇到很多的方程，我们不妨就这样合并下去，就出来了，不过问题来了，中国剩余定理（CRT）只适用于当$m$都互质时，适用范围比较小，下面我们马上引入扩展中国剩余定理（EXCRT），模板还是记它吧，就不贴中国剩余定理（CRT）的代码了。\n  \n  \n## 扩展中国剩余定理（EXCRT）\n\n  $\\ \\ \\ \\ \\ \\ \\ \\,$对于一个同余方程组，同样我们从简单的入手：\n    \n  $\\begin{cases}x\\equiv c_1\\ \\ ({\\rm mod}\\ m_1)\\\\x\\equiv c_2\\ \\ ({\\rm mod}\\ m_2)\\end{cases}$\n  \n  $\\ \\ \\ \\ \\ \\ \\ \\,$同理联立：\n  \n  $x= c_1+k_1m_1=c_2+k_2 m_2$\n  $k_1m_1-k_2 m_2=c_2-c_1$\n  \n  $\\ \\ \\ \\ \\ \\ \\ \\,$因为$m_1$与$m_2$不一定互质，所以不能直接用扩展欧几里得了，当然了，我们可以先把他化成互质的：\n  \n  $k_1\\frac{m_1}{\\gcd (m_1,m_2)}+k_2 \\frac{-m_2}{\\gcd (m_1,m_2)}=\\frac{c_2-c_1}{\\gcd (m_1,m_2)}$\n  \n  $\\ \\ \\ \\ \\ \\ \\ \\,$套入扩展欧几里得，得到特解:\n  \n  $k'_1\\frac{m_1}{\\gcd (m_1,m_2)}+k'_2 \\frac{-m_2}{\\gcd (m_1,m_2)}=1$\n  \n  $\\frac{k'_1(c_2-c_1)}{\\gcd (m_1,m_2)^2}m_1- \\frac{k'_2(c_2-c_1)}{\\gcd (m_1,m_2)^2}m_2=\\frac{c_2-c_1}{\\gcd (m_1,m_2)}$\n  \n  $\\frac{k'_1(c_2-c_1)}{\\gcd (m_1,m_2)}m_1- \\frac{k'_2(c_2-c_1)}{\\gcd (m_1,m_2)}m_2=c_2-c_1$\n  \n  $\\ \\ \\ \\ \\ \\ \\ \\,$带回去，就可以得到:\n  $x= c_1+\\frac{k'_1(c_2-c_1)}{\\gcd (m_1,m_2)}m_1=c_2+\\frac{k'_2(c_2-c_1)}{\\gcd (m_1,m_2)}m_2$\n  \n  $\\ \\ \\ \\ \\ \\ \\ \\,$那么这样就很显然了，依次合并下去就好了，答案就出来了，当上面的除法不能整除的时候，就是无解。\n  \n## 快速乘\n\n  $\\ \\ \\ \\ \\ \\ \\ \\,$这个东西对于CRT很重要，很容易在计算两个数的积的时候就爆了$\\rm long\\ long$，所以我们需要用到类似快速幂的做法，变算边取模：\n  \n  ``` cpp\n  long long multi(long long a,long long b,long long p){\n  \t  a=(a%p+p)%p;b=(b%p+p)%p;long long ans=0;\n  \t  for(;a;a>>=1,b=(b*2)%p)if(a&1)ans=(ans+b)%p;\n  \t  return ans;\n  }\n  ```\n  $\\ \\ \\ \\ \\ \\ \\ \\,$还有$O(1)$的：\n  ``` cpp\n   long long mul(long long a,long long b,long long mod){\n    \ta%=mod,b%=mod;\n    \treturn ((a*b-(long long)((long long)((long double)a/mod*b+1e-3)*mod))%mod+mod)%mod;\n   }\n  ```\n  \n\n## 最后给出完整模板\n  \n``` cpp\nint n;\nlong long x,y,lcm;\nlong long m[N],c[N];\nlong long multi(long long a,long long b,long long p){\n  a=(a%p+p)%p;b=(b%p+p)%p;long long ans=0;\n  for(;a;a>>=1,b=(b*2)%p)if(a&1)ans=(ans+b)%p;\n  return ans;\n}\nlong long exgcd(long long a,long long b,long long &x,long long &y){\n  if(!b){x=1,y=0;return a;}\n  long long val=exgcd(b,a%b,x,y);\n  long long t=x;x=y;y=t-a/b*y;return val;\n}\nlong long excrt(long long*m,long long*c,int n){\n  for(int i=1;i<n;i++){\n    long long val=exgcd(m[i],m[i+1],x,y);\n    lcm=m[i]/val*m[i+1];\n    m[i+1]=lcm;\n//    if((c[i+1]-c[i])%val)return -1;\n    val=multi(x,(c[i+1]-c[i])/val,lcm);\n    c[i+1]=(multi(m[i],val,lcm)+c[i])%lcm;\n  }\n  return (c[n]%m[n]+m[n])%m[n];\n}\n```\n\n\n    \n## 例题\n\n### [【P4777 【模板】扩展中国剩余定理（EXCRT）】](https://www.luogu.org/problemnew/show/P4777)\n  [$\\rm Imagine\\tt Orz$](https://www.luogu.org/space/show?uid=50167)大佬的模板，数据还是挺强的，卡了我很久。\n\n``` cpp\n\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#include<cstdlib>\n#include<cstring>\n#include<string>\n#include<queue>\n#include<map>\n#include<set>\n#include<stack>\n#include<cmath>\n#include<cctype>\nusing namespace std;\nconst int inf=0x7fffffff;\nconst double eps=1e-10;\nconst double pi=acos(-1.0);\n//char buf[1<<15],*S=buf,*T=buf;\n//char getch(){return S==T&&(T=(S=buf)+fread(buf,1,1<<15,stdin),S==T)?0:*S++;}\ninline long long read(){\n    long long x=0,f=1;char ch;ch=getchar();\n    while(ch<'0'||ch>'9'){if(ch=='-') f=0;ch=getchar();}\n    while(ch>='0'&&ch<='9'){x=(x<<1)+(x<<3)+(ch&15);ch=getchar();}\n    if(f)return x;else return -x;\n}\nint n;\nlong long x,y,lcm;\nlong long m[100055],c[100055];\nlong long multi(long long a,long long b,long long p){\n  a=(a%p+p)%p;b=(b%p+p)%p;long long ans=0;\n  for(;a;a>>=1,b=(b*2)%p)if(a&1)ans=(ans+b)%p;\n  return ans;\n}\nlong long exgcd(long long a,long long b,long long &x,long long &y){\n  if(!b){x=1,y=0;return a;}\n  long long val=exgcd(b,a%b,x,y);\n  long long t=x;x=y;y=t-a/b*y;return val;\n}\nlong long excrt(long long*m,long long*c,int n){\n  for(int i=1;i<n;i++){\n    long long val=exgcd(m[i],m[i+1],x,y);\n    lcm=m[i]/val*m[i+1];\n    m[i+1]=lcm;\n    val=multi(x,(c[i+1]-c[i])/val,lcm);\n    c[i+1]=(multi(m[i],val,lcm)+c[i])%lcm;\n  }\n  return (c[n]%m[n]+m[n])%m[n];\n}\nint main(){\n  n=(int)read();\n  for(int i=1;i<=n;i++)\n    m[i]=read(),c[i]=read();\n  long long ans=excrt(m,c,n);\n  printf(\"%lld\\n\",ans);\n  return 0;\n}\n```\n\n### [【P4774 [NOI2018]屠龙勇士】](https://www.luogu.org/problemnew/show/P4774)\n\n  $\\ \\ \\ \\ \\ \\ \\,$虽然当时当场就看出来是同余方程组了，不过还是因为快速乘坑了好久，还是做少了，太菜了。考点比较多，有点回忆不起来了，还是贴一下代码：\n\n``` cpp\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#include<cstdlib>\n#include<cstring>\n#include<string>\n#include<set>\n#include<map>\n#include<cmath>\nusing namespace std;\nconst long long inf=0x7fffffff;\nconst double eps=1e-10;\nconst double pi=acos(-1.0);\nconst int N=1e5+10;\ninline long long read(){\n    long long x=0,f=1;char ch;ch=getchar();\n    while(ch<'0'||ch>'9'){if(ch=='-') f=-1;ch=getchar();}\n    while(ch>='0'&&ch<='9'){x=x*10+ch-'0';ch=getchar();}\n    return x*f;\n}\nlong long n,m,T;\nlong long f[N],p[N],a[N],w[N],x[N];\nlong long gcd(long long a,long long b)\n{return b?gcd(b,a%b):a;}\nlong long exgcd(long long a,long long b,long long &x,long long &y){\n    if(!b){x=1,y=0;return a;}\n    long long res=exgcd(b,a%b,y,x);\n    y-=x*(a/b);\n    return res;\n}\nlong long inv(long long a,long long b){\n  long long x=0,y=0,g=exgcd(a,b,x,y);\n    if(g>1)return -1;\n    return (x+b)%b;\n}\nlong long fast_multi(long long a,long long b,long long p) {\n  a=(a%p+p)%p;\n    b=(b%p+p)%p;\n    long long ans=0;\n    for(;a;a>>=1,b=(b<<1)%p)\n    if(a&1LL)ans=(ans+b)%p;\n    return ans;\n}\nbool CRT(long long w1,long long p1,long long w2,long long p2,long long &w,long long &p){\n    long long x,y,z=w2-w1,g=exgcd(p1,p2,x,y);\n    if(z%g)return 0;\n    long long t=z/g;\n    x=fast_multi(x,t,p2/g);\n    p=p1/g*p2;\n    w=((w1+fast_multi(x,p1,p))%p+p)%p;\n    return 1;\n}\nlong long solve(){\n    for(int i=1;i<=n;i++){\n        long long g=gcd(a[i],gcd(f[i],p[i]));\n        f[i]/=g,p[i]/=g,a[i]/=g;\n        long long Inv=inv(f[i],p[i]);\n        if(Inv<0)return -1LL;\n        x[i]=fast_multi(a[i],Inv,p[i]);\n    }\n    long long W=x[1],P=p[1];\n    for(int i=2;i<=n;i++)\n    if(!CRT(W,P,x[i],p[i],W,P))return -1LL;\n    for(int i=1;i<=n;i++){\n        long long val=(a[i]+f[i]-1)/f[i];\n        if(val<=W)continue;\n        long long k=(val-W+P-1)/P;\n        W+=k*P;\n    }\n    return W;\n}\nmultiset<long long> S;\nint main()\n{\n// \tfreopen(\"dragon.in\",\"r\",stdin);\n//\tfreopen(\"dragon.out\",\"w\",stdout);\n    T=read();\n    while(T--){\n        n=read(),m=read();\n        for(int i=1;i<=n;i++)a[i]=read();\n        for(int i=1;i<=n;i++)p[i]=read();\n        for(int i=1;i<=n;i++)w[i]=read();\n        S.clear();\n        while(m--)S.insert(read());\n        for(int i=1;i<=n;i++){\n            multiset<long long> :: iterator p=S.begin();\n            if((*p)<a[i])p=--S.upper_bound(a[i]);\n            f[i]=*p,S.erase(p);\n            S.insert(w[i]);\n        }\n        printf(\"%lld\\n\",solve());\n    }\n  fclose(stdin);\n    fclose(stdout);\n    return 0;\n}\n```","source":"_posts/扩展中国剩余定理.md","raw":"---\ntitle: '扩展中国剩余定理'\ndate: 2018-12-29 14:42:34\ncategories:\n- 学习笔记\ntags:\n- OI\n- 数学\n- CRT\n- exCRT\nmathjax: true\n---\n\n$\\ \\ \\ \\ \\ \\ \\ \\,$关于扩展中国剩余定理及扩展中国剩余定理的复习笔记：\n\n<!-- more -->\n\n## 中国剩余定理（CRT）\n\n  $\\ \\ \\ \\ \\ \\ \\ \\,$中国剩余定理是求解如下同余方程组的算法：\n  \n  $\\begin{cases}x\\equiv c_1\\ \\ ({\\rm mod}\\ m_1)\\\\x\\equiv c_2\\ \\ ({\\rm mod}\\ m_2)\\\\x\\equiv c_3\\ \\ ({\\rm mod}\\ m_3)\\\\\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\cdots\\\\x\\equiv c_n\\ \\ ({\\rm mod}\\ m_n)\\end{cases}$\n  $\\ \\ \\ \\ \\ \\ \\ \\,$当$m$都互质时，我们使用中国剩余定理（CRT）。\n  \n  \n  $\\ \\ \\ \\ \\ \\ \\ \\,$对于一个同余方程组，我们从简单的入手：\n    \n  $\\begin{cases}x\\equiv c_1\\ \\ ({\\rm mod}\\ m_1)\\\\x\\equiv c_2\\ \\ ({\\rm mod}\\ m_2)\\end{cases}$\n    \n  $\\ \\ \\ \\ \\ \\ \\ \\,$可以写成：$\\begin{cases}x= c_1+k_1m_1\\\\x=c_2+k_2 m_2\\end{cases}$\n    \n  $\\ \\ \\ \\ \\ \\ \\ \\,$联立式子：$x= c_1+k_1m_1=c_2+k_2 m_2$\n  $k_1m_1-k_2 m_2=c_2-c_1$\n  $\\ \\ \\ \\ \\ \\ \\ \\,$因为$m_1$和$m_2$互质，所以对于任意$c_2-c_1$的取值，肯定有一队合法解$k_1$，$k_2$.\n    \n  $\\ \\ \\ \\ \\ \\ \\ \\,$然而对于求形如$ax+by=c$的解，就是扩展欧几里得干的事情了:\n    \n  ``` cpp\n  void exgcd(int a,int b,int &d,int &x,int &y){\n\t    if(!b){d=a;x=1;y=0;return;}\n\t    exgcd(b,a%b,d,y,x);y-=x*(a/b);\n  }\n    ```\n  $\\ \\ \\ \\ \\ \\ \\ \\,$它求出的$x$，$y$，既是$ax+by=\\gcd (a,b)=1$的解。\n    \n  $\\ \\ \\ \\ \\ \\ \\ \\,$知道了$k'_1m_1+k'_2 (-m_2)=1$的解为$k'_1$，$k'_2$，那么就容易得到$k_1m_1-k_2 m_2=c_2-c_1$的解了:\n    \n  $k'_1m_1+k'_2 (-m_2)=1$\n    \n  $k'_1m_1-k'_2 m_2=1$\n    \n  $(k'_1(c_2-c_1))m_1-(k'_2(c_2-c_1)) m_2=c_2-c_1$\n    \n  $\\ \\ \\ \\ \\ \\ \\ \\,$既 $k_1=k'_1(c_2-c_1)$，$k_2=k'_2(c_2-c_1)$。\n    \n  $\\ \\ \\ \\ \\ \\ \\ \\,$现在我们带回去，就可以得到:\n  $x= c_1+(k'_1(c_2-c_1))m_1=c_2+(k'_2(c_2-c_2)) m_2$\n    \n  $\\ \\ \\ \\ \\ \\ \\ \\,$至此我们的答案就出来了，如果遇到很多的方程，我们不妨就这样合并下去，就出来了，不过问题来了，中国剩余定理（CRT）只适用于当$m$都互质时，适用范围比较小，下面我们马上引入扩展中国剩余定理（EXCRT），模板还是记它吧，就不贴中国剩余定理（CRT）的代码了。\n  \n  \n## 扩展中国剩余定理（EXCRT）\n\n  $\\ \\ \\ \\ \\ \\ \\ \\,$对于一个同余方程组，同样我们从简单的入手：\n    \n  $\\begin{cases}x\\equiv c_1\\ \\ ({\\rm mod}\\ m_1)\\\\x\\equiv c_2\\ \\ ({\\rm mod}\\ m_2)\\end{cases}$\n  \n  $\\ \\ \\ \\ \\ \\ \\ \\,$同理联立：\n  \n  $x= c_1+k_1m_1=c_2+k_2 m_2$\n  $k_1m_1-k_2 m_2=c_2-c_1$\n  \n  $\\ \\ \\ \\ \\ \\ \\ \\,$因为$m_1$与$m_2$不一定互质，所以不能直接用扩展欧几里得了，当然了，我们可以先把他化成互质的：\n  \n  $k_1\\frac{m_1}{\\gcd (m_1,m_2)}+k_2 \\frac{-m_2}{\\gcd (m_1,m_2)}=\\frac{c_2-c_1}{\\gcd (m_1,m_2)}$\n  \n  $\\ \\ \\ \\ \\ \\ \\ \\,$套入扩展欧几里得，得到特解:\n  \n  $k'_1\\frac{m_1}{\\gcd (m_1,m_2)}+k'_2 \\frac{-m_2}{\\gcd (m_1,m_2)}=1$\n  \n  $\\frac{k'_1(c_2-c_1)}{\\gcd (m_1,m_2)^2}m_1- \\frac{k'_2(c_2-c_1)}{\\gcd (m_1,m_2)^2}m_2=\\frac{c_2-c_1}{\\gcd (m_1,m_2)}$\n  \n  $\\frac{k'_1(c_2-c_1)}{\\gcd (m_1,m_2)}m_1- \\frac{k'_2(c_2-c_1)}{\\gcd (m_1,m_2)}m_2=c_2-c_1$\n  \n  $\\ \\ \\ \\ \\ \\ \\ \\,$带回去，就可以得到:\n  $x= c_1+\\frac{k'_1(c_2-c_1)}{\\gcd (m_1,m_2)}m_1=c_2+\\frac{k'_2(c_2-c_1)}{\\gcd (m_1,m_2)}m_2$\n  \n  $\\ \\ \\ \\ \\ \\ \\ \\,$那么这样就很显然了，依次合并下去就好了，答案就出来了，当上面的除法不能整除的时候，就是无解。\n  \n## 快速乘\n\n  $\\ \\ \\ \\ \\ \\ \\ \\,$这个东西对于CRT很重要，很容易在计算两个数的积的时候就爆了$\\rm long\\ long$，所以我们需要用到类似快速幂的做法，变算边取模：\n  \n  ``` cpp\n  long long multi(long long a,long long b,long long p){\n  \t  a=(a%p+p)%p;b=(b%p+p)%p;long long ans=0;\n  \t  for(;a;a>>=1,b=(b*2)%p)if(a&1)ans=(ans+b)%p;\n  \t  return ans;\n  }\n  ```\n  $\\ \\ \\ \\ \\ \\ \\ \\,$还有$O(1)$的：\n  ``` cpp\n   long long mul(long long a,long long b,long long mod){\n    \ta%=mod,b%=mod;\n    \treturn ((a*b-(long long)((long long)((long double)a/mod*b+1e-3)*mod))%mod+mod)%mod;\n   }\n  ```\n  \n\n## 最后给出完整模板\n  \n``` cpp\nint n;\nlong long x,y,lcm;\nlong long m[N],c[N];\nlong long multi(long long a,long long b,long long p){\n  a=(a%p+p)%p;b=(b%p+p)%p;long long ans=0;\n  for(;a;a>>=1,b=(b*2)%p)if(a&1)ans=(ans+b)%p;\n  return ans;\n}\nlong long exgcd(long long a,long long b,long long &x,long long &y){\n  if(!b){x=1,y=0;return a;}\n  long long val=exgcd(b,a%b,x,y);\n  long long t=x;x=y;y=t-a/b*y;return val;\n}\nlong long excrt(long long*m,long long*c,int n){\n  for(int i=1;i<n;i++){\n    long long val=exgcd(m[i],m[i+1],x,y);\n    lcm=m[i]/val*m[i+1];\n    m[i+1]=lcm;\n//    if((c[i+1]-c[i])%val)return -1;\n    val=multi(x,(c[i+1]-c[i])/val,lcm);\n    c[i+1]=(multi(m[i],val,lcm)+c[i])%lcm;\n  }\n  return (c[n]%m[n]+m[n])%m[n];\n}\n```\n\n\n    \n## 例题\n\n### [【P4777 【模板】扩展中国剩余定理（EXCRT）】](https://www.luogu.org/problemnew/show/P4777)\n  [$\\rm Imagine\\tt Orz$](https://www.luogu.org/space/show?uid=50167)大佬的模板，数据还是挺强的，卡了我很久。\n\n``` cpp\n\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#include<cstdlib>\n#include<cstring>\n#include<string>\n#include<queue>\n#include<map>\n#include<set>\n#include<stack>\n#include<cmath>\n#include<cctype>\nusing namespace std;\nconst int inf=0x7fffffff;\nconst double eps=1e-10;\nconst double pi=acos(-1.0);\n//char buf[1<<15],*S=buf,*T=buf;\n//char getch(){return S==T&&(T=(S=buf)+fread(buf,1,1<<15,stdin),S==T)?0:*S++;}\ninline long long read(){\n    long long x=0,f=1;char ch;ch=getchar();\n    while(ch<'0'||ch>'9'){if(ch=='-') f=0;ch=getchar();}\n    while(ch>='0'&&ch<='9'){x=(x<<1)+(x<<3)+(ch&15);ch=getchar();}\n    if(f)return x;else return -x;\n}\nint n;\nlong long x,y,lcm;\nlong long m[100055],c[100055];\nlong long multi(long long a,long long b,long long p){\n  a=(a%p+p)%p;b=(b%p+p)%p;long long ans=0;\n  for(;a;a>>=1,b=(b*2)%p)if(a&1)ans=(ans+b)%p;\n  return ans;\n}\nlong long exgcd(long long a,long long b,long long &x,long long &y){\n  if(!b){x=1,y=0;return a;}\n  long long val=exgcd(b,a%b,x,y);\n  long long t=x;x=y;y=t-a/b*y;return val;\n}\nlong long excrt(long long*m,long long*c,int n){\n  for(int i=1;i<n;i++){\n    long long val=exgcd(m[i],m[i+1],x,y);\n    lcm=m[i]/val*m[i+1];\n    m[i+1]=lcm;\n    val=multi(x,(c[i+1]-c[i])/val,lcm);\n    c[i+1]=(multi(m[i],val,lcm)+c[i])%lcm;\n  }\n  return (c[n]%m[n]+m[n])%m[n];\n}\nint main(){\n  n=(int)read();\n  for(int i=1;i<=n;i++)\n    m[i]=read(),c[i]=read();\n  long long ans=excrt(m,c,n);\n  printf(\"%lld\\n\",ans);\n  return 0;\n}\n```\n\n### [【P4774 [NOI2018]屠龙勇士】](https://www.luogu.org/problemnew/show/P4774)\n\n  $\\ \\ \\ \\ \\ \\ \\,$虽然当时当场就看出来是同余方程组了，不过还是因为快速乘坑了好久，还是做少了，太菜了。考点比较多，有点回忆不起来了，还是贴一下代码：\n\n``` cpp\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#include<cstdlib>\n#include<cstring>\n#include<string>\n#include<set>\n#include<map>\n#include<cmath>\nusing namespace std;\nconst long long inf=0x7fffffff;\nconst double eps=1e-10;\nconst double pi=acos(-1.0);\nconst int N=1e5+10;\ninline long long read(){\n    long long x=0,f=1;char ch;ch=getchar();\n    while(ch<'0'||ch>'9'){if(ch=='-') f=-1;ch=getchar();}\n    while(ch>='0'&&ch<='9'){x=x*10+ch-'0';ch=getchar();}\n    return x*f;\n}\nlong long n,m,T;\nlong long f[N],p[N],a[N],w[N],x[N];\nlong long gcd(long long a,long long b)\n{return b?gcd(b,a%b):a;}\nlong long exgcd(long long a,long long b,long long &x,long long &y){\n    if(!b){x=1,y=0;return a;}\n    long long res=exgcd(b,a%b,y,x);\n    y-=x*(a/b);\n    return res;\n}\nlong long inv(long long a,long long b){\n  long long x=0,y=0,g=exgcd(a,b,x,y);\n    if(g>1)return -1;\n    return (x+b)%b;\n}\nlong long fast_multi(long long a,long long b,long long p) {\n  a=(a%p+p)%p;\n    b=(b%p+p)%p;\n    long long ans=0;\n    for(;a;a>>=1,b=(b<<1)%p)\n    if(a&1LL)ans=(ans+b)%p;\n    return ans;\n}\nbool CRT(long long w1,long long p1,long long w2,long long p2,long long &w,long long &p){\n    long long x,y,z=w2-w1,g=exgcd(p1,p2,x,y);\n    if(z%g)return 0;\n    long long t=z/g;\n    x=fast_multi(x,t,p2/g);\n    p=p1/g*p2;\n    w=((w1+fast_multi(x,p1,p))%p+p)%p;\n    return 1;\n}\nlong long solve(){\n    for(int i=1;i<=n;i++){\n        long long g=gcd(a[i],gcd(f[i],p[i]));\n        f[i]/=g,p[i]/=g,a[i]/=g;\n        long long Inv=inv(f[i],p[i]);\n        if(Inv<0)return -1LL;\n        x[i]=fast_multi(a[i],Inv,p[i]);\n    }\n    long long W=x[1],P=p[1];\n    for(int i=2;i<=n;i++)\n    if(!CRT(W,P,x[i],p[i],W,P))return -1LL;\n    for(int i=1;i<=n;i++){\n        long long val=(a[i]+f[i]-1)/f[i];\n        if(val<=W)continue;\n        long long k=(val-W+P-1)/P;\n        W+=k*P;\n    }\n    return W;\n}\nmultiset<long long> S;\nint main()\n{\n// \tfreopen(\"dragon.in\",\"r\",stdin);\n//\tfreopen(\"dragon.out\",\"w\",stdout);\n    T=read();\n    while(T--){\n        n=read(),m=read();\n        for(int i=1;i<=n;i++)a[i]=read();\n        for(int i=1;i<=n;i++)p[i]=read();\n        for(int i=1;i<=n;i++)w[i]=read();\n        S.clear();\n        while(m--)S.insert(read());\n        for(int i=1;i<=n;i++){\n            multiset<long long> :: iterator p=S.begin();\n            if((*p)<a[i])p=--S.upper_bound(a[i]);\n            f[i]=*p,S.erase(p);\n            S.insert(w[i]);\n        }\n        printf(\"%lld\\n\",solve());\n    }\n  fclose(stdin);\n    fclose(stdout);\n    return 0;\n}\n```","slug":"扩展中国剩余定理","published":1,"updated":"2022-02-14T03:38:58.616Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0i63w68001au4gb3z6jghi8","content":"<p>$\\ \\ \\ \\ \\ \\ \\ \\,$关于扩展中国剩余定理及扩展中国剩余定理的复习笔记：</p>\n<span id=\"more\"></span>\n<h2 id=\"中国剩余定理（CRT）\"><a href=\"#中国剩余定理（CRT）\" class=\"headerlink\" title=\"中国剩余定理（CRT）\"></a>中国剩余定理（CRT）</h2><p>  $\\ \\ \\ \\ \\ \\ \\ \\,$中国剩余定理是求解如下同余方程组的算法：</p>\n<p>  $\\begin{cases}x\\equiv c_1\\ \\ ({\\rm mod}\\ m_1)\\\\x\\equiv c_2\\ \\ ({\\rm mod}\\ m_2)\\\\x\\equiv c_3\\ \\ ({\\rm mod}\\ m_3)\\\\\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\cdots\\\\x\\equiv c_n\\ \\ ({\\rm mod}\\ m_n)\\end{cases}$<br>  $\\ \\ \\ \\ \\ \\ \\ \\,$当$m$都互质时，我们使用中国剩余定理（CRT）。</p>\n<p>  $\\ \\ \\ \\ \\ \\ \\ \\,$对于一个同余方程组，我们从简单的入手：</p>\n<p>  $\\begin{cases}x\\equiv c_1\\ \\ ({\\rm mod}\\ m_1)\\\\x\\equiv c_2\\ \\ ({\\rm mod}\\ m_2)\\end{cases}$</p>\n<p>  $\\ \\ \\ \\ \\ \\ \\ \\,$可以写成：$\\begin{cases}x= c_1+k_1m_1\\\\x=c_2+k_2 m_2\\end{cases}$</p>\n<p>  $\\ \\ \\ \\ \\ \\ \\ \\,$联立式子：$x= c_1+k_1m_1=c_2+k_2 m_2$<br>  $k_1m_1-k_2 m_2=c_2-c_1$<br>  $\\ \\ \\ \\ \\ \\ \\ \\,$因为$m_1$和$m_2$互质，所以对于任意$c_2-c_1$的取值，肯定有一队合法解$k_1$，$k_2$.</p>\n<p>  $\\ \\ \\ \\ \\ \\ \\ \\,$然而对于求形如$ax+by=c$的解，就是扩展欧几里得干的事情了:</p>\n  <figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">exgcd</span><span class=\"params\">(<span class=\"type\">int</span> a,<span class=\"type\">int</span> b,<span class=\"type\">int</span> &amp;d,<span class=\"type\">int</span> &amp;x,<span class=\"type\">int</span> &amp;y)</span></span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">if</span>(!b)&#123;d=a;x=<span class=\"number\">1</span>;y=<span class=\"number\">0</span>;<span class=\"keyword\">return</span>;&#125;</span><br><span class=\"line\">   <span class=\"built_in\">exgcd</span>(b,a%b,d,y,x);y-=x*(a/b);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>  $\\ \\ \\ \\ \\ \\ \\ \\,$它求出的$x$，$y$，既是$ax+by=\\gcd (a,b)=1$的解。</p>\n<p>  $\\ \\ \\ \\ \\ \\ \\ \\,$知道了$k’_1m_1+k’_2 (-m_2)=1$的解为$k’_1$，$k’_2$，那么就容易得到$k_1m_1-k_2 m_2=c_2-c_1$的解了:</p>\n<p>  $k’_1m_1+k’_2 (-m_2)=1$</p>\n<p>  $k’_1m_1-k’_2 m_2=1$</p>\n<p>  $(k’_1(c_2-c_1))m_1-(k’_2(c_2-c_1)) m_2=c_2-c_1$</p>\n<p>  $\\ \\ \\ \\ \\ \\ \\ \\,$既 $k_1=k’_1(c_2-c_1)$，$k_2=k’_2(c_2-c_1)$。</p>\n<p>  $\\ \\ \\ \\ \\ \\ \\ \\,$现在我们带回去，就可以得到:<br>  $x= c_1+(k’_1(c_2-c_1))m_1=c_2+(k’_2(c_2-c_2)) m_2$</p>\n<p>  $\\ \\ \\ \\ \\ \\ \\ \\,$至此我们的答案就出来了，如果遇到很多的方程，我们不妨就这样合并下去，就出来了，不过问题来了，中国剩余定理（CRT）只适用于当$m$都互质时，适用范围比较小，下面我们马上引入扩展中国剩余定理（EXCRT），模板还是记它吧，就不贴中国剩余定理（CRT）的代码了。</p>\n<h2 id=\"扩展中国剩余定理（EXCRT）\"><a href=\"#扩展中国剩余定理（EXCRT）\" class=\"headerlink\" title=\"扩展中国剩余定理（EXCRT）\"></a>扩展中国剩余定理（EXCRT）</h2><p>  $\\ \\ \\ \\ \\ \\ \\ \\,$对于一个同余方程组，同样我们从简单的入手：</p>\n<p>  $\\begin{cases}x\\equiv c_1\\ \\ ({\\rm mod}\\ m_1)\\\\x\\equiv c_2\\ \\ ({\\rm mod}\\ m_2)\\end{cases}$</p>\n<p>  $\\ \\ \\ \\ \\ \\ \\ \\,$同理联立：</p>\n<p>  $x= c_1+k_1m_1=c_2+k_2 m_2$<br>  $k_1m_1-k_2 m_2=c_2-c_1$</p>\n<p>  $\\ \\ \\ \\ \\ \\ \\ \\,$因为$m_1$与$m_2$不一定互质，所以不能直接用扩展欧几里得了，当然了，我们可以先把他化成互质的：</p>\n<p>  $k_1\\frac{m_1}{\\gcd (m_1,m_2)}+k_2 \\frac{-m_2}{\\gcd (m_1,m_2)}=\\frac{c_2-c_1}{\\gcd (m_1,m_2)}$</p>\n<p>  $\\ \\ \\ \\ \\ \\ \\ \\,$套入扩展欧几里得，得到特解:</p>\n<p>  $k’_1\\frac{m_1}{\\gcd (m_1,m_2)}+k’_2 \\frac{-m_2}{\\gcd (m_1,m_2)}=1$</p>\n<p>  $\\frac{k’_1(c_2-c_1)}{\\gcd (m_1,m_2)^2}m_1- \\frac{k’_2(c_2-c_1)}{\\gcd (m_1,m_2)^2}m_2=\\frac{c_2-c_1}{\\gcd (m_1,m_2)}$</p>\n<p>  $\\frac{k’_1(c_2-c_1)}{\\gcd (m_1,m_2)}m_1- \\frac{k’_2(c_2-c_1)}{\\gcd (m_1,m_2)}m_2=c_2-c_1$</p>\n<p>  $\\ \\ \\ \\ \\ \\ \\ \\,$带回去，就可以得到:<br>  $x= c_1+\\frac{k’_1(c_2-c_1)}{\\gcd (m_1,m_2)}m_1=c_2+\\frac{k’_2(c_2-c_1)}{\\gcd (m_1,m_2)}m_2$</p>\n<p>  $\\ \\ \\ \\ \\ \\ \\ \\,$那么这样就很显然了，依次合并下去就好了，答案就出来了，当上面的除法不能整除的时候，就是无解。</p>\n<h2 id=\"快速乘\"><a href=\"#快速乘\" class=\"headerlink\" title=\"快速乘\"></a>快速乘</h2><p>  $\\ \\ \\ \\ \\ \\ \\ \\,$这个东西对于CRT很重要，很容易在计算两个数的积的时候就爆了$\\rm long\\ long$，所以我们需要用到类似快速幂的做法，变算边取模：</p>\n  <figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"title\">multi</span><span class=\"params\">(<span class=\"type\">long</span> <span class=\"type\">long</span> a,<span class=\"type\">long</span> <span class=\"type\">long</span> b,<span class=\"type\">long</span> <span class=\"type\">long</span> p)</span></span>&#123;</span><br><span class=\"line\">\t  a=(a%p+p)%p;b=(b%p+p)%p;<span class=\"type\">long</span> <span class=\"type\">long</span> ans=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t  <span class=\"keyword\">for</span>(;a;a&gt;&gt;=<span class=\"number\">1</span>,b=(b*<span class=\"number\">2</span>)%p)<span class=\"keyword\">if</span>(a&amp;<span class=\"number\">1</span>)ans=(ans+b)%p;</span><br><span class=\"line\">\t  <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>  $\\ \\ \\ \\ \\ \\ \\ \\,$还有$O(1)$的：<br>  <figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"title\">mul</span><span class=\"params\">(<span class=\"type\">long</span> <span class=\"type\">long</span> a,<span class=\"type\">long</span> <span class=\"type\">long</span> b,<span class=\"type\">long</span> <span class=\"type\">long</span> mod)</span></span>&#123;</span><br><span class=\"line\"> \ta%=mod,b%=mod;</span><br><span class=\"line\"> \t<span class=\"keyword\">return</span> ((a*b-(<span class=\"type\">long</span> <span class=\"type\">long</span>)((<span class=\"type\">long</span> <span class=\"type\">long</span>)((<span class=\"type\">long</span> <span class=\"type\">double</span>)a/mod*b+<span class=\"number\">1e-3</span>)*mod))%mod+mod)%mod;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"最后给出完整模板\"><a href=\"#最后给出完整模板\" class=\"headerlink\" title=\"最后给出完整模板\"></a>最后给出完整模板</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> n;</span><br><span class=\"line\"><span class=\"type\">long</span> <span class=\"type\">long</span> x,y,lcm;</span><br><span class=\"line\"><span class=\"type\">long</span> <span class=\"type\">long</span> m[N],c[N];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"title\">multi</span><span class=\"params\">(<span class=\"type\">long</span> <span class=\"type\">long</span> a,<span class=\"type\">long</span> <span class=\"type\">long</span> b,<span class=\"type\">long</span> <span class=\"type\">long</span> p)</span></span>&#123;</span><br><span class=\"line\">  a=(a%p+p)%p;b=(b%p+p)%p;<span class=\"type\">long</span> <span class=\"type\">long</span> ans=<span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(;a;a&gt;&gt;=<span class=\"number\">1</span>,b=(b*<span class=\"number\">2</span>)%p)<span class=\"keyword\">if</span>(a&amp;<span class=\"number\">1</span>)ans=(ans+b)%p;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"title\">exgcd</span><span class=\"params\">(<span class=\"type\">long</span> <span class=\"type\">long</span> a,<span class=\"type\">long</span> <span class=\"type\">long</span> b,<span class=\"type\">long</span> <span class=\"type\">long</span> &amp;x,<span class=\"type\">long</span> <span class=\"type\">long</span> &amp;y)</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(!b)&#123;x=<span class=\"number\">1</span>,y=<span class=\"number\">0</span>;<span class=\"keyword\">return</span> a;&#125;</span><br><span class=\"line\">  <span class=\"type\">long</span> <span class=\"type\">long</span> val=<span class=\"built_in\">exgcd</span>(b,a%b,x,y);</span><br><span class=\"line\">  <span class=\"type\">long</span> <span class=\"type\">long</span> t=x;x=y;y=t-a/b*y;<span class=\"keyword\">return</span> val;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"title\">excrt</span><span class=\"params\">(<span class=\"type\">long</span> <span class=\"type\">long</span>*m,<span class=\"type\">long</span> <span class=\"type\">long</span>*c,<span class=\"type\">int</span> n)</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;n;i++)&#123;</span><br><span class=\"line\">    <span class=\"type\">long</span> <span class=\"type\">long</span> val=<span class=\"built_in\">exgcd</span>(m[i],m[i+<span class=\"number\">1</span>],x,y);</span><br><span class=\"line\">    lcm=m[i]/val*m[i+<span class=\"number\">1</span>];</span><br><span class=\"line\">    m[i+<span class=\"number\">1</span>]=lcm;</span><br><span class=\"line\"><span class=\"comment\">//    if((c[i+1]-c[i])%val)return -1;</span></span><br><span class=\"line\">    val=<span class=\"built_in\">multi</span>(x,(c[i+<span class=\"number\">1</span>]-c[i])/val,lcm);</span><br><span class=\"line\">    c[i+<span class=\"number\">1</span>]=(<span class=\"built_in\">multi</span>(m[i],val,lcm)+c[i])%lcm;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (c[n]%m[n]+m[n])%m[n];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"例题\"><a href=\"#例题\" class=\"headerlink\" title=\"例题\"></a>例题</h2><h3 id=\"【P4777-【模板】扩展中国剩余定理（EXCRT）】\"><a href=\"#【P4777-【模板】扩展中国剩余定理（EXCRT）】\" class=\"headerlink\" title=\"【P4777 【模板】扩展中国剩余定理（EXCRT）】\"></a><a href=\"https://www.luogu.org/problemnew/show/P4777\">【P4777 【模板】扩展中国剩余定理（EXCRT）】</a></h3><p>  <a href=\"https://www.luogu.org/space/show?uid=50167\">$\\rm Imagine\\tt Orz$</a>大佬的模板，数据还是挺强的，卡了我很久。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdlib&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;map&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;set&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;stack&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cctype&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> inf=<span class=\"number\">0x7fffffff</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">double</span> eps=<span class=\"number\">1e-10</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">double</span> pi=<span class=\"built_in\">acos</span>(<span class=\"number\">-1.0</span>);</span><br><span class=\"line\"><span class=\"comment\">//char buf[1&lt;&lt;15],*S=buf,*T=buf;</span></span><br><span class=\"line\"><span class=\"comment\">//char getch()&#123;return S==T&amp;&amp;(T=(S=buf)+fread(buf,1,1&lt;&lt;15,stdin),S==T)?0:*S++;&#125;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"title\">read</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">long</span> <span class=\"type\">long</span> x=<span class=\"number\">0</span>,f=<span class=\"number\">1</span>;<span class=\"type\">char</span> ch;ch=<span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(ch&lt;<span class=\"string\">&#x27;0&#x27;</span>||ch&gt;<span class=\"string\">&#x27;9&#x27;</span>)&#123;<span class=\"keyword\">if</span>(ch==<span class=\"string\">&#x27;-&#x27;</span>) f=<span class=\"number\">0</span>;ch=<span class=\"built_in\">getchar</span>();&#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(ch&gt;=<span class=\"string\">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class=\"string\">&#x27;9&#x27;</span>)&#123;x=(x&lt;&lt;<span class=\"number\">1</span>)+(x&lt;&lt;<span class=\"number\">3</span>)+(ch&amp;<span class=\"number\">15</span>);ch=<span class=\"built_in\">getchar</span>();&#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(f)<span class=\"keyword\">return</span> x;<span class=\"keyword\">else</span> <span class=\"keyword\">return</span> -x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> n;</span><br><span class=\"line\"><span class=\"type\">long</span> <span class=\"type\">long</span> x,y,lcm;</span><br><span class=\"line\"><span class=\"type\">long</span> <span class=\"type\">long</span> m[<span class=\"number\">100055</span>],c[<span class=\"number\">100055</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"title\">multi</span><span class=\"params\">(<span class=\"type\">long</span> <span class=\"type\">long</span> a,<span class=\"type\">long</span> <span class=\"type\">long</span> b,<span class=\"type\">long</span> <span class=\"type\">long</span> p)</span></span>&#123;</span><br><span class=\"line\">  a=(a%p+p)%p;b=(b%p+p)%p;<span class=\"type\">long</span> <span class=\"type\">long</span> ans=<span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(;a;a&gt;&gt;=<span class=\"number\">1</span>,b=(b*<span class=\"number\">2</span>)%p)<span class=\"keyword\">if</span>(a&amp;<span class=\"number\">1</span>)ans=(ans+b)%p;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"title\">exgcd</span><span class=\"params\">(<span class=\"type\">long</span> <span class=\"type\">long</span> a,<span class=\"type\">long</span> <span class=\"type\">long</span> b,<span class=\"type\">long</span> <span class=\"type\">long</span> &amp;x,<span class=\"type\">long</span> <span class=\"type\">long</span> &amp;y)</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(!b)&#123;x=<span class=\"number\">1</span>,y=<span class=\"number\">0</span>;<span class=\"keyword\">return</span> a;&#125;</span><br><span class=\"line\">  <span class=\"type\">long</span> <span class=\"type\">long</span> val=<span class=\"built_in\">exgcd</span>(b,a%b,x,y);</span><br><span class=\"line\">  <span class=\"type\">long</span> <span class=\"type\">long</span> t=x;x=y;y=t-a/b*y;<span class=\"keyword\">return</span> val;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"title\">excrt</span><span class=\"params\">(<span class=\"type\">long</span> <span class=\"type\">long</span>*m,<span class=\"type\">long</span> <span class=\"type\">long</span>*c,<span class=\"type\">int</span> n)</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;n;i++)&#123;</span><br><span class=\"line\">    <span class=\"type\">long</span> <span class=\"type\">long</span> val=<span class=\"built_in\">exgcd</span>(m[i],m[i+<span class=\"number\">1</span>],x,y);</span><br><span class=\"line\">    lcm=m[i]/val*m[i+<span class=\"number\">1</span>];</span><br><span class=\"line\">    m[i+<span class=\"number\">1</span>]=lcm;</span><br><span class=\"line\">    val=<span class=\"built_in\">multi</span>(x,(c[i+<span class=\"number\">1</span>]-c[i])/val,lcm);</span><br><span class=\"line\">    c[i+<span class=\"number\">1</span>]=(<span class=\"built_in\">multi</span>(m[i],val,lcm)+c[i])%lcm;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (c[n]%m[n]+m[n])%m[n];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">  n=(<span class=\"type\">int</span>)<span class=\"built_in\">read</span>();</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)</span><br><span class=\"line\">    m[i]=<span class=\"built_in\">read</span>(),c[i]=<span class=\"built_in\">read</span>();</span><br><span class=\"line\">  <span class=\"type\">long</span> <span class=\"type\">long</span> ans=<span class=\"built_in\">excrt</span>(m,c,n);</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%lld\\n&quot;</span>,ans);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"【P4774-NOI2018-屠龙勇士】\"><a href=\"#【P4774-NOI2018-屠龙勇士】\" class=\"headerlink\" title=\"【P4774 [NOI2018]屠龙勇士】\"></a><a href=\"https://www.luogu.org/problemnew/show/P4774\">【P4774 [NOI2018]屠龙勇士】</a></h3><p>  $\\ \\ \\ \\ \\ \\ \\,$虽然当时当场就看出来是同余方程组了，不过还是因为快速乘坑了好久，还是做少了，太菜了。考点比较多，有点回忆不起来了，还是贴一下代码：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdlib&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;set&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;map&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">long</span> <span class=\"type\">long</span> inf=<span class=\"number\">0x7fffffff</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">double</span> eps=<span class=\"number\">1e-10</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">double</span> pi=<span class=\"built_in\">acos</span>(<span class=\"number\">-1.0</span>);</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">1e5</span>+<span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"title\">read</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">long</span> <span class=\"type\">long</span> x=<span class=\"number\">0</span>,f=<span class=\"number\">1</span>;<span class=\"type\">char</span> ch;ch=<span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(ch&lt;<span class=\"string\">&#x27;0&#x27;</span>||ch&gt;<span class=\"string\">&#x27;9&#x27;</span>)&#123;<span class=\"keyword\">if</span>(ch==<span class=\"string\">&#x27;-&#x27;</span>) f=<span class=\"number\">-1</span>;ch=<span class=\"built_in\">getchar</span>();&#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(ch&gt;=<span class=\"string\">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class=\"string\">&#x27;9&#x27;</span>)&#123;x=x*<span class=\"number\">10</span>+ch-<span class=\"string\">&#x27;0&#x27;</span>;ch=<span class=\"built_in\">getchar</span>();&#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x*f;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">long</span> <span class=\"type\">long</span> n,m,T;</span><br><span class=\"line\"><span class=\"type\">long</span> <span class=\"type\">long</span> f[N],p[N],a[N],w[N],x[N];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"title\">gcd</span><span class=\"params\">(<span class=\"type\">long</span> <span class=\"type\">long</span> a,<span class=\"type\">long</span> <span class=\"type\">long</span> b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;<span class=\"keyword\">return</span> b?<span class=\"built_in\">gcd</span>(b,a%b):a;&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"title\">exgcd</span><span class=\"params\">(<span class=\"type\">long</span> <span class=\"type\">long</span> a,<span class=\"type\">long</span> <span class=\"type\">long</span> b,<span class=\"type\">long</span> <span class=\"type\">long</span> &amp;x,<span class=\"type\">long</span> <span class=\"type\">long</span> &amp;y)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!b)&#123;x=<span class=\"number\">1</span>,y=<span class=\"number\">0</span>;<span class=\"keyword\">return</span> a;&#125;</span><br><span class=\"line\">    <span class=\"type\">long</span> <span class=\"type\">long</span> res=<span class=\"built_in\">exgcd</span>(b,a%b,y,x);</span><br><span class=\"line\">    y-=x*(a/b);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"title\">inv</span><span class=\"params\">(<span class=\"type\">long</span> <span class=\"type\">long</span> a,<span class=\"type\">long</span> <span class=\"type\">long</span> b)</span></span>&#123;</span><br><span class=\"line\">  <span class=\"type\">long</span> <span class=\"type\">long</span> x=<span class=\"number\">0</span>,y=<span class=\"number\">0</span>,g=<span class=\"built_in\">exgcd</span>(a,b,x,y);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(g&gt;<span class=\"number\">1</span>)<span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (x+b)%b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"title\">fast_multi</span><span class=\"params\">(<span class=\"type\">long</span> <span class=\"type\">long</span> a,<span class=\"type\">long</span> <span class=\"type\">long</span> b,<span class=\"type\">long</span> <span class=\"type\">long</span> p)</span> </span>&#123;</span><br><span class=\"line\">  a=(a%p+p)%p;</span><br><span class=\"line\">    b=(b%p+p)%p;</span><br><span class=\"line\">    <span class=\"type\">long</span> <span class=\"type\">long</span> ans=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(;a;a&gt;&gt;=<span class=\"number\">1</span>,b=(b&lt;&lt;<span class=\"number\">1</span>)%p)</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(a&amp;<span class=\"number\">1LL</span>)ans=(ans+b)%p;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">CRT</span><span class=\"params\">(<span class=\"type\">long</span> <span class=\"type\">long</span> w1,<span class=\"type\">long</span> <span class=\"type\">long</span> p1,<span class=\"type\">long</span> <span class=\"type\">long</span> w2,<span class=\"type\">long</span> <span class=\"type\">long</span> p2,<span class=\"type\">long</span> <span class=\"type\">long</span> &amp;w,<span class=\"type\">long</span> <span class=\"type\">long</span> &amp;p)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">long</span> <span class=\"type\">long</span> x,y,z=w2-w1,g=<span class=\"built_in\">exgcd</span>(p1,p2,x,y);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(z%g)<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">long</span> <span class=\"type\">long</span> t=z/g;</span><br><span class=\"line\">    x=<span class=\"built_in\">fast_multi</span>(x,t,p2/g);</span><br><span class=\"line\">    p=p1/g*p2;</span><br><span class=\"line\">    w=((w1+<span class=\"built_in\">fast_multi</span>(x,p1,p))%p+p)%p;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"title\">solve</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">        <span class=\"type\">long</span> <span class=\"type\">long</span> g=<span class=\"built_in\">gcd</span>(a[i],<span class=\"built_in\">gcd</span>(f[i],p[i]));</span><br><span class=\"line\">        f[i]/=g,p[i]/=g,a[i]/=g;</span><br><span class=\"line\">        <span class=\"type\">long</span> <span class=\"type\">long</span> Inv=<span class=\"built_in\">inv</span>(f[i],p[i]);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(Inv&lt;<span class=\"number\">0</span>)<span class=\"keyword\">return</span> <span class=\"number\">-1LL</span>;</span><br><span class=\"line\">        x[i]=<span class=\"built_in\">fast_multi</span>(a[i],Inv,p[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">long</span> <span class=\"type\">long</span> W=x[<span class=\"number\">1</span>],P=p[<span class=\"number\">1</span>];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">2</span>;i&lt;=n;i++)</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!<span class=\"built_in\">CRT</span>(W,P,x[i],p[i],W,P))<span class=\"keyword\">return</span> <span class=\"number\">-1LL</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">        <span class=\"type\">long</span> <span class=\"type\">long</span> val=(a[i]+f[i]<span class=\"number\">-1</span>)/f[i];</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(val&lt;=W)<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        <span class=\"type\">long</span> <span class=\"type\">long</span> k=(val-W+P<span class=\"number\">-1</span>)/P;</span><br><span class=\"line\">        W+=k*P;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> W;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">multiset&lt;<span class=\"type\">long</span> <span class=\"type\">long</span>&gt; S;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"><span class=\"comment\">// \tfreopen(&quot;dragon.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class=\"line\"><span class=\"comment\">//\tfreopen(&quot;dragon.out&quot;,&quot;w&quot;,stdout);</span></span><br><span class=\"line\">    T=<span class=\"built_in\">read</span>();</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(T--)&#123;</span><br><span class=\"line\">        n=<span class=\"built_in\">read</span>(),m=<span class=\"built_in\">read</span>();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)a[i]=<span class=\"built_in\">read</span>();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)p[i]=<span class=\"built_in\">read</span>();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)w[i]=<span class=\"built_in\">read</span>();</span><br><span class=\"line\">        S.<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(m--)S.<span class=\"built_in\">insert</span>(<span class=\"built_in\">read</span>());</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">            multiset&lt;<span class=\"type\">long</span> <span class=\"type\">long</span>&gt; :: iterator p=S.<span class=\"built_in\">begin</span>();</span><br><span class=\"line\">            <span class=\"keyword\">if</span>((*p)&lt;a[i])p=--S.<span class=\"built_in\">upper_bound</span>(a[i]);</span><br><span class=\"line\">            f[i]=*p,S.<span class=\"built_in\">erase</span>(p);</span><br><span class=\"line\">            S.<span class=\"built_in\">insert</span>(w[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%lld\\n&quot;</span>,<span class=\"built_in\">solve</span>());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  <span class=\"built_in\">fclose</span>(stdin);</span><br><span class=\"line\">    <span class=\"built_in\">fclose</span>(stdout);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p>$\\ \\ \\ \\ \\ \\ \\ \\,$关于扩展中国剩余定理及扩展中国剩余定理的复习笔记：</p>","more":"<h2 id=\"中国剩余定理（CRT）\"><a href=\"#中国剩余定理（CRT）\" class=\"headerlink\" title=\"中国剩余定理（CRT）\"></a>中国剩余定理（CRT）</h2><p>  $\\ \\ \\ \\ \\ \\ \\ \\,$中国剩余定理是求解如下同余方程组的算法：</p>\n<p>  $\\begin{cases}x\\equiv c_1\\ \\ ({\\rm mod}\\ m_1)\\\\x\\equiv c_2\\ \\ ({\\rm mod}\\ m_2)\\\\x\\equiv c_3\\ \\ ({\\rm mod}\\ m_3)\\\\\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\cdots\\\\x\\equiv c_n\\ \\ ({\\rm mod}\\ m_n)\\end{cases}$<br>  $\\ \\ \\ \\ \\ \\ \\ \\,$当$m$都互质时，我们使用中国剩余定理（CRT）。</p>\n<p>  $\\ \\ \\ \\ \\ \\ \\ \\,$对于一个同余方程组，我们从简单的入手：</p>\n<p>  $\\begin{cases}x\\equiv c_1\\ \\ ({\\rm mod}\\ m_1)\\\\x\\equiv c_2\\ \\ ({\\rm mod}\\ m_2)\\end{cases}$</p>\n<p>  $\\ \\ \\ \\ \\ \\ \\ \\,$可以写成：$\\begin{cases}x= c_1+k_1m_1\\\\x=c_2+k_2 m_2\\end{cases}$</p>\n<p>  $\\ \\ \\ \\ \\ \\ \\ \\,$联立式子：$x= c_1+k_1m_1=c_2+k_2 m_2$<br>  $k_1m_1-k_2 m_2=c_2-c_1$<br>  $\\ \\ \\ \\ \\ \\ \\ \\,$因为$m_1$和$m_2$互质，所以对于任意$c_2-c_1$的取值，肯定有一队合法解$k_1$，$k_2$.</p>\n<p>  $\\ \\ \\ \\ \\ \\ \\ \\,$然而对于求形如$ax+by=c$的解，就是扩展欧几里得干的事情了:</p>\n  <figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">exgcd</span><span class=\"params\">(<span class=\"type\">int</span> a,<span class=\"type\">int</span> b,<span class=\"type\">int</span> &amp;d,<span class=\"type\">int</span> &amp;x,<span class=\"type\">int</span> &amp;y)</span></span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">if</span>(!b)&#123;d=a;x=<span class=\"number\">1</span>;y=<span class=\"number\">0</span>;<span class=\"keyword\">return</span>;&#125;</span><br><span class=\"line\">   <span class=\"built_in\">exgcd</span>(b,a%b,d,y,x);y-=x*(a/b);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>  $\\ \\ \\ \\ \\ \\ \\ \\,$它求出的$x$，$y$，既是$ax+by=\\gcd (a,b)=1$的解。</p>\n<p>  $\\ \\ \\ \\ \\ \\ \\ \\,$知道了$k’_1m_1+k’_2 (-m_2)=1$的解为$k’_1$，$k’_2$，那么就容易得到$k_1m_1-k_2 m_2=c_2-c_1$的解了:</p>\n<p>  $k’_1m_1+k’_2 (-m_2)=1$</p>\n<p>  $k’_1m_1-k’_2 m_2=1$</p>\n<p>  $(k’_1(c_2-c_1))m_1-(k’_2(c_2-c_1)) m_2=c_2-c_1$</p>\n<p>  $\\ \\ \\ \\ \\ \\ \\ \\,$既 $k_1=k’_1(c_2-c_1)$，$k_2=k’_2(c_2-c_1)$。</p>\n<p>  $\\ \\ \\ \\ \\ \\ \\ \\,$现在我们带回去，就可以得到:<br>  $x= c_1+(k’_1(c_2-c_1))m_1=c_2+(k’_2(c_2-c_2)) m_2$</p>\n<p>  $\\ \\ \\ \\ \\ \\ \\ \\,$至此我们的答案就出来了，如果遇到很多的方程，我们不妨就这样合并下去，就出来了，不过问题来了，中国剩余定理（CRT）只适用于当$m$都互质时，适用范围比较小，下面我们马上引入扩展中国剩余定理（EXCRT），模板还是记它吧，就不贴中国剩余定理（CRT）的代码了。</p>\n<h2 id=\"扩展中国剩余定理（EXCRT）\"><a href=\"#扩展中国剩余定理（EXCRT）\" class=\"headerlink\" title=\"扩展中国剩余定理（EXCRT）\"></a>扩展中国剩余定理（EXCRT）</h2><p>  $\\ \\ \\ \\ \\ \\ \\ \\,$对于一个同余方程组，同样我们从简单的入手：</p>\n<p>  $\\begin{cases}x\\equiv c_1\\ \\ ({\\rm mod}\\ m_1)\\\\x\\equiv c_2\\ \\ ({\\rm mod}\\ m_2)\\end{cases}$</p>\n<p>  $\\ \\ \\ \\ \\ \\ \\ \\,$同理联立：</p>\n<p>  $x= c_1+k_1m_1=c_2+k_2 m_2$<br>  $k_1m_1-k_2 m_2=c_2-c_1$</p>\n<p>  $\\ \\ \\ \\ \\ \\ \\ \\,$因为$m_1$与$m_2$不一定互质，所以不能直接用扩展欧几里得了，当然了，我们可以先把他化成互质的：</p>\n<p>  $k_1\\frac{m_1}{\\gcd (m_1,m_2)}+k_2 \\frac{-m_2}{\\gcd (m_1,m_2)}=\\frac{c_2-c_1}{\\gcd (m_1,m_2)}$</p>\n<p>  $\\ \\ \\ \\ \\ \\ \\ \\,$套入扩展欧几里得，得到特解:</p>\n<p>  $k’_1\\frac{m_1}{\\gcd (m_1,m_2)}+k’_2 \\frac{-m_2}{\\gcd (m_1,m_2)}=1$</p>\n<p>  $\\frac{k’_1(c_2-c_1)}{\\gcd (m_1,m_2)^2}m_1- \\frac{k’_2(c_2-c_1)}{\\gcd (m_1,m_2)^2}m_2=\\frac{c_2-c_1}{\\gcd (m_1,m_2)}$</p>\n<p>  $\\frac{k’_1(c_2-c_1)}{\\gcd (m_1,m_2)}m_1- \\frac{k’_2(c_2-c_1)}{\\gcd (m_1,m_2)}m_2=c_2-c_1$</p>\n<p>  $\\ \\ \\ \\ \\ \\ \\ \\,$带回去，就可以得到:<br>  $x= c_1+\\frac{k’_1(c_2-c_1)}{\\gcd (m_1,m_2)}m_1=c_2+\\frac{k’_2(c_2-c_1)}{\\gcd (m_1,m_2)}m_2$</p>\n<p>  $\\ \\ \\ \\ \\ \\ \\ \\,$那么这样就很显然了，依次合并下去就好了，答案就出来了，当上面的除法不能整除的时候，就是无解。</p>\n<h2 id=\"快速乘\"><a href=\"#快速乘\" class=\"headerlink\" title=\"快速乘\"></a>快速乘</h2><p>  $\\ \\ \\ \\ \\ \\ \\ \\,$这个东西对于CRT很重要，很容易在计算两个数的积的时候就爆了$\\rm long\\ long$，所以我们需要用到类似快速幂的做法，变算边取模：</p>\n  <figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"title\">multi</span><span class=\"params\">(<span class=\"type\">long</span> <span class=\"type\">long</span> a,<span class=\"type\">long</span> <span class=\"type\">long</span> b,<span class=\"type\">long</span> <span class=\"type\">long</span> p)</span></span>&#123;</span><br><span class=\"line\">\t  a=(a%p+p)%p;b=(b%p+p)%p;<span class=\"type\">long</span> <span class=\"type\">long</span> ans=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t  <span class=\"keyword\">for</span>(;a;a&gt;&gt;=<span class=\"number\">1</span>,b=(b*<span class=\"number\">2</span>)%p)<span class=\"keyword\">if</span>(a&amp;<span class=\"number\">1</span>)ans=(ans+b)%p;</span><br><span class=\"line\">\t  <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>  $\\ \\ \\ \\ \\ \\ \\ \\,$还有$O(1)$的：<br>  <figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"title\">mul</span><span class=\"params\">(<span class=\"type\">long</span> <span class=\"type\">long</span> a,<span class=\"type\">long</span> <span class=\"type\">long</span> b,<span class=\"type\">long</span> <span class=\"type\">long</span> mod)</span></span>&#123;</span><br><span class=\"line\"> \ta%=mod,b%=mod;</span><br><span class=\"line\"> \t<span class=\"keyword\">return</span> ((a*b-(<span class=\"type\">long</span> <span class=\"type\">long</span>)((<span class=\"type\">long</span> <span class=\"type\">long</span>)((<span class=\"type\">long</span> <span class=\"type\">double</span>)a/mod*b+<span class=\"number\">1e-3</span>)*mod))%mod+mod)%mod;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"最后给出完整模板\"><a href=\"#最后给出完整模板\" class=\"headerlink\" title=\"最后给出完整模板\"></a>最后给出完整模板</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> n;</span><br><span class=\"line\"><span class=\"type\">long</span> <span class=\"type\">long</span> x,y,lcm;</span><br><span class=\"line\"><span class=\"type\">long</span> <span class=\"type\">long</span> m[N],c[N];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"title\">multi</span><span class=\"params\">(<span class=\"type\">long</span> <span class=\"type\">long</span> a,<span class=\"type\">long</span> <span class=\"type\">long</span> b,<span class=\"type\">long</span> <span class=\"type\">long</span> p)</span></span>&#123;</span><br><span class=\"line\">  a=(a%p+p)%p;b=(b%p+p)%p;<span class=\"type\">long</span> <span class=\"type\">long</span> ans=<span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(;a;a&gt;&gt;=<span class=\"number\">1</span>,b=(b*<span class=\"number\">2</span>)%p)<span class=\"keyword\">if</span>(a&amp;<span class=\"number\">1</span>)ans=(ans+b)%p;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"title\">exgcd</span><span class=\"params\">(<span class=\"type\">long</span> <span class=\"type\">long</span> a,<span class=\"type\">long</span> <span class=\"type\">long</span> b,<span class=\"type\">long</span> <span class=\"type\">long</span> &amp;x,<span class=\"type\">long</span> <span class=\"type\">long</span> &amp;y)</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(!b)&#123;x=<span class=\"number\">1</span>,y=<span class=\"number\">0</span>;<span class=\"keyword\">return</span> a;&#125;</span><br><span class=\"line\">  <span class=\"type\">long</span> <span class=\"type\">long</span> val=<span class=\"built_in\">exgcd</span>(b,a%b,x,y);</span><br><span class=\"line\">  <span class=\"type\">long</span> <span class=\"type\">long</span> t=x;x=y;y=t-a/b*y;<span class=\"keyword\">return</span> val;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"title\">excrt</span><span class=\"params\">(<span class=\"type\">long</span> <span class=\"type\">long</span>*m,<span class=\"type\">long</span> <span class=\"type\">long</span>*c,<span class=\"type\">int</span> n)</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;n;i++)&#123;</span><br><span class=\"line\">    <span class=\"type\">long</span> <span class=\"type\">long</span> val=<span class=\"built_in\">exgcd</span>(m[i],m[i+<span class=\"number\">1</span>],x,y);</span><br><span class=\"line\">    lcm=m[i]/val*m[i+<span class=\"number\">1</span>];</span><br><span class=\"line\">    m[i+<span class=\"number\">1</span>]=lcm;</span><br><span class=\"line\"><span class=\"comment\">//    if((c[i+1]-c[i])%val)return -1;</span></span><br><span class=\"line\">    val=<span class=\"built_in\">multi</span>(x,(c[i+<span class=\"number\">1</span>]-c[i])/val,lcm);</span><br><span class=\"line\">    c[i+<span class=\"number\">1</span>]=(<span class=\"built_in\">multi</span>(m[i],val,lcm)+c[i])%lcm;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (c[n]%m[n]+m[n])%m[n];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"例题\"><a href=\"#例题\" class=\"headerlink\" title=\"例题\"></a>例题</h2><h3 id=\"【P4777-【模板】扩展中国剩余定理（EXCRT）】\"><a href=\"#【P4777-【模板】扩展中国剩余定理（EXCRT）】\" class=\"headerlink\" title=\"【P4777 【模板】扩展中国剩余定理（EXCRT）】\"></a><a href=\"https://www.luogu.org/problemnew/show/P4777\">【P4777 【模板】扩展中国剩余定理（EXCRT）】</a></h3><p>  <a href=\"https://www.luogu.org/space/show?uid=50167\">$\\rm Imagine\\tt Orz$</a>大佬的模板，数据还是挺强的，卡了我很久。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdlib&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;map&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;set&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;stack&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cctype&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> inf=<span class=\"number\">0x7fffffff</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">double</span> eps=<span class=\"number\">1e-10</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">double</span> pi=<span class=\"built_in\">acos</span>(<span class=\"number\">-1.0</span>);</span><br><span class=\"line\"><span class=\"comment\">//char buf[1&lt;&lt;15],*S=buf,*T=buf;</span></span><br><span class=\"line\"><span class=\"comment\">//char getch()&#123;return S==T&amp;&amp;(T=(S=buf)+fread(buf,1,1&lt;&lt;15,stdin),S==T)?0:*S++;&#125;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"title\">read</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">long</span> <span class=\"type\">long</span> x=<span class=\"number\">0</span>,f=<span class=\"number\">1</span>;<span class=\"type\">char</span> ch;ch=<span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(ch&lt;<span class=\"string\">&#x27;0&#x27;</span>||ch&gt;<span class=\"string\">&#x27;9&#x27;</span>)&#123;<span class=\"keyword\">if</span>(ch==<span class=\"string\">&#x27;-&#x27;</span>) f=<span class=\"number\">0</span>;ch=<span class=\"built_in\">getchar</span>();&#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(ch&gt;=<span class=\"string\">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class=\"string\">&#x27;9&#x27;</span>)&#123;x=(x&lt;&lt;<span class=\"number\">1</span>)+(x&lt;&lt;<span class=\"number\">3</span>)+(ch&amp;<span class=\"number\">15</span>);ch=<span class=\"built_in\">getchar</span>();&#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(f)<span class=\"keyword\">return</span> x;<span class=\"keyword\">else</span> <span class=\"keyword\">return</span> -x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> n;</span><br><span class=\"line\"><span class=\"type\">long</span> <span class=\"type\">long</span> x,y,lcm;</span><br><span class=\"line\"><span class=\"type\">long</span> <span class=\"type\">long</span> m[<span class=\"number\">100055</span>],c[<span class=\"number\">100055</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"title\">multi</span><span class=\"params\">(<span class=\"type\">long</span> <span class=\"type\">long</span> a,<span class=\"type\">long</span> <span class=\"type\">long</span> b,<span class=\"type\">long</span> <span class=\"type\">long</span> p)</span></span>&#123;</span><br><span class=\"line\">  a=(a%p+p)%p;b=(b%p+p)%p;<span class=\"type\">long</span> <span class=\"type\">long</span> ans=<span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(;a;a&gt;&gt;=<span class=\"number\">1</span>,b=(b*<span class=\"number\">2</span>)%p)<span class=\"keyword\">if</span>(a&amp;<span class=\"number\">1</span>)ans=(ans+b)%p;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"title\">exgcd</span><span class=\"params\">(<span class=\"type\">long</span> <span class=\"type\">long</span> a,<span class=\"type\">long</span> <span class=\"type\">long</span> b,<span class=\"type\">long</span> <span class=\"type\">long</span> &amp;x,<span class=\"type\">long</span> <span class=\"type\">long</span> &amp;y)</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(!b)&#123;x=<span class=\"number\">1</span>,y=<span class=\"number\">0</span>;<span class=\"keyword\">return</span> a;&#125;</span><br><span class=\"line\">  <span class=\"type\">long</span> <span class=\"type\">long</span> val=<span class=\"built_in\">exgcd</span>(b,a%b,x,y);</span><br><span class=\"line\">  <span class=\"type\">long</span> <span class=\"type\">long</span> t=x;x=y;y=t-a/b*y;<span class=\"keyword\">return</span> val;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"title\">excrt</span><span class=\"params\">(<span class=\"type\">long</span> <span class=\"type\">long</span>*m,<span class=\"type\">long</span> <span class=\"type\">long</span>*c,<span class=\"type\">int</span> n)</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;n;i++)&#123;</span><br><span class=\"line\">    <span class=\"type\">long</span> <span class=\"type\">long</span> val=<span class=\"built_in\">exgcd</span>(m[i],m[i+<span class=\"number\">1</span>],x,y);</span><br><span class=\"line\">    lcm=m[i]/val*m[i+<span class=\"number\">1</span>];</span><br><span class=\"line\">    m[i+<span class=\"number\">1</span>]=lcm;</span><br><span class=\"line\">    val=<span class=\"built_in\">multi</span>(x,(c[i+<span class=\"number\">1</span>]-c[i])/val,lcm);</span><br><span class=\"line\">    c[i+<span class=\"number\">1</span>]=(<span class=\"built_in\">multi</span>(m[i],val,lcm)+c[i])%lcm;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (c[n]%m[n]+m[n])%m[n];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">  n=(<span class=\"type\">int</span>)<span class=\"built_in\">read</span>();</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)</span><br><span class=\"line\">    m[i]=<span class=\"built_in\">read</span>(),c[i]=<span class=\"built_in\">read</span>();</span><br><span class=\"line\">  <span class=\"type\">long</span> <span class=\"type\">long</span> ans=<span class=\"built_in\">excrt</span>(m,c,n);</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%lld\\n&quot;</span>,ans);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"【P4774-NOI2018-屠龙勇士】\"><a href=\"#【P4774-NOI2018-屠龙勇士】\" class=\"headerlink\" title=\"【P4774 [NOI2018]屠龙勇士】\"></a><a href=\"https://www.luogu.org/problemnew/show/P4774\">【P4774 [NOI2018]屠龙勇士】</a></h3><p>  $\\ \\ \\ \\ \\ \\ \\,$虽然当时当场就看出来是同余方程组了，不过还是因为快速乘坑了好久，还是做少了，太菜了。考点比较多，有点回忆不起来了，还是贴一下代码：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdlib&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;set&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;map&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">long</span> <span class=\"type\">long</span> inf=<span class=\"number\">0x7fffffff</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">double</span> eps=<span class=\"number\">1e-10</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">double</span> pi=<span class=\"built_in\">acos</span>(<span class=\"number\">-1.0</span>);</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">1e5</span>+<span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"title\">read</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">long</span> <span class=\"type\">long</span> x=<span class=\"number\">0</span>,f=<span class=\"number\">1</span>;<span class=\"type\">char</span> ch;ch=<span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(ch&lt;<span class=\"string\">&#x27;0&#x27;</span>||ch&gt;<span class=\"string\">&#x27;9&#x27;</span>)&#123;<span class=\"keyword\">if</span>(ch==<span class=\"string\">&#x27;-&#x27;</span>) f=<span class=\"number\">-1</span>;ch=<span class=\"built_in\">getchar</span>();&#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(ch&gt;=<span class=\"string\">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class=\"string\">&#x27;9&#x27;</span>)&#123;x=x*<span class=\"number\">10</span>+ch-<span class=\"string\">&#x27;0&#x27;</span>;ch=<span class=\"built_in\">getchar</span>();&#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x*f;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">long</span> <span class=\"type\">long</span> n,m,T;</span><br><span class=\"line\"><span class=\"type\">long</span> <span class=\"type\">long</span> f[N],p[N],a[N],w[N],x[N];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"title\">gcd</span><span class=\"params\">(<span class=\"type\">long</span> <span class=\"type\">long</span> a,<span class=\"type\">long</span> <span class=\"type\">long</span> b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;<span class=\"keyword\">return</span> b?<span class=\"built_in\">gcd</span>(b,a%b):a;&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"title\">exgcd</span><span class=\"params\">(<span class=\"type\">long</span> <span class=\"type\">long</span> a,<span class=\"type\">long</span> <span class=\"type\">long</span> b,<span class=\"type\">long</span> <span class=\"type\">long</span> &amp;x,<span class=\"type\">long</span> <span class=\"type\">long</span> &amp;y)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!b)&#123;x=<span class=\"number\">1</span>,y=<span class=\"number\">0</span>;<span class=\"keyword\">return</span> a;&#125;</span><br><span class=\"line\">    <span class=\"type\">long</span> <span class=\"type\">long</span> res=<span class=\"built_in\">exgcd</span>(b,a%b,y,x);</span><br><span class=\"line\">    y-=x*(a/b);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"title\">inv</span><span class=\"params\">(<span class=\"type\">long</span> <span class=\"type\">long</span> a,<span class=\"type\">long</span> <span class=\"type\">long</span> b)</span></span>&#123;</span><br><span class=\"line\">  <span class=\"type\">long</span> <span class=\"type\">long</span> x=<span class=\"number\">0</span>,y=<span class=\"number\">0</span>,g=<span class=\"built_in\">exgcd</span>(a,b,x,y);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(g&gt;<span class=\"number\">1</span>)<span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (x+b)%b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"title\">fast_multi</span><span class=\"params\">(<span class=\"type\">long</span> <span class=\"type\">long</span> a,<span class=\"type\">long</span> <span class=\"type\">long</span> b,<span class=\"type\">long</span> <span class=\"type\">long</span> p)</span> </span>&#123;</span><br><span class=\"line\">  a=(a%p+p)%p;</span><br><span class=\"line\">    b=(b%p+p)%p;</span><br><span class=\"line\">    <span class=\"type\">long</span> <span class=\"type\">long</span> ans=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(;a;a&gt;&gt;=<span class=\"number\">1</span>,b=(b&lt;&lt;<span class=\"number\">1</span>)%p)</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(a&amp;<span class=\"number\">1LL</span>)ans=(ans+b)%p;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">CRT</span><span class=\"params\">(<span class=\"type\">long</span> <span class=\"type\">long</span> w1,<span class=\"type\">long</span> <span class=\"type\">long</span> p1,<span class=\"type\">long</span> <span class=\"type\">long</span> w2,<span class=\"type\">long</span> <span class=\"type\">long</span> p2,<span class=\"type\">long</span> <span class=\"type\">long</span> &amp;w,<span class=\"type\">long</span> <span class=\"type\">long</span> &amp;p)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">long</span> <span class=\"type\">long</span> x,y,z=w2-w1,g=<span class=\"built_in\">exgcd</span>(p1,p2,x,y);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(z%g)<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">long</span> <span class=\"type\">long</span> t=z/g;</span><br><span class=\"line\">    x=<span class=\"built_in\">fast_multi</span>(x,t,p2/g);</span><br><span class=\"line\">    p=p1/g*p2;</span><br><span class=\"line\">    w=((w1+<span class=\"built_in\">fast_multi</span>(x,p1,p))%p+p)%p;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"title\">solve</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">        <span class=\"type\">long</span> <span class=\"type\">long</span> g=<span class=\"built_in\">gcd</span>(a[i],<span class=\"built_in\">gcd</span>(f[i],p[i]));</span><br><span class=\"line\">        f[i]/=g,p[i]/=g,a[i]/=g;</span><br><span class=\"line\">        <span class=\"type\">long</span> <span class=\"type\">long</span> Inv=<span class=\"built_in\">inv</span>(f[i],p[i]);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(Inv&lt;<span class=\"number\">0</span>)<span class=\"keyword\">return</span> <span class=\"number\">-1LL</span>;</span><br><span class=\"line\">        x[i]=<span class=\"built_in\">fast_multi</span>(a[i],Inv,p[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">long</span> <span class=\"type\">long</span> W=x[<span class=\"number\">1</span>],P=p[<span class=\"number\">1</span>];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">2</span>;i&lt;=n;i++)</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!<span class=\"built_in\">CRT</span>(W,P,x[i],p[i],W,P))<span class=\"keyword\">return</span> <span class=\"number\">-1LL</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">        <span class=\"type\">long</span> <span class=\"type\">long</span> val=(a[i]+f[i]<span class=\"number\">-1</span>)/f[i];</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(val&lt;=W)<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        <span class=\"type\">long</span> <span class=\"type\">long</span> k=(val-W+P<span class=\"number\">-1</span>)/P;</span><br><span class=\"line\">        W+=k*P;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> W;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">multiset&lt;<span class=\"type\">long</span> <span class=\"type\">long</span>&gt; S;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"><span class=\"comment\">// \tfreopen(&quot;dragon.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class=\"line\"><span class=\"comment\">//\tfreopen(&quot;dragon.out&quot;,&quot;w&quot;,stdout);</span></span><br><span class=\"line\">    T=<span class=\"built_in\">read</span>();</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(T--)&#123;</span><br><span class=\"line\">        n=<span class=\"built_in\">read</span>(),m=<span class=\"built_in\">read</span>();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)a[i]=<span class=\"built_in\">read</span>();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)p[i]=<span class=\"built_in\">read</span>();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)w[i]=<span class=\"built_in\">read</span>();</span><br><span class=\"line\">        S.<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(m--)S.<span class=\"built_in\">insert</span>(<span class=\"built_in\">read</span>());</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">            multiset&lt;<span class=\"type\">long</span> <span class=\"type\">long</span>&gt; :: iterator p=S.<span class=\"built_in\">begin</span>();</span><br><span class=\"line\">            <span class=\"keyword\">if</span>((*p)&lt;a[i])p=--S.<span class=\"built_in\">upper_bound</span>(a[i]);</span><br><span class=\"line\">            f[i]=*p,S.<span class=\"built_in\">erase</span>(p);</span><br><span class=\"line\">            S.<span class=\"built_in\">insert</span>(w[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%lld\\n&quot;</span>,<span class=\"built_in\">solve</span>());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  <span class=\"built_in\">fclose</span>(stdin);</span><br><span class=\"line\">    <span class=\"built_in\">fclose</span>(stdout);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"导数和牛顿迭代","date":"2018-12-30T04:31:51.000Z","mathjax":true,"_content":"\n$\\ \\ \\ \\ \\ \\ \\ \\,$关于导数和牛顿迭代的复习笔记：\n\n<!-- more -->\n\n## 导数\n\n  $\\ \\ \\ \\ \\ \\ \\,$导数是描述一个函数的变化情况的函数，函数$f$的导数记作$f'$。\n  \n  $\\ \\ \\ \\ \\ \\ \\,$导数（英语：Derivative）是微积分学中重要的基础概念。一个函数在某一点的导数描述了这个函数在这一点附近的变化率。导数的本质是通过极限的概念对函数进行局部的线性逼近$\\ \\ \\ \\ \\ \\ $——wiki。\n  \n### 导数的运算法则\n\n  - $(f+g)'=f'+g'$\n  \n  - $(f-g)'=f'-g'$\n  \n  - $(f\\cdot g)'=f'\\cdot g'$\n  \n  - $(af)'=af'$\n  \n  - $(fa)'=f'a+a\\cdot f'$\n  \n  - $(f/g)'=\\frac{f'\\cdot g-f\\cdot g'}{g^2}$\n  \n### 常见函数的导数\n\n   - $(x^k)'=kx^{k-1}$\n\n   - $(a^x)'=a^x\\cdot \\ln a$\n \n   - $(e^x)'=e^{x}$\n \n   - $(\\log _a x)'=\\frac{1}{x \\cdot \\ln a}$\n \n   - $(\\ln x)'=\\frac{1}{x}$\n\n   - $(\\sin x)'=\\cos x$\n\n   - $(\\cos x)'=-\\sin x$\n\n   - $(\\tan x)'=\\sec ^2x$\n\n   - $(\\cot x)'=-\\csc ^2x$\n \n   - $(\\sec x)'=\\tan x\\cdot\\csc x$\n   \n   - $(\\csc x)'=-\\cot x\\cdot\\csc x$\n \n   - $(\\arcsin x)'=\\frac{1}{\\sqrt{1-x^2}}$\n \n   - $(\\arccos x)'=-\\frac{1}{\\sqrt{1-x^2}}$\n \n   - $(\\arctan x)'=\\frac{1}{1-x^2}$\n \n   - $({\\rm arccot}\\ x)'=-\\frac{1}{1-x^2}$\n \n   - $({\\rm sh}\\ x)'={\\rm ch}\\ x$\n \n   - $({\\rm ch}\\ x)'={\\rm sh}\\ x$\n \n### 牛顿迭代\n\n$\\ \\ \\ \\ \\ \\ \\,$这里简单地讲一下** 一阶牛顿迭代 **，牛顿迭代是应用在最优化领域非常重要的一种算法，由于具有二阶收敛性，所以相比二分法能大大降低迭代次数，只能求一个可导函数的零点，或者有二阶导函数的极值，一种全局搜索算法用来解np问题最优解的算法，在算法竞赛中的运用比较少见（~~Psyduck说~~）。\n\n$\\ \\ \\ \\ \\ \\ \\,$先放wiki的动图，牛顿迭代动态示例图：\n\n[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-CIMMV2UR-1644815019693)(https://upload.wikimedia.org/wikipedia/commons/e/e0/NewtonIteration_Ani.gif)]\n\n$\\ \\ \\ \\ \\ \\ \\,$容易看出一个重要问题：**对函数的一个点做切线，这个切线与$x$轴的交点当做新的点，重复操作，得到的点就会越来越趋近于零点。**\n\n$\\ \\ \\ \\ \\ \\ \\,$具体证明涉及 **泰勒展开**，就不细讲了。\n\n$\\ \\ \\ \\ \\ \\ \\,$说到函数切线，自然就需要求导。\n\n$\\ \\ \\ \\ \\ \\ \\,$在$\\ f(x)\\ $上，点$\\ x=a\\ $的斜率为$f'(a)$，所以这个切线与$x$轴的交点当做新的点，应该是$\\ a-\\frac{f\\left(a\\right)}{f'\\left(a\\right)}\\ $。\n\n$\\ \\ \\ \\ \\ \\ \\,$所以，我们定义:\n$F(x)=F(x-1)-\\frac{f\\left(F(x-1)\\right)}{f'\\left(F(x-1)\\right)}$\n\n$\\ \\ \\ \\ \\ \\ \\,$也就是不断去求点，可得这个点是越来越趋近某一个零点的。也就是说，我们的答案，就是$\\ F(+∞)\\ $，既函数$\\ F(x)\\ $的收敛值。\n\n$\\ \\ \\ \\ \\ \\ \\,$若$f(x)$二阶可导，那么在待求的零点$\\ F(+∞)\\ $值周围存在一个区域，只要起始点$\\ F(0)\\ $位于这个邻近区域内，那么牛顿迭代必定收敛。\n\n$\\ \\ \\ \\ \\ \\ \\,$不过……我们显然不需要算无限次，保证精度在一个范围内就行了，显然，牛顿迭代可以做到极快收敛到我们需要的精度，我们并不需要计算太多次。\n\n$\\ \\ \\ \\ \\ \\ \\,$我们最终答案的计算效率、精度，还与迭代系数，也就是最初赋值的$\\ F(0)\\ $有很大关系。（~~但是因为比较小的x取值范围，本题没有卡迭代系数的选定~~）。\n\n$\\ \\ \\ \\ \\ \\ \\,$然后贴出一阶牛顿迭代的模板：\n\n$\\ \\ \\ \\ \\ \\ \\,$（~~如果迭代次数过少或者无解，那么会返回一个错误的答案~~）\n\n``` cpp\ndouble Newton_Iteration(double F,int tim){//输入迭代系数F=F(0)，迭代次数tim\n  while(tim--)F=F-f(F)/f1(F);//f1(x)=f'(x)\n  return F;\n}\n```\n$\\ \\ \\ \\ \\ \\ \\,$这里只是简单地讲一下** 一阶牛顿迭代 **，具体的讲解，有兴趣可以戳下面的链接，博主觉得讲得很清晰 ~~（还有互交动画啊XD）~~ 。\n\n## [--·--·--《推荐讲解文章》--·--·--](https://matongxue.com/madocs/205.html)\n\n\n$\\ \\ \\ \\ \\ \\ \\,$而对于 **二阶牛顿迭代** 呢，就是在一阶导数上面做 **一阶牛顿迭代** ，求一阶导数上面的零点，就是求原函数的极值了，也就是下面这个函数的收敛值：\n\n$F(x)=F(x-1)-\\frac{f'\\left(F(x-1)\\right)}{f''\\left(F(x-1)\\right)}$\n\n$\\ \\ \\ \\ \\ \\ \\,$例题在这里，是我出的:[【P4986 逃离】](https://www.luogu.org/problemnew/show/P4986)[【题解】](https://www.luogu.org/blog/Althen-Way-Satan/tao-li-ti-xie-post)","source":"_posts/导数和牛顿迭代.md","raw":"---\ntitle: '导数和牛顿迭代'\ndate: 2018-12-30 12:31:51\ncategories:\n- 学习笔记\ntags:\n- OI\n- 多项式\n- 牛顿迭代\nmathjax: true\n---\n\n$\\ \\ \\ \\ \\ \\ \\ \\,$关于导数和牛顿迭代的复习笔记：\n\n<!-- more -->\n\n## 导数\n\n  $\\ \\ \\ \\ \\ \\ \\,$导数是描述一个函数的变化情况的函数，函数$f$的导数记作$f'$。\n  \n  $\\ \\ \\ \\ \\ \\ \\,$导数（英语：Derivative）是微积分学中重要的基础概念。一个函数在某一点的导数描述了这个函数在这一点附近的变化率。导数的本质是通过极限的概念对函数进行局部的线性逼近$\\ \\ \\ \\ \\ \\ $——wiki。\n  \n### 导数的运算法则\n\n  - $(f+g)'=f'+g'$\n  \n  - $(f-g)'=f'-g'$\n  \n  - $(f\\cdot g)'=f'\\cdot g'$\n  \n  - $(af)'=af'$\n  \n  - $(fa)'=f'a+a\\cdot f'$\n  \n  - $(f/g)'=\\frac{f'\\cdot g-f\\cdot g'}{g^2}$\n  \n### 常见函数的导数\n\n   - $(x^k)'=kx^{k-1}$\n\n   - $(a^x)'=a^x\\cdot \\ln a$\n \n   - $(e^x)'=e^{x}$\n \n   - $(\\log _a x)'=\\frac{1}{x \\cdot \\ln a}$\n \n   - $(\\ln x)'=\\frac{1}{x}$\n\n   - $(\\sin x)'=\\cos x$\n\n   - $(\\cos x)'=-\\sin x$\n\n   - $(\\tan x)'=\\sec ^2x$\n\n   - $(\\cot x)'=-\\csc ^2x$\n \n   - $(\\sec x)'=\\tan x\\cdot\\csc x$\n   \n   - $(\\csc x)'=-\\cot x\\cdot\\csc x$\n \n   - $(\\arcsin x)'=\\frac{1}{\\sqrt{1-x^2}}$\n \n   - $(\\arccos x)'=-\\frac{1}{\\sqrt{1-x^2}}$\n \n   - $(\\arctan x)'=\\frac{1}{1-x^2}$\n \n   - $({\\rm arccot}\\ x)'=-\\frac{1}{1-x^2}$\n \n   - $({\\rm sh}\\ x)'={\\rm ch}\\ x$\n \n   - $({\\rm ch}\\ x)'={\\rm sh}\\ x$\n \n### 牛顿迭代\n\n$\\ \\ \\ \\ \\ \\ \\,$这里简单地讲一下** 一阶牛顿迭代 **，牛顿迭代是应用在最优化领域非常重要的一种算法，由于具有二阶收敛性，所以相比二分法能大大降低迭代次数，只能求一个可导函数的零点，或者有二阶导函数的极值，一种全局搜索算法用来解np问题最优解的算法，在算法竞赛中的运用比较少见（~~Psyduck说~~）。\n\n$\\ \\ \\ \\ \\ \\ \\,$先放wiki的动图，牛顿迭代动态示例图：\n\n[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-CIMMV2UR-1644815019693)(https://upload.wikimedia.org/wikipedia/commons/e/e0/NewtonIteration_Ani.gif)]\n\n$\\ \\ \\ \\ \\ \\ \\,$容易看出一个重要问题：**对函数的一个点做切线，这个切线与$x$轴的交点当做新的点，重复操作，得到的点就会越来越趋近于零点。**\n\n$\\ \\ \\ \\ \\ \\ \\,$具体证明涉及 **泰勒展开**，就不细讲了。\n\n$\\ \\ \\ \\ \\ \\ \\,$说到函数切线，自然就需要求导。\n\n$\\ \\ \\ \\ \\ \\ \\,$在$\\ f(x)\\ $上，点$\\ x=a\\ $的斜率为$f'(a)$，所以这个切线与$x$轴的交点当做新的点，应该是$\\ a-\\frac{f\\left(a\\right)}{f'\\left(a\\right)}\\ $。\n\n$\\ \\ \\ \\ \\ \\ \\,$所以，我们定义:\n$F(x)=F(x-1)-\\frac{f\\left(F(x-1)\\right)}{f'\\left(F(x-1)\\right)}$\n\n$\\ \\ \\ \\ \\ \\ \\,$也就是不断去求点，可得这个点是越来越趋近某一个零点的。也就是说，我们的答案，就是$\\ F(+∞)\\ $，既函数$\\ F(x)\\ $的收敛值。\n\n$\\ \\ \\ \\ \\ \\ \\,$若$f(x)$二阶可导，那么在待求的零点$\\ F(+∞)\\ $值周围存在一个区域，只要起始点$\\ F(0)\\ $位于这个邻近区域内，那么牛顿迭代必定收敛。\n\n$\\ \\ \\ \\ \\ \\ \\,$不过……我们显然不需要算无限次，保证精度在一个范围内就行了，显然，牛顿迭代可以做到极快收敛到我们需要的精度，我们并不需要计算太多次。\n\n$\\ \\ \\ \\ \\ \\ \\,$我们最终答案的计算效率、精度，还与迭代系数，也就是最初赋值的$\\ F(0)\\ $有很大关系。（~~但是因为比较小的x取值范围，本题没有卡迭代系数的选定~~）。\n\n$\\ \\ \\ \\ \\ \\ \\,$然后贴出一阶牛顿迭代的模板：\n\n$\\ \\ \\ \\ \\ \\ \\,$（~~如果迭代次数过少或者无解，那么会返回一个错误的答案~~）\n\n``` cpp\ndouble Newton_Iteration(double F,int tim){//输入迭代系数F=F(0)，迭代次数tim\n  while(tim--)F=F-f(F)/f1(F);//f1(x)=f'(x)\n  return F;\n}\n```\n$\\ \\ \\ \\ \\ \\ \\,$这里只是简单地讲一下** 一阶牛顿迭代 **，具体的讲解，有兴趣可以戳下面的链接，博主觉得讲得很清晰 ~~（还有互交动画啊XD）~~ 。\n\n## [--·--·--《推荐讲解文章》--·--·--](https://matongxue.com/madocs/205.html)\n\n\n$\\ \\ \\ \\ \\ \\ \\,$而对于 **二阶牛顿迭代** 呢，就是在一阶导数上面做 **一阶牛顿迭代** ，求一阶导数上面的零点，就是求原函数的极值了，也就是下面这个函数的收敛值：\n\n$F(x)=F(x-1)-\\frac{f'\\left(F(x-1)\\right)}{f''\\left(F(x-1)\\right)}$\n\n$\\ \\ \\ \\ \\ \\ \\,$例题在这里，是我出的:[【P4986 逃离】](https://www.luogu.org/problemnew/show/P4986)[【题解】](https://www.luogu.org/blog/Althen-Way-Satan/tao-li-ti-xie-post)","slug":"导数和牛顿迭代","published":1,"updated":"2022-02-14T05:07:14.999Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0i63w69001du4gb4c1vfjbm","content":"<p>$\\ \\ \\ \\ \\ \\ \\ \\,$关于导数和牛顿迭代的复习笔记：</p>\n<span id=\"more\"></span>\n<h2 id=\"导数\"><a href=\"#导数\" class=\"headerlink\" title=\"导数\"></a>导数</h2><p>  $\\ \\ \\ \\ \\ \\ \\,$导数是描述一个函数的变化情况的函数，函数$f$的导数记作$f’$。</p>\n<p>  $\\ \\ \\ \\ \\ \\ \\,$导数（英语：Derivative）是微积分学中重要的基础概念。一个函数在某一点的导数描述了这个函数在这一点附近的变化率。导数的本质是通过极限的概念对函数进行局部的线性逼近$\\ \\ \\ \\ \\ \\ $——wiki。</p>\n<h3 id=\"导数的运算法则\"><a href=\"#导数的运算法则\" class=\"headerlink\" title=\"导数的运算法则\"></a>导数的运算法则</h3><ul>\n<li><p>$(f+g)’=f’+g’$</p>\n</li>\n<li><p>$(f-g)’=f’-g’$</p>\n</li>\n<li><p>$(f\\cdot g)’=f’\\cdot g’$</p>\n</li>\n<li><p>$(af)’=af’$</p>\n</li>\n<li><p>$(fa)’=f’a+a\\cdot f’$</p>\n</li>\n<li><p>$(f/g)’=\\frac{f’\\cdot g-f\\cdot g’}{g^2}$</p>\n</li>\n</ul>\n<h3 id=\"常见函数的导数\"><a href=\"#常见函数的导数\" class=\"headerlink\" title=\"常见函数的导数\"></a>常见函数的导数</h3><ul>\n<li><p>$(x^k)’=kx^{k-1}$</p>\n</li>\n<li><p>$(a^x)’=a^x\\cdot \\ln a$</p>\n</li>\n<li><p>$(e^x)’=e^{x}$</p>\n</li>\n<li><p>$(\\log _a x)’=\\frac{1}{x \\cdot \\ln a}$</p>\n</li>\n<li><p>$(\\ln x)’=\\frac{1}{x}$</p>\n</li>\n<li><p>$(\\sin x)’=\\cos x$</p>\n</li>\n<li><p>$(\\cos x)’=-\\sin x$</p>\n</li>\n<li><p>$(\\tan x)’=\\sec ^2x$</p>\n</li>\n<li><p>$(\\cot x)’=-\\csc ^2x$</p>\n</li>\n<li><p>$(\\sec x)’=\\tan x\\cdot\\csc x$</p>\n</li>\n<li><p>$(\\csc x)’=-\\cot x\\cdot\\csc x$</p>\n</li>\n<li><p>$(\\arcsin x)’=\\frac{1}{\\sqrt{1-x^2}}$</p>\n</li>\n<li><p>$(\\arccos x)’=-\\frac{1}{\\sqrt{1-x^2}}$</p>\n</li>\n<li><p>$(\\arctan x)’=\\frac{1}{1-x^2}$</p>\n</li>\n<li><p>$({\\rm arccot}\\ x)’=-\\frac{1}{1-x^2}$</p>\n</li>\n<li><p>$({\\rm sh}\\ x)’={\\rm ch}\\ x$</p>\n</li>\n<li><p>$({\\rm ch}\\ x)’={\\rm sh}\\ x$</p>\n</li>\n</ul>\n<h3 id=\"牛顿迭代\"><a href=\"#牛顿迭代\" class=\"headerlink\" title=\"牛顿迭代\"></a>牛顿迭代</h3><p>$\\ \\ \\ \\ \\ \\ \\,$这里简单地讲一下<strong> 一阶牛顿迭代 </strong>，牛顿迭代是应用在最优化领域非常重要的一种算法，由于具有二阶收敛性，所以相比二分法能大大降低迭代次数，只能求一个可导函数的零点，或者有二阶导函数的极值，一种全局搜索算法用来解np问题最优解的算法，在算法竞赛中的运用比较少见（<del>Psyduck说</del>）。</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$先放wiki的动图，牛顿迭代动态示例图：</p>\n<p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-CIMMV2UR-1644815019693)(<a href=\"https://upload.wikimedia.org/wikipedia/commons/e/e0/NewtonIteration_Ani.gif\">https://upload.wikimedia.org/wikipedia/commons/e/e0/NewtonIteration_Ani.gif</a>)]</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$容易看出一个重要问题：<strong>对函数的一个点做切线，这个切线与$x$轴的交点当做新的点，重复操作，得到的点就会越来越趋近于零点。</strong></p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$具体证明涉及 <strong>泰勒展开</strong>，就不细讲了。</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$说到函数切线，自然就需要求导。</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$在$\\ f(x)\\ $上，点$\\ x=a\\ $的斜率为$f’(a)$，所以这个切线与$x$轴的交点当做新的点，应该是$\\ a-\\frac{f\\left(a\\right)}{f’\\left(a\\right)}\\ $。</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$所以，我们定义:<br>$F(x)=F(x-1)-\\frac{f\\left(F(x-1)\\right)}{f’\\left(F(x-1)\\right)}$</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$也就是不断去求点，可得这个点是越来越趋近某一个零点的。也就是说，我们的答案，就是$\\ F(+∞)\\ $，既函数$\\ F(x)\\ $的收敛值。</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$若$f(x)$二阶可导，那么在待求的零点$\\ F(+∞)\\ $值周围存在一个区域，只要起始点$\\ F(0)\\ $位于这个邻近区域内，那么牛顿迭代必定收敛。</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$不过……我们显然不需要算无限次，保证精度在一个范围内就行了，显然，牛顿迭代可以做到极快收敛到我们需要的精度，我们并不需要计算太多次。</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$我们最终答案的计算效率、精度，还与迭代系数，也就是最初赋值的$\\ F(0)\\ $有很大关系。（<del>但是因为比较小的x取值范围，本题没有卡迭代系数的选定</del>）。</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$然后贴出一阶牛顿迭代的模板：</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$（<del>如果迭代次数过少或者无解，那么会返回一个错误的答案</del>）</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">double</span> <span class=\"title\">Newton_Iteration</span><span class=\"params\">(<span class=\"type\">double</span> F,<span class=\"type\">int</span> tim)</span></span>&#123;<span class=\"comment\">//输入迭代系数F=F(0)，迭代次数tim</span></span><br><span class=\"line\">  <span class=\"keyword\">while</span>(tim--)F=F-<span class=\"built_in\">f</span>(F)/<span class=\"built_in\">f1</span>(F);<span class=\"comment\">//f1(x)=f&#x27;(x)</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> F;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>$\\ \\ \\ \\ \\ \\ \\,$这里只是简单地讲一下<strong> 一阶牛顿迭代 </strong>，具体的讲解，有兴趣可以戳下面的链接，博主觉得讲得很清晰 <del>（还有互交动画啊XD）</del> 。</p>\n<h2 id=\"—·—·—《推荐讲解文章》—·—·—\"><a href=\"#—·—·—《推荐讲解文章》—·—·—\" class=\"headerlink\" title=\"—·—·—《推荐讲解文章》—·—·—\"></a><a href=\"https://matongxue.com/madocs/205.html\">—·—·—《推荐讲解文章》—·—·—</a></h2><p>$\\ \\ \\ \\ \\ \\ \\,$而对于 <strong>二阶牛顿迭代</strong> 呢，就是在一阶导数上面做 <strong>一阶牛顿迭代</strong> ，求一阶导数上面的零点，就是求原函数的极值了，也就是下面这个函数的收敛值：</p>\n<p>$F(x)=F(x-1)-\\frac{f’\\left(F(x-1)\\right)}{f’’\\left(F(x-1)\\right)}$</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$例题在这里，是我出的:<a href=\"https://www.luogu.org/problemnew/show/P4986\">【P4986 逃离】</a><a href=\"https://www.luogu.org/blog/Althen-Way-Satan/tao-li-ti-xie-post\">【题解】</a></p>\n","site":{"data":{}},"excerpt":"<p>$\\ \\ \\ \\ \\ \\ \\ \\,$关于导数和牛顿迭代的复习笔记：</p>","more":"<h2 id=\"导数\"><a href=\"#导数\" class=\"headerlink\" title=\"导数\"></a>导数</h2><p>  $\\ \\ \\ \\ \\ \\ \\,$导数是描述一个函数的变化情况的函数，函数$f$的导数记作$f’$。</p>\n<p>  $\\ \\ \\ \\ \\ \\ \\,$导数（英语：Derivative）是微积分学中重要的基础概念。一个函数在某一点的导数描述了这个函数在这一点附近的变化率。导数的本质是通过极限的概念对函数进行局部的线性逼近$\\ \\ \\ \\ \\ \\ $——wiki。</p>\n<h3 id=\"导数的运算法则\"><a href=\"#导数的运算法则\" class=\"headerlink\" title=\"导数的运算法则\"></a>导数的运算法则</h3><ul>\n<li><p>$(f+g)’=f’+g’$</p>\n</li>\n<li><p>$(f-g)’=f’-g’$</p>\n</li>\n<li><p>$(f\\cdot g)’=f’\\cdot g’$</p>\n</li>\n<li><p>$(af)’=af’$</p>\n</li>\n<li><p>$(fa)’=f’a+a\\cdot f’$</p>\n</li>\n<li><p>$(f/g)’=\\frac{f’\\cdot g-f\\cdot g’}{g^2}$</p>\n</li>\n</ul>\n<h3 id=\"常见函数的导数\"><a href=\"#常见函数的导数\" class=\"headerlink\" title=\"常见函数的导数\"></a>常见函数的导数</h3><ul>\n<li><p>$(x^k)’=kx^{k-1}$</p>\n</li>\n<li><p>$(a^x)’=a^x\\cdot \\ln a$</p>\n</li>\n<li><p>$(e^x)’=e^{x}$</p>\n</li>\n<li><p>$(\\log _a x)’=\\frac{1}{x \\cdot \\ln a}$</p>\n</li>\n<li><p>$(\\ln x)’=\\frac{1}{x}$</p>\n</li>\n<li><p>$(\\sin x)’=\\cos x$</p>\n</li>\n<li><p>$(\\cos x)’=-\\sin x$</p>\n</li>\n<li><p>$(\\tan x)’=\\sec ^2x$</p>\n</li>\n<li><p>$(\\cot x)’=-\\csc ^2x$</p>\n</li>\n<li><p>$(\\sec x)’=\\tan x\\cdot\\csc x$</p>\n</li>\n<li><p>$(\\csc x)’=-\\cot x\\cdot\\csc x$</p>\n</li>\n<li><p>$(\\arcsin x)’=\\frac{1}{\\sqrt{1-x^2}}$</p>\n</li>\n<li><p>$(\\arccos x)’=-\\frac{1}{\\sqrt{1-x^2}}$</p>\n</li>\n<li><p>$(\\arctan x)’=\\frac{1}{1-x^2}$</p>\n</li>\n<li><p>$({\\rm arccot}\\ x)’=-\\frac{1}{1-x^2}$</p>\n</li>\n<li><p>$({\\rm sh}\\ x)’={\\rm ch}\\ x$</p>\n</li>\n<li><p>$({\\rm ch}\\ x)’={\\rm sh}\\ x$</p>\n</li>\n</ul>\n<h3 id=\"牛顿迭代\"><a href=\"#牛顿迭代\" class=\"headerlink\" title=\"牛顿迭代\"></a>牛顿迭代</h3><p>$\\ \\ \\ \\ \\ \\ \\,$这里简单地讲一下<strong> 一阶牛顿迭代 </strong>，牛顿迭代是应用在最优化领域非常重要的一种算法，由于具有二阶收敛性，所以相比二分法能大大降低迭代次数，只能求一个可导函数的零点，或者有二阶导函数的极值，一种全局搜索算法用来解np问题最优解的算法，在算法竞赛中的运用比较少见（<del>Psyduck说</del>）。</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$先放wiki的动图，牛顿迭代动态示例图：</p>\n<p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-CIMMV2UR-1644815019693)(<a href=\"https://upload.wikimedia.org/wikipedia/commons/e/e0/NewtonIteration_Ani.gif\">https://upload.wikimedia.org/wikipedia/commons/e/e0/NewtonIteration_Ani.gif</a>)]</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$容易看出一个重要问题：<strong>对函数的一个点做切线，这个切线与$x$轴的交点当做新的点，重复操作，得到的点就会越来越趋近于零点。</strong></p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$具体证明涉及 <strong>泰勒展开</strong>，就不细讲了。</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$说到函数切线，自然就需要求导。</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$在$\\ f(x)\\ $上，点$\\ x=a\\ $的斜率为$f’(a)$，所以这个切线与$x$轴的交点当做新的点，应该是$\\ a-\\frac{f\\left(a\\right)}{f’\\left(a\\right)}\\ $。</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$所以，我们定义:<br>$F(x)=F(x-1)-\\frac{f\\left(F(x-1)\\right)}{f’\\left(F(x-1)\\right)}$</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$也就是不断去求点，可得这个点是越来越趋近某一个零点的。也就是说，我们的答案，就是$\\ F(+∞)\\ $，既函数$\\ F(x)\\ $的收敛值。</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$若$f(x)$二阶可导，那么在待求的零点$\\ F(+∞)\\ $值周围存在一个区域，只要起始点$\\ F(0)\\ $位于这个邻近区域内，那么牛顿迭代必定收敛。</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$不过……我们显然不需要算无限次，保证精度在一个范围内就行了，显然，牛顿迭代可以做到极快收敛到我们需要的精度，我们并不需要计算太多次。</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$我们最终答案的计算效率、精度，还与迭代系数，也就是最初赋值的$\\ F(0)\\ $有很大关系。（<del>但是因为比较小的x取值范围，本题没有卡迭代系数的选定</del>）。</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$然后贴出一阶牛顿迭代的模板：</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$（<del>如果迭代次数过少或者无解，那么会返回一个错误的答案</del>）</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">double</span> <span class=\"title\">Newton_Iteration</span><span class=\"params\">(<span class=\"type\">double</span> F,<span class=\"type\">int</span> tim)</span></span>&#123;<span class=\"comment\">//输入迭代系数F=F(0)，迭代次数tim</span></span><br><span class=\"line\">  <span class=\"keyword\">while</span>(tim--)F=F-<span class=\"built_in\">f</span>(F)/<span class=\"built_in\">f1</span>(F);<span class=\"comment\">//f1(x)=f&#x27;(x)</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> F;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>$\\ \\ \\ \\ \\ \\ \\,$这里只是简单地讲一下<strong> 一阶牛顿迭代 </strong>，具体的讲解，有兴趣可以戳下面的链接，博主觉得讲得很清晰 <del>（还有互交动画啊XD）</del> 。</p>\n<h2 id=\"—·—·—《推荐讲解文章》—·—·—\"><a href=\"#—·—·—《推荐讲解文章》—·—·—\" class=\"headerlink\" title=\"—·—·—《推荐讲解文章》—·—·—\"></a><a href=\"https://matongxue.com/madocs/205.html\">—·—·—《推荐讲解文章》—·—·—</a></h2><p>$\\ \\ \\ \\ \\ \\ \\,$而对于 <strong>二阶牛顿迭代</strong> 呢，就是在一阶导数上面做 <strong>一阶牛顿迭代</strong> ，求一阶导数上面的零点，就是求原函数的极值了，也就是下面这个函数的收敛值：</p>\n<p>$F(x)=F(x-1)-\\frac{f’\\left(F(x-1)\\right)}{f’’\\left(F(x-1)\\right)}$</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$例题在这里，是我出的:<a href=\"https://www.luogu.org/problemnew/show/P4986\">【P4986 逃离】</a><a href=\"https://www.luogu.org/blog/Althen-Way-Satan/tao-li-ti-xie-post\">【题解】</a></p>"},{"title":"拉格朗日插值法","date":"2018-12-29T06:34:28.000Z","mathjax":true,"_content":"\n$\\ \\ \\ \\ \\ \\ \\ \\,$关于拉格朗日插值法的复习笔记：\n\n$\\ \\ \\ \\ \\ \\ \\,$拉格朗日插值法,是解决多项式点值表达式函数值的问题的算法，具体而言，问题如下：\n  \n$\\ \\ \\ \\ \\ \\ \\,$已知在二维平面上，一多项式$f$的函数图像经过 $n+1$ 个点 $(x_i,y_i)$ ，既我们知道 $f(x_i)=y_i$，求$f(k)$的值。\n\n<!-- more -->\n\n## 初步分析\n\n$\\ \\ \\ \\ \\ \\ \\,$显然，经过 $n+1$ 个点的多项式函数一定是$n$次函数，那么也很显然的，我们可以列出一个 $n$ 元方程组来解决这个问题，形如：\n  \n$\\begin{cases}y_1=a_1\\cdot x_1^n+a_2\\cdot x_1^{n-1}+a_3\\cdot x_1^{n-2}+...+a_{n+1}\\\\y_2=a_1\\cdot x_2^n+a_2\\cdot x_2^{n-1}+a_3\\cdot x_2^{n-2}+...+a_{n+1}\\\\\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ...\\\\y_n=a_1\\cdot x_n^n+a_2\\cdot x_n^{n-1}+a_3\\cdot x_n^{n-2}+...+a_{n+1}\\end{cases}$\n  \n$\\ \\ \\ \\ \\ \\ \\,$直观的，我们可以高斯消元来做，复杂度$O(n^3)$，复杂度多半已上天，那么我们如何快速处理呢？\n  \n## 插值法\n\n$\\ \\ \\ \\ \\ \\ \\,$我们现在知道的是 $f(x_i)=y_i$，那么我们想怎么快速表达出这个多项式，我们设定一种函数 $S_i$：\n  \n$S_i(x)=[x=x_i]$\n  \n$\\ \\ \\ \\ \\ \\ \\,$它的意义是只有当 $x$ 为 $x_i$ 函数值才为 $1$，其他为 $0$，那么显然有：\n  \n$f=\\sum_{i=1}^n y_i\\cdot S_i$\n  \n$\\ \\ \\ \\ \\ \\ \\,$很显然的，$S_i$ 是个 $n$ 次多项式，而我们的答案也就是：\n  \n$f(k)=\\sum_{i=1}^n y_i\\cdot S_i(k)$\n  \n$\\ \\ \\ \\ \\ \\ \\,$遗憾地告诉你，光靠这个办法是不能还原$f$的函数图像的，只能得到近似图像，所以插值法是有一定误差的。\n  \n$\\ \\ \\ \\ \\ \\ \\,$现在我们简化了问题，如何求$S_i$ 是个 $n$ 次多项式。\n  \n$\\ \\ \\ \\ \\ \\ \\,$其实满足$S_i(x)$的函数取值合法挺简单的，主要问题是如何满足他是 $n$ 次多项式的事实，那么我们就先把它化作下面的形态：\n  \n$S_i(k)=\\prod_{j=1,j\\neq \\rm something}^{n+1}a_jk+b_j$\n  \n$\\ \\ \\ \\ \\ \\ \\,$如何就卡住了，我们不知道怎么办，但是还记得吗，我们只能得到近似图像，所以我们只需要满足$S_i(x)$的图像大约在$[x=x_i]$就行了，拉格朗日给了一种解法：\n  \n$S_i(k)=\\prod_{j=1,j\\neq i}^{n+1}\\frac{k-x_j}{x_i-x_j}$\n\n$\\ \\ \\ \\ \\ \\ \\ \\,$具体证明可以看这里：[【 VictoryCzt_拉格朗日插值法学习笔记】](https://blog.csdn.net/VictoryCzt/article/details/82933843)\n  \n$\\ \\ \\ \\ \\ \\ \\ \\,$所以得到拉格朗日公式（$n$个点），复杂度是$O(n^2)$的：\n  \n$f(k)=\\sum_{i=1}^{n} y_i\\prod_{j=1,j\\neq i}^{n}\\frac{k-x_j}{x_i-x_j}$\n  \n## 代码实现：\n\n$\\ \\ \\ \\ \\ \\ \\,$普通的拉格朗日差值法其实代码很简单了：\n\n``` cpp\ndouble Lagrange(double *x,double *y,double n,double k){\n\tdouble top,bot,ret=0;\n\tfor(double i=1;i<=n;i++){\n\t\ttop=1.0;bot=1.0;\n\t\tfor(double j=1;j<=n;++j)if(i!=j)\n\t\t\ttop*=k-x[j],\n\t\t\tbot*=x[i]-x[j];\n\t\tret+=y[i]*top/bot;\n\t}\n\treturn ret;\n}\n```\n$\\ \\ \\ \\ \\ \\ \\,$有些时候呢，我们的 $x_i$ 是连续的，所以说公式变形为：\n\n$f(k)=\\sum_{i=1}^{n} y_i\\prod_{j=1,j\\neq i}^{n}\\frac{k-j}{i-j}$\n\n$\\ \\ \\ \\ \\ \\ \\,$我们令：\n\n$pre_i=\\prod_{j=1}^{i}(k-j)=pre_{i-1}\\times(k-j)$\n\n$suf_i=\\prod_{j=i}^{n}(k-j)=suf_{i+1}\\times(k-j)$\n\n$\\ \\ \\ \\ \\ \\ \\,$显然对于这两个函数是可以$O(n)$预处理的。\n\n$\\ \\ \\ \\ \\ \\ \\,$原公式可以化成：\n\n$f(k)=\\sum_{i=1}^{n} y_i \\frac{pre_{i-1}\\times suf_{i+1}}{(i-1)!\\times(n-i)!}$\n\n$\\ \\ \\ \\ \\ \\ \\,$注意分母是有符号需要判断的，$n-i$为奇数时，分母为负。\n\n$\\ \\ \\ \\ \\ \\ \\,$显然阶乘也可以预处理，于是乎复杂度变成了$O(n)$。\n\n``` cpp\nlong long pre[N],suf[N],fac[N];\nlong long Lagrange(long long *y,long long n,long long k){\n\tlong long top,bot,ret=0;\n\tpre[0]=suf[n+1]=fac[0]=1;\n\tfor(int i=1;i<=n;i++)pre[i]=pre[i-1]*(k-i);\n\tfor(int i=n;i>=1;i--)suf[i]=suf[i+1]*(k-i);\n\tfor(int i=2;i<=n;i++)fac=fac*i;\n\tfor(int i=1;i<=n;i++){\n\t\ttop*=pre[i-1]*suf[i+1],\n\t\tbot*=fac[i-1]*fac[n-i];\n\t\tif((n-i)&1) ret-=y[i]*top/bot;\n\t\telse ret+=y[i]*top/bot;\n\t}\n\treturn ret;\n}\n```\n\n## 例题[【Codeforces Round #492 F. Cowmpany Cowmpensation】](https://codeforces.com/contest/995/problem/F)\n\n$\\ \\ \\ \\ \\ \\ \\,$题目大意：\n\n$\\ \\ \\ \\ \\ \\ \\,$给你一棵 $n$ 个节点的树,以 $1$ 为根节点,现在让你给每个节点分配一个权值$∈[1,D]$,使得每个节点的权值不超过他的父亲节点（ $1$ 号节点除外）,问一共有多少种分配方式。$(1≤n≤3000, 1≤D≤10^9)$。\n\n$\\ \\ \\ \\ \\ \\ \\,$显然直观的有一个二维树形dp的做法，一维表示当前节点，一维表示这个节点的取值情况，来描述方案数：\n\n$f_{i,j}=\\prod_{s\\in Son_i}f_{s,j}+f_{i,j-1}$\n\n$\\ \\ \\ \\ \\ \\ \\,$答案就是$f_{1,D}$了。\n\n$\\ \\ \\ \\ \\ \\ \\,$复杂度为 $O(nD)$ 的，过不了，但是我们观察dp式子，可以发现……这个家伙是个多项式吧？继续大胆猜测，这个是个 $n$ 维多项式。\n\n$\\ \\ \\ \\ \\ \\ \\,$所以我们用dp来预处理出 $f_{1,i}\\ ,\\ {i\\in[1,n+1]}$，然后使用拉格朗日差值法，便可以求出 $f_{1,D}$ 了，复杂度是 $O(n^2)$ 的。\n\n$\\ \\ \\ \\ \\ \\ \\,$代码如下，~~取模真的取死人啊~~\n\n``` cpp\n#include<algorithm>\n#include<iostream>\n#include<cstdlib>\n#include<cstring>\n#include<cctype>\n#include<cstdio>\n#include<vector>\n#include<string>\n#include<queue>\n#include<stack>\n#include<cmath>\n#include<map>\n#include<set>\nusing namespace std;\nconst int inf=0x7fffffff;\nconst double eps=1e-10;\nconst double pi=acos(-1.0);\n//char buf[1<<15],*S=buf,*T=buf;\n//char getch(){return S==T&&(T=(S=buf)+fread(buf,1,1<<15,stdin),S==T)?0:*S++;}\ninline int read(){\n\tint x=0,f=1;char ch;ch=getchar();\n\twhile(ch<'0'||ch>'9'){if(ch=='-') f=0;ch=getchar();}\n\twhile(ch>='0'&&ch<='9'){x=(x<<1)+(x<<3)+(ch&15);ch=getchar();}\n\tif(f)return x;else return -x;\n}\nconst int N=3030;\nconst long long mod=1e9+7;\nlong long power(long long a,long long b){\n\tlong long ans=1ll;\n\tfor(;b;b>>=1,a=a*a%mod)if(b&1ll)ans=ans*a%mod;\n\treturn ans;\n}\nint n;\nlong long D;\nvector<int> G[N];\nlong long f[N][N];\nvoid dfs(int u){\n\tfor(int i=1;i<=n+1;i++)f[u][i]=1;\n\tfor(int i=0;i<G[u].size();i++){\n\t\tdfs(G[u][i]);\n\t\tfor(int j=1;j<=n+1;j++)\n\t\tf[u][j]=(f[u][j]*f[G[u][i]][j])%mod;\n\t}\n\tfor(int x=1;x<=n+1;x++)f[u][x]=(f[u][x]+f[u][x-1])%mod;\n}\nlong long pre[N],suf[N],fac[N];\nlong long Lagrange(long long *y,long long n,long long k){\n  long long top,bot,ret=0,Fac;\n  pre[0]=suf[n+1]=Fac=1ll;\n\tfor(long long i=1;i<=n;i++)pre[i]=(pre[i-1]*(k-i+mod)%mod)%mod;\n\tfor(long long i=n;i>=1;i--)suf[i]=(suf[i+1]*(k-i+mod)%mod)%mod;\n  for(long long i=2;i<=n;i++)Fac=Fac*i%mod;\n  fac[n]=power(Fac,mod-2);\n  for(int i=n-1;i>=0;i--)fac[i]=fac[i+1]*1ll*(i+1)%mod;\n  for(int i=1;i<=n;i++){\n    top=(pre[i-1]*suf[i+1]%mod)%mod,\n    bot=(fac[i-1]*fac[n-i]%mod)%mod;\n    if((n-i)&1)ret=(ret-(y[i]*top%mod*bot%mod)+mod)%mod;\n    else ret=(ret+(y[i]*top%mod*bot%mod))%mod;\n  }\n  return (ret+mod)%mod;\n}\nint main()\n{\n\tn=read();scanf(\"%I64d\",&D);D%=mod;\n\tfor(int i=2,a;i<=n;i++)\n\ta=read(),G[a].push_back(i);\n\tdfs(1);\n\tif(D<=1ll*n+1ll)printf(\"%I64d\\n\",f[1][D]);\n\telse printf(\"%I64d\\n\",Lagrange(f[1],n+1,D));\n\treturn 0;\n}\n\n```\n","source":"_posts/拉格朗日插值法.md","raw":"---\ntitle: '拉格朗日插值法'\ndate: 2018-12-29 14:34:28\ncategories:\n- 学习笔记\ntags:\n- OI\n- 数学\n- 拉格朗日插值法\nmathjax: true\n---\n\n$\\ \\ \\ \\ \\ \\ \\ \\,$关于拉格朗日插值法的复习笔记：\n\n$\\ \\ \\ \\ \\ \\ \\,$拉格朗日插值法,是解决多项式点值表达式函数值的问题的算法，具体而言，问题如下：\n  \n$\\ \\ \\ \\ \\ \\ \\,$已知在二维平面上，一多项式$f$的函数图像经过 $n+1$ 个点 $(x_i,y_i)$ ，既我们知道 $f(x_i)=y_i$，求$f(k)$的值。\n\n<!-- more -->\n\n## 初步分析\n\n$\\ \\ \\ \\ \\ \\ \\,$显然，经过 $n+1$ 个点的多项式函数一定是$n$次函数，那么也很显然的，我们可以列出一个 $n$ 元方程组来解决这个问题，形如：\n  \n$\\begin{cases}y_1=a_1\\cdot x_1^n+a_2\\cdot x_1^{n-1}+a_3\\cdot x_1^{n-2}+...+a_{n+1}\\\\y_2=a_1\\cdot x_2^n+a_2\\cdot x_2^{n-1}+a_3\\cdot x_2^{n-2}+...+a_{n+1}\\\\\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ...\\\\y_n=a_1\\cdot x_n^n+a_2\\cdot x_n^{n-1}+a_3\\cdot x_n^{n-2}+...+a_{n+1}\\end{cases}$\n  \n$\\ \\ \\ \\ \\ \\ \\,$直观的，我们可以高斯消元来做，复杂度$O(n^3)$，复杂度多半已上天，那么我们如何快速处理呢？\n  \n## 插值法\n\n$\\ \\ \\ \\ \\ \\ \\,$我们现在知道的是 $f(x_i)=y_i$，那么我们想怎么快速表达出这个多项式，我们设定一种函数 $S_i$：\n  \n$S_i(x)=[x=x_i]$\n  \n$\\ \\ \\ \\ \\ \\ \\,$它的意义是只有当 $x$ 为 $x_i$ 函数值才为 $1$，其他为 $0$，那么显然有：\n  \n$f=\\sum_{i=1}^n y_i\\cdot S_i$\n  \n$\\ \\ \\ \\ \\ \\ \\,$很显然的，$S_i$ 是个 $n$ 次多项式，而我们的答案也就是：\n  \n$f(k)=\\sum_{i=1}^n y_i\\cdot S_i(k)$\n  \n$\\ \\ \\ \\ \\ \\ \\,$遗憾地告诉你，光靠这个办法是不能还原$f$的函数图像的，只能得到近似图像，所以插值法是有一定误差的。\n  \n$\\ \\ \\ \\ \\ \\ \\,$现在我们简化了问题，如何求$S_i$ 是个 $n$ 次多项式。\n  \n$\\ \\ \\ \\ \\ \\ \\,$其实满足$S_i(x)$的函数取值合法挺简单的，主要问题是如何满足他是 $n$ 次多项式的事实，那么我们就先把它化作下面的形态：\n  \n$S_i(k)=\\prod_{j=1,j\\neq \\rm something}^{n+1}a_jk+b_j$\n  \n$\\ \\ \\ \\ \\ \\ \\,$如何就卡住了，我们不知道怎么办，但是还记得吗，我们只能得到近似图像，所以我们只需要满足$S_i(x)$的图像大约在$[x=x_i]$就行了，拉格朗日给了一种解法：\n  \n$S_i(k)=\\prod_{j=1,j\\neq i}^{n+1}\\frac{k-x_j}{x_i-x_j}$\n\n$\\ \\ \\ \\ \\ \\ \\ \\,$具体证明可以看这里：[【 VictoryCzt_拉格朗日插值法学习笔记】](https://blog.csdn.net/VictoryCzt/article/details/82933843)\n  \n$\\ \\ \\ \\ \\ \\ \\ \\,$所以得到拉格朗日公式（$n$个点），复杂度是$O(n^2)$的：\n  \n$f(k)=\\sum_{i=1}^{n} y_i\\prod_{j=1,j\\neq i}^{n}\\frac{k-x_j}{x_i-x_j}$\n  \n## 代码实现：\n\n$\\ \\ \\ \\ \\ \\ \\,$普通的拉格朗日差值法其实代码很简单了：\n\n``` cpp\ndouble Lagrange(double *x,double *y,double n,double k){\n\tdouble top,bot,ret=0;\n\tfor(double i=1;i<=n;i++){\n\t\ttop=1.0;bot=1.0;\n\t\tfor(double j=1;j<=n;++j)if(i!=j)\n\t\t\ttop*=k-x[j],\n\t\t\tbot*=x[i]-x[j];\n\t\tret+=y[i]*top/bot;\n\t}\n\treturn ret;\n}\n```\n$\\ \\ \\ \\ \\ \\ \\,$有些时候呢，我们的 $x_i$ 是连续的，所以说公式变形为：\n\n$f(k)=\\sum_{i=1}^{n} y_i\\prod_{j=1,j\\neq i}^{n}\\frac{k-j}{i-j}$\n\n$\\ \\ \\ \\ \\ \\ \\,$我们令：\n\n$pre_i=\\prod_{j=1}^{i}(k-j)=pre_{i-1}\\times(k-j)$\n\n$suf_i=\\prod_{j=i}^{n}(k-j)=suf_{i+1}\\times(k-j)$\n\n$\\ \\ \\ \\ \\ \\ \\,$显然对于这两个函数是可以$O(n)$预处理的。\n\n$\\ \\ \\ \\ \\ \\ \\,$原公式可以化成：\n\n$f(k)=\\sum_{i=1}^{n} y_i \\frac{pre_{i-1}\\times suf_{i+1}}{(i-1)!\\times(n-i)!}$\n\n$\\ \\ \\ \\ \\ \\ \\,$注意分母是有符号需要判断的，$n-i$为奇数时，分母为负。\n\n$\\ \\ \\ \\ \\ \\ \\,$显然阶乘也可以预处理，于是乎复杂度变成了$O(n)$。\n\n``` cpp\nlong long pre[N],suf[N],fac[N];\nlong long Lagrange(long long *y,long long n,long long k){\n\tlong long top,bot,ret=0;\n\tpre[0]=suf[n+1]=fac[0]=1;\n\tfor(int i=1;i<=n;i++)pre[i]=pre[i-1]*(k-i);\n\tfor(int i=n;i>=1;i--)suf[i]=suf[i+1]*(k-i);\n\tfor(int i=2;i<=n;i++)fac=fac*i;\n\tfor(int i=1;i<=n;i++){\n\t\ttop*=pre[i-1]*suf[i+1],\n\t\tbot*=fac[i-1]*fac[n-i];\n\t\tif((n-i)&1) ret-=y[i]*top/bot;\n\t\telse ret+=y[i]*top/bot;\n\t}\n\treturn ret;\n}\n```\n\n## 例题[【Codeforces Round #492 F. Cowmpany Cowmpensation】](https://codeforces.com/contest/995/problem/F)\n\n$\\ \\ \\ \\ \\ \\ \\,$题目大意：\n\n$\\ \\ \\ \\ \\ \\ \\,$给你一棵 $n$ 个节点的树,以 $1$ 为根节点,现在让你给每个节点分配一个权值$∈[1,D]$,使得每个节点的权值不超过他的父亲节点（ $1$ 号节点除外）,问一共有多少种分配方式。$(1≤n≤3000, 1≤D≤10^9)$。\n\n$\\ \\ \\ \\ \\ \\ \\,$显然直观的有一个二维树形dp的做法，一维表示当前节点，一维表示这个节点的取值情况，来描述方案数：\n\n$f_{i,j}=\\prod_{s\\in Son_i}f_{s,j}+f_{i,j-1}$\n\n$\\ \\ \\ \\ \\ \\ \\,$答案就是$f_{1,D}$了。\n\n$\\ \\ \\ \\ \\ \\ \\,$复杂度为 $O(nD)$ 的，过不了，但是我们观察dp式子，可以发现……这个家伙是个多项式吧？继续大胆猜测，这个是个 $n$ 维多项式。\n\n$\\ \\ \\ \\ \\ \\ \\,$所以我们用dp来预处理出 $f_{1,i}\\ ,\\ {i\\in[1,n+1]}$，然后使用拉格朗日差值法，便可以求出 $f_{1,D}$ 了，复杂度是 $O(n^2)$ 的。\n\n$\\ \\ \\ \\ \\ \\ \\,$代码如下，~~取模真的取死人啊~~\n\n``` cpp\n#include<algorithm>\n#include<iostream>\n#include<cstdlib>\n#include<cstring>\n#include<cctype>\n#include<cstdio>\n#include<vector>\n#include<string>\n#include<queue>\n#include<stack>\n#include<cmath>\n#include<map>\n#include<set>\nusing namespace std;\nconst int inf=0x7fffffff;\nconst double eps=1e-10;\nconst double pi=acos(-1.0);\n//char buf[1<<15],*S=buf,*T=buf;\n//char getch(){return S==T&&(T=(S=buf)+fread(buf,1,1<<15,stdin),S==T)?0:*S++;}\ninline int read(){\n\tint x=0,f=1;char ch;ch=getchar();\n\twhile(ch<'0'||ch>'9'){if(ch=='-') f=0;ch=getchar();}\n\twhile(ch>='0'&&ch<='9'){x=(x<<1)+(x<<3)+(ch&15);ch=getchar();}\n\tif(f)return x;else return -x;\n}\nconst int N=3030;\nconst long long mod=1e9+7;\nlong long power(long long a,long long b){\n\tlong long ans=1ll;\n\tfor(;b;b>>=1,a=a*a%mod)if(b&1ll)ans=ans*a%mod;\n\treturn ans;\n}\nint n;\nlong long D;\nvector<int> G[N];\nlong long f[N][N];\nvoid dfs(int u){\n\tfor(int i=1;i<=n+1;i++)f[u][i]=1;\n\tfor(int i=0;i<G[u].size();i++){\n\t\tdfs(G[u][i]);\n\t\tfor(int j=1;j<=n+1;j++)\n\t\tf[u][j]=(f[u][j]*f[G[u][i]][j])%mod;\n\t}\n\tfor(int x=1;x<=n+1;x++)f[u][x]=(f[u][x]+f[u][x-1])%mod;\n}\nlong long pre[N],suf[N],fac[N];\nlong long Lagrange(long long *y,long long n,long long k){\n  long long top,bot,ret=0,Fac;\n  pre[0]=suf[n+1]=Fac=1ll;\n\tfor(long long i=1;i<=n;i++)pre[i]=(pre[i-1]*(k-i+mod)%mod)%mod;\n\tfor(long long i=n;i>=1;i--)suf[i]=(suf[i+1]*(k-i+mod)%mod)%mod;\n  for(long long i=2;i<=n;i++)Fac=Fac*i%mod;\n  fac[n]=power(Fac,mod-2);\n  for(int i=n-1;i>=0;i--)fac[i]=fac[i+1]*1ll*(i+1)%mod;\n  for(int i=1;i<=n;i++){\n    top=(pre[i-1]*suf[i+1]%mod)%mod,\n    bot=(fac[i-1]*fac[n-i]%mod)%mod;\n    if((n-i)&1)ret=(ret-(y[i]*top%mod*bot%mod)+mod)%mod;\n    else ret=(ret+(y[i]*top%mod*bot%mod))%mod;\n  }\n  return (ret+mod)%mod;\n}\nint main()\n{\n\tn=read();scanf(\"%I64d\",&D);D%=mod;\n\tfor(int i=2,a;i<=n;i++)\n\ta=read(),G[a].push_back(i);\n\tdfs(1);\n\tif(D<=1ll*n+1ll)printf(\"%I64d\\n\",f[1][D]);\n\telse printf(\"%I64d\\n\",Lagrange(f[1],n+1,D));\n\treturn 0;\n}\n\n```\n","slug":"拉格朗日插值法","published":1,"updated":"2022-02-14T03:27:08.682Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0i63w6a001hu4gb6plh4def","content":"<p>$\\ \\ \\ \\ \\ \\ \\ \\,$关于拉格朗日插值法的复习笔记：</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$拉格朗日插值法,是解决多项式点值表达式函数值的问题的算法，具体而言，问题如下：</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$已知在二维平面上，一多项式$f$的函数图像经过 $n+1$ 个点 $(x_i,y_i)$ ，既我们知道 $f(x_i)=y_i$，求$f(k)$的值。</p>\n<span id=\"more\"></span>\n<h2 id=\"初步分析\"><a href=\"#初步分析\" class=\"headerlink\" title=\"初步分析\"></a>初步分析</h2><p>$\\ \\ \\ \\ \\ \\ \\,$显然，经过 $n+1$ 个点的多项式函数一定是$n$次函数，那么也很显然的，我们可以列出一个 $n$ 元方程组来解决这个问题，形如：</p>\n<p>$\\begin{cases}y_1=a_1\\cdot x_1^n+a_2\\cdot x_1^{n-1}+a_3\\cdot x_1^{n-2}+…+a_{n+1}\\\\y_2=a_1\\cdot x_2^n+a_2\\cdot x_2^{n-1}+a_3\\cdot x_2^{n-2}+…+a_{n+1}\\\\\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ …\\\\y_n=a_1\\cdot x_n^n+a_2\\cdot x_n^{n-1}+a_3\\cdot x_n^{n-2}+…+a_{n+1}\\end{cases}$</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$直观的，我们可以高斯消元来做，复杂度$O(n^3)$，复杂度多半已上天，那么我们如何快速处理呢？</p>\n<h2 id=\"插值法\"><a href=\"#插值法\" class=\"headerlink\" title=\"插值法\"></a>插值法</h2><p>$\\ \\ \\ \\ \\ \\ \\,$我们现在知道的是 $f(x_i)=y_i$，那么我们想怎么快速表达出这个多项式，我们设定一种函数 $S_i$：</p>\n<p>$S_i(x)=[x=x_i]$</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$它的意义是只有当 $x$ 为 $x_i$ 函数值才为 $1$，其他为 $0$，那么显然有：</p>\n<p>$f=\\sum_{i=1}^n y_i\\cdot S_i$</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$很显然的，$S_i$ 是个 $n$ 次多项式，而我们的答案也就是：</p>\n<p>$f(k)=\\sum_{i=1}^n y_i\\cdot S_i(k)$</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$遗憾地告诉你，光靠这个办法是不能还原$f$的函数图像的，只能得到近似图像，所以插值法是有一定误差的。</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$现在我们简化了问题，如何求$S_i$ 是个 $n$ 次多项式。</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$其实满足$S_i(x)$的函数取值合法挺简单的，主要问题是如何满足他是 $n$ 次多项式的事实，那么我们就先把它化作下面的形态：</p>\n<p>$S_i(k)=\\prod_{j=1,j\\neq \\rm something}^{n+1}a_jk+b_j$</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$如何就卡住了，我们不知道怎么办，但是还记得吗，我们只能得到近似图像，所以我们只需要满足$S_i(x)$的图像大约在$[x=x_i]$就行了，拉格朗日给了一种解法：</p>\n<p>$S_i(k)=\\prod_{j=1,j\\neq i}^{n+1}\\frac{k-x_j}{x_i-x_j}$</p>\n<p>$\\ \\ \\ \\ \\ \\ \\ \\,$具体证明可以看这里：<a href=\"https://blog.csdn.net/VictoryCzt/article/details/82933843\">【 VictoryCzt_拉格朗日插值法学习笔记】</a></p>\n<p>$\\ \\ \\ \\ \\ \\ \\ \\,$所以得到拉格朗日公式（$n$个点），复杂度是$O(n^2)$的：</p>\n<p>$f(k)=\\sum_{i=1}^{n} y_i\\prod_{j=1,j\\neq i}^{n}\\frac{k-x_j}{x_i-x_j}$</p>\n<h2 id=\"代码实现：\"><a href=\"#代码实现：\" class=\"headerlink\" title=\"代码实现：\"></a>代码实现：</h2><p>$\\ \\ \\ \\ \\ \\ \\,$普通的拉格朗日差值法其实代码很简单了：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">double</span> <span class=\"title\">Lagrange</span><span class=\"params\">(<span class=\"type\">double</span> *x,<span class=\"type\">double</span> *y,<span class=\"type\">double</span> n,<span class=\"type\">double</span> k)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">double</span> top,bot,ret=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">double</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">\t\ttop=<span class=\"number\">1.0</span>;bot=<span class=\"number\">1.0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"type\">double</span> j=<span class=\"number\">1</span>;j&lt;=n;++j)<span class=\"keyword\">if</span>(i!=j)</span><br><span class=\"line\">\t\t\ttop*=k-x[j],</span><br><span class=\"line\">\t\t\tbot*=x[i]-x[j];</span><br><span class=\"line\">\t\tret+=y[i]*top/bot;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>$\\ \\ \\ \\ \\ \\ \\,$有些时候呢，我们的 $x_i$ 是连续的，所以说公式变形为：</p>\n<p>$f(k)=\\sum_{i=1}^{n} y_i\\prod_{j=1,j\\neq i}^{n}\\frac{k-j}{i-j}$</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$我们令：</p>\n<p>$pre_i=\\prod_{j=1}^{i}(k-j)=pre_{i-1}\\times(k-j)$</p>\n<p>$suf_i=\\prod_{j=i}^{n}(k-j)=suf_{i+1}\\times(k-j)$</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$显然对于这两个函数是可以$O(n)$预处理的。</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$原公式可以化成：</p>\n<p>$f(k)=\\sum_{i=1}^{n} y_i \\frac{pre_{i-1}\\times suf_{i+1}}{(i-1)!\\times(n-i)!}$</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$注意分母是有符号需要判断的，$n-i$为奇数时，分母为负。</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$显然阶乘也可以预处理，于是乎复杂度变成了$O(n)$。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">long</span> <span class=\"type\">long</span> pre[N],suf[N],fac[N];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"title\">Lagrange</span><span class=\"params\">(<span class=\"type\">long</span> <span class=\"type\">long</span> *y,<span class=\"type\">long</span> <span class=\"type\">long</span> n,<span class=\"type\">long</span> <span class=\"type\">long</span> k)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">long</span> <span class=\"type\">long</span> top,bot,ret=<span class=\"number\">0</span>;</span><br><span class=\"line\">\tpre[<span class=\"number\">0</span>]=suf[n+<span class=\"number\">1</span>]=fac[<span class=\"number\">0</span>]=<span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)pre[i]=pre[i<span class=\"number\">-1</span>]*(k-i);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=n;i&gt;=<span class=\"number\">1</span>;i--)suf[i]=suf[i+<span class=\"number\">1</span>]*(k-i);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">2</span>;i&lt;=n;i++)fac=fac*i;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">\t\ttop*=pre[i<span class=\"number\">-1</span>]*suf[i+<span class=\"number\">1</span>],</span><br><span class=\"line\">\t\tbot*=fac[i<span class=\"number\">-1</span>]*fac[n-i];</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>((n-i)&amp;<span class=\"number\">1</span>) ret-=y[i]*top/bot;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> ret+=y[i]*top/bot;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"例题【Codeforces-Round-492-F-Cowmpany-Cowmpensation】\"><a href=\"#例题【Codeforces-Round-492-F-Cowmpany-Cowmpensation】\" class=\"headerlink\" title=\"例题【Codeforces Round #492 F. Cowmpany Cowmpensation】\"></a>例题<a href=\"https://codeforces.com/contest/995/problem/F\">【Codeforces Round #492 F. Cowmpany Cowmpensation】</a></h2><p>$\\ \\ \\ \\ \\ \\ \\,$题目大意：</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$给你一棵 $n$ 个节点的树,以 $1$ 为根节点,现在让你给每个节点分配一个权值$∈[1,D]$,使得每个节点的权值不超过他的父亲节点（ $1$ 号节点除外）,问一共有多少种分配方式。$(1≤n≤3000, 1≤D≤10^9)$。</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$显然直观的有一个二维树形dp的做法，一维表示当前节点，一维表示这个节点的取值情况，来描述方案数：</p>\n<p>$f_{i,j}=\\prod_{s\\in Son_i}f_{s,j}+f_{i,j-1}$</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$答案就是$f_{1,D}$了。</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$复杂度为 $O(nD)$ 的，过不了，但是我们观察dp式子，可以发现……这个家伙是个多项式吧？继续大胆猜测，这个是个 $n$ 维多项式。</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$所以我们用dp来预处理出 $f_{1,i}\\ ,\\ {i\\in[1,n+1]}$，然后使用拉格朗日差值法，便可以求出 $f_{1,D}$ 了，复杂度是 $O(n^2)$ 的。</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$代码如下，<del>取模真的取死人啊</del></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdlib&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cctype&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;stack&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;map&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;set&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> inf=<span class=\"number\">0x7fffffff</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">double</span> eps=<span class=\"number\">1e-10</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">double</span> pi=<span class=\"built_in\">acos</span>(<span class=\"number\">-1.0</span>);</span><br><span class=\"line\"><span class=\"comment\">//char buf[1&lt;&lt;15],*S=buf,*T=buf;</span></span><br><span class=\"line\"><span class=\"comment\">//char getch()&#123;return S==T&amp;&amp;(T=(S=buf)+fread(buf,1,1&lt;&lt;15,stdin),S==T)?0:*S++;&#125;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">int</span> <span class=\"title\">read</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> x=<span class=\"number\">0</span>,f=<span class=\"number\">1</span>;<span class=\"type\">char</span> ch;ch=<span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(ch&lt;<span class=\"string\">&#x27;0&#x27;</span>||ch&gt;<span class=\"string\">&#x27;9&#x27;</span>)&#123;<span class=\"keyword\">if</span>(ch==<span class=\"string\">&#x27;-&#x27;</span>) f=<span class=\"number\">0</span>;ch=<span class=\"built_in\">getchar</span>();&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(ch&gt;=<span class=\"string\">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class=\"string\">&#x27;9&#x27;</span>)&#123;x=(x&lt;&lt;<span class=\"number\">1</span>)+(x&lt;&lt;<span class=\"number\">3</span>)+(ch&amp;<span class=\"number\">15</span>);ch=<span class=\"built_in\">getchar</span>();&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(f)<span class=\"keyword\">return</span> x;<span class=\"keyword\">else</span> <span class=\"keyword\">return</span> -x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">3030</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">long</span> <span class=\"type\">long</span> mod=<span class=\"number\">1e9</span>+<span class=\"number\">7</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"title\">power</span><span class=\"params\">(<span class=\"type\">long</span> <span class=\"type\">long</span> a,<span class=\"type\">long</span> <span class=\"type\">long</span> b)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">long</span> <span class=\"type\">long</span> ans=<span class=\"number\">1ll</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(;b;b&gt;&gt;=<span class=\"number\">1</span>,a=a*a%mod)<span class=\"keyword\">if</span>(b&amp;<span class=\"number\">1ll</span>)ans=ans*a%mod;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> n;</span><br><span class=\"line\"><span class=\"type\">long</span> <span class=\"type\">long</span> D;</span><br><span class=\"line\">vector&lt;<span class=\"type\">int</span>&gt; G[N];</span><br><span class=\"line\"><span class=\"type\">long</span> <span class=\"type\">long</span> f[N][N];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"type\">int</span> u)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n+<span class=\"number\">1</span>;i++)f[u][i]=<span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;G[u].<span class=\"built_in\">size</span>();i++)&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">dfs</span>(G[u][i]);</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;=n+<span class=\"number\">1</span>;j++)</span><br><span class=\"line\">\t\tf[u][j]=(f[u][j]*f[G[u][i]][j])%mod;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> x=<span class=\"number\">1</span>;x&lt;=n+<span class=\"number\">1</span>;x++)f[u][x]=(f[u][x]+f[u][x<span class=\"number\">-1</span>])%mod;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">long</span> <span class=\"type\">long</span> pre[N],suf[N],fac[N];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"title\">Lagrange</span><span class=\"params\">(<span class=\"type\">long</span> <span class=\"type\">long</span> *y,<span class=\"type\">long</span> <span class=\"type\">long</span> n,<span class=\"type\">long</span> <span class=\"type\">long</span> k)</span></span>&#123;</span><br><span class=\"line\">  <span class=\"type\">long</span> <span class=\"type\">long</span> top,bot,ret=<span class=\"number\">0</span>,Fac;</span><br><span class=\"line\">  pre[<span class=\"number\">0</span>]=suf[n+<span class=\"number\">1</span>]=Fac=<span class=\"number\">1ll</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">long</span> <span class=\"type\">long</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)pre[i]=(pre[i<span class=\"number\">-1</span>]*(k-i+mod)%mod)%mod;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">long</span> <span class=\"type\">long</span> i=n;i&gt;=<span class=\"number\">1</span>;i--)suf[i]=(suf[i+<span class=\"number\">1</span>]*(k-i+mod)%mod)%mod;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">long</span> <span class=\"type\">long</span> i=<span class=\"number\">2</span>;i&lt;=n;i++)Fac=Fac*i%mod;</span><br><span class=\"line\">  fac[n]=<span class=\"built_in\">power</span>(Fac,mod<span class=\"number\">-2</span>);</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=n<span class=\"number\">-1</span>;i&gt;=<span class=\"number\">0</span>;i--)fac[i]=fac[i+<span class=\"number\">1</span>]*<span class=\"number\">1ll</span>*(i+<span class=\"number\">1</span>)%mod;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">    top=(pre[i<span class=\"number\">-1</span>]*suf[i+<span class=\"number\">1</span>]%mod)%mod,</span><br><span class=\"line\">    bot=(fac[i<span class=\"number\">-1</span>]*fac[n-i]%mod)%mod;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>((n-i)&amp;<span class=\"number\">1</span>)ret=(ret-(y[i]*top%mod*bot%mod)+mod)%mod;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> ret=(ret+(y[i]*top%mod*bot%mod))%mod;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (ret+mod)%mod;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tn=<span class=\"built_in\">read</span>();<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%I64d&quot;</span>,&amp;D);D%=mod;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">2</span>,a;i&lt;=n;i++)</span><br><span class=\"line\">\ta=<span class=\"built_in\">read</span>(),G[a].<span class=\"built_in\">push_back</span>(i);</span><br><span class=\"line\">\t<span class=\"built_in\">dfs</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(D&lt;=<span class=\"number\">1ll</span>*n+<span class=\"number\">1ll</span>)<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%I64d\\n&quot;</span>,f[<span class=\"number\">1</span>][D]);</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%I64d\\n&quot;</span>,<span class=\"built_in\">Lagrange</span>(f[<span class=\"number\">1</span>],n+<span class=\"number\">1</span>,D));</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>$\\ \\ \\ \\ \\ \\ \\ \\,$关于拉格朗日插值法的复习笔记：</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$拉格朗日插值法,是解决多项式点值表达式函数值的问题的算法，具体而言，问题如下：</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$已知在二维平面上，一多项式$f$的函数图像经过 $n+1$ 个点 $(x_i,y_i)$ ，既我们知道 $f(x_i)=y_i$，求$f(k)$的值。</p>","more":"<h2 id=\"初步分析\"><a href=\"#初步分析\" class=\"headerlink\" title=\"初步分析\"></a>初步分析</h2><p>$\\ \\ \\ \\ \\ \\ \\,$显然，经过 $n+1$ 个点的多项式函数一定是$n$次函数，那么也很显然的，我们可以列出一个 $n$ 元方程组来解决这个问题，形如：</p>\n<p>$\\begin{cases}y_1=a_1\\cdot x_1^n+a_2\\cdot x_1^{n-1}+a_3\\cdot x_1^{n-2}+…+a_{n+1}\\\\y_2=a_1\\cdot x_2^n+a_2\\cdot x_2^{n-1}+a_3\\cdot x_2^{n-2}+…+a_{n+1}\\\\\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ …\\\\y_n=a_1\\cdot x_n^n+a_2\\cdot x_n^{n-1}+a_3\\cdot x_n^{n-2}+…+a_{n+1}\\end{cases}$</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$直观的，我们可以高斯消元来做，复杂度$O(n^3)$，复杂度多半已上天，那么我们如何快速处理呢？</p>\n<h2 id=\"插值法\"><a href=\"#插值法\" class=\"headerlink\" title=\"插值法\"></a>插值法</h2><p>$\\ \\ \\ \\ \\ \\ \\,$我们现在知道的是 $f(x_i)=y_i$，那么我们想怎么快速表达出这个多项式，我们设定一种函数 $S_i$：</p>\n<p>$S_i(x)=[x=x_i]$</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$它的意义是只有当 $x$ 为 $x_i$ 函数值才为 $1$，其他为 $0$，那么显然有：</p>\n<p>$f=\\sum_{i=1}^n y_i\\cdot S_i$</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$很显然的，$S_i$ 是个 $n$ 次多项式，而我们的答案也就是：</p>\n<p>$f(k)=\\sum_{i=1}^n y_i\\cdot S_i(k)$</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$遗憾地告诉你，光靠这个办法是不能还原$f$的函数图像的，只能得到近似图像，所以插值法是有一定误差的。</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$现在我们简化了问题，如何求$S_i$ 是个 $n$ 次多项式。</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$其实满足$S_i(x)$的函数取值合法挺简单的，主要问题是如何满足他是 $n$ 次多项式的事实，那么我们就先把它化作下面的形态：</p>\n<p>$S_i(k)=\\prod_{j=1,j\\neq \\rm something}^{n+1}a_jk+b_j$</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$如何就卡住了，我们不知道怎么办，但是还记得吗，我们只能得到近似图像，所以我们只需要满足$S_i(x)$的图像大约在$[x=x_i]$就行了，拉格朗日给了一种解法：</p>\n<p>$S_i(k)=\\prod_{j=1,j\\neq i}^{n+1}\\frac{k-x_j}{x_i-x_j}$</p>\n<p>$\\ \\ \\ \\ \\ \\ \\ \\,$具体证明可以看这里：<a href=\"https://blog.csdn.net/VictoryCzt/article/details/82933843\">【 VictoryCzt_拉格朗日插值法学习笔记】</a></p>\n<p>$\\ \\ \\ \\ \\ \\ \\ \\,$所以得到拉格朗日公式（$n$个点），复杂度是$O(n^2)$的：</p>\n<p>$f(k)=\\sum_{i=1}^{n} y_i\\prod_{j=1,j\\neq i}^{n}\\frac{k-x_j}{x_i-x_j}$</p>\n<h2 id=\"代码实现：\"><a href=\"#代码实现：\" class=\"headerlink\" title=\"代码实现：\"></a>代码实现：</h2><p>$\\ \\ \\ \\ \\ \\ \\,$普通的拉格朗日差值法其实代码很简单了：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">double</span> <span class=\"title\">Lagrange</span><span class=\"params\">(<span class=\"type\">double</span> *x,<span class=\"type\">double</span> *y,<span class=\"type\">double</span> n,<span class=\"type\">double</span> k)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">double</span> top,bot,ret=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">double</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">\t\ttop=<span class=\"number\">1.0</span>;bot=<span class=\"number\">1.0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"type\">double</span> j=<span class=\"number\">1</span>;j&lt;=n;++j)<span class=\"keyword\">if</span>(i!=j)</span><br><span class=\"line\">\t\t\ttop*=k-x[j],</span><br><span class=\"line\">\t\t\tbot*=x[i]-x[j];</span><br><span class=\"line\">\t\tret+=y[i]*top/bot;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>$\\ \\ \\ \\ \\ \\ \\,$有些时候呢，我们的 $x_i$ 是连续的，所以说公式变形为：</p>\n<p>$f(k)=\\sum_{i=1}^{n} y_i\\prod_{j=1,j\\neq i}^{n}\\frac{k-j}{i-j}$</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$我们令：</p>\n<p>$pre_i=\\prod_{j=1}^{i}(k-j)=pre_{i-1}\\times(k-j)$</p>\n<p>$suf_i=\\prod_{j=i}^{n}(k-j)=suf_{i+1}\\times(k-j)$</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$显然对于这两个函数是可以$O(n)$预处理的。</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$原公式可以化成：</p>\n<p>$f(k)=\\sum_{i=1}^{n} y_i \\frac{pre_{i-1}\\times suf_{i+1}}{(i-1)!\\times(n-i)!}$</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$注意分母是有符号需要判断的，$n-i$为奇数时，分母为负。</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$显然阶乘也可以预处理，于是乎复杂度变成了$O(n)$。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">long</span> <span class=\"type\">long</span> pre[N],suf[N],fac[N];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"title\">Lagrange</span><span class=\"params\">(<span class=\"type\">long</span> <span class=\"type\">long</span> *y,<span class=\"type\">long</span> <span class=\"type\">long</span> n,<span class=\"type\">long</span> <span class=\"type\">long</span> k)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">long</span> <span class=\"type\">long</span> top,bot,ret=<span class=\"number\">0</span>;</span><br><span class=\"line\">\tpre[<span class=\"number\">0</span>]=suf[n+<span class=\"number\">1</span>]=fac[<span class=\"number\">0</span>]=<span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)pre[i]=pre[i<span class=\"number\">-1</span>]*(k-i);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=n;i&gt;=<span class=\"number\">1</span>;i--)suf[i]=suf[i+<span class=\"number\">1</span>]*(k-i);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">2</span>;i&lt;=n;i++)fac=fac*i;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">\t\ttop*=pre[i<span class=\"number\">-1</span>]*suf[i+<span class=\"number\">1</span>],</span><br><span class=\"line\">\t\tbot*=fac[i<span class=\"number\">-1</span>]*fac[n-i];</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>((n-i)&amp;<span class=\"number\">1</span>) ret-=y[i]*top/bot;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> ret+=y[i]*top/bot;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"例题【Codeforces-Round-492-F-Cowmpany-Cowmpensation】\"><a href=\"#例题【Codeforces-Round-492-F-Cowmpany-Cowmpensation】\" class=\"headerlink\" title=\"例题【Codeforces Round #492 F. Cowmpany Cowmpensation】\"></a>例题<a href=\"https://codeforces.com/contest/995/problem/F\">【Codeforces Round #492 F. Cowmpany Cowmpensation】</a></h2><p>$\\ \\ \\ \\ \\ \\ \\,$题目大意：</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$给你一棵 $n$ 个节点的树,以 $1$ 为根节点,现在让你给每个节点分配一个权值$∈[1,D]$,使得每个节点的权值不超过他的父亲节点（ $1$ 号节点除外）,问一共有多少种分配方式。$(1≤n≤3000, 1≤D≤10^9)$。</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$显然直观的有一个二维树形dp的做法，一维表示当前节点，一维表示这个节点的取值情况，来描述方案数：</p>\n<p>$f_{i,j}=\\prod_{s\\in Son_i}f_{s,j}+f_{i,j-1}$</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$答案就是$f_{1,D}$了。</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$复杂度为 $O(nD)$ 的，过不了，但是我们观察dp式子，可以发现……这个家伙是个多项式吧？继续大胆猜测，这个是个 $n$ 维多项式。</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$所以我们用dp来预处理出 $f_{1,i}\\ ,\\ {i\\in[1,n+1]}$，然后使用拉格朗日差值法，便可以求出 $f_{1,D}$ 了，复杂度是 $O(n^2)$ 的。</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$代码如下，<del>取模真的取死人啊</del></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdlib&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cctype&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;stack&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;map&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;set&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> inf=<span class=\"number\">0x7fffffff</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">double</span> eps=<span class=\"number\">1e-10</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">double</span> pi=<span class=\"built_in\">acos</span>(<span class=\"number\">-1.0</span>);</span><br><span class=\"line\"><span class=\"comment\">//char buf[1&lt;&lt;15],*S=buf,*T=buf;</span></span><br><span class=\"line\"><span class=\"comment\">//char getch()&#123;return S==T&amp;&amp;(T=(S=buf)+fread(buf,1,1&lt;&lt;15,stdin),S==T)?0:*S++;&#125;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">int</span> <span class=\"title\">read</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> x=<span class=\"number\">0</span>,f=<span class=\"number\">1</span>;<span class=\"type\">char</span> ch;ch=<span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(ch&lt;<span class=\"string\">&#x27;0&#x27;</span>||ch&gt;<span class=\"string\">&#x27;9&#x27;</span>)&#123;<span class=\"keyword\">if</span>(ch==<span class=\"string\">&#x27;-&#x27;</span>) f=<span class=\"number\">0</span>;ch=<span class=\"built_in\">getchar</span>();&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(ch&gt;=<span class=\"string\">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class=\"string\">&#x27;9&#x27;</span>)&#123;x=(x&lt;&lt;<span class=\"number\">1</span>)+(x&lt;&lt;<span class=\"number\">3</span>)+(ch&amp;<span class=\"number\">15</span>);ch=<span class=\"built_in\">getchar</span>();&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(f)<span class=\"keyword\">return</span> x;<span class=\"keyword\">else</span> <span class=\"keyword\">return</span> -x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">3030</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">long</span> <span class=\"type\">long</span> mod=<span class=\"number\">1e9</span>+<span class=\"number\">7</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"title\">power</span><span class=\"params\">(<span class=\"type\">long</span> <span class=\"type\">long</span> a,<span class=\"type\">long</span> <span class=\"type\">long</span> b)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">long</span> <span class=\"type\">long</span> ans=<span class=\"number\">1ll</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(;b;b&gt;&gt;=<span class=\"number\">1</span>,a=a*a%mod)<span class=\"keyword\">if</span>(b&amp;<span class=\"number\">1ll</span>)ans=ans*a%mod;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> n;</span><br><span class=\"line\"><span class=\"type\">long</span> <span class=\"type\">long</span> D;</span><br><span class=\"line\">vector&lt;<span class=\"type\">int</span>&gt; G[N];</span><br><span class=\"line\"><span class=\"type\">long</span> <span class=\"type\">long</span> f[N][N];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"type\">int</span> u)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n+<span class=\"number\">1</span>;i++)f[u][i]=<span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;G[u].<span class=\"built_in\">size</span>();i++)&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">dfs</span>(G[u][i]);</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;=n+<span class=\"number\">1</span>;j++)</span><br><span class=\"line\">\t\tf[u][j]=(f[u][j]*f[G[u][i]][j])%mod;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> x=<span class=\"number\">1</span>;x&lt;=n+<span class=\"number\">1</span>;x++)f[u][x]=(f[u][x]+f[u][x<span class=\"number\">-1</span>])%mod;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">long</span> <span class=\"type\">long</span> pre[N],suf[N],fac[N];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"title\">Lagrange</span><span class=\"params\">(<span class=\"type\">long</span> <span class=\"type\">long</span> *y,<span class=\"type\">long</span> <span class=\"type\">long</span> n,<span class=\"type\">long</span> <span class=\"type\">long</span> k)</span></span>&#123;</span><br><span class=\"line\">  <span class=\"type\">long</span> <span class=\"type\">long</span> top,bot,ret=<span class=\"number\">0</span>,Fac;</span><br><span class=\"line\">  pre[<span class=\"number\">0</span>]=suf[n+<span class=\"number\">1</span>]=Fac=<span class=\"number\">1ll</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">long</span> <span class=\"type\">long</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)pre[i]=(pre[i<span class=\"number\">-1</span>]*(k-i+mod)%mod)%mod;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">long</span> <span class=\"type\">long</span> i=n;i&gt;=<span class=\"number\">1</span>;i--)suf[i]=(suf[i+<span class=\"number\">1</span>]*(k-i+mod)%mod)%mod;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">long</span> <span class=\"type\">long</span> i=<span class=\"number\">2</span>;i&lt;=n;i++)Fac=Fac*i%mod;</span><br><span class=\"line\">  fac[n]=<span class=\"built_in\">power</span>(Fac,mod<span class=\"number\">-2</span>);</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=n<span class=\"number\">-1</span>;i&gt;=<span class=\"number\">0</span>;i--)fac[i]=fac[i+<span class=\"number\">1</span>]*<span class=\"number\">1ll</span>*(i+<span class=\"number\">1</span>)%mod;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">    top=(pre[i<span class=\"number\">-1</span>]*suf[i+<span class=\"number\">1</span>]%mod)%mod,</span><br><span class=\"line\">    bot=(fac[i<span class=\"number\">-1</span>]*fac[n-i]%mod)%mod;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>((n-i)&amp;<span class=\"number\">1</span>)ret=(ret-(y[i]*top%mod*bot%mod)+mod)%mod;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> ret=(ret+(y[i]*top%mod*bot%mod))%mod;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (ret+mod)%mod;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tn=<span class=\"built_in\">read</span>();<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%I64d&quot;</span>,&amp;D);D%=mod;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">2</span>,a;i&lt;=n;i++)</span><br><span class=\"line\">\ta=<span class=\"built_in\">read</span>(),G[a].<span class=\"built_in\">push_back</span>(i);</span><br><span class=\"line\">\t<span class=\"built_in\">dfs</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(D&lt;=<span class=\"number\">1ll</span>*n+<span class=\"number\">1ll</span>)<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%I64d\\n&quot;</span>,f[<span class=\"number\">1</span>][D]);</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%I64d\\n&quot;</span>,<span class=\"built_in\">Lagrange</span>(f[<span class=\"number\">1</span>],n+<span class=\"number\">1</span>,D));</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>"},{"title":"最短路，生成树和生成树形图相关","date":"2018-12-29T06:12:34.000Z","mathjax":true,"_content":"\n$\\ \\ \\ \\ \\ \\ \\ \\,$图论基础复习笔记：\n\n<!-- more -->\n\n## 存图相关\n\n### 1.邻接表：\n  \n$\\ \\ \\ \\ \\ \\ \\ \\,$在点数特别小的时候，我们可以用邻接表（二维数组）来表示点之间的链接关系。\n  \n``` cpp\nint e[N][N];\nvoid add(int a,int b,int w){e[a][b]=w;}\n```\n\n### 2. 链表：\n\n$\\ \\ \\ \\ \\ \\ \\ \\,$在点数比较大的时候，我们可以用链式向前星来表示点之间的链接关系。\n\n``` cpp\nint head[N],p;\nstruct Edge{int v,w,last;}E[N];\nvoid add(int a,int b,int w)\n{E[++p]=(Edge){b,w,head[a]};head[a]=p;}\n```\n\n$\\ \\ \\ \\ \\ \\ \\ \\,$遍历方式如下：\n\n``` cpp\nfor(int i=head[u];i;i=G[i].last)G[i].v,G[i].w;\n//G[i].v就是u的直接连接点，G[i].w是边上信息\n```\n\n### 3.动态数组\n\n$\\ \\ \\ \\ \\ \\ \\ \\,$在点数比较大的时候，我们可以用$\\tt vector$，会比链表慢一点，但是比较方便，下面默认都是这种存图方法。\n\n``` cpp\nstruct Edge{int p,w;}E[N];\nvector<Edge> e[N];\nvoid add(int a,int b,int w)\n{e[a].push_back((Edge){b,w});}\n```\n\n$\\ \\ \\ \\ \\ \\ \\,$遍历方式如下：\n\n``` cpp\nfor(auto v:E[u])v.p,v.w;\n//v.p就是u的直接连接点，v.w是边上信息\n```\n\n\n## 最短路\n\n$\\ \\ \\ \\ \\ \\ \\ \\,$最短路的核心思想都差不多，用松弛操作来求解，所以只讲算法特点和用法，不讲原理：\n\n### 1.Floyd\n\n$\\ \\ \\ \\ \\ \\ \\ \\,$Floyd可以在$O(n^3)$的时间内，求出任意点对两两之间的距离，支持负边权：\n\n``` cpp\nint dis[N][N];\nvoid floyd(){\n\tmemset(dis,63,sizeof(dis));\n\tfor(int i=1;i<=n;i++){\n\t\tdis[i][i]=0;\n\t\tfor(auto v:E[i])dis[i][v.p]=v.w;\n\t}\n\tfor(int k=1;k<=n;k++)\n\tfor(int i=1;i<=n;i++)\n\tfor(int j=1;j<=n;j++)\n\tif(dist[i][j]>dist[i][k]+dist[k][j])\n\tdist[i][j]=dist[i][k]+dist[k][j];\n} \n```\n\n### 2.SPFA\n\n$\\ \\ \\ \\ \\ \\ \\ \\,$SPFA可以在下到$n$上到$(n^2)$的时间内，求出单源对于每个点最短路，支持负边权，但是因为复杂度不平衡，关于SPFA,他死了：\n\n\n``` cpp\nint dis[N];\nbool used[N];\nqueue<int> Q;\nvoid SPFA(int S){\n\tmemset(dis,63,sizeof(dis));\n  Q.push(S);used[S]=1;dis[S]=0;\n  while(!Q.empty()){\n    int u=Q.front();Q.pop();used[u]=0;\n    for(auto v:E[u])\n    if(dis[v.p]>dis[u]+v.w){\n      dis[v.p]=dis[u]+v.w;\n      if(used[v.p]==0)\n\t\t\t{used[v.p]=1;Q.push(v.p);}\n    }\n  }\n}\n```\n\n$\\ \\ \\ \\ \\ \\ \\ \\,$或者SPFA加上堆优化后，复杂度会比较好，长得也和Dijkstra很相像了：\n\n``` cpp\nstruct node{int v,dis;};\ninline bool operator <(const node &a,const node &b)\n{return a.dis>b.dis;}\nint dis[N];\npriority_queue<node> Q;\nvoid heap_SPFA(int S){\n\tmemset(dis,63,sizeof(dis));\n  Q.push((node){1,0});\n\tdis[S]=0;used[S]=1;\n  while(!Q.empty()){\n    int u=Q.top().v;Q.pop();used[u]=0;\n    for(auto v:E[u])\n    if(dis[v.p]>dis[u]+v.w){\n      dis[v.p]=dis[u]+v.w;\n      if(used[v.p]==0)\n\t\t\t{used[v.p]=1;Q.push((node){dis[v.p],v.p})};\n    }\n  }\n}\n```\n\n### 3.Dijkstra\n\n$\\ \\ \\ \\ \\ \\ \\ \\,$Dijkstra可以在$O(n\\log n)$的时间内，求出单源对于每个点最短路，但是不支持负边权：\n\n``` cpp\nstruct node{int v,dis;};\ninline bool operator <(const node &a,const node &b)\n{return a.dis>b.dis;}\nint dis[N];\npriority_queue<node> Q;\nvoid Dijkstra(int S){\n\tmemset(dis,63,sizeof(dis));\n  \tQ.push((node){1,0});dis[S]=0;\n  \twhile(!Q.empty()){\n    \tint u=Q.top().v;Q.pop();\n    \tfor(auto v:E[u])\n    \tif(dis[v.p]>dis[u]+v.w){\n      \t\tdis[v.p]=dis[u]+v.w;\n\t\t\tQ.push((node){dis[v.p],v.p});\n    \t}\n  \t}\n}\n```\n\n\n## 生成树\n\n$\\ \\ \\ \\ \\ \\ \\ \\,$生成树是针对无向图的说法，基本上是基于贪心的操作。\n\n### 1.最小生成树\n\n$\\ \\ \\ \\ \\ \\ \\ \\,$最小生成树最常见的贪心做法是Kruskal，因为一棵树$n-1$条边，我们可以把所有边排序过后，贪心选取能构成树的最小的$n-1$条边，用并查集维护其连通性：\n\n``` cpp\nint top,fa[N];\nstruct Link{int u,v,w;}e[N];\ninline bool operator <(const Link &a,const Link &b){return a.w<b.w;}\nint find(int a){return a==fa[a]?a:fa[a]=find(fa[a]);}\nvoid add_edge(int a,int b,int w){e[++top]=(Link){a,b,w};}\nvoid Kruskal(){\n\tsort(e+1,e+top+1);\n\tfor(int i=1;i<=n;i++)fa[i]=i;\n  for(int i=1,A,B;i<=m;i++)\n  if((A=find(e[i].u))!=(B=find(e[i].v))){\n\t\tadd(e[i].u,e[i].v,e[i].w);\n\t\tadd(e[i].v,e[i].u,e[i].w);\n\t\tfa[A]=B;\n\t}\n}\n```\n\n### 2.次小生成树\\k小生成树\\严格次小生成树\n\n$\\ \\ \\ \\ \\ \\ \\ \\,$次小生成树，我们就是做如下操作：\n\n1. 做一次最小生成树；\n\n2. 在没有加入树边的边中选一个最小的，假设为u与v之间的边；\n\n3. 在最小生成树上面$u$到$v$的路径上，删除一条最长的边；\n\n4. 然后把2步中选择的边加入树边。\n\n$\\ \\ \\ \\ \\ \\ \\ \\,$复杂度是$O(m\\log m+n\\log n)$，操作比较繁琐，虽然有些时候不需要真实建树，但是还是很繁琐，就不单独贴模板了。\n\n$\\ \\ \\ \\ \\ \\ \\ \\,$对于k小生成树，我们做k次就好了啊，复杂度$O(m\\log m+kn\\log n)$。\n\n$\\ \\ \\ \\ \\ \\ \\ \\,$对于严格次小生成树，我们做最多$m$次，检查直到严格大于最小生成树就停止，复杂度$O(m\\log m+mn\\log n)$。\n\n### [P4180 【模板】严格次小生成树[BJWC2010]](https://www.luogu.org/problemnew/show/P4180)\n\n$\\ \\ \\ \\ \\ \\ \\ \\,$代码很长，引起不适：\n\n``` cpp\n#include<algorithm>\n#include<iostream>\n#include<cstdlib>\n#include<cstring>\n#include<cctype>\n#include<cstdio>\n#include<vector>\n#include<string>\n#include<queue>\n#include<stack>\n#include<cmath>\n#include<map>\n#include<set>\nusing namespace std;\nconst long long inf=2147483647000000;\nconst double eps=1e-10;\nconst double pi=acos(-1.0);\n//char buf[1<<15],*S=buf,*T=buf;\n//char getch(){return S==T&&(T=(S=buf)+fread(buf,1,1<<15,stdin),S==T)?0:*S++;}\ninline int read(){\n\tint x=0,f=1;char ch;ch=getchar();\n\twhile(ch<'0'||ch>'9'){if(ch=='-') f=0;ch=getchar();}\n\twhile(ch>='0'&&ch<='9'){x=(x<<1)+(x<<3)+(ch&15);ch=getchar();}\n\tif(f)return x;else return x;\n}\nconst int N=900010;\nint n,m;\nlong long Cnt;\nbool used[N];\nstruct Edge{int p,w;}E[N];\nvector<Edge> G[N<<1];\nvoid add(int a,int b,int w)\n{G[a].push_back((Edge){b,w});}\nint top,Fa[N];\nstruct Link{int u,v,w;}e[N];\ninline bool operator <(const Link &a,const Link &b){return a.w<b.w;}\nint find(int a){return a==Fa[a]?a:Fa[a]=find(Fa[a]);}\nvoid add_edge(int a,int b,int w){e[++top]=(Link){a,b,w};}\nvoid Kruskal(){\n\tsort(e+1,e+top+1);\n\tfor(int i=1;i<=n;i++)Fa[i]=i;\n  for(int i=1,A,B;i<=m;i++)\n  if((A=find(e[i].u))!=(B=find(e[i].v))){\n\t\tadd(e[i].u,e[i].v,e[i].w);\n\t\tadd(e[i].v,e[i].u,e[i].w);\n\t\tCnt+=1ll*e[i].w;\n\t\tused[i]=1;\n\t\tFa[A]=B;\n\t}\n}\n\nint fa[N][19],deep[N];\nlong long Max[N][19],Min[N][19];\nvoid dfs(int u,int f){\n  fa[u][0]=f;\n  for(auto v:G[u]){\n    if(v.p==f)continue;\n    deep[v.p]=deep[u]+1;\n    Max[v.p][0]=v.w;\n    Min[v.p][0]=-inf;\n    dfs(v.p,u);\n  }\n}\nvoid cal(){\n  for(int i=1;i<=18;++i)\n  for(int j=1;j<=n;++j){\n    fa[j][i]=fa[fa[j][i-1]][i-1];\n    Max[j][i]=max(Max[j][i-1],Max[fa[j][i-1]][i-1]);\n    Min[j][i]=max(Min[j][i-1],Min[fa[j][i-1]][i-1]);\n    if(Max[j][i-1]>Max[fa[j][i-1]][i-1])\n\t\tMin[j][i]=max(Min[j][i],Max[fa[j][i-1]][i-1]);\n    else if(Max[j][i-1]<Max[fa[j][i-1]][i-1])\n\t\tMin[j][i]=max(Min[j][i],Max[j][i-1]);\n  }\n}\nint LCA(int x,int y){\n  if(deep[x]<deep[y])swap(x,y);\n  for(int i=18;i>=0;--i)\n  if(deep[fa[x][i]]>=deep[y])x=fa[x][i];\n  if(x==y)return x;\n  for(int i=18;i>=0;--i)\n  if(fa[x][i]!=fa[y][i])x=fa[x][i],y=fa[y][i];\n  return fa[x][0];\n}\nlong long qmax(int u,int v,long long maxx){\n  long long Ans=-inf;\n  for(int i=18;i>=0;--i)\n  if(deep[fa[u][i]]>=deep[v]){\n    if(maxx!=Max[u][i])Ans=max(Ans,Max[u][i]);\n    else Ans=max(Ans,Min[u][i]);\n    u=fa[u][i];\n\t}\n  return Ans;\n}\nint main()\n{\n\tn=read(),m=read();\n\tfor(int i=1,a,b,c;i<=m;i++)\n\ta=read(),b=read(),c=read(),\n\tadd_edge(a,b,c);\n\tKruskal();\n\tlong long Ans=inf;\n  Min[1][0]=-inf;\n  deep[1]=1;\n\tdfs(1,-1);cal();\n\tfor(int i=1;i<=m;++i)if(!used[i]){\n    int u=e[i].u,v=e[i].v,lca=LCA(u,v);\n    long long d=e[i].w;\n    Ans=min(Ans,Cnt-max(qmax(u,lca,d),qmax(v,lca,d))+d);\n  }\n  printf(\"%lld\",Ans);\n\treturn 0;\n}\n\n```\n\n### 3.斯坦纳树\n\n$\\ \\ \\ \\ \\ \\ \\ \\,$当只要求图的一部分点连接的时候，求最小的生成树，就是斯坦纳树，做法比较繁琐，大数据也不能优秀地处理。具体看这里[【斯坦纳树学习笔记(VictoryCzt Orz)】](https://blog.csdn.net/VictoryCzt/article/details/82972857)。\n\n\n## 生成树形图\n\n$\\ \\ \\ \\ \\ \\ \\ \\,$树形图不是一个有很好求法的东西，朱刘算法可以做到复杂度$O(nm)$求出最小树形图，过程大概如下：\n\n1. 找到除了$root$以为其他点的权值最小的入边，如果出现除了$root$以外存在其他孤立的点，则不存在最小树形图。\n\n2. 找到图中所有的环，并对环进行缩点，重新编号，更新其他点到环上的点的距离。\n\n3. 以环数为下一次查找的点数，继续执行上述操作，直到没有环或者判定出不存在最小树形图为止。\n\n$\\ \\ \\ \\ \\ \\ \\ \\,$大概就是这个图的意思：\n\n![](https://img-blog.csdnimg.cn/img_convert/b5fbfbb3e6872794a624ca4947d868ae.png)\n\n``` cpp\nint n,root;  \nint k[N],idx[N],x,tim;\nint cost[N],fa[N],f[N];\nint mincost[N],ans,top;\nstruct Link{int u,v,w;}e[N];\ninline bool operator <(const Link &a,const Link &b){return a.w<b.w;}\nvoid add_edge(int a,int b,int w){e[++top]=(Link){a,b,w};}\nint Zhu_Liu(int root){\n  while(1){\n    memset(mincost,63,sizeof(mincost));\n    memset(idx,-1,sizeof(idx));\n    memset(f,0,sizeof(f));\n    for(int i=1;i<=m;i++)\n    if(e[i].w<mincost[e[i].v]&&e[i].u!=e[i].v)\n\t\t{mincost[e[i].v]=e[i].w;fa[e[i].v]=e[i].u;}\n    mincost[root]=0;tim=0;\n    for(int i=1;i<=n;i++){\n    \tif(mincost[i]==mincost[0])return 1;\n      ans+=mincost[i];x=i;\n      while(f[x]!=i&&x!=root)f[x]=i,x=fa[x];\n      if(x!=root&&idx[x]==-1){\n        tim++;\n        for(int j=fa[x];j!=x;j=fa[j])idx[j]=tim;\n        idx[x]=tim;\n      }\n    }\n    if(tim==0)break;\n    for(int i=1;i<=n;i++)\n    if(idx[i]==-1)idx[i]=++tim;\n    for(int i=1;i<=m;i++){\n      x=e[i].v;e[i].u=idx[e[i].u];e[i].v=idx[e[i].v];\n      if(e[i].u!=e[i].v)e[i].w-=mincost[x];\n    }\n    n=tim;root=idx[root];\n  }\n  return ans;\n}\n```\n\n\n## 生成树和生成树形图计数\n\n$\\ \\ \\ \\ \\ \\ \\ \\,$计数的话，需要用到矩阵树定理：\n\n$\\ \\ \\ \\ \\ \\ \\ \\,$**图基尔霍夫矩阵的行列式值就是图的生成树个数**\n\n$\\ \\ \\ \\ \\ \\ \\ \\,$对于生成树形图同样适用，把双向边和入度改为单向即可，通过线性代数技巧优化求行列式的复杂度，可以做到$O(n^3+nm)$。\n\n``` cpp\nint A[N][N];\nvoid add(int a,int b){\n\tA[a][a]++;A[b][b]++;\n\tA[a][b]--;A[b][a]--;\n}\nint Gauss(){\n\tint ans=1;\n\tfor(int i=1;i<n;i++){\n\t\tfor(int j=i+1;j<n;j++)\n\t\twhile(A[j][i]){\n\t\t\tint t=A[i][i]/A[j][i];\n\t\t\tfor(int k=i;k<n;k++)\n\t\t\tA[i][k]-=t*A[j][k];\n\t\t\tswap(A[j],A[i]);\n\t\t\tans=-ans;\n\t\t}\n\t\tans*=A[i][i];\n\t}\n\treturn ans\n}\n\n```\n","source":"_posts/最短路-生成树和生成树形图相关.md","raw":"---\ntitle: '最短路，生成树和生成树形图相关'\ndate: 2018-12-29 14:12:34\ncategories:\n- 学习笔记\ntags:\n- OI\n- 图论\n- 最短路\n- 生成树形图\nmathjax: true\n---\n\n$\\ \\ \\ \\ \\ \\ \\ \\,$图论基础复习笔记：\n\n<!-- more -->\n\n## 存图相关\n\n### 1.邻接表：\n  \n$\\ \\ \\ \\ \\ \\ \\ \\,$在点数特别小的时候，我们可以用邻接表（二维数组）来表示点之间的链接关系。\n  \n``` cpp\nint e[N][N];\nvoid add(int a,int b,int w){e[a][b]=w;}\n```\n\n### 2. 链表：\n\n$\\ \\ \\ \\ \\ \\ \\ \\,$在点数比较大的时候，我们可以用链式向前星来表示点之间的链接关系。\n\n``` cpp\nint head[N],p;\nstruct Edge{int v,w,last;}E[N];\nvoid add(int a,int b,int w)\n{E[++p]=(Edge){b,w,head[a]};head[a]=p;}\n```\n\n$\\ \\ \\ \\ \\ \\ \\ \\,$遍历方式如下：\n\n``` cpp\nfor(int i=head[u];i;i=G[i].last)G[i].v,G[i].w;\n//G[i].v就是u的直接连接点，G[i].w是边上信息\n```\n\n### 3.动态数组\n\n$\\ \\ \\ \\ \\ \\ \\ \\,$在点数比较大的时候，我们可以用$\\tt vector$，会比链表慢一点，但是比较方便，下面默认都是这种存图方法。\n\n``` cpp\nstruct Edge{int p,w;}E[N];\nvector<Edge> e[N];\nvoid add(int a,int b,int w)\n{e[a].push_back((Edge){b,w});}\n```\n\n$\\ \\ \\ \\ \\ \\ \\,$遍历方式如下：\n\n``` cpp\nfor(auto v:E[u])v.p,v.w;\n//v.p就是u的直接连接点，v.w是边上信息\n```\n\n\n## 最短路\n\n$\\ \\ \\ \\ \\ \\ \\ \\,$最短路的核心思想都差不多，用松弛操作来求解，所以只讲算法特点和用法，不讲原理：\n\n### 1.Floyd\n\n$\\ \\ \\ \\ \\ \\ \\ \\,$Floyd可以在$O(n^3)$的时间内，求出任意点对两两之间的距离，支持负边权：\n\n``` cpp\nint dis[N][N];\nvoid floyd(){\n\tmemset(dis,63,sizeof(dis));\n\tfor(int i=1;i<=n;i++){\n\t\tdis[i][i]=0;\n\t\tfor(auto v:E[i])dis[i][v.p]=v.w;\n\t}\n\tfor(int k=1;k<=n;k++)\n\tfor(int i=1;i<=n;i++)\n\tfor(int j=1;j<=n;j++)\n\tif(dist[i][j]>dist[i][k]+dist[k][j])\n\tdist[i][j]=dist[i][k]+dist[k][j];\n} \n```\n\n### 2.SPFA\n\n$\\ \\ \\ \\ \\ \\ \\ \\,$SPFA可以在下到$n$上到$(n^2)$的时间内，求出单源对于每个点最短路，支持负边权，但是因为复杂度不平衡，关于SPFA,他死了：\n\n\n``` cpp\nint dis[N];\nbool used[N];\nqueue<int> Q;\nvoid SPFA(int S){\n\tmemset(dis,63,sizeof(dis));\n  Q.push(S);used[S]=1;dis[S]=0;\n  while(!Q.empty()){\n    int u=Q.front();Q.pop();used[u]=0;\n    for(auto v:E[u])\n    if(dis[v.p]>dis[u]+v.w){\n      dis[v.p]=dis[u]+v.w;\n      if(used[v.p]==0)\n\t\t\t{used[v.p]=1;Q.push(v.p);}\n    }\n  }\n}\n```\n\n$\\ \\ \\ \\ \\ \\ \\ \\,$或者SPFA加上堆优化后，复杂度会比较好，长得也和Dijkstra很相像了：\n\n``` cpp\nstruct node{int v,dis;};\ninline bool operator <(const node &a,const node &b)\n{return a.dis>b.dis;}\nint dis[N];\npriority_queue<node> Q;\nvoid heap_SPFA(int S){\n\tmemset(dis,63,sizeof(dis));\n  Q.push((node){1,0});\n\tdis[S]=0;used[S]=1;\n  while(!Q.empty()){\n    int u=Q.top().v;Q.pop();used[u]=0;\n    for(auto v:E[u])\n    if(dis[v.p]>dis[u]+v.w){\n      dis[v.p]=dis[u]+v.w;\n      if(used[v.p]==0)\n\t\t\t{used[v.p]=1;Q.push((node){dis[v.p],v.p})};\n    }\n  }\n}\n```\n\n### 3.Dijkstra\n\n$\\ \\ \\ \\ \\ \\ \\ \\,$Dijkstra可以在$O(n\\log n)$的时间内，求出单源对于每个点最短路，但是不支持负边权：\n\n``` cpp\nstruct node{int v,dis;};\ninline bool operator <(const node &a,const node &b)\n{return a.dis>b.dis;}\nint dis[N];\npriority_queue<node> Q;\nvoid Dijkstra(int S){\n\tmemset(dis,63,sizeof(dis));\n  \tQ.push((node){1,0});dis[S]=0;\n  \twhile(!Q.empty()){\n    \tint u=Q.top().v;Q.pop();\n    \tfor(auto v:E[u])\n    \tif(dis[v.p]>dis[u]+v.w){\n      \t\tdis[v.p]=dis[u]+v.w;\n\t\t\tQ.push((node){dis[v.p],v.p});\n    \t}\n  \t}\n}\n```\n\n\n## 生成树\n\n$\\ \\ \\ \\ \\ \\ \\ \\,$生成树是针对无向图的说法，基本上是基于贪心的操作。\n\n### 1.最小生成树\n\n$\\ \\ \\ \\ \\ \\ \\ \\,$最小生成树最常见的贪心做法是Kruskal，因为一棵树$n-1$条边，我们可以把所有边排序过后，贪心选取能构成树的最小的$n-1$条边，用并查集维护其连通性：\n\n``` cpp\nint top,fa[N];\nstruct Link{int u,v,w;}e[N];\ninline bool operator <(const Link &a,const Link &b){return a.w<b.w;}\nint find(int a){return a==fa[a]?a:fa[a]=find(fa[a]);}\nvoid add_edge(int a,int b,int w){e[++top]=(Link){a,b,w};}\nvoid Kruskal(){\n\tsort(e+1,e+top+1);\n\tfor(int i=1;i<=n;i++)fa[i]=i;\n  for(int i=1,A,B;i<=m;i++)\n  if((A=find(e[i].u))!=(B=find(e[i].v))){\n\t\tadd(e[i].u,e[i].v,e[i].w);\n\t\tadd(e[i].v,e[i].u,e[i].w);\n\t\tfa[A]=B;\n\t}\n}\n```\n\n### 2.次小生成树\\k小生成树\\严格次小生成树\n\n$\\ \\ \\ \\ \\ \\ \\ \\,$次小生成树，我们就是做如下操作：\n\n1. 做一次最小生成树；\n\n2. 在没有加入树边的边中选一个最小的，假设为u与v之间的边；\n\n3. 在最小生成树上面$u$到$v$的路径上，删除一条最长的边；\n\n4. 然后把2步中选择的边加入树边。\n\n$\\ \\ \\ \\ \\ \\ \\ \\,$复杂度是$O(m\\log m+n\\log n)$，操作比较繁琐，虽然有些时候不需要真实建树，但是还是很繁琐，就不单独贴模板了。\n\n$\\ \\ \\ \\ \\ \\ \\ \\,$对于k小生成树，我们做k次就好了啊，复杂度$O(m\\log m+kn\\log n)$。\n\n$\\ \\ \\ \\ \\ \\ \\ \\,$对于严格次小生成树，我们做最多$m$次，检查直到严格大于最小生成树就停止，复杂度$O(m\\log m+mn\\log n)$。\n\n### [P4180 【模板】严格次小生成树[BJWC2010]](https://www.luogu.org/problemnew/show/P4180)\n\n$\\ \\ \\ \\ \\ \\ \\ \\,$代码很长，引起不适：\n\n``` cpp\n#include<algorithm>\n#include<iostream>\n#include<cstdlib>\n#include<cstring>\n#include<cctype>\n#include<cstdio>\n#include<vector>\n#include<string>\n#include<queue>\n#include<stack>\n#include<cmath>\n#include<map>\n#include<set>\nusing namespace std;\nconst long long inf=2147483647000000;\nconst double eps=1e-10;\nconst double pi=acos(-1.0);\n//char buf[1<<15],*S=buf,*T=buf;\n//char getch(){return S==T&&(T=(S=buf)+fread(buf,1,1<<15,stdin),S==T)?0:*S++;}\ninline int read(){\n\tint x=0,f=1;char ch;ch=getchar();\n\twhile(ch<'0'||ch>'9'){if(ch=='-') f=0;ch=getchar();}\n\twhile(ch>='0'&&ch<='9'){x=(x<<1)+(x<<3)+(ch&15);ch=getchar();}\n\tif(f)return x;else return x;\n}\nconst int N=900010;\nint n,m;\nlong long Cnt;\nbool used[N];\nstruct Edge{int p,w;}E[N];\nvector<Edge> G[N<<1];\nvoid add(int a,int b,int w)\n{G[a].push_back((Edge){b,w});}\nint top,Fa[N];\nstruct Link{int u,v,w;}e[N];\ninline bool operator <(const Link &a,const Link &b){return a.w<b.w;}\nint find(int a){return a==Fa[a]?a:Fa[a]=find(Fa[a]);}\nvoid add_edge(int a,int b,int w){e[++top]=(Link){a,b,w};}\nvoid Kruskal(){\n\tsort(e+1,e+top+1);\n\tfor(int i=1;i<=n;i++)Fa[i]=i;\n  for(int i=1,A,B;i<=m;i++)\n  if((A=find(e[i].u))!=(B=find(e[i].v))){\n\t\tadd(e[i].u,e[i].v,e[i].w);\n\t\tadd(e[i].v,e[i].u,e[i].w);\n\t\tCnt+=1ll*e[i].w;\n\t\tused[i]=1;\n\t\tFa[A]=B;\n\t}\n}\n\nint fa[N][19],deep[N];\nlong long Max[N][19],Min[N][19];\nvoid dfs(int u,int f){\n  fa[u][0]=f;\n  for(auto v:G[u]){\n    if(v.p==f)continue;\n    deep[v.p]=deep[u]+1;\n    Max[v.p][0]=v.w;\n    Min[v.p][0]=-inf;\n    dfs(v.p,u);\n  }\n}\nvoid cal(){\n  for(int i=1;i<=18;++i)\n  for(int j=1;j<=n;++j){\n    fa[j][i]=fa[fa[j][i-1]][i-1];\n    Max[j][i]=max(Max[j][i-1],Max[fa[j][i-1]][i-1]);\n    Min[j][i]=max(Min[j][i-1],Min[fa[j][i-1]][i-1]);\n    if(Max[j][i-1]>Max[fa[j][i-1]][i-1])\n\t\tMin[j][i]=max(Min[j][i],Max[fa[j][i-1]][i-1]);\n    else if(Max[j][i-1]<Max[fa[j][i-1]][i-1])\n\t\tMin[j][i]=max(Min[j][i],Max[j][i-1]);\n  }\n}\nint LCA(int x,int y){\n  if(deep[x]<deep[y])swap(x,y);\n  for(int i=18;i>=0;--i)\n  if(deep[fa[x][i]]>=deep[y])x=fa[x][i];\n  if(x==y)return x;\n  for(int i=18;i>=0;--i)\n  if(fa[x][i]!=fa[y][i])x=fa[x][i],y=fa[y][i];\n  return fa[x][0];\n}\nlong long qmax(int u,int v,long long maxx){\n  long long Ans=-inf;\n  for(int i=18;i>=0;--i)\n  if(deep[fa[u][i]]>=deep[v]){\n    if(maxx!=Max[u][i])Ans=max(Ans,Max[u][i]);\n    else Ans=max(Ans,Min[u][i]);\n    u=fa[u][i];\n\t}\n  return Ans;\n}\nint main()\n{\n\tn=read(),m=read();\n\tfor(int i=1,a,b,c;i<=m;i++)\n\ta=read(),b=read(),c=read(),\n\tadd_edge(a,b,c);\n\tKruskal();\n\tlong long Ans=inf;\n  Min[1][0]=-inf;\n  deep[1]=1;\n\tdfs(1,-1);cal();\n\tfor(int i=1;i<=m;++i)if(!used[i]){\n    int u=e[i].u,v=e[i].v,lca=LCA(u,v);\n    long long d=e[i].w;\n    Ans=min(Ans,Cnt-max(qmax(u,lca,d),qmax(v,lca,d))+d);\n  }\n  printf(\"%lld\",Ans);\n\treturn 0;\n}\n\n```\n\n### 3.斯坦纳树\n\n$\\ \\ \\ \\ \\ \\ \\ \\,$当只要求图的一部分点连接的时候，求最小的生成树，就是斯坦纳树，做法比较繁琐，大数据也不能优秀地处理。具体看这里[【斯坦纳树学习笔记(VictoryCzt Orz)】](https://blog.csdn.net/VictoryCzt/article/details/82972857)。\n\n\n## 生成树形图\n\n$\\ \\ \\ \\ \\ \\ \\ \\,$树形图不是一个有很好求法的东西，朱刘算法可以做到复杂度$O(nm)$求出最小树形图，过程大概如下：\n\n1. 找到除了$root$以为其他点的权值最小的入边，如果出现除了$root$以外存在其他孤立的点，则不存在最小树形图。\n\n2. 找到图中所有的环，并对环进行缩点，重新编号，更新其他点到环上的点的距离。\n\n3. 以环数为下一次查找的点数，继续执行上述操作，直到没有环或者判定出不存在最小树形图为止。\n\n$\\ \\ \\ \\ \\ \\ \\ \\,$大概就是这个图的意思：\n\n![](https://img-blog.csdnimg.cn/img_convert/b5fbfbb3e6872794a624ca4947d868ae.png)\n\n``` cpp\nint n,root;  \nint k[N],idx[N],x,tim;\nint cost[N],fa[N],f[N];\nint mincost[N],ans,top;\nstruct Link{int u,v,w;}e[N];\ninline bool operator <(const Link &a,const Link &b){return a.w<b.w;}\nvoid add_edge(int a,int b,int w){e[++top]=(Link){a,b,w};}\nint Zhu_Liu(int root){\n  while(1){\n    memset(mincost,63,sizeof(mincost));\n    memset(idx,-1,sizeof(idx));\n    memset(f,0,sizeof(f));\n    for(int i=1;i<=m;i++)\n    if(e[i].w<mincost[e[i].v]&&e[i].u!=e[i].v)\n\t\t{mincost[e[i].v]=e[i].w;fa[e[i].v]=e[i].u;}\n    mincost[root]=0;tim=0;\n    for(int i=1;i<=n;i++){\n    \tif(mincost[i]==mincost[0])return 1;\n      ans+=mincost[i];x=i;\n      while(f[x]!=i&&x!=root)f[x]=i,x=fa[x];\n      if(x!=root&&idx[x]==-1){\n        tim++;\n        for(int j=fa[x];j!=x;j=fa[j])idx[j]=tim;\n        idx[x]=tim;\n      }\n    }\n    if(tim==0)break;\n    for(int i=1;i<=n;i++)\n    if(idx[i]==-1)idx[i]=++tim;\n    for(int i=1;i<=m;i++){\n      x=e[i].v;e[i].u=idx[e[i].u];e[i].v=idx[e[i].v];\n      if(e[i].u!=e[i].v)e[i].w-=mincost[x];\n    }\n    n=tim;root=idx[root];\n  }\n  return ans;\n}\n```\n\n\n## 生成树和生成树形图计数\n\n$\\ \\ \\ \\ \\ \\ \\ \\,$计数的话，需要用到矩阵树定理：\n\n$\\ \\ \\ \\ \\ \\ \\ \\,$**图基尔霍夫矩阵的行列式值就是图的生成树个数**\n\n$\\ \\ \\ \\ \\ \\ \\ \\,$对于生成树形图同样适用，把双向边和入度改为单向即可，通过线性代数技巧优化求行列式的复杂度，可以做到$O(n^3+nm)$。\n\n``` cpp\nint A[N][N];\nvoid add(int a,int b){\n\tA[a][a]++;A[b][b]++;\n\tA[a][b]--;A[b][a]--;\n}\nint Gauss(){\n\tint ans=1;\n\tfor(int i=1;i<n;i++){\n\t\tfor(int j=i+1;j<n;j++)\n\t\twhile(A[j][i]){\n\t\t\tint t=A[i][i]/A[j][i];\n\t\t\tfor(int k=i;k<n;k++)\n\t\t\tA[i][k]-=t*A[j][k];\n\t\t\tswap(A[j],A[i]);\n\t\t\tans=-ans;\n\t\t}\n\t\tans*=A[i][i];\n\t}\n\treturn ans\n}\n\n```\n","slug":"最短路-生成树和生成树形图相关","published":1,"updated":"2022-02-13T12:37:06.549Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0i63w6a001ju4gbd23ify0t","content":"<p>$\\ \\ \\ \\ \\ \\ \\ \\,$图论基础复习笔记：</p>\n<span id=\"more\"></span>\n<h2 id=\"存图相关\"><a href=\"#存图相关\" class=\"headerlink\" title=\"存图相关\"></a>存图相关</h2><h3 id=\"1-邻接表：\"><a href=\"#1-邻接表：\" class=\"headerlink\" title=\"1.邻接表：\"></a>1.邻接表：</h3><p>$\\ \\ \\ \\ \\ \\ \\ \\,$在点数特别小的时候，我们可以用邻接表（二维数组）来表示点之间的链接关系。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> e[N][N];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"type\">int</span> a,<span class=\"type\">int</span> b,<span class=\"type\">int</span> w)</span></span>&#123;e[a][b]=w;&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-链表：\"><a href=\"#2-链表：\" class=\"headerlink\" title=\"2. 链表：\"></a>2. 链表：</h3><p>$\\ \\ \\ \\ \\ \\ \\ \\,$在点数比较大的时候，我们可以用链式向前星来表示点之间的链接关系。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> head[N],p;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Edge</span>&#123;<span class=\"type\">int</span> v,w,last;&#125;E[N];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"type\">int</span> a,<span class=\"type\">int</span> b,<span class=\"type\">int</span> w)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;E[++p]=(Edge)&#123;b,w,head[a]&#125;;head[a]=p;&#125;</span><br></pre></td></tr></table></figure>\n<p>$\\ \\ \\ \\ \\ \\ \\ \\,$遍历方式如下：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=head[u];i;i=G[i].last)G[i].v,G[i].w;</span><br><span class=\"line\"><span class=\"comment\">//G[i].v就是u的直接连接点，G[i].w是边上信息</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"3-动态数组\"><a href=\"#3-动态数组\" class=\"headerlink\" title=\"3.动态数组\"></a>3.动态数组</h3><p>$\\ \\ \\ \\ \\ \\ \\ \\,$在点数比较大的时候，我们可以用$\\tt vector$，会比链表慢一点，但是比较方便，下面默认都是这种存图方法。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Edge</span>&#123;<span class=\"type\">int</span> p,w;&#125;E[N];</span><br><span class=\"line\">vector&lt;Edge&gt; e[N];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"type\">int</span> a,<span class=\"type\">int</span> b,<span class=\"type\">int</span> w)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;e[a].<span class=\"built_in\">push_back</span>((Edge)&#123;b,w&#125;);&#125;</span><br></pre></td></tr></table></figure>\n<p>$\\ \\ \\ \\ \\ \\ \\,$遍历方式如下：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> v:E[u])v.p,v.w;</span><br><span class=\"line\"><span class=\"comment\">//v.p就是u的直接连接点，v.w是边上信息</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"最短路\"><a href=\"#最短路\" class=\"headerlink\" title=\"最短路\"></a>最短路</h2><p>$\\ \\ \\ \\ \\ \\ \\ \\,$最短路的核心思想都差不多，用松弛操作来求解，所以只讲算法特点和用法，不讲原理：</p>\n<h3 id=\"1-Floyd\"><a href=\"#1-Floyd\" class=\"headerlink\" title=\"1.Floyd\"></a>1.Floyd</h3><p>$\\ \\ \\ \\ \\ \\ \\ \\,$Floyd可以在$O(n^3)$的时间内，求出任意点对两两之间的距离，支持负边权：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> dis[N][N];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">floyd</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">memset</span>(dis,<span class=\"number\">63</span>,<span class=\"built_in\">sizeof</span>(dis));</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">\t\tdis[i][i]=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> v:E[i])dis[i][v.p]=v.w;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> k=<span class=\"number\">1</span>;k&lt;=n;k++)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;=n;j++)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(dist[i][j]&gt;dist[i][k]+dist[k][j])</span><br><span class=\"line\">\tdist[i][j]=dist[i][k]+dist[k][j];</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n<h3 id=\"2-SPFA\"><a href=\"#2-SPFA\" class=\"headerlink\" title=\"2.SPFA\"></a>2.SPFA</h3><p>$\\ \\ \\ \\ \\ \\ \\ \\,$SPFA可以在下到$n$上到$(n^2)$的时间内，求出单源对于每个点最短路，支持负边权，但是因为复杂度不平衡，关于SPFA,他死了：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> dis[N];</span><br><span class=\"line\"><span class=\"type\">bool</span> used[N];</span><br><span class=\"line\">queue&lt;<span class=\"type\">int</span>&gt; Q;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">SPFA</span><span class=\"params\">(<span class=\"type\">int</span> S)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">memset</span>(dis,<span class=\"number\">63</span>,<span class=\"built_in\">sizeof</span>(dis));</span><br><span class=\"line\">  Q.<span class=\"built_in\">push</span>(S);used[S]=<span class=\"number\">1</span>;dis[S]=<span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(!Q.<span class=\"built_in\">empty</span>())&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> u=Q.<span class=\"built_in\">front</span>();Q.<span class=\"built_in\">pop</span>();used[u]=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> v:E[u])</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(dis[v.p]&gt;dis[u]+v.w)&#123;</span><br><span class=\"line\">      dis[v.p]=dis[u]+v.w;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(used[v.p]==<span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t\t&#123;used[v.p]=<span class=\"number\">1</span>;Q.<span class=\"built_in\">push</span>(v.p);&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>$\\ \\ \\ \\ \\ \\ \\ \\,$或者SPFA加上堆优化后，复杂度会比较好，长得也和Dijkstra很相像了：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">node</span>&#123;<span class=\"type\">int</span> v,dis;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">inline</span> <span class=\"type\">bool</span> <span class=\"keyword\">operator</span> &lt;(<span class=\"type\">const</span> node &amp;a,<span class=\"type\">const</span> node &amp;b)</span><br><span class=\"line\">&#123;<span class=\"keyword\">return</span> a.dis&gt;b.dis;&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> dis[N];</span><br><span class=\"line\">priority_queue&lt;node&gt; Q;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">heap_SPFA</span><span class=\"params\">(<span class=\"type\">int</span> S)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">memset</span>(dis,<span class=\"number\">63</span>,<span class=\"built_in\">sizeof</span>(dis));</span><br><span class=\"line\">  Q.<span class=\"built_in\">push</span>((node)&#123;<span class=\"number\">1</span>,<span class=\"number\">0</span>&#125;);</span><br><span class=\"line\">\tdis[S]=<span class=\"number\">0</span>;used[S]=<span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(!Q.<span class=\"built_in\">empty</span>())&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> u=Q.<span class=\"built_in\">top</span>().v;Q.<span class=\"built_in\">pop</span>();used[u]=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> v:E[u])</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(dis[v.p]&gt;dis[u]+v.w)&#123;</span><br><span class=\"line\">      dis[v.p]=dis[u]+v.w;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(used[v.p]==<span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t\t&#123;used[v.p]=<span class=\"number\">1</span>;Q.<span class=\"built_in\">push</span>((node)&#123;dis[v.p],v.p&#125;)&#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-Dijkstra\"><a href=\"#3-Dijkstra\" class=\"headerlink\" title=\"3.Dijkstra\"></a>3.Dijkstra</h3><p>$\\ \\ \\ \\ \\ \\ \\ \\,$Dijkstra可以在$O(n\\log n)$的时间内，求出单源对于每个点最短路，但是不支持负边权：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">node</span>&#123;<span class=\"type\">int</span> v,dis;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">inline</span> <span class=\"type\">bool</span> <span class=\"keyword\">operator</span> &lt;(<span class=\"type\">const</span> node &amp;a,<span class=\"type\">const</span> node &amp;b)</span><br><span class=\"line\">&#123;<span class=\"keyword\">return</span> a.dis&gt;b.dis;&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> dis[N];</span><br><span class=\"line\">priority_queue&lt;node&gt; Q;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Dijkstra</span><span class=\"params\">(<span class=\"type\">int</span> S)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">memset</span>(dis,<span class=\"number\">63</span>,<span class=\"built_in\">sizeof</span>(dis));</span><br><span class=\"line\">  \tQ.<span class=\"built_in\">push</span>((node)&#123;<span class=\"number\">1</span>,<span class=\"number\">0</span>&#125;);dis[S]=<span class=\"number\">0</span>;</span><br><span class=\"line\">  \t<span class=\"keyword\">while</span>(!Q.<span class=\"built_in\">empty</span>())&#123;</span><br><span class=\"line\">    \t<span class=\"type\">int</span> u=Q.<span class=\"built_in\">top</span>().v;Q.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">    \t<span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> v:E[u])</span><br><span class=\"line\">    \t<span class=\"keyword\">if</span>(dis[v.p]&gt;dis[u]+v.w)&#123;</span><br><span class=\"line\">      \t\tdis[v.p]=dis[u]+v.w;</span><br><span class=\"line\">\t\t\tQ.<span class=\"built_in\">push</span>((node)&#123;dis[v.p],v.p&#125;);</span><br><span class=\"line\">    \t&#125;</span><br><span class=\"line\">  \t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"生成树\"><a href=\"#生成树\" class=\"headerlink\" title=\"生成树\"></a>生成树</h2><p>$\\ \\ \\ \\ \\ \\ \\ \\,$生成树是针对无向图的说法，基本上是基于贪心的操作。</p>\n<h3 id=\"1-最小生成树\"><a href=\"#1-最小生成树\" class=\"headerlink\" title=\"1.最小生成树\"></a>1.最小生成树</h3><p>$\\ \\ \\ \\ \\ \\ \\ \\,$最小生成树最常见的贪心做法是Kruskal，因为一棵树$n-1$条边，我们可以把所有边排序过后，贪心选取能构成树的最小的$n-1$条边，用并查集维护其连通性：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> top,fa[N];</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Link</span>&#123;<span class=\"type\">int</span> u,v,w;&#125;e[N];</span><br><span class=\"line\"><span class=\"keyword\">inline</span> <span class=\"type\">bool</span> <span class=\"keyword\">operator</span> &lt;(<span class=\"type\">const</span> Link &amp;a,<span class=\"type\">const</span> Link &amp;b)&#123;<span class=\"keyword\">return</span> a.w&lt;b.w;&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">find</span><span class=\"params\">(<span class=\"type\">int</span> a)</span></span>&#123;<span class=\"keyword\">return</span> a==fa[a]?a:fa[a]=<span class=\"built_in\">find</span>(fa[a]);&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">add_edge</span><span class=\"params\">(<span class=\"type\">int</span> a,<span class=\"type\">int</span> b,<span class=\"type\">int</span> w)</span></span>&#123;e[++top]=(Link)&#123;a,b,w&#125;;&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Kruskal</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">sort</span>(e+<span class=\"number\">1</span>,e+top+<span class=\"number\">1</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)fa[i]=i;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>,A,B;i&lt;=m;i++)</span><br><span class=\"line\">  <span class=\"keyword\">if</span>((A=<span class=\"built_in\">find</span>(e[i].u))!=(B=<span class=\"built_in\">find</span>(e[i].v)))&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">add</span>(e[i].u,e[i].v,e[i].w);</span><br><span class=\"line\">\t\t<span class=\"built_in\">add</span>(e[i].v,e[i].u,e[i].w);</span><br><span class=\"line\">\t\tfa[A]=B;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-次小生成树-k小生成树-严格次小生成树\"><a href=\"#2-次小生成树-k小生成树-严格次小生成树\" class=\"headerlink\" title=\"2.次小生成树\\k小生成树\\严格次小生成树\"></a>2.次小生成树\\k小生成树\\严格次小生成树</h3><p>$\\ \\ \\ \\ \\ \\ \\ \\,$次小生成树，我们就是做如下操作：</p>\n<ol>\n<li><p>做一次最小生成树；</p>\n</li>\n<li><p>在没有加入树边的边中选一个最小的，假设为u与v之间的边；</p>\n</li>\n<li><p>在最小生成树上面$u$到$v$的路径上，删除一条最长的边；</p>\n</li>\n<li><p>然后把2步中选择的边加入树边。</p>\n</li>\n</ol>\n<p>$\\ \\ \\ \\ \\ \\ \\ \\,$复杂度是$O(m\\log m+n\\log n)$，操作比较繁琐，虽然有些时候不需要真实建树，但是还是很繁琐，就不单独贴模板了。</p>\n<p>$\\ \\ \\ \\ \\ \\ \\ \\,$对于k小生成树，我们做k次就好了啊，复杂度$O(m\\log m+kn\\log n)$。</p>\n<p>$\\ \\ \\ \\ \\ \\ \\ \\,$对于严格次小生成树，我们做最多$m$次，检查直到严格大于最小生成树就停止，复杂度$O(m\\log m+mn\\log n)$。</p>\n<h3 id=\"P4180-【模板】严格次小生成树-BJWC2010\"><a href=\"#P4180-【模板】严格次小生成树-BJWC2010\" class=\"headerlink\" title=\"P4180 【模板】严格次小生成树[BJWC2010]\"></a><a href=\"https://www.luogu.org/problemnew/show/P4180\">P4180 【模板】严格次小生成树[BJWC2010]</a></h3><p>$\\ \\ \\ \\ \\ \\ \\ \\,$代码很长，引起不适：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdlib&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cctype&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;stack&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;map&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;set&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">long</span> <span class=\"type\">long</span> inf=<span class=\"number\">2147483647000000</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">double</span> eps=<span class=\"number\">1e-10</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">double</span> pi=<span class=\"built_in\">acos</span>(<span class=\"number\">-1.0</span>);</span><br><span class=\"line\"><span class=\"comment\">//char buf[1&lt;&lt;15],*S=buf,*T=buf;</span></span><br><span class=\"line\"><span class=\"comment\">//char getch()&#123;return S==T&amp;&amp;(T=(S=buf)+fread(buf,1,1&lt;&lt;15,stdin),S==T)?0:*S++;&#125;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">int</span> <span class=\"title\">read</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> x=<span class=\"number\">0</span>,f=<span class=\"number\">1</span>;<span class=\"type\">char</span> ch;ch=<span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(ch&lt;<span class=\"string\">&#x27;0&#x27;</span>||ch&gt;<span class=\"string\">&#x27;9&#x27;</span>)&#123;<span class=\"keyword\">if</span>(ch==<span class=\"string\">&#x27;-&#x27;</span>) f=<span class=\"number\">0</span>;ch=<span class=\"built_in\">getchar</span>();&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(ch&gt;=<span class=\"string\">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class=\"string\">&#x27;9&#x27;</span>)&#123;x=(x&lt;&lt;<span class=\"number\">1</span>)+(x&lt;&lt;<span class=\"number\">3</span>)+(ch&amp;<span class=\"number\">15</span>);ch=<span class=\"built_in\">getchar</span>();&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(f)<span class=\"keyword\">return</span> x;<span class=\"keyword\">else</span> <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">900010</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> n,m;</span><br><span class=\"line\"><span class=\"type\">long</span> <span class=\"type\">long</span> Cnt;</span><br><span class=\"line\"><span class=\"type\">bool</span> used[N];</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Edge</span>&#123;<span class=\"type\">int</span> p,w;&#125;E[N];</span><br><span class=\"line\">vector&lt;Edge&gt; G[N&lt;&lt;<span class=\"number\">1</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"type\">int</span> a,<span class=\"type\">int</span> b,<span class=\"type\">int</span> w)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;G[a].<span class=\"built_in\">push_back</span>((Edge)&#123;b,w&#125;);&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> top,Fa[N];</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Link</span>&#123;<span class=\"type\">int</span> u,v,w;&#125;e[N];</span><br><span class=\"line\"><span class=\"keyword\">inline</span> <span class=\"type\">bool</span> <span class=\"keyword\">operator</span> &lt;(<span class=\"type\">const</span> Link &amp;a,<span class=\"type\">const</span> Link &amp;b)&#123;<span class=\"keyword\">return</span> a.w&lt;b.w;&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">find</span><span class=\"params\">(<span class=\"type\">int</span> a)</span></span>&#123;<span class=\"keyword\">return</span> a==Fa[a]?a:Fa[a]=<span class=\"built_in\">find</span>(Fa[a]);&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">add_edge</span><span class=\"params\">(<span class=\"type\">int</span> a,<span class=\"type\">int</span> b,<span class=\"type\">int</span> w)</span></span>&#123;e[++top]=(Link)&#123;a,b,w&#125;;&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Kruskal</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">sort</span>(e+<span class=\"number\">1</span>,e+top+<span class=\"number\">1</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)Fa[i]=i;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>,A,B;i&lt;=m;i++)</span><br><span class=\"line\">  <span class=\"keyword\">if</span>((A=<span class=\"built_in\">find</span>(e[i].u))!=(B=<span class=\"built_in\">find</span>(e[i].v)))&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">add</span>(e[i].u,e[i].v,e[i].w);</span><br><span class=\"line\">\t\t<span class=\"built_in\">add</span>(e[i].v,e[i].u,e[i].w);</span><br><span class=\"line\">\t\tCnt+=<span class=\"number\">1ll</span>*e[i].w;</span><br><span class=\"line\">\t\tused[i]=<span class=\"number\">1</span>;</span><br><span class=\"line\">\t\tFa[A]=B;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> fa[N][<span class=\"number\">19</span>],deep[N];</span><br><span class=\"line\"><span class=\"type\">long</span> <span class=\"type\">long</span> Max[N][<span class=\"number\">19</span>],Min[N][<span class=\"number\">19</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"type\">int</span> u,<span class=\"type\">int</span> f)</span></span>&#123;</span><br><span class=\"line\">  fa[u][<span class=\"number\">0</span>]=f;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> v:G[u])&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(v.p==f)<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">    deep[v.p]=deep[u]+<span class=\"number\">1</span>;</span><br><span class=\"line\">    Max[v.p][<span class=\"number\">0</span>]=v.w;</span><br><span class=\"line\">    Min[v.p][<span class=\"number\">0</span>]=-inf;</span><br><span class=\"line\">    <span class=\"built_in\">dfs</span>(v.p,u);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">cal</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=<span class=\"number\">18</span>;++i)</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;=n;++j)&#123;</span><br><span class=\"line\">    fa[j][i]=fa[fa[j][i<span class=\"number\">-1</span>]][i<span class=\"number\">-1</span>];</span><br><span class=\"line\">    Max[j][i]=<span class=\"built_in\">max</span>(Max[j][i<span class=\"number\">-1</span>],Max[fa[j][i<span class=\"number\">-1</span>]][i<span class=\"number\">-1</span>]);</span><br><span class=\"line\">    Min[j][i]=<span class=\"built_in\">max</span>(Min[j][i<span class=\"number\">-1</span>],Min[fa[j][i<span class=\"number\">-1</span>]][i<span class=\"number\">-1</span>]);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(Max[j][i<span class=\"number\">-1</span>]&gt;Max[fa[j][i<span class=\"number\">-1</span>]][i<span class=\"number\">-1</span>])</span><br><span class=\"line\">\t\tMin[j][i]=<span class=\"built_in\">max</span>(Min[j][i],Max[fa[j][i<span class=\"number\">-1</span>]][i<span class=\"number\">-1</span>]);</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(Max[j][i<span class=\"number\">-1</span>]&lt;Max[fa[j][i<span class=\"number\">-1</span>]][i<span class=\"number\">-1</span>])</span><br><span class=\"line\">\t\tMin[j][i]=<span class=\"built_in\">max</span>(Min[j][i],Max[j][i<span class=\"number\">-1</span>]);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">LCA</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> y)</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(deep[x]&lt;deep[y])<span class=\"built_in\">swap</span>(x,y);</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">18</span>;i&gt;=<span class=\"number\">0</span>;--i)</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(deep[fa[x][i]]&gt;=deep[y])x=fa[x][i];</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(x==y)<span class=\"keyword\">return</span> x;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">18</span>;i&gt;=<span class=\"number\">0</span>;--i)</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(fa[x][i]!=fa[y][i])x=fa[x][i],y=fa[y][i];</span><br><span class=\"line\">  <span class=\"keyword\">return</span> fa[x][<span class=\"number\">0</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"title\">qmax</span><span class=\"params\">(<span class=\"type\">int</span> u,<span class=\"type\">int</span> v,<span class=\"type\">long</span> <span class=\"type\">long</span> maxx)</span></span>&#123;</span><br><span class=\"line\">  <span class=\"type\">long</span> <span class=\"type\">long</span> Ans=-inf;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">18</span>;i&gt;=<span class=\"number\">0</span>;--i)</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(deep[fa[u][i]]&gt;=deep[v])&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(maxx!=Max[u][i])Ans=<span class=\"built_in\">max</span>(Ans,Max[u][i]);</span><br><span class=\"line\">    <span class=\"keyword\">else</span> Ans=<span class=\"built_in\">max</span>(Ans,Min[u][i]);</span><br><span class=\"line\">    u=fa[u][i];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> Ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tn=<span class=\"built_in\">read</span>(),m=<span class=\"built_in\">read</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>,a,b,c;i&lt;=m;i++)</span><br><span class=\"line\">\ta=<span class=\"built_in\">read</span>(),b=<span class=\"built_in\">read</span>(),c=<span class=\"built_in\">read</span>(),</span><br><span class=\"line\">\t<span class=\"built_in\">add_edge</span>(a,b,c);</span><br><span class=\"line\">\t<span class=\"built_in\">Kruskal</span>();</span><br><span class=\"line\">\t<span class=\"type\">long</span> <span class=\"type\">long</span> Ans=inf;</span><br><span class=\"line\">  Min[<span class=\"number\">1</span>][<span class=\"number\">0</span>]=-inf;</span><br><span class=\"line\">  deep[<span class=\"number\">1</span>]=<span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">dfs</span>(<span class=\"number\">1</span>,<span class=\"number\">-1</span>);<span class=\"built_in\">cal</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=m;++i)<span class=\"keyword\">if</span>(!used[i])&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> u=e[i].u,v=e[i].v,lca=<span class=\"built_in\">LCA</span>(u,v);</span><br><span class=\"line\">    <span class=\"type\">long</span> <span class=\"type\">long</span> d=e[i].w;</span><br><span class=\"line\">    Ans=<span class=\"built_in\">min</span>(Ans,Cnt-<span class=\"built_in\">max</span>(<span class=\"built_in\">qmax</span>(u,lca,d),<span class=\"built_in\">qmax</span>(v,lca,d))+d);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%lld&quot;</span>,Ans);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"3-斯坦纳树\"><a href=\"#3-斯坦纳树\" class=\"headerlink\" title=\"3.斯坦纳树\"></a>3.斯坦纳树</h3><p>$\\ \\ \\ \\ \\ \\ \\ \\,$当只要求图的一部分点连接的时候，求最小的生成树，就是斯坦纳树，做法比较繁琐，大数据也不能优秀地处理。具体看这里<a href=\"https://blog.csdn.net/VictoryCzt/article/details/82972857\">【斯坦纳树学习笔记(VictoryCzt Orz)】</a>。</p>\n<h2 id=\"生成树形图\"><a href=\"#生成树形图\" class=\"headerlink\" title=\"生成树形图\"></a>生成树形图</h2><p>$\\ \\ \\ \\ \\ \\ \\ \\,$树形图不是一个有很好求法的东西，朱刘算法可以做到复杂度$O(nm)$求出最小树形图，过程大概如下：</p>\n<ol>\n<li><p>找到除了$root$以为其他点的权值最小的入边，如果出现除了$root$以外存在其他孤立的点，则不存在最小树形图。</p>\n</li>\n<li><p>找到图中所有的环，并对环进行缩点，重新编号，更新其他点到环上的点的距离。</p>\n</li>\n<li><p>以环数为下一次查找的点数，继续执行上述操作，直到没有环或者判定出不存在最小树形图为止。</p>\n</li>\n</ol>\n<p>$\\ \\ \\ \\ \\ \\ \\ \\,$大概就是这个图的意思：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/b5fbfbb3e6872794a624ca4947d868ae.png\" alt=\"\"></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> n,root;  </span><br><span class=\"line\"><span class=\"type\">int</span> k[N],idx[N],x,tim;</span><br><span class=\"line\"><span class=\"type\">int</span> cost[N],fa[N],f[N];</span><br><span class=\"line\"><span class=\"type\">int</span> mincost[N],ans,top;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Link</span>&#123;<span class=\"type\">int</span> u,v,w;&#125;e[N];</span><br><span class=\"line\"><span class=\"keyword\">inline</span> <span class=\"type\">bool</span> <span class=\"keyword\">operator</span> &lt;(<span class=\"type\">const</span> Link &amp;a,<span class=\"type\">const</span> Link &amp;b)&#123;<span class=\"keyword\">return</span> a.w&lt;b.w;&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">add_edge</span><span class=\"params\">(<span class=\"type\">int</span> a,<span class=\"type\">int</span> b,<span class=\"type\">int</span> w)</span></span>&#123;e[++top]=(Link)&#123;a,b,w&#125;;&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">Zhu_Liu</span><span class=\"params\">(<span class=\"type\">int</span> root)</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(mincost,<span class=\"number\">63</span>,<span class=\"built_in\">sizeof</span>(mincost));</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(idx,<span class=\"number\">-1</span>,<span class=\"built_in\">sizeof</span>(idx));</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(f,<span class=\"number\">0</span>,<span class=\"built_in\">sizeof</span>(f));</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=m;i++)</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(e[i].w&lt;mincost[e[i].v]&amp;&amp;e[i].u!=e[i].v)</span><br><span class=\"line\">\t\t&#123;mincost[e[i].v]=e[i].w;fa[e[i].v]=e[i].u;&#125;</span><br><span class=\"line\">    mincost[root]=<span class=\"number\">0</span>;tim=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">    \t<span class=\"keyword\">if</span>(mincost[i]==mincost[<span class=\"number\">0</span>])<span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">      ans+=mincost[i];x=i;</span><br><span class=\"line\">      <span class=\"keyword\">while</span>(f[x]!=i&amp;&amp;x!=root)f[x]=i,x=fa[x];</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(x!=root&amp;&amp;idx[x]==<span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">        tim++;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=fa[x];j!=x;j=fa[j])idx[j]=tim;</span><br><span class=\"line\">        idx[x]=tim;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(tim==<span class=\"number\">0</span>)<span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(idx[i]==<span class=\"number\">-1</span>)idx[i]=++tim;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=m;i++)&#123;</span><br><span class=\"line\">      x=e[i].v;e[i].u=idx[e[i].u];e[i].v=idx[e[i].v];</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(e[i].u!=e[i].v)e[i].w-=mincost[x];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    n=tim;root=idx[root];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"生成树和生成树形图计数\"><a href=\"#生成树和生成树形图计数\" class=\"headerlink\" title=\"生成树和生成树形图计数\"></a>生成树和生成树形图计数</h2><p>$\\ \\ \\ \\ \\ \\ \\ \\,$计数的话，需要用到矩阵树定理：</p>\n<p>$\\ \\ \\ \\ \\ \\ \\ \\,$<strong>图基尔霍夫矩阵的行列式值就是图的生成树个数</strong></p>\n<p>$\\ \\ \\ \\ \\ \\ \\ \\,$对于生成树形图同样适用，把双向边和入度改为单向即可，通过线性代数技巧优化求行列式的复杂度，可以做到$O(n^3+nm)$。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> A[N][N];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"type\">int</span> a,<span class=\"type\">int</span> b)</span></span>&#123;</span><br><span class=\"line\">\tA[a][a]++;A[b][b]++;</span><br><span class=\"line\">\tA[a][b]--;A[b][a]--;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">Gauss</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> ans=<span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;n;i++)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=i+<span class=\"number\">1</span>;j&lt;n;j++)</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(A[j][i])&#123;</span><br><span class=\"line\">\t\t\t<span class=\"type\">int</span> t=A[i][i]/A[j][i];</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> k=i;k&lt;n;k++)</span><br><span class=\"line\">\t\t\tA[i][k]-=t*A[j][k];</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">swap</span>(A[j],A[i]);</span><br><span class=\"line\">\t\t\tans=-ans;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tans*=A[i][i];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> ans</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>$\\ \\ \\ \\ \\ \\ \\ \\,$图论基础复习笔记：</p>","more":"<h2 id=\"存图相关\"><a href=\"#存图相关\" class=\"headerlink\" title=\"存图相关\"></a>存图相关</h2><h3 id=\"1-邻接表：\"><a href=\"#1-邻接表：\" class=\"headerlink\" title=\"1.邻接表：\"></a>1.邻接表：</h3><p>$\\ \\ \\ \\ \\ \\ \\ \\,$在点数特别小的时候，我们可以用邻接表（二维数组）来表示点之间的链接关系。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> e[N][N];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"type\">int</span> a,<span class=\"type\">int</span> b,<span class=\"type\">int</span> w)</span></span>&#123;e[a][b]=w;&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-链表：\"><a href=\"#2-链表：\" class=\"headerlink\" title=\"2. 链表：\"></a>2. 链表：</h3><p>$\\ \\ \\ \\ \\ \\ \\ \\,$在点数比较大的时候，我们可以用链式向前星来表示点之间的链接关系。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> head[N],p;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Edge</span>&#123;<span class=\"type\">int</span> v,w,last;&#125;E[N];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"type\">int</span> a,<span class=\"type\">int</span> b,<span class=\"type\">int</span> w)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;E[++p]=(Edge)&#123;b,w,head[a]&#125;;head[a]=p;&#125;</span><br></pre></td></tr></table></figure>\n<p>$\\ \\ \\ \\ \\ \\ \\ \\,$遍历方式如下：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=head[u];i;i=G[i].last)G[i].v,G[i].w;</span><br><span class=\"line\"><span class=\"comment\">//G[i].v就是u的直接连接点，G[i].w是边上信息</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"3-动态数组\"><a href=\"#3-动态数组\" class=\"headerlink\" title=\"3.动态数组\"></a>3.动态数组</h3><p>$\\ \\ \\ \\ \\ \\ \\ \\,$在点数比较大的时候，我们可以用$\\tt vector$，会比链表慢一点，但是比较方便，下面默认都是这种存图方法。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Edge</span>&#123;<span class=\"type\">int</span> p,w;&#125;E[N];</span><br><span class=\"line\">vector&lt;Edge&gt; e[N];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"type\">int</span> a,<span class=\"type\">int</span> b,<span class=\"type\">int</span> w)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;e[a].<span class=\"built_in\">push_back</span>((Edge)&#123;b,w&#125;);&#125;</span><br></pre></td></tr></table></figure>\n<p>$\\ \\ \\ \\ \\ \\ \\,$遍历方式如下：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> v:E[u])v.p,v.w;</span><br><span class=\"line\"><span class=\"comment\">//v.p就是u的直接连接点，v.w是边上信息</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"最短路\"><a href=\"#最短路\" class=\"headerlink\" title=\"最短路\"></a>最短路</h2><p>$\\ \\ \\ \\ \\ \\ \\ \\,$最短路的核心思想都差不多，用松弛操作来求解，所以只讲算法特点和用法，不讲原理：</p>\n<h3 id=\"1-Floyd\"><a href=\"#1-Floyd\" class=\"headerlink\" title=\"1.Floyd\"></a>1.Floyd</h3><p>$\\ \\ \\ \\ \\ \\ \\ \\,$Floyd可以在$O(n^3)$的时间内，求出任意点对两两之间的距离，支持负边权：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> dis[N][N];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">floyd</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">memset</span>(dis,<span class=\"number\">63</span>,<span class=\"built_in\">sizeof</span>(dis));</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">\t\tdis[i][i]=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> v:E[i])dis[i][v.p]=v.w;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> k=<span class=\"number\">1</span>;k&lt;=n;k++)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;=n;j++)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(dist[i][j]&gt;dist[i][k]+dist[k][j])</span><br><span class=\"line\">\tdist[i][j]=dist[i][k]+dist[k][j];</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n<h3 id=\"2-SPFA\"><a href=\"#2-SPFA\" class=\"headerlink\" title=\"2.SPFA\"></a>2.SPFA</h3><p>$\\ \\ \\ \\ \\ \\ \\ \\,$SPFA可以在下到$n$上到$(n^2)$的时间内，求出单源对于每个点最短路，支持负边权，但是因为复杂度不平衡，关于SPFA,他死了：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> dis[N];</span><br><span class=\"line\"><span class=\"type\">bool</span> used[N];</span><br><span class=\"line\">queue&lt;<span class=\"type\">int</span>&gt; Q;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">SPFA</span><span class=\"params\">(<span class=\"type\">int</span> S)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">memset</span>(dis,<span class=\"number\">63</span>,<span class=\"built_in\">sizeof</span>(dis));</span><br><span class=\"line\">  Q.<span class=\"built_in\">push</span>(S);used[S]=<span class=\"number\">1</span>;dis[S]=<span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(!Q.<span class=\"built_in\">empty</span>())&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> u=Q.<span class=\"built_in\">front</span>();Q.<span class=\"built_in\">pop</span>();used[u]=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> v:E[u])</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(dis[v.p]&gt;dis[u]+v.w)&#123;</span><br><span class=\"line\">      dis[v.p]=dis[u]+v.w;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(used[v.p]==<span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t\t&#123;used[v.p]=<span class=\"number\">1</span>;Q.<span class=\"built_in\">push</span>(v.p);&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>$\\ \\ \\ \\ \\ \\ \\ \\,$或者SPFA加上堆优化后，复杂度会比较好，长得也和Dijkstra很相像了：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">node</span>&#123;<span class=\"type\">int</span> v,dis;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">inline</span> <span class=\"type\">bool</span> <span class=\"keyword\">operator</span> &lt;(<span class=\"type\">const</span> node &amp;a,<span class=\"type\">const</span> node &amp;b)</span><br><span class=\"line\">&#123;<span class=\"keyword\">return</span> a.dis&gt;b.dis;&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> dis[N];</span><br><span class=\"line\">priority_queue&lt;node&gt; Q;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">heap_SPFA</span><span class=\"params\">(<span class=\"type\">int</span> S)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">memset</span>(dis,<span class=\"number\">63</span>,<span class=\"built_in\">sizeof</span>(dis));</span><br><span class=\"line\">  Q.<span class=\"built_in\">push</span>((node)&#123;<span class=\"number\">1</span>,<span class=\"number\">0</span>&#125;);</span><br><span class=\"line\">\tdis[S]=<span class=\"number\">0</span>;used[S]=<span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(!Q.<span class=\"built_in\">empty</span>())&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> u=Q.<span class=\"built_in\">top</span>().v;Q.<span class=\"built_in\">pop</span>();used[u]=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> v:E[u])</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(dis[v.p]&gt;dis[u]+v.w)&#123;</span><br><span class=\"line\">      dis[v.p]=dis[u]+v.w;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(used[v.p]==<span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t\t&#123;used[v.p]=<span class=\"number\">1</span>;Q.<span class=\"built_in\">push</span>((node)&#123;dis[v.p],v.p&#125;)&#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-Dijkstra\"><a href=\"#3-Dijkstra\" class=\"headerlink\" title=\"3.Dijkstra\"></a>3.Dijkstra</h3><p>$\\ \\ \\ \\ \\ \\ \\ \\,$Dijkstra可以在$O(n\\log n)$的时间内，求出单源对于每个点最短路，但是不支持负边权：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">node</span>&#123;<span class=\"type\">int</span> v,dis;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">inline</span> <span class=\"type\">bool</span> <span class=\"keyword\">operator</span> &lt;(<span class=\"type\">const</span> node &amp;a,<span class=\"type\">const</span> node &amp;b)</span><br><span class=\"line\">&#123;<span class=\"keyword\">return</span> a.dis&gt;b.dis;&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> dis[N];</span><br><span class=\"line\">priority_queue&lt;node&gt; Q;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Dijkstra</span><span class=\"params\">(<span class=\"type\">int</span> S)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">memset</span>(dis,<span class=\"number\">63</span>,<span class=\"built_in\">sizeof</span>(dis));</span><br><span class=\"line\">  \tQ.<span class=\"built_in\">push</span>((node)&#123;<span class=\"number\">1</span>,<span class=\"number\">0</span>&#125;);dis[S]=<span class=\"number\">0</span>;</span><br><span class=\"line\">  \t<span class=\"keyword\">while</span>(!Q.<span class=\"built_in\">empty</span>())&#123;</span><br><span class=\"line\">    \t<span class=\"type\">int</span> u=Q.<span class=\"built_in\">top</span>().v;Q.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">    \t<span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> v:E[u])</span><br><span class=\"line\">    \t<span class=\"keyword\">if</span>(dis[v.p]&gt;dis[u]+v.w)&#123;</span><br><span class=\"line\">      \t\tdis[v.p]=dis[u]+v.w;</span><br><span class=\"line\">\t\t\tQ.<span class=\"built_in\">push</span>((node)&#123;dis[v.p],v.p&#125;);</span><br><span class=\"line\">    \t&#125;</span><br><span class=\"line\">  \t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"生成树\"><a href=\"#生成树\" class=\"headerlink\" title=\"生成树\"></a>生成树</h2><p>$\\ \\ \\ \\ \\ \\ \\ \\,$生成树是针对无向图的说法，基本上是基于贪心的操作。</p>\n<h3 id=\"1-最小生成树\"><a href=\"#1-最小生成树\" class=\"headerlink\" title=\"1.最小生成树\"></a>1.最小生成树</h3><p>$\\ \\ \\ \\ \\ \\ \\ \\,$最小生成树最常见的贪心做法是Kruskal，因为一棵树$n-1$条边，我们可以把所有边排序过后，贪心选取能构成树的最小的$n-1$条边，用并查集维护其连通性：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> top,fa[N];</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Link</span>&#123;<span class=\"type\">int</span> u,v,w;&#125;e[N];</span><br><span class=\"line\"><span class=\"keyword\">inline</span> <span class=\"type\">bool</span> <span class=\"keyword\">operator</span> &lt;(<span class=\"type\">const</span> Link &amp;a,<span class=\"type\">const</span> Link &amp;b)&#123;<span class=\"keyword\">return</span> a.w&lt;b.w;&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">find</span><span class=\"params\">(<span class=\"type\">int</span> a)</span></span>&#123;<span class=\"keyword\">return</span> a==fa[a]?a:fa[a]=<span class=\"built_in\">find</span>(fa[a]);&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">add_edge</span><span class=\"params\">(<span class=\"type\">int</span> a,<span class=\"type\">int</span> b,<span class=\"type\">int</span> w)</span></span>&#123;e[++top]=(Link)&#123;a,b,w&#125;;&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Kruskal</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">sort</span>(e+<span class=\"number\">1</span>,e+top+<span class=\"number\">1</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)fa[i]=i;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>,A,B;i&lt;=m;i++)</span><br><span class=\"line\">  <span class=\"keyword\">if</span>((A=<span class=\"built_in\">find</span>(e[i].u))!=(B=<span class=\"built_in\">find</span>(e[i].v)))&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">add</span>(e[i].u,e[i].v,e[i].w);</span><br><span class=\"line\">\t\t<span class=\"built_in\">add</span>(e[i].v,e[i].u,e[i].w);</span><br><span class=\"line\">\t\tfa[A]=B;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-次小生成树-k小生成树-严格次小生成树\"><a href=\"#2-次小生成树-k小生成树-严格次小生成树\" class=\"headerlink\" title=\"2.次小生成树\\k小生成树\\严格次小生成树\"></a>2.次小生成树\\k小生成树\\严格次小生成树</h3><p>$\\ \\ \\ \\ \\ \\ \\ \\,$次小生成树，我们就是做如下操作：</p>\n<ol>\n<li><p>做一次最小生成树；</p>\n</li>\n<li><p>在没有加入树边的边中选一个最小的，假设为u与v之间的边；</p>\n</li>\n<li><p>在最小生成树上面$u$到$v$的路径上，删除一条最长的边；</p>\n</li>\n<li><p>然后把2步中选择的边加入树边。</p>\n</li>\n</ol>\n<p>$\\ \\ \\ \\ \\ \\ \\ \\,$复杂度是$O(m\\log m+n\\log n)$，操作比较繁琐，虽然有些时候不需要真实建树，但是还是很繁琐，就不单独贴模板了。</p>\n<p>$\\ \\ \\ \\ \\ \\ \\ \\,$对于k小生成树，我们做k次就好了啊，复杂度$O(m\\log m+kn\\log n)$。</p>\n<p>$\\ \\ \\ \\ \\ \\ \\ \\,$对于严格次小生成树，我们做最多$m$次，检查直到严格大于最小生成树就停止，复杂度$O(m\\log m+mn\\log n)$。</p>\n<h3 id=\"P4180-【模板】严格次小生成树-BJWC2010\"><a href=\"#P4180-【模板】严格次小生成树-BJWC2010\" class=\"headerlink\" title=\"P4180 【模板】严格次小生成树[BJWC2010]\"></a><a href=\"https://www.luogu.org/problemnew/show/P4180\">P4180 【模板】严格次小生成树[BJWC2010]</a></h3><p>$\\ \\ \\ \\ \\ \\ \\ \\,$代码很长，引起不适：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdlib&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cctype&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;stack&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;map&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;set&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">long</span> <span class=\"type\">long</span> inf=<span class=\"number\">2147483647000000</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">double</span> eps=<span class=\"number\">1e-10</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">double</span> pi=<span class=\"built_in\">acos</span>(<span class=\"number\">-1.0</span>);</span><br><span class=\"line\"><span class=\"comment\">//char buf[1&lt;&lt;15],*S=buf,*T=buf;</span></span><br><span class=\"line\"><span class=\"comment\">//char getch()&#123;return S==T&amp;&amp;(T=(S=buf)+fread(buf,1,1&lt;&lt;15,stdin),S==T)?0:*S++;&#125;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">int</span> <span class=\"title\">read</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> x=<span class=\"number\">0</span>,f=<span class=\"number\">1</span>;<span class=\"type\">char</span> ch;ch=<span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(ch&lt;<span class=\"string\">&#x27;0&#x27;</span>||ch&gt;<span class=\"string\">&#x27;9&#x27;</span>)&#123;<span class=\"keyword\">if</span>(ch==<span class=\"string\">&#x27;-&#x27;</span>) f=<span class=\"number\">0</span>;ch=<span class=\"built_in\">getchar</span>();&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(ch&gt;=<span class=\"string\">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class=\"string\">&#x27;9&#x27;</span>)&#123;x=(x&lt;&lt;<span class=\"number\">1</span>)+(x&lt;&lt;<span class=\"number\">3</span>)+(ch&amp;<span class=\"number\">15</span>);ch=<span class=\"built_in\">getchar</span>();&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(f)<span class=\"keyword\">return</span> x;<span class=\"keyword\">else</span> <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">900010</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> n,m;</span><br><span class=\"line\"><span class=\"type\">long</span> <span class=\"type\">long</span> Cnt;</span><br><span class=\"line\"><span class=\"type\">bool</span> used[N];</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Edge</span>&#123;<span class=\"type\">int</span> p,w;&#125;E[N];</span><br><span class=\"line\">vector&lt;Edge&gt; G[N&lt;&lt;<span class=\"number\">1</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"type\">int</span> a,<span class=\"type\">int</span> b,<span class=\"type\">int</span> w)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;G[a].<span class=\"built_in\">push_back</span>((Edge)&#123;b,w&#125;);&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> top,Fa[N];</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Link</span>&#123;<span class=\"type\">int</span> u,v,w;&#125;e[N];</span><br><span class=\"line\"><span class=\"keyword\">inline</span> <span class=\"type\">bool</span> <span class=\"keyword\">operator</span> &lt;(<span class=\"type\">const</span> Link &amp;a,<span class=\"type\">const</span> Link &amp;b)&#123;<span class=\"keyword\">return</span> a.w&lt;b.w;&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">find</span><span class=\"params\">(<span class=\"type\">int</span> a)</span></span>&#123;<span class=\"keyword\">return</span> a==Fa[a]?a:Fa[a]=<span class=\"built_in\">find</span>(Fa[a]);&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">add_edge</span><span class=\"params\">(<span class=\"type\">int</span> a,<span class=\"type\">int</span> b,<span class=\"type\">int</span> w)</span></span>&#123;e[++top]=(Link)&#123;a,b,w&#125;;&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Kruskal</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">sort</span>(e+<span class=\"number\">1</span>,e+top+<span class=\"number\">1</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)Fa[i]=i;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>,A,B;i&lt;=m;i++)</span><br><span class=\"line\">  <span class=\"keyword\">if</span>((A=<span class=\"built_in\">find</span>(e[i].u))!=(B=<span class=\"built_in\">find</span>(e[i].v)))&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">add</span>(e[i].u,e[i].v,e[i].w);</span><br><span class=\"line\">\t\t<span class=\"built_in\">add</span>(e[i].v,e[i].u,e[i].w);</span><br><span class=\"line\">\t\tCnt+=<span class=\"number\">1ll</span>*e[i].w;</span><br><span class=\"line\">\t\tused[i]=<span class=\"number\">1</span>;</span><br><span class=\"line\">\t\tFa[A]=B;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> fa[N][<span class=\"number\">19</span>],deep[N];</span><br><span class=\"line\"><span class=\"type\">long</span> <span class=\"type\">long</span> Max[N][<span class=\"number\">19</span>],Min[N][<span class=\"number\">19</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"type\">int</span> u,<span class=\"type\">int</span> f)</span></span>&#123;</span><br><span class=\"line\">  fa[u][<span class=\"number\">0</span>]=f;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> v:G[u])&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(v.p==f)<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">    deep[v.p]=deep[u]+<span class=\"number\">1</span>;</span><br><span class=\"line\">    Max[v.p][<span class=\"number\">0</span>]=v.w;</span><br><span class=\"line\">    Min[v.p][<span class=\"number\">0</span>]=-inf;</span><br><span class=\"line\">    <span class=\"built_in\">dfs</span>(v.p,u);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">cal</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=<span class=\"number\">18</span>;++i)</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;=n;++j)&#123;</span><br><span class=\"line\">    fa[j][i]=fa[fa[j][i<span class=\"number\">-1</span>]][i<span class=\"number\">-1</span>];</span><br><span class=\"line\">    Max[j][i]=<span class=\"built_in\">max</span>(Max[j][i<span class=\"number\">-1</span>],Max[fa[j][i<span class=\"number\">-1</span>]][i<span class=\"number\">-1</span>]);</span><br><span class=\"line\">    Min[j][i]=<span class=\"built_in\">max</span>(Min[j][i<span class=\"number\">-1</span>],Min[fa[j][i<span class=\"number\">-1</span>]][i<span class=\"number\">-1</span>]);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(Max[j][i<span class=\"number\">-1</span>]&gt;Max[fa[j][i<span class=\"number\">-1</span>]][i<span class=\"number\">-1</span>])</span><br><span class=\"line\">\t\tMin[j][i]=<span class=\"built_in\">max</span>(Min[j][i],Max[fa[j][i<span class=\"number\">-1</span>]][i<span class=\"number\">-1</span>]);</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(Max[j][i<span class=\"number\">-1</span>]&lt;Max[fa[j][i<span class=\"number\">-1</span>]][i<span class=\"number\">-1</span>])</span><br><span class=\"line\">\t\tMin[j][i]=<span class=\"built_in\">max</span>(Min[j][i],Max[j][i<span class=\"number\">-1</span>]);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">LCA</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> y)</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(deep[x]&lt;deep[y])<span class=\"built_in\">swap</span>(x,y);</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">18</span>;i&gt;=<span class=\"number\">0</span>;--i)</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(deep[fa[x][i]]&gt;=deep[y])x=fa[x][i];</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(x==y)<span class=\"keyword\">return</span> x;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">18</span>;i&gt;=<span class=\"number\">0</span>;--i)</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(fa[x][i]!=fa[y][i])x=fa[x][i],y=fa[y][i];</span><br><span class=\"line\">  <span class=\"keyword\">return</span> fa[x][<span class=\"number\">0</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"title\">qmax</span><span class=\"params\">(<span class=\"type\">int</span> u,<span class=\"type\">int</span> v,<span class=\"type\">long</span> <span class=\"type\">long</span> maxx)</span></span>&#123;</span><br><span class=\"line\">  <span class=\"type\">long</span> <span class=\"type\">long</span> Ans=-inf;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">18</span>;i&gt;=<span class=\"number\">0</span>;--i)</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(deep[fa[u][i]]&gt;=deep[v])&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(maxx!=Max[u][i])Ans=<span class=\"built_in\">max</span>(Ans,Max[u][i]);</span><br><span class=\"line\">    <span class=\"keyword\">else</span> Ans=<span class=\"built_in\">max</span>(Ans,Min[u][i]);</span><br><span class=\"line\">    u=fa[u][i];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> Ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tn=<span class=\"built_in\">read</span>(),m=<span class=\"built_in\">read</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>,a,b,c;i&lt;=m;i++)</span><br><span class=\"line\">\ta=<span class=\"built_in\">read</span>(),b=<span class=\"built_in\">read</span>(),c=<span class=\"built_in\">read</span>(),</span><br><span class=\"line\">\t<span class=\"built_in\">add_edge</span>(a,b,c);</span><br><span class=\"line\">\t<span class=\"built_in\">Kruskal</span>();</span><br><span class=\"line\">\t<span class=\"type\">long</span> <span class=\"type\">long</span> Ans=inf;</span><br><span class=\"line\">  Min[<span class=\"number\">1</span>][<span class=\"number\">0</span>]=-inf;</span><br><span class=\"line\">  deep[<span class=\"number\">1</span>]=<span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">dfs</span>(<span class=\"number\">1</span>,<span class=\"number\">-1</span>);<span class=\"built_in\">cal</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=m;++i)<span class=\"keyword\">if</span>(!used[i])&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> u=e[i].u,v=e[i].v,lca=<span class=\"built_in\">LCA</span>(u,v);</span><br><span class=\"line\">    <span class=\"type\">long</span> <span class=\"type\">long</span> d=e[i].w;</span><br><span class=\"line\">    Ans=<span class=\"built_in\">min</span>(Ans,Cnt-<span class=\"built_in\">max</span>(<span class=\"built_in\">qmax</span>(u,lca,d),<span class=\"built_in\">qmax</span>(v,lca,d))+d);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%lld&quot;</span>,Ans);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"3-斯坦纳树\"><a href=\"#3-斯坦纳树\" class=\"headerlink\" title=\"3.斯坦纳树\"></a>3.斯坦纳树</h3><p>$\\ \\ \\ \\ \\ \\ \\ \\,$当只要求图的一部分点连接的时候，求最小的生成树，就是斯坦纳树，做法比较繁琐，大数据也不能优秀地处理。具体看这里<a href=\"https://blog.csdn.net/VictoryCzt/article/details/82972857\">【斯坦纳树学习笔记(VictoryCzt Orz)】</a>。</p>\n<h2 id=\"生成树形图\"><a href=\"#生成树形图\" class=\"headerlink\" title=\"生成树形图\"></a>生成树形图</h2><p>$\\ \\ \\ \\ \\ \\ \\ \\,$树形图不是一个有很好求法的东西，朱刘算法可以做到复杂度$O(nm)$求出最小树形图，过程大概如下：</p>\n<ol>\n<li><p>找到除了$root$以为其他点的权值最小的入边，如果出现除了$root$以外存在其他孤立的点，则不存在最小树形图。</p>\n</li>\n<li><p>找到图中所有的环，并对环进行缩点，重新编号，更新其他点到环上的点的距离。</p>\n</li>\n<li><p>以环数为下一次查找的点数，继续执行上述操作，直到没有环或者判定出不存在最小树形图为止。</p>\n</li>\n</ol>\n<p>$\\ \\ \\ \\ \\ \\ \\ \\,$大概就是这个图的意思：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/b5fbfbb3e6872794a624ca4947d868ae.png\" alt=\"\"></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> n,root;  </span><br><span class=\"line\"><span class=\"type\">int</span> k[N],idx[N],x,tim;</span><br><span class=\"line\"><span class=\"type\">int</span> cost[N],fa[N],f[N];</span><br><span class=\"line\"><span class=\"type\">int</span> mincost[N],ans,top;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Link</span>&#123;<span class=\"type\">int</span> u,v,w;&#125;e[N];</span><br><span class=\"line\"><span class=\"keyword\">inline</span> <span class=\"type\">bool</span> <span class=\"keyword\">operator</span> &lt;(<span class=\"type\">const</span> Link &amp;a,<span class=\"type\">const</span> Link &amp;b)&#123;<span class=\"keyword\">return</span> a.w&lt;b.w;&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">add_edge</span><span class=\"params\">(<span class=\"type\">int</span> a,<span class=\"type\">int</span> b,<span class=\"type\">int</span> w)</span></span>&#123;e[++top]=(Link)&#123;a,b,w&#125;;&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">Zhu_Liu</span><span class=\"params\">(<span class=\"type\">int</span> root)</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(mincost,<span class=\"number\">63</span>,<span class=\"built_in\">sizeof</span>(mincost));</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(idx,<span class=\"number\">-1</span>,<span class=\"built_in\">sizeof</span>(idx));</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(f,<span class=\"number\">0</span>,<span class=\"built_in\">sizeof</span>(f));</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=m;i++)</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(e[i].w&lt;mincost[e[i].v]&amp;&amp;e[i].u!=e[i].v)</span><br><span class=\"line\">\t\t&#123;mincost[e[i].v]=e[i].w;fa[e[i].v]=e[i].u;&#125;</span><br><span class=\"line\">    mincost[root]=<span class=\"number\">0</span>;tim=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">    \t<span class=\"keyword\">if</span>(mincost[i]==mincost[<span class=\"number\">0</span>])<span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">      ans+=mincost[i];x=i;</span><br><span class=\"line\">      <span class=\"keyword\">while</span>(f[x]!=i&amp;&amp;x!=root)f[x]=i,x=fa[x];</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(x!=root&amp;&amp;idx[x]==<span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">        tim++;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=fa[x];j!=x;j=fa[j])idx[j]=tim;</span><br><span class=\"line\">        idx[x]=tim;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(tim==<span class=\"number\">0</span>)<span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(idx[i]==<span class=\"number\">-1</span>)idx[i]=++tim;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=m;i++)&#123;</span><br><span class=\"line\">      x=e[i].v;e[i].u=idx[e[i].u];e[i].v=idx[e[i].v];</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(e[i].u!=e[i].v)e[i].w-=mincost[x];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    n=tim;root=idx[root];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"生成树和生成树形图计数\"><a href=\"#生成树和生成树形图计数\" class=\"headerlink\" title=\"生成树和生成树形图计数\"></a>生成树和生成树形图计数</h2><p>$\\ \\ \\ \\ \\ \\ \\ \\,$计数的话，需要用到矩阵树定理：</p>\n<p>$\\ \\ \\ \\ \\ \\ \\ \\,$<strong>图基尔霍夫矩阵的行列式值就是图的生成树个数</strong></p>\n<p>$\\ \\ \\ \\ \\ \\ \\ \\,$对于生成树形图同样适用，把双向边和入度改为单向即可，通过线性代数技巧优化求行列式的复杂度，可以做到$O(n^3+nm)$。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> A[N][N];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"type\">int</span> a,<span class=\"type\">int</span> b)</span></span>&#123;</span><br><span class=\"line\">\tA[a][a]++;A[b][b]++;</span><br><span class=\"line\">\tA[a][b]--;A[b][a]--;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">Gauss</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> ans=<span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;n;i++)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=i+<span class=\"number\">1</span>;j&lt;n;j++)</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(A[j][i])&#123;</span><br><span class=\"line\">\t\t\t<span class=\"type\">int</span> t=A[i][i]/A[j][i];</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> k=i;k&lt;n;k++)</span><br><span class=\"line\">\t\t\tA[i][k]-=t*A[j][k];</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">swap</span>(A[j],A[i]);</span><br><span class=\"line\">\t\t\tans=-ans;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tans*=A[i][i];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> ans</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>"},{"title":"洛谷 P4883 mzf的考验 简易题解【fhq treap】","date":"2019-03-12T00:27:13.000Z","mathjax":true,"_content":"题目传送门：[洛谷 P4883 mzf的考验](https://www.luogu.org/problemnew/show/P4883)\n\n<!-- more -->\n## 想法\n\n### 引入\n\n---\n\n$\\ \\ \\ \\ \\ \\ \\,$首先我们看他的操作：\n\n-  $opt==1$：两个正整数：$l$，$r$。请翻转区间$[l,r]$；\n-  $opt==2$：三个正整数：$l$，$r$，$d$。请将区间$[l,r]$中的所有卦象都异或卦象$d$;\n-  $opt==3$：两个正整数：$l$，$r$。请查询区间$[l,r]$的卦象权值和。\n\n### 解法\n\n$\\ \\ \\ \\ \\ \\ \\,$显然是一个平衡树可以做的啦，我们试着选择$Fhq\\_treap$ 做一下：\n\n$\\ \\ \\ \\ \\ \\ \\,$对于操作 $1$，$3$ 操作很简单，我们 $pushup$ 一下子树和， $pushdown$ 一下旋转标记，提出区间 $[l,r]$ 进行对应的操作就可以了。\n\n$\\ \\ \\ \\ \\ \\ \\,$那么对应的 $2$ 操作似乎没有那么简单操作了，我们先看看我们需要修改的 $pushdown$ 操作是什么：\n\n1. 单点权值$(val)$：直接异或上修改的值，在$pushdown$操作的时候同理。\n2. 权值懒人标记$(lazy\\_w)$：直接异或上修改的值，在$pushdown$操作的时候同理。\n3. 子树和$(sum)$：？\n\n$\\ \\ \\ \\ \\ \\ \\,$可以发现子树和的处理特别麻烦，但是对于异或问题，我们通常可以拆位解决，对于每一个节点，我们新开一个数组 $num[i]$ ，表示这个子树内的值，数位 $i$ 上面为 $1$ 的值是多少，这个很显然，我们可以通过 $pushup$ 一并传递上去。\n\n$\\ \\ \\ \\ \\ \\ \\,$如何处理子树和呢？因为打了标记的子树都要异或这一个值，所以我们把这个值拆了，如果这一位为 $1$ ，那么子树这一位都会 $1$变$0$，$0$变$1$，所以说有：\n\n$num[i]=size-num[i]$\n\n$\\ \\ \\ \\ \\ \\ \\,$其中$size$为子树大小，修改了$num$数组之后，我们就可以重新计算子树和了：\n\n$sum=\\sum_{i=0}^{limit}2^i\\times num[i]$\n\n$\\ \\ \\ \\ \\ \\ \\,$所以 $pushup$ 和 $pushdown$ 差不多应该是这样的：\n\n``` cpp\nvoid Xor(int rt,int x){\n\tlazy_w[rt]^=x;val[rt]^=x;\n    sum[rt]=0;\n\tfor(int i=0;i<=20;++i)tmp[i]=(x>>i)&1;\n  \tfor(int i=0;i<=20;++i){\n      \tif(tmp[i])num[rt][i]=size[rt]-num[rt][i];\n      \tsum[rt]+=(1ll<<i)*num[rt][i];\n    }\n}\nvoid pushup(int rt){\n\tsize[rt]=size[lson]+size[rson]+1;\n\tsum[rt]=sum[lson]+sum[rson]+1ll*val[rt];\n\tfor(int i=0;i<=20;i++)\n\tnum[rt][i]=num[lson][i]+num[rson][i]+((val[rt]>>i)&1);\n}\nvoid pushdown(int rt){\n\tif(lazy[rt]){\n\t\tswap(lson,rson);\n\t\tif(lson)lazy[lson]^=1;\n\t\tif(rson)lazy[rson]^=1;\n\t\tlazy[rt]=0;\n\t}\n\tif(lazy_w[rt]){\n\t\tint x=lazy_w[rt];lazy_w[rt]=0;\n\t\tif(lson){Xor(lson,x);}\n\t\tif(rson){Xor(rson,x);}\n\t}\n}\n```\n\n$\\ \\ \\ \\ \\ \\ \\,$总期望复杂度应该是$O(n\\log n\\ limit)$，其中$limit=\\log val$\n\n$\\ \\ \\ \\ \\ \\ \\,$懒得卡常了，吸氧过：\n\n## 代码\n\n``` cpp\n#include<algorithm>\n#include<iostream>\n#include<cstdlib>\n#include<cstring>\n#include<cctype>\n#include<cstdio>\n#include<vector>\n#include<string>\n#include<queue>\n#include<stack>\n#include<cmath>\n#include<ctime>\n#include<map>\n#include<set>\nusing namespace std;\nconst int inf=0x7fffffff;\nconst double eps=1e-10;\nconst double pi=acos(-1.0);\n//char buf[1<<15],*S=buf,*T=buf;\n//char getch(){return S==T&&(T=(S=buf)+fread(buf,1,1<<15,stdin),S==T)?0:*S++;}\ninline int read(){\n\tint x=0,f=1;char ch;ch=getchar();\n\twhile(ch<'0'||ch>'9'){if(ch=='-') f=0;ch=getchar();}\n\twhile(ch>='0'&&ch<='9'){x=(x<<1)+(x<<3)+(ch&15);ch=getchar();}\n\tif(f)return x;else return -x;\n}\nconst int N=1e5+10;\nstruct fhq_treap{\n\t#define lson ls[rt]\n\t#define rson rs[rt]\n\tint ls[N],rs[N];\n\tbool lazy[N];\n\tint lazy_w[N],val[N],key[N],size[N];\n\tlong long sum[N];\n\tint root,cnt;\n\tint tmp[25],num[N][25];\n\tvoid Xor(int rt,int x){\n\t\tlazy_w[rt]^=x;val[rt]^=x;\n    \tsum[rt]=0;\n\t\tfor(int i=0;i<=20;++i)tmp[i]=(x>>i)&1;\n  \t\tfor(int i=0;i<=20;++i){\n      \t\tif(tmp[i])num[rt][i]=size[rt]-num[rt][i];\n      \t\tsum[rt]+=(1ll<<i)*num[rt][i];\n    \t}\n\t}\n\tvoid pushup(int rt){\n\t\tsize[rt]=size[lson]+size[rson]+1;\n\t\tsum[rt]=sum[lson]+sum[rson]+1ll*val[rt];\n\t\tfor(int i=0;i<=20;i++)\n\t\tnum[rt][i]=num[lson][i]+num[rson][i]+((val[rt]>>i)&1);\n\t}\n\tvoid pushdown(int rt){\n\t\tif(lazy[rt]){\n\t\t\tswap(lson,rson);\n\t\t\tif(lson)lazy[lson]^=1;\n\t\t\tif(rson)lazy[rson]^=1;\n\t\t\tlazy[rt]=0;\n\t\t}\n\t\tif(lazy_w[rt]){\n\t\t\tint x=lazy_w[rt];lazy_w[rt]=0;\n\t\t\tif(lson){Xor(lson,x);}\n\t\t\tif(rson){Xor(rson,x);}\n\t\t}\n\t}\n\tint merge(int a,int b){\n\t\tif(!a||!b)return a|b;\n\t\tif(key[a]<key[b]){pushdown(a);rs[a]=merge(rs[a],b);pushup(a);return a;}\n\t\telse {pushdown(b);ls[b]=merge(a,ls[b]);pushup(b);return b;}\n\t}\n\tvoid split(int rt,int x,int &a,int &b){\n\t\tif(!rt){a=b=0;return;}\n\t\tpushdown(rt);\n\t\tif(x<=size[lson]){b=rt;split(lson,x,a,lson);}\n\t\telse {a=rt;split(rson,x-size[lson]-1,rson,b);}\n\t\tpushup(rt);\n\t}\n\tint newnode(int x){\n\t\tint rt=++cnt;\n\t\tsize[rt]=1;val[rt]=x;key[rt]=rand();\n\t\tlazy[rt]=0;lazy_w[rt]=0;\n\t\tlson=rson=0;\n\t\treturn rt;\n\t}\n\tint build(int a[],int len){\n\t\tstack<int> S;\n\t\tint rt,last;\n\t  \tfor(int i=1;i<=len;i++){\n\t    rt=newnode(a[i]);last=0;\n\t    while(!S.empty()&&key[S.top()]>key[rt])\n\t\t\tpushup(last=S.top()),S.pop();\n\t    \tif(!S.empty())rs[S.top()]=rt;\n\t    \tlson=last;S.push(rt);\n\t  \t}\n\t  \twhile(!S.empty())pushup(last=S.top()),S.pop();\n\t  \treturn last; \n\t}\n\tvoid Revers(int l,int r){\n\t\tint a,b,c;\n\t\tsplit(root,r,a,c);\n\t\tsplit(a,l-1,a,b);\n\t\tlazy[b]^=1;\n\t\troot=merge(merge(a,b),c);\n\t}\n\tvoid Update(int l,int r,int d){\n\t\tint a,b,c;\n\t\tsplit(root,r,a,c);\n\t\tsplit(a,l-1,a,b);\n\t\tXor(b,d);\n\t\troot=merge(merge(a,b),c);\n\t}\n\tlong long Query(int l,int r){\n\t\tint a,b,c;\n\t\tsplit(root,r,a,c);\n\t\tsplit(a,l-1,a,b);\n\t\tlong long ret=sum[b];\n\t\troot=merge(merge(a,b),c);\n\t\treturn ret;\n\t}\n}Tree;\nint n,m;\nint a[N],op,l,r,d;\nint main()\n{\n\tsrand(time(NULL));\n\tn=read();m=read();\n\tfor(int i=1;i<=n;i++)a[i]=read();\n\tTree.root=Tree.build(a,n);\n\twhile(m--){\n\t\top=read();l=read();r=read();\n\t\tif(op==1)Tree.Revers(l,r);\n\t\tif(op==2)d=read(),Tree.Update(l,r,d);\n\t\tif(op==3)cout<<Tree.Query(l,r)<<endl;\n\t}\n\treturn 0;\n}\n\n```","source":"_posts/洛谷-P4883-mzf的考验-简易题解-fhq-treap.md","raw":"---\ntitle: '洛谷 P4883 mzf的考验 简易题解【fhq treap】'\ndate: 2019-03-12 08:27:13\ncategories:\n- 题解\ntags:\n- OI\n- 数据结构\n- 平衡树\n- Fhq_Treap\nmathjax: true\n---\n题目传送门：[洛谷 P4883 mzf的考验](https://www.luogu.org/problemnew/show/P4883)\n\n<!-- more -->\n## 想法\n\n### 引入\n\n---\n\n$\\ \\ \\ \\ \\ \\ \\,$首先我们看他的操作：\n\n-  $opt==1$：两个正整数：$l$，$r$。请翻转区间$[l,r]$；\n-  $opt==2$：三个正整数：$l$，$r$，$d$。请将区间$[l,r]$中的所有卦象都异或卦象$d$;\n-  $opt==3$：两个正整数：$l$，$r$。请查询区间$[l,r]$的卦象权值和。\n\n### 解法\n\n$\\ \\ \\ \\ \\ \\ \\,$显然是一个平衡树可以做的啦，我们试着选择$Fhq\\_treap$ 做一下：\n\n$\\ \\ \\ \\ \\ \\ \\,$对于操作 $1$，$3$ 操作很简单，我们 $pushup$ 一下子树和， $pushdown$ 一下旋转标记，提出区间 $[l,r]$ 进行对应的操作就可以了。\n\n$\\ \\ \\ \\ \\ \\ \\,$那么对应的 $2$ 操作似乎没有那么简单操作了，我们先看看我们需要修改的 $pushdown$ 操作是什么：\n\n1. 单点权值$(val)$：直接异或上修改的值，在$pushdown$操作的时候同理。\n2. 权值懒人标记$(lazy\\_w)$：直接异或上修改的值，在$pushdown$操作的时候同理。\n3. 子树和$(sum)$：？\n\n$\\ \\ \\ \\ \\ \\ \\,$可以发现子树和的处理特别麻烦，但是对于异或问题，我们通常可以拆位解决，对于每一个节点，我们新开一个数组 $num[i]$ ，表示这个子树内的值，数位 $i$ 上面为 $1$ 的值是多少，这个很显然，我们可以通过 $pushup$ 一并传递上去。\n\n$\\ \\ \\ \\ \\ \\ \\,$如何处理子树和呢？因为打了标记的子树都要异或这一个值，所以我们把这个值拆了，如果这一位为 $1$ ，那么子树这一位都会 $1$变$0$，$0$变$1$，所以说有：\n\n$num[i]=size-num[i]$\n\n$\\ \\ \\ \\ \\ \\ \\,$其中$size$为子树大小，修改了$num$数组之后，我们就可以重新计算子树和了：\n\n$sum=\\sum_{i=0}^{limit}2^i\\times num[i]$\n\n$\\ \\ \\ \\ \\ \\ \\,$所以 $pushup$ 和 $pushdown$ 差不多应该是这样的：\n\n``` cpp\nvoid Xor(int rt,int x){\n\tlazy_w[rt]^=x;val[rt]^=x;\n    sum[rt]=0;\n\tfor(int i=0;i<=20;++i)tmp[i]=(x>>i)&1;\n  \tfor(int i=0;i<=20;++i){\n      \tif(tmp[i])num[rt][i]=size[rt]-num[rt][i];\n      \tsum[rt]+=(1ll<<i)*num[rt][i];\n    }\n}\nvoid pushup(int rt){\n\tsize[rt]=size[lson]+size[rson]+1;\n\tsum[rt]=sum[lson]+sum[rson]+1ll*val[rt];\n\tfor(int i=0;i<=20;i++)\n\tnum[rt][i]=num[lson][i]+num[rson][i]+((val[rt]>>i)&1);\n}\nvoid pushdown(int rt){\n\tif(lazy[rt]){\n\t\tswap(lson,rson);\n\t\tif(lson)lazy[lson]^=1;\n\t\tif(rson)lazy[rson]^=1;\n\t\tlazy[rt]=0;\n\t}\n\tif(lazy_w[rt]){\n\t\tint x=lazy_w[rt];lazy_w[rt]=0;\n\t\tif(lson){Xor(lson,x);}\n\t\tif(rson){Xor(rson,x);}\n\t}\n}\n```\n\n$\\ \\ \\ \\ \\ \\ \\,$总期望复杂度应该是$O(n\\log n\\ limit)$，其中$limit=\\log val$\n\n$\\ \\ \\ \\ \\ \\ \\,$懒得卡常了，吸氧过：\n\n## 代码\n\n``` cpp\n#include<algorithm>\n#include<iostream>\n#include<cstdlib>\n#include<cstring>\n#include<cctype>\n#include<cstdio>\n#include<vector>\n#include<string>\n#include<queue>\n#include<stack>\n#include<cmath>\n#include<ctime>\n#include<map>\n#include<set>\nusing namespace std;\nconst int inf=0x7fffffff;\nconst double eps=1e-10;\nconst double pi=acos(-1.0);\n//char buf[1<<15],*S=buf,*T=buf;\n//char getch(){return S==T&&(T=(S=buf)+fread(buf,1,1<<15,stdin),S==T)?0:*S++;}\ninline int read(){\n\tint x=0,f=1;char ch;ch=getchar();\n\twhile(ch<'0'||ch>'9'){if(ch=='-') f=0;ch=getchar();}\n\twhile(ch>='0'&&ch<='9'){x=(x<<1)+(x<<3)+(ch&15);ch=getchar();}\n\tif(f)return x;else return -x;\n}\nconst int N=1e5+10;\nstruct fhq_treap{\n\t#define lson ls[rt]\n\t#define rson rs[rt]\n\tint ls[N],rs[N];\n\tbool lazy[N];\n\tint lazy_w[N],val[N],key[N],size[N];\n\tlong long sum[N];\n\tint root,cnt;\n\tint tmp[25],num[N][25];\n\tvoid Xor(int rt,int x){\n\t\tlazy_w[rt]^=x;val[rt]^=x;\n    \tsum[rt]=0;\n\t\tfor(int i=0;i<=20;++i)tmp[i]=(x>>i)&1;\n  \t\tfor(int i=0;i<=20;++i){\n      \t\tif(tmp[i])num[rt][i]=size[rt]-num[rt][i];\n      \t\tsum[rt]+=(1ll<<i)*num[rt][i];\n    \t}\n\t}\n\tvoid pushup(int rt){\n\t\tsize[rt]=size[lson]+size[rson]+1;\n\t\tsum[rt]=sum[lson]+sum[rson]+1ll*val[rt];\n\t\tfor(int i=0;i<=20;i++)\n\t\tnum[rt][i]=num[lson][i]+num[rson][i]+((val[rt]>>i)&1);\n\t}\n\tvoid pushdown(int rt){\n\t\tif(lazy[rt]){\n\t\t\tswap(lson,rson);\n\t\t\tif(lson)lazy[lson]^=1;\n\t\t\tif(rson)lazy[rson]^=1;\n\t\t\tlazy[rt]=0;\n\t\t}\n\t\tif(lazy_w[rt]){\n\t\t\tint x=lazy_w[rt];lazy_w[rt]=0;\n\t\t\tif(lson){Xor(lson,x);}\n\t\t\tif(rson){Xor(rson,x);}\n\t\t}\n\t}\n\tint merge(int a,int b){\n\t\tif(!a||!b)return a|b;\n\t\tif(key[a]<key[b]){pushdown(a);rs[a]=merge(rs[a],b);pushup(a);return a;}\n\t\telse {pushdown(b);ls[b]=merge(a,ls[b]);pushup(b);return b;}\n\t}\n\tvoid split(int rt,int x,int &a,int &b){\n\t\tif(!rt){a=b=0;return;}\n\t\tpushdown(rt);\n\t\tif(x<=size[lson]){b=rt;split(lson,x,a,lson);}\n\t\telse {a=rt;split(rson,x-size[lson]-1,rson,b);}\n\t\tpushup(rt);\n\t}\n\tint newnode(int x){\n\t\tint rt=++cnt;\n\t\tsize[rt]=1;val[rt]=x;key[rt]=rand();\n\t\tlazy[rt]=0;lazy_w[rt]=0;\n\t\tlson=rson=0;\n\t\treturn rt;\n\t}\n\tint build(int a[],int len){\n\t\tstack<int> S;\n\t\tint rt,last;\n\t  \tfor(int i=1;i<=len;i++){\n\t    rt=newnode(a[i]);last=0;\n\t    while(!S.empty()&&key[S.top()]>key[rt])\n\t\t\tpushup(last=S.top()),S.pop();\n\t    \tif(!S.empty())rs[S.top()]=rt;\n\t    \tlson=last;S.push(rt);\n\t  \t}\n\t  \twhile(!S.empty())pushup(last=S.top()),S.pop();\n\t  \treturn last; \n\t}\n\tvoid Revers(int l,int r){\n\t\tint a,b,c;\n\t\tsplit(root,r,a,c);\n\t\tsplit(a,l-1,a,b);\n\t\tlazy[b]^=1;\n\t\troot=merge(merge(a,b),c);\n\t}\n\tvoid Update(int l,int r,int d){\n\t\tint a,b,c;\n\t\tsplit(root,r,a,c);\n\t\tsplit(a,l-1,a,b);\n\t\tXor(b,d);\n\t\troot=merge(merge(a,b),c);\n\t}\n\tlong long Query(int l,int r){\n\t\tint a,b,c;\n\t\tsplit(root,r,a,c);\n\t\tsplit(a,l-1,a,b);\n\t\tlong long ret=sum[b];\n\t\troot=merge(merge(a,b),c);\n\t\treturn ret;\n\t}\n}Tree;\nint n,m;\nint a[N],op,l,r,d;\nint main()\n{\n\tsrand(time(NULL));\n\tn=read();m=read();\n\tfor(int i=1;i<=n;i++)a[i]=read();\n\tTree.root=Tree.build(a,n);\n\twhile(m--){\n\t\top=read();l=read();r=read();\n\t\tif(op==1)Tree.Revers(l,r);\n\t\tif(op==2)d=read(),Tree.Update(l,r,d);\n\t\tif(op==3)cout<<Tree.Query(l,r)<<endl;\n\t}\n\treturn 0;\n}\n\n```","slug":"洛谷-P4883-mzf的考验-简易题解-fhq-treap","published":1,"updated":"2022-02-13T13:40:30.615Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0i63w6b001mu4gbeovgbaft","content":"<p>题目传送门：<a href=\"https://www.luogu.org/problemnew/show/P4883\">洛谷 P4883 mzf的考验</a></p>\n<span id=\"more\"></span>\n<h2 id=\"想法\"><a href=\"#想法\" class=\"headerlink\" title=\"想法\"></a>想法</h2><h3 id=\"引入\"><a href=\"#引入\" class=\"headerlink\" title=\"引入\"></a>引入</h3><hr>\n<p>$\\ \\ \\ \\ \\ \\ \\,$首先我们看他的操作：</p>\n<ul>\n<li>$opt==1$：两个正整数：$l$，$r$。请翻转区间$[l,r]$；</li>\n<li>$opt==2$：三个正整数：$l$，$r$，$d$。请将区间$[l,r]$中的所有卦象都异或卦象$d$;</li>\n<li>$opt==3$：两个正整数：$l$，$r$。请查询区间$[l,r]$的卦象权值和。</li>\n</ul>\n<h3 id=\"解法\"><a href=\"#解法\" class=\"headerlink\" title=\"解法\"></a>解法</h3><p>$\\ \\ \\ \\ \\ \\ \\,$显然是一个平衡树可以做的啦，我们试着选择$Fhq_treap$ 做一下：</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$对于操作 $1$，$3$ 操作很简单，我们 $pushup$ 一下子树和， $pushdown$ 一下旋转标记，提出区间 $[l,r]$ 进行对应的操作就可以了。</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$那么对应的 $2$ 操作似乎没有那么简单操作了，我们先看看我们需要修改的 $pushdown$ 操作是什么：</p>\n<ol>\n<li>单点权值$(val)$：直接异或上修改的值，在$pushdown$操作的时候同理。</li>\n<li>权值懒人标记$(lazy_w)$：直接异或上修改的值，在$pushdown$操作的时候同理。</li>\n<li>子树和$(sum)$：？</li>\n</ol>\n<p>$\\ \\ \\ \\ \\ \\ \\,$可以发现子树和的处理特别麻烦，但是对于异或问题，我们通常可以拆位解决，对于每一个节点，我们新开一个数组 $num[i]$ ，表示这个子树内的值，数位 $i$ 上面为 $1$ 的值是多少，这个很显然，我们可以通过 $pushup$ 一并传递上去。</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$如何处理子树和呢？因为打了标记的子树都要异或这一个值，所以我们把这个值拆了，如果这一位为 $1$ ，那么子树这一位都会 $1$变$0$，$0$变$1$，所以说有：</p>\n<p>$num[i]=size-num[i]$</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$其中$size$为子树大小，修改了$num$数组之后，我们就可以重新计算子树和了：</p>\n<p>$sum=\\sum_{i=0}^{limit}2^i\\times num[i]$</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$所以 $pushup$ 和 $pushdown$ 差不多应该是这样的：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Xor</span><span class=\"params\">(<span class=\"type\">int</span> rt,<span class=\"type\">int</span> x)</span></span>&#123;</span><br><span class=\"line\">\tlazy_w[rt]^=x;val[rt]^=x;</span><br><span class=\"line\">    sum[rt]=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;=<span class=\"number\">20</span>;++i)tmp[i]=(x&gt;&gt;i)&amp;<span class=\"number\">1</span>;</span><br><span class=\"line\">  \t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;=<span class=\"number\">20</span>;++i)&#123;</span><br><span class=\"line\">      \t<span class=\"keyword\">if</span>(tmp[i])num[rt][i]=size[rt]-num[rt][i];</span><br><span class=\"line\">      \tsum[rt]+=(<span class=\"number\">1ll</span>&lt;&lt;i)*num[rt][i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">pushup</span><span class=\"params\">(<span class=\"type\">int</span> rt)</span></span>&#123;</span><br><span class=\"line\">\tsize[rt]=size[lson]+size[rson]+<span class=\"number\">1</span>;</span><br><span class=\"line\">\tsum[rt]=sum[lson]+sum[rson]+<span class=\"number\">1ll</span>*val[rt];</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;=<span class=\"number\">20</span>;i++)</span><br><span class=\"line\">\tnum[rt][i]=num[lson][i]+num[rson][i]+((val[rt]&gt;&gt;i)&amp;<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">pushdown</span><span class=\"params\">(<span class=\"type\">int</span> rt)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(lazy[rt])&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">swap</span>(lson,rson);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(lson)lazy[lson]^=<span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(rson)lazy[rson]^=<span class=\"number\">1</span>;</span><br><span class=\"line\">\t\tlazy[rt]=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(lazy_w[rt])&#123;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> x=lazy_w[rt];lazy_w[rt]=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(lson)&#123;<span class=\"built_in\">Xor</span>(lson,x);&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(rson)&#123;<span class=\"built_in\">Xor</span>(rson,x);&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>$\\ \\ \\ \\ \\ \\ \\,$总期望复杂度应该是$O(n\\log n\\ limit)$，其中$limit=\\log val$</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$懒得卡常了，吸氧过：</p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdlib&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cctype&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;stack&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;ctime&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;map&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;set&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> inf=<span class=\"number\">0x7fffffff</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">double</span> eps=<span class=\"number\">1e-10</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">double</span> pi=<span class=\"built_in\">acos</span>(<span class=\"number\">-1.0</span>);</span><br><span class=\"line\"><span class=\"comment\">//char buf[1&lt;&lt;15],*S=buf,*T=buf;</span></span><br><span class=\"line\"><span class=\"comment\">//char getch()&#123;return S==T&amp;&amp;(T=(S=buf)+fread(buf,1,1&lt;&lt;15,stdin),S==T)?0:*S++;&#125;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">int</span> <span class=\"title\">read</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> x=<span class=\"number\">0</span>,f=<span class=\"number\">1</span>;<span class=\"type\">char</span> ch;ch=<span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(ch&lt;<span class=\"string\">&#x27;0&#x27;</span>||ch&gt;<span class=\"string\">&#x27;9&#x27;</span>)&#123;<span class=\"keyword\">if</span>(ch==<span class=\"string\">&#x27;-&#x27;</span>) f=<span class=\"number\">0</span>;ch=<span class=\"built_in\">getchar</span>();&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(ch&gt;=<span class=\"string\">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class=\"string\">&#x27;9&#x27;</span>)&#123;x=(x&lt;&lt;<span class=\"number\">1</span>)+(x&lt;&lt;<span class=\"number\">3</span>)+(ch&amp;<span class=\"number\">15</span>);ch=<span class=\"built_in\">getchar</span>();&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(f)<span class=\"keyword\">return</span> x;<span class=\"keyword\">else</span> <span class=\"keyword\">return</span> -x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">1e5</span>+<span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">fhq_treap</span>&#123;</span><br><span class=\"line\">\t<span class=\"meta\">#<span class=\"keyword\">define</span> lson ls[rt]</span></span><br><span class=\"line\">\t<span class=\"meta\">#<span class=\"keyword\">define</span> rson rs[rt]</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> ls[N],rs[N];</span><br><span class=\"line\">\t<span class=\"type\">bool</span> lazy[N];</span><br><span class=\"line\">\t<span class=\"type\">int</span> lazy_w[N],val[N],key[N],size[N];</span><br><span class=\"line\">\t<span class=\"type\">long</span> <span class=\"type\">long</span> sum[N];</span><br><span class=\"line\">\t<span class=\"type\">int</span> root,cnt;</span><br><span class=\"line\">\t<span class=\"type\">int</span> tmp[<span class=\"number\">25</span>],num[N][<span class=\"number\">25</span>];</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Xor</span><span class=\"params\">(<span class=\"type\">int</span> rt,<span class=\"type\">int</span> x)</span></span>&#123;</span><br><span class=\"line\">\t\tlazy_w[rt]^=x;val[rt]^=x;</span><br><span class=\"line\">    \tsum[rt]=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;=<span class=\"number\">20</span>;++i)tmp[i]=(x&gt;&gt;i)&amp;<span class=\"number\">1</span>;</span><br><span class=\"line\">  \t\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;=<span class=\"number\">20</span>;++i)&#123;</span><br><span class=\"line\">      \t\t<span class=\"keyword\">if</span>(tmp[i])num[rt][i]=size[rt]-num[rt][i];</span><br><span class=\"line\">      \t\tsum[rt]+=(<span class=\"number\">1ll</span>&lt;&lt;i)*num[rt][i];</span><br><span class=\"line\">    \t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">pushup</span><span class=\"params\">(<span class=\"type\">int</span> rt)</span></span>&#123;</span><br><span class=\"line\">\t\tsize[rt]=size[lson]+size[rson]+<span class=\"number\">1</span>;</span><br><span class=\"line\">\t\tsum[rt]=sum[lson]+sum[rson]+<span class=\"number\">1ll</span>*val[rt];</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;=<span class=\"number\">20</span>;i++)</span><br><span class=\"line\">\t\tnum[rt][i]=num[lson][i]+num[rson][i]+((val[rt]&gt;&gt;i)&amp;<span class=\"number\">1</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">pushdown</span><span class=\"params\">(<span class=\"type\">int</span> rt)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(lazy[rt])&#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">swap</span>(lson,rson);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(lson)lazy[lson]^=<span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(rson)lazy[rson]^=<span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\tlazy[rt]=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(lazy_w[rt])&#123;</span><br><span class=\"line\">\t\t\t<span class=\"type\">int</span> x=lazy_w[rt];lazy_w[rt]=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(lson)&#123;<span class=\"built_in\">Xor</span>(lson,x);&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(rson)&#123;<span class=\"built_in\">Xor</span>(rson,x);&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">merge</span><span class=\"params\">(<span class=\"type\">int</span> a,<span class=\"type\">int</span> b)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(!a||!b)<span class=\"keyword\">return</span> a|b;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(key[a]&lt;key[b])&#123;<span class=\"built_in\">pushdown</span>(a);rs[a]=<span class=\"built_in\">merge</span>(rs[a],b);<span class=\"built_in\">pushup</span>(a);<span class=\"keyword\">return</span> a;&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> &#123;<span class=\"built_in\">pushdown</span>(b);ls[b]=<span class=\"built_in\">merge</span>(a,ls[b]);<span class=\"built_in\">pushup</span>(b);<span class=\"keyword\">return</span> b;&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">split</span><span class=\"params\">(<span class=\"type\">int</span> rt,<span class=\"type\">int</span> x,<span class=\"type\">int</span> &amp;a,<span class=\"type\">int</span> &amp;b)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(!rt)&#123;a=b=<span class=\"number\">0</span>;<span class=\"keyword\">return</span>;&#125;</span><br><span class=\"line\">\t\t<span class=\"built_in\">pushdown</span>(rt);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(x&lt;=size[lson])&#123;b=rt;<span class=\"built_in\">split</span>(lson,x,a,lson);&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> &#123;a=rt;<span class=\"built_in\">split</span>(rson,x-size[lson]<span class=\"number\">-1</span>,rson,b);&#125;</span><br><span class=\"line\">\t\t<span class=\"built_in\">pushup</span>(rt);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">newnode</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> rt=++cnt;</span><br><span class=\"line\">\t\tsize[rt]=<span class=\"number\">1</span>;val[rt]=x;key[rt]=<span class=\"built_in\">rand</span>();</span><br><span class=\"line\">\t\tlazy[rt]=<span class=\"number\">0</span>;lazy_w[rt]=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t\tlson=rson=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> rt;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">build</span><span class=\"params\">(<span class=\"type\">int</span> a[],<span class=\"type\">int</span> len)</span></span>&#123;</span><br><span class=\"line\">\t\tstack&lt;<span class=\"type\">int</span>&gt; S;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> rt,last;</span><br><span class=\"line\">\t  \t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=len;i++)&#123;</span><br><span class=\"line\">\t    rt=<span class=\"built_in\">newnode</span>(a[i]);last=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t    <span class=\"keyword\">while</span>(!S.<span class=\"built_in\">empty</span>()&amp;&amp;key[S.<span class=\"built_in\">top</span>()]&gt;key[rt])</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">pushup</span>(last=S.<span class=\"built_in\">top</span>()),S.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">\t    \t<span class=\"keyword\">if</span>(!S.<span class=\"built_in\">empty</span>())rs[S.<span class=\"built_in\">top</span>()]=rt;</span><br><span class=\"line\">\t    \tlson=last;S.<span class=\"built_in\">push</span>(rt);</span><br><span class=\"line\">\t  \t&#125;</span><br><span class=\"line\">\t  \t<span class=\"keyword\">while</span>(!S.<span class=\"built_in\">empty</span>())<span class=\"built_in\">pushup</span>(last=S.<span class=\"built_in\">top</span>()),S.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">\t  \t<span class=\"keyword\">return</span> last; </span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Revers</span><span class=\"params\">(<span class=\"type\">int</span> l,<span class=\"type\">int</span> r)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> a,b,c;</span><br><span class=\"line\">\t\t<span class=\"built_in\">split</span>(root,r,a,c);</span><br><span class=\"line\">\t\t<span class=\"built_in\">split</span>(a,l<span class=\"number\">-1</span>,a,b);</span><br><span class=\"line\">\t\tlazy[b]^=<span class=\"number\">1</span>;</span><br><span class=\"line\">\t\troot=<span class=\"built_in\">merge</span>(<span class=\"built_in\">merge</span>(a,b),c);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Update</span><span class=\"params\">(<span class=\"type\">int</span> l,<span class=\"type\">int</span> r,<span class=\"type\">int</span> d)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> a,b,c;</span><br><span class=\"line\">\t\t<span class=\"built_in\">split</span>(root,r,a,c);</span><br><span class=\"line\">\t\t<span class=\"built_in\">split</span>(a,l<span class=\"number\">-1</span>,a,b);</span><br><span class=\"line\">\t\t<span class=\"built_in\">Xor</span>(b,d);</span><br><span class=\"line\">\t\troot=<span class=\"built_in\">merge</span>(<span class=\"built_in\">merge</span>(a,b),c);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"title\">Query</span><span class=\"params\">(<span class=\"type\">int</span> l,<span class=\"type\">int</span> r)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> a,b,c;</span><br><span class=\"line\">\t\t<span class=\"built_in\">split</span>(root,r,a,c);</span><br><span class=\"line\">\t\t<span class=\"built_in\">split</span>(a,l<span class=\"number\">-1</span>,a,b);</span><br><span class=\"line\">\t\t<span class=\"type\">long</span> <span class=\"type\">long</span> ret=sum[b];</span><br><span class=\"line\">\t\troot=<span class=\"built_in\">merge</span>(<span class=\"built_in\">merge</span>(a,b),c);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;Tree;</span><br><span class=\"line\"><span class=\"type\">int</span> n,m;</span><br><span class=\"line\"><span class=\"type\">int</span> a[N],op,l,r,d;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">srand</span>(<span class=\"built_in\">time</span>(<span class=\"literal\">NULL</span>));</span><br><span class=\"line\">\tn=<span class=\"built_in\">read</span>();m=<span class=\"built_in\">read</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)a[i]=<span class=\"built_in\">read</span>();</span><br><span class=\"line\">\tTree.root=Tree.<span class=\"built_in\">build</span>(a,n);</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(m--)&#123;</span><br><span class=\"line\">\t\top=<span class=\"built_in\">read</span>();l=<span class=\"built_in\">read</span>();r=<span class=\"built_in\">read</span>();</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(op==<span class=\"number\">1</span>)Tree.<span class=\"built_in\">Revers</span>(l,r);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(op==<span class=\"number\">2</span>)d=<span class=\"built_in\">read</span>(),Tree.<span class=\"built_in\">Update</span>(l,r,d);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(op==<span class=\"number\">3</span>)cout&lt;&lt;Tree.<span class=\"built_in\">Query</span>(l,r)&lt;&lt;endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p>题目传送门：<a href=\"https://www.luogu.org/problemnew/show/P4883\">洛谷 P4883 mzf的考验</a></p>","more":"<h2 id=\"想法\"><a href=\"#想法\" class=\"headerlink\" title=\"想法\"></a>想法</h2><h3 id=\"引入\"><a href=\"#引入\" class=\"headerlink\" title=\"引入\"></a>引入</h3><hr>\n<p>$\\ \\ \\ \\ \\ \\ \\,$首先我们看他的操作：</p>\n<ul>\n<li>$opt==1$：两个正整数：$l$，$r$。请翻转区间$[l,r]$；</li>\n<li>$opt==2$：三个正整数：$l$，$r$，$d$。请将区间$[l,r]$中的所有卦象都异或卦象$d$;</li>\n<li>$opt==3$：两个正整数：$l$，$r$。请查询区间$[l,r]$的卦象权值和。</li>\n</ul>\n<h3 id=\"解法\"><a href=\"#解法\" class=\"headerlink\" title=\"解法\"></a>解法</h3><p>$\\ \\ \\ \\ \\ \\ \\,$显然是一个平衡树可以做的啦，我们试着选择$Fhq_treap$ 做一下：</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$对于操作 $1$，$3$ 操作很简单，我们 $pushup$ 一下子树和， $pushdown$ 一下旋转标记，提出区间 $[l,r]$ 进行对应的操作就可以了。</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$那么对应的 $2$ 操作似乎没有那么简单操作了，我们先看看我们需要修改的 $pushdown$ 操作是什么：</p>\n<ol>\n<li>单点权值$(val)$：直接异或上修改的值，在$pushdown$操作的时候同理。</li>\n<li>权值懒人标记$(lazy_w)$：直接异或上修改的值，在$pushdown$操作的时候同理。</li>\n<li>子树和$(sum)$：？</li>\n</ol>\n<p>$\\ \\ \\ \\ \\ \\ \\,$可以发现子树和的处理特别麻烦，但是对于异或问题，我们通常可以拆位解决，对于每一个节点，我们新开一个数组 $num[i]$ ，表示这个子树内的值，数位 $i$ 上面为 $1$ 的值是多少，这个很显然，我们可以通过 $pushup$ 一并传递上去。</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$如何处理子树和呢？因为打了标记的子树都要异或这一个值，所以我们把这个值拆了，如果这一位为 $1$ ，那么子树这一位都会 $1$变$0$，$0$变$1$，所以说有：</p>\n<p>$num[i]=size-num[i]$</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$其中$size$为子树大小，修改了$num$数组之后，我们就可以重新计算子树和了：</p>\n<p>$sum=\\sum_{i=0}^{limit}2^i\\times num[i]$</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$所以 $pushup$ 和 $pushdown$ 差不多应该是这样的：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Xor</span><span class=\"params\">(<span class=\"type\">int</span> rt,<span class=\"type\">int</span> x)</span></span>&#123;</span><br><span class=\"line\">\tlazy_w[rt]^=x;val[rt]^=x;</span><br><span class=\"line\">    sum[rt]=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;=<span class=\"number\">20</span>;++i)tmp[i]=(x&gt;&gt;i)&amp;<span class=\"number\">1</span>;</span><br><span class=\"line\">  \t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;=<span class=\"number\">20</span>;++i)&#123;</span><br><span class=\"line\">      \t<span class=\"keyword\">if</span>(tmp[i])num[rt][i]=size[rt]-num[rt][i];</span><br><span class=\"line\">      \tsum[rt]+=(<span class=\"number\">1ll</span>&lt;&lt;i)*num[rt][i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">pushup</span><span class=\"params\">(<span class=\"type\">int</span> rt)</span></span>&#123;</span><br><span class=\"line\">\tsize[rt]=size[lson]+size[rson]+<span class=\"number\">1</span>;</span><br><span class=\"line\">\tsum[rt]=sum[lson]+sum[rson]+<span class=\"number\">1ll</span>*val[rt];</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;=<span class=\"number\">20</span>;i++)</span><br><span class=\"line\">\tnum[rt][i]=num[lson][i]+num[rson][i]+((val[rt]&gt;&gt;i)&amp;<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">pushdown</span><span class=\"params\">(<span class=\"type\">int</span> rt)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(lazy[rt])&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">swap</span>(lson,rson);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(lson)lazy[lson]^=<span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(rson)lazy[rson]^=<span class=\"number\">1</span>;</span><br><span class=\"line\">\t\tlazy[rt]=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(lazy_w[rt])&#123;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> x=lazy_w[rt];lazy_w[rt]=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(lson)&#123;<span class=\"built_in\">Xor</span>(lson,x);&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(rson)&#123;<span class=\"built_in\">Xor</span>(rson,x);&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>$\\ \\ \\ \\ \\ \\ \\,$总期望复杂度应该是$O(n\\log n\\ limit)$，其中$limit=\\log val$</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$懒得卡常了，吸氧过：</p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdlib&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cctype&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;stack&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;ctime&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;map&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;set&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> inf=<span class=\"number\">0x7fffffff</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">double</span> eps=<span class=\"number\">1e-10</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">double</span> pi=<span class=\"built_in\">acos</span>(<span class=\"number\">-1.0</span>);</span><br><span class=\"line\"><span class=\"comment\">//char buf[1&lt;&lt;15],*S=buf,*T=buf;</span></span><br><span class=\"line\"><span class=\"comment\">//char getch()&#123;return S==T&amp;&amp;(T=(S=buf)+fread(buf,1,1&lt;&lt;15,stdin),S==T)?0:*S++;&#125;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">int</span> <span class=\"title\">read</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> x=<span class=\"number\">0</span>,f=<span class=\"number\">1</span>;<span class=\"type\">char</span> ch;ch=<span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(ch&lt;<span class=\"string\">&#x27;0&#x27;</span>||ch&gt;<span class=\"string\">&#x27;9&#x27;</span>)&#123;<span class=\"keyword\">if</span>(ch==<span class=\"string\">&#x27;-&#x27;</span>) f=<span class=\"number\">0</span>;ch=<span class=\"built_in\">getchar</span>();&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(ch&gt;=<span class=\"string\">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class=\"string\">&#x27;9&#x27;</span>)&#123;x=(x&lt;&lt;<span class=\"number\">1</span>)+(x&lt;&lt;<span class=\"number\">3</span>)+(ch&amp;<span class=\"number\">15</span>);ch=<span class=\"built_in\">getchar</span>();&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(f)<span class=\"keyword\">return</span> x;<span class=\"keyword\">else</span> <span class=\"keyword\">return</span> -x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">1e5</span>+<span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">fhq_treap</span>&#123;</span><br><span class=\"line\">\t<span class=\"meta\">#<span class=\"keyword\">define</span> lson ls[rt]</span></span><br><span class=\"line\">\t<span class=\"meta\">#<span class=\"keyword\">define</span> rson rs[rt]</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> ls[N],rs[N];</span><br><span class=\"line\">\t<span class=\"type\">bool</span> lazy[N];</span><br><span class=\"line\">\t<span class=\"type\">int</span> lazy_w[N],val[N],key[N],size[N];</span><br><span class=\"line\">\t<span class=\"type\">long</span> <span class=\"type\">long</span> sum[N];</span><br><span class=\"line\">\t<span class=\"type\">int</span> root,cnt;</span><br><span class=\"line\">\t<span class=\"type\">int</span> tmp[<span class=\"number\">25</span>],num[N][<span class=\"number\">25</span>];</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Xor</span><span class=\"params\">(<span class=\"type\">int</span> rt,<span class=\"type\">int</span> x)</span></span>&#123;</span><br><span class=\"line\">\t\tlazy_w[rt]^=x;val[rt]^=x;</span><br><span class=\"line\">    \tsum[rt]=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;=<span class=\"number\">20</span>;++i)tmp[i]=(x&gt;&gt;i)&amp;<span class=\"number\">1</span>;</span><br><span class=\"line\">  \t\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;=<span class=\"number\">20</span>;++i)&#123;</span><br><span class=\"line\">      \t\t<span class=\"keyword\">if</span>(tmp[i])num[rt][i]=size[rt]-num[rt][i];</span><br><span class=\"line\">      \t\tsum[rt]+=(<span class=\"number\">1ll</span>&lt;&lt;i)*num[rt][i];</span><br><span class=\"line\">    \t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">pushup</span><span class=\"params\">(<span class=\"type\">int</span> rt)</span></span>&#123;</span><br><span class=\"line\">\t\tsize[rt]=size[lson]+size[rson]+<span class=\"number\">1</span>;</span><br><span class=\"line\">\t\tsum[rt]=sum[lson]+sum[rson]+<span class=\"number\">1ll</span>*val[rt];</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;=<span class=\"number\">20</span>;i++)</span><br><span class=\"line\">\t\tnum[rt][i]=num[lson][i]+num[rson][i]+((val[rt]&gt;&gt;i)&amp;<span class=\"number\">1</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">pushdown</span><span class=\"params\">(<span class=\"type\">int</span> rt)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(lazy[rt])&#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">swap</span>(lson,rson);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(lson)lazy[lson]^=<span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(rson)lazy[rson]^=<span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\tlazy[rt]=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(lazy_w[rt])&#123;</span><br><span class=\"line\">\t\t\t<span class=\"type\">int</span> x=lazy_w[rt];lazy_w[rt]=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(lson)&#123;<span class=\"built_in\">Xor</span>(lson,x);&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(rson)&#123;<span class=\"built_in\">Xor</span>(rson,x);&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">merge</span><span class=\"params\">(<span class=\"type\">int</span> a,<span class=\"type\">int</span> b)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(!a||!b)<span class=\"keyword\">return</span> a|b;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(key[a]&lt;key[b])&#123;<span class=\"built_in\">pushdown</span>(a);rs[a]=<span class=\"built_in\">merge</span>(rs[a],b);<span class=\"built_in\">pushup</span>(a);<span class=\"keyword\">return</span> a;&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> &#123;<span class=\"built_in\">pushdown</span>(b);ls[b]=<span class=\"built_in\">merge</span>(a,ls[b]);<span class=\"built_in\">pushup</span>(b);<span class=\"keyword\">return</span> b;&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">split</span><span class=\"params\">(<span class=\"type\">int</span> rt,<span class=\"type\">int</span> x,<span class=\"type\">int</span> &amp;a,<span class=\"type\">int</span> &amp;b)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(!rt)&#123;a=b=<span class=\"number\">0</span>;<span class=\"keyword\">return</span>;&#125;</span><br><span class=\"line\">\t\t<span class=\"built_in\">pushdown</span>(rt);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(x&lt;=size[lson])&#123;b=rt;<span class=\"built_in\">split</span>(lson,x,a,lson);&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> &#123;a=rt;<span class=\"built_in\">split</span>(rson,x-size[lson]<span class=\"number\">-1</span>,rson,b);&#125;</span><br><span class=\"line\">\t\t<span class=\"built_in\">pushup</span>(rt);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">newnode</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> rt=++cnt;</span><br><span class=\"line\">\t\tsize[rt]=<span class=\"number\">1</span>;val[rt]=x;key[rt]=<span class=\"built_in\">rand</span>();</span><br><span class=\"line\">\t\tlazy[rt]=<span class=\"number\">0</span>;lazy_w[rt]=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t\tlson=rson=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> rt;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">build</span><span class=\"params\">(<span class=\"type\">int</span> a[],<span class=\"type\">int</span> len)</span></span>&#123;</span><br><span class=\"line\">\t\tstack&lt;<span class=\"type\">int</span>&gt; S;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> rt,last;</span><br><span class=\"line\">\t  \t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=len;i++)&#123;</span><br><span class=\"line\">\t    rt=<span class=\"built_in\">newnode</span>(a[i]);last=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t    <span class=\"keyword\">while</span>(!S.<span class=\"built_in\">empty</span>()&amp;&amp;key[S.<span class=\"built_in\">top</span>()]&gt;key[rt])</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">pushup</span>(last=S.<span class=\"built_in\">top</span>()),S.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">\t    \t<span class=\"keyword\">if</span>(!S.<span class=\"built_in\">empty</span>())rs[S.<span class=\"built_in\">top</span>()]=rt;</span><br><span class=\"line\">\t    \tlson=last;S.<span class=\"built_in\">push</span>(rt);</span><br><span class=\"line\">\t  \t&#125;</span><br><span class=\"line\">\t  \t<span class=\"keyword\">while</span>(!S.<span class=\"built_in\">empty</span>())<span class=\"built_in\">pushup</span>(last=S.<span class=\"built_in\">top</span>()),S.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">\t  \t<span class=\"keyword\">return</span> last; </span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Revers</span><span class=\"params\">(<span class=\"type\">int</span> l,<span class=\"type\">int</span> r)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> a,b,c;</span><br><span class=\"line\">\t\t<span class=\"built_in\">split</span>(root,r,a,c);</span><br><span class=\"line\">\t\t<span class=\"built_in\">split</span>(a,l<span class=\"number\">-1</span>,a,b);</span><br><span class=\"line\">\t\tlazy[b]^=<span class=\"number\">1</span>;</span><br><span class=\"line\">\t\troot=<span class=\"built_in\">merge</span>(<span class=\"built_in\">merge</span>(a,b),c);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Update</span><span class=\"params\">(<span class=\"type\">int</span> l,<span class=\"type\">int</span> r,<span class=\"type\">int</span> d)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> a,b,c;</span><br><span class=\"line\">\t\t<span class=\"built_in\">split</span>(root,r,a,c);</span><br><span class=\"line\">\t\t<span class=\"built_in\">split</span>(a,l<span class=\"number\">-1</span>,a,b);</span><br><span class=\"line\">\t\t<span class=\"built_in\">Xor</span>(b,d);</span><br><span class=\"line\">\t\troot=<span class=\"built_in\">merge</span>(<span class=\"built_in\">merge</span>(a,b),c);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"title\">Query</span><span class=\"params\">(<span class=\"type\">int</span> l,<span class=\"type\">int</span> r)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> a,b,c;</span><br><span class=\"line\">\t\t<span class=\"built_in\">split</span>(root,r,a,c);</span><br><span class=\"line\">\t\t<span class=\"built_in\">split</span>(a,l<span class=\"number\">-1</span>,a,b);</span><br><span class=\"line\">\t\t<span class=\"type\">long</span> <span class=\"type\">long</span> ret=sum[b];</span><br><span class=\"line\">\t\troot=<span class=\"built_in\">merge</span>(<span class=\"built_in\">merge</span>(a,b),c);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;Tree;</span><br><span class=\"line\"><span class=\"type\">int</span> n,m;</span><br><span class=\"line\"><span class=\"type\">int</span> a[N],op,l,r,d;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">srand</span>(<span class=\"built_in\">time</span>(<span class=\"literal\">NULL</span>));</span><br><span class=\"line\">\tn=<span class=\"built_in\">read</span>();m=<span class=\"built_in\">read</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)a[i]=<span class=\"built_in\">read</span>();</span><br><span class=\"line\">\tTree.root=Tree.<span class=\"built_in\">build</span>(a,n);</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(m--)&#123;</span><br><span class=\"line\">\t\top=<span class=\"built_in\">read</span>();l=<span class=\"built_in\">read</span>();r=<span class=\"built_in\">read</span>();</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(op==<span class=\"number\">1</span>)Tree.<span class=\"built_in\">Revers</span>(l,r);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(op==<span class=\"number\">2</span>)d=<span class=\"built_in\">read</span>(),Tree.<span class=\"built_in\">Update</span>(l,r,d);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(op==<span class=\"number\">3</span>)cout&lt;&lt;Tree.<span class=\"built_in\">Query</span>(l,r)&lt;&lt;endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>"},{"title":"求多项式卷积的变换","date":"2018-12-29T06:39:48.000Z","mathjax":true,"_content":"\n$\\ \\ \\ \\ \\ \\ \\ \\,$关于导数和牛顿迭代的复习笔记：\n\n<!-- more -->\n\n## 多项式的卷积\n\n  $\\ \\ \\ \\ \\ \\ \\,$在泛函分析中，卷积、旋积或摺积(英语：Convolution)是通过两个函数f 和g 生成第三个函数的一种数学算子，表征函数f 与g经过翻转和平移的重叠部分的面积。\n\n  $\\ \\ \\ \\ \\ \\ \\,$对于一个长度为 $n$ 的多项式 $f$ ,和一个长度为 $m$ 的多项式 $g$，那么他们的卷积就可以表达为：\n  \n  $(f \\bigotimes g)_x = \\sum_{i=0}^{x}f_i\\cdot g_{x-i}$\n  \n  $\\ \\ \\ \\ \\ \\ \\,$其中暴力求的复杂度会是$O(nm)$的，在很多情况下是不允许有这么多复杂度的，下面我们来引入一些快速变换：\n  \n### 快速傅里叶变换（FFT）\n\n  $\\ \\ \\ \\ \\ \\ \\,$这个算法算是非常常见的对卷积的处理了，讲起来也非常繁琐，留个链接[【傅里叶变换(FFT)学习笔记】](https://www.luogu.org/blog/command-block/fft-xue-xi-bi-ji) [【VictoryCzt_FFT学习笔记】](https://blog.csdn.net/VictoryCzt/article/details/80971795)。\n  \n  $\\ \\ \\ \\ \\ \\ \\,$这里还有 $\\tt 3Blue1Brown$ 的视频，可以形象理解一下：[【形象展示傅里叶变换】](https://www.bilibili.com/video/av19141078)\n  \n  $\\ \\ \\ \\ \\ \\ \\,$然后就贴板子吧：\n\n  $\\ \\ \\ \\ \\ \\ \\,$依然是对于一个长度为 $n$ 的多项式 $f$ ,和一个长度为 $m$ 的多项式 $g$，那么他们的卷积就可以表达为：\n  \n  $(f \\bigotimes g)_x = \\sum_{i=1}^{x}f_i\\cdot g_{x-i}$\n  \n  $\\ \\ \\ \\ \\ \\ \\,$使用快速傅里叶变换（FFT）可以达到$O(n\\log n)$的优秀复杂度。\n  \n``` cpp\nstruct cpx{\n\tdouble r,i;\n\tinline cpx operator *(const cpx&x)const{return (cpx){r*x.r-i*x.i,r*x.i+i*x.r};}\n\tinline cpx operator +(const cpx&x)const{return (cpx){r+x.r,i+x.i};}\n\tinline cpx operator -(const cpx&x)const{return (cpx){r-x.r,i-x.i};}\n}a[N],b[N];\nint m,n,R[N];\nvoid FFT(cpx*a,int f,int la){\n\tint n=la;\n\tfor(register int i=0;i<n;++i)if(i<R[i])swap(a[i],a[R[i]]);\n\tfor(register int i=1;i<n;i<<=1){\n\t\tcpx wn=(cpx){cos(pi/i),f*sin(pi/i)};\n\t\tfor(register int j=0;j<n;j+=(i<<1)){\n\t\t\tcpx w=(cpx){1,0};\n\t\t\tfor(register int k=0;k<i;++k,w=w*wn){\n\t\t\t\tcpx x=a[j+k],y=w*a[j+k+i];\n\t\t\t\ta[j+k]=x+y;a[j+k+i]=x-y;\n\t\t\t}\n\t\t}\n\t}\n\tif(f==-1)\n\tfor(register int i=0;i<n;i++)a[i].r/=n;\n}\nint merge_fft(cpx *a,cpx *b,int la,int lb){\n\tint n=la,m=lb;\n\tint L=0;for(m+=n,n=1;n<=m;n<<=1)L++;\n\tfor(register int i=0;i<n;i++)\n\tR[i]=(R[i>>1]>>1)|((i&1)<<(L-1));\n\tFFT(a,1,n);FFT(b,1,n);\n\tfor(register int i=0;i<=n;i++)a[i]=a[i]*b[i];\n\tFFT(a,-1,n);\n\treturn m;\n}\n```\n\n### 分治FFT\n\n  $\\ \\ \\ \\ \\ \\ \\,$对于一个长度为 $n$ 的多项式 $g$ ,和一个长度为 $n$ 的多项式 $f$，定义$f$为：\n  \n  $f_x=\\sum_{i=1}^xf_{x-i}\\cdot g_i$\n  \n  $\\ \\ \\ \\ \\ \\ \\,$其中，$f_0=1$。\n  \n  $\\ \\ \\ \\ \\ \\ \\,$很容易看出这个式子是卷积形式:\n  \n  $f_x=(f \\bigotimes g)_x = \\sum_{i=1}^{x}g_i\\cdot f_{x-i}$\n  \n  $\\ \\ \\ \\ \\ \\ \\,$我们想到上面提到的FFT算法，但是这里是$f$函数有卷之前算到的自己，所以我们第一次$f$的有效范围是$1$，卷一次，可以得到$f$有效范围是$2$，，再一次是$4$，就像倍增一样，所以我们的复杂度就应该是$O(n\\log ^2 n)$。\n  \n  $\\ \\ \\ \\ \\ \\ \\,$具体怎么做？\n  \n  $\\ \\ \\ \\ \\ \\ \\,$假设对于$x$的取值区间$l$到$r$，我们知道了$l$到 $\\frac{l+r}{2}$ 的$f_x$的值，那么我们令一个长度为 $\\frac{r-l}{2}$ 的多项式 $A$ 等于这知道的 $\\frac{r-l}{2}$ 项，我们现在想知道前面这一段对于后面 $\\frac{l+r}{2}$ 到 $r$ 这一段的贡献是多少：\n  \n  $f_x= \\sum_{i=1}^{x}g_i\\cdot f_{x-i}$\n  \n  $f_x= \\sum_{i=1}^{x}g_{x-i}\\cdot f_i$\n  \n  $f_x= \\sum_{i=1}^{x}g_{x-i}\\cdot A_i$\n  \n  $f_x= g \\bigotimes A$\n  \n  $\\ \\ \\ \\ \\ \\ \\,$注意我们这里把$g$的长度只取前$r-l$个哦，因为$x$的范围限制，我们需要保证卷出来的长度是我们需要的。然后贴板子：\n  ``` cpp\n  void cdq_FFT(int l,int r){\n    \tif(l==r)return;\n    \tint mid=(l+r)>>1;\n    \tcdq_FFT(l,mid);\n    memset(A,0,sizeof(A));memset(G,0,sizeof(G));\n    \tfor(int i=l;i<=mid;i++)A[i-l].r=(double)f[i];\n    \tfor(int i=1;i<=r-l;i++)G[i-1].r=(double)g[i];\n    \tmerge_fft(A,G,mid-l,r-l-1);\n    \tfor(int i=mid+1;i<=r;i++)f[i]+=(int)A[i-l-1].r;\n    \tcdq_FFT(mid+1,r);\n  }\n  ```\n  $\\ \\ \\ \\ \\ \\ \\,$然而……要是你用这个就死了，主要是死在 $\\tt memset$了，所以我们把 $\\tt merge\\_fft$ 托下来：\n\n  ``` cpp\n  void cdq_FFT(int l,int r){\n    \tif(l==r)return;\n    \tint mid=(l+r)>>1;\n    \tcdq_FFT(l,mid);\n    \tint L=0,n=1;\n    \tfor(;n<=r-l+1;n<<=1)L++;\n    \tfor(int i=0;i<n;i++)\n    \tR[i]=(R[i>>1]>>1)|((i&1)<<(L-1));\n    \tfor(int i=0;i<=n;i++)\n\t\t  A[i].r=G[i].r=A[i].i=G[i].i=0\n    \tfor(int i=l;i<=mid;i++)A[i-l].r=(double)f[i];\n    \tfor(int i=1;i<=r-l;i++)G[i-1].r=(double)g[i];\n    \tFFT(A,1,n);FFT(G,1,n);\n    \tfor(register int i=0;i<=n;i++)A[i]=A[i]*G[i];\n    \tFFT(A,-1,n);\n    \tfor(int i=mid+1;i<=r;i++)f[i]+=(int)A[i-l-1].r;\n    \tcdq_FFT(mid+1,r);\n  }\n  ```\n  \n  $\\ \\ \\ \\ \\ \\ \\,$至于洛谷那道模板题[P4721](https://www.luogu.org/problemnew/show/P4721)还是算了吧，要取模，建议把FFT换成NTT，~~（NTT模数明示）~~\n  \n  $\\ \\ \\ \\ \\ \\ \\,$那么还有比$O(n\\log ^2n)$更快的做法吗？当然有了啊，但是又要涉及生成函数的姿势，~~还有**多项式求逆！！！我不会啊！！！**~~\n  \n  $\\ \\ \\ \\ \\ \\ \\,$先占坑:\n  \n  $\\ \\ \\ \\ \\ \\ \\,$我们令$F$为$f$的生成函数，$G$为$g$的生成函数：\n  \n  $F(x)=\\sum_{i=0}^{n}f_i\\cdot x^i$\n  \n  $G(x)=\\sum_{i=0}^{n}g_i\\cdot x^i$\n  \n  $\\ \\ \\ \\ \\ \\ \\,$那么就有：\n  \n  $\\begin{aligned}F(x)\\times  G(x) &= \\left(\\sum_{i=0}^{n}f_i\\cdot x^i\\right)\\cdot \\left(\\sum_{i=0}^{n}g_i\\cdot x^i\\right)\\\\&=\\sum_{i=0}^{n}x^i\\sum_{j=0}^{i}g_j\\cdot f_{i-j}\\\\&=\\sum_{i=0}^{n}x^i(f \\bigotimes g)_i\\end{aligned}$\n  \n  $\\ \\ \\ \\ \\ \\ \\,$也就是说两个函数的生成函数的积，就是他们卷积的生成函数~~@贝尔级数~~。\n  \n  $\\ \\ \\ \\ \\ \\ \\,$我们知道的$f_{mid+1,r}= f_{l,mid} \\bigotimes g$，当然了，$f_0$是不满足这个卷积的，所以有：\n  \n  $F(x)\\times  G(x)\\equiv F(x)-f_0x^0\\ \\ (mod \\ x^n)$\n  \n  $F(x)\\times  G(x)\\equiv F(x)-f_0\\ \\ (mod \\ x^n)$\n  \n  $F(x)\\times \\left(1-G(x)\\right)\\equiv f_0\\ \\ (mod \\ x^n)$\n  \n  $F(x)\\equiv \\frac{f_0}{1-G(x)}\\ \\ (mod \\ x^n)$\n  \n  $F(x)\\equiv \\frac{1}{1-G(x)}\\ \\ (mod \\ x^n)$\n  \n  $F(x)\\equiv {(1-G(x))}^{-1}\\ \\ (mod \\ x^n)$\n  \n  $\\ \\ \\ \\ \\ \\ \\,$然后多项式求逆啊~，~~并不会~~，复杂度$O(n\\log n)$，就不贴代码了啊。\n  \n---\n  \n## 快速数论变换（NTT）\n\n  $\\ \\ \\ \\ \\ \\ \\,$由于FFT是在复平面上操作变换，会用到很多的三角函数，丢精度非常严重，当有模数的时候且模数为NTT模数，形如$a\\cdot 2^b+1$，且为素数的时候，常见的是$998244353$，我们推荐使用NTT来操作。\n  ### - [【原根】~~%%%大巨佬orz~~](https://www.luogu.org/blog/hdxrie/yuan-gen)\n\n  - 定义：\n\n    $\\ \\ \\ \\ \\ \\ \\,$考虑方程$a^{x}\\equiv 1(mod \\ b)$，根据欧拉定理，当$a$与$b$互质的时候，一定有解$x=\\varphi(b)$，如果$\\varphi(b)$既为该方程的最小解，那么$a$就称为$(mod \\ b)$的原根。\n\n  - 性质：\n\n    $\\ \\ \\ \\ \\ \\ \\,1$、若$a$就为$(mod \\ b)$的原根，那么集合$\\{a^1,a^2,...,a^{b-1}\\}=\\{0,1,2,...,b-1\\}$。也就是说，$a$的任意次方遍历了$(mod \\ b)$的剩余系。\n  \n    $\\ \\ \\ \\ \\ \\ \\,2$、如果$(mod \\ b)$意义下有原根，那么原根恰好有$\\varphi(\\varphi(b))$个，这个数量很小。\n\n    $\\ \\ \\ \\ \\ \\ \\,3$、原根一般都不大，我们可以暴力从$2$到$b-1$枚举$a$，判断$a^{\\varphi(b)}\\equiv 1(mod \\ b)$是否当且仅当$x=\\varphi(b)$时成立，注意$x$的解仅有可能是$\\varphi(b)$的约数，还有快的求法，可以用**欧拉定理和裴蜀定理**证明，可是我不会。\n  \n  $\\ \\ \\ \\ \\ \\ \\,$当然了，对于原根的理解我们只需要理解到它是$a^{x}\\equiv 1(mod \\ b)$的最小解，而且可以暴力求就行了~~2333~~就行了。\n  \n  $\\ \\ \\ \\ \\ \\ \\,$那么如何用到快速变换中去呢？\n  \n  $\\ \\ \\ \\ \\ \\ \\,$考虑FFT中的单位根$x^n=1$，现在在取模的意义下，就变成了$x^n\\equiv 1\\ \\ (mod \\ P)$，所以我们用原根$gn$去替换掉FFT中的单位根$wn$就好了呀，现在的问题是，原根具体怎么求：\n  \n  $\\ \\ \\ \\ \\ \\ \\,$对于一个NTT模数的原根，是有特殊求法的，这就是为什么一般NTT会有NTT模数这个限制：\n  \n  $gn=g^{\\frac{P-1}{2^{i+1}}}$\n  \n  $\\ \\ \\ \\ \\ \\ \\,$原根表在这里：[【FFT用到的各种素数】](http://blog.miskcoo.com/2014/07/fft-prime-table)\n  \n  $\\ \\ \\ \\ \\ \\ \\,$下面直接给板子了,这里的模数是$998244353$，原根是$3$：\n  \n``` cpp\nvoid NTT(int *a,int f,int la){\n\tint n=la;\n\tfor(register int i=0;i<n;++i)if(i<R[i])swap(a[i],a[R[i]]);\n\tfor(register int i=1;i<n;i<<=1){\n\t\tint gn=power(3,(mod-1)/(i<<1));\n\t\tfor(register int j=0;j<n;j+=(i<<1)){\n\t\t\tint g=1;\n\t\t\tfor(register int k=0;k<i;++k,g=1ll*g*gn%mod){\n\t\t\t\tint x=a[j+k],y=1ll*g*a[j+k+i]%mod;\n\t\t\t\ta[j+k]=(x+y)%mod;a[j+k+i]=(x-y+mod)%mod;\n\t\t\t}\n\t\t}\n\t}\n\tif(f==-1){\n\t\treverse(a+1,a+n);\n\t\tint inv=power(n,mod-2);\n\t\tfor(register int i=0;i<n;i++)a[i]=1ll*a[i]*inv%mod;\n\t}\n}\nint merge_ntt(int *a,int *b,int la,int lb){\n\tint n=la,m=lb;\n\tint L=0;for(m+=n,n=1;n<=m;n<<=1)L++;\n\tfor(register int i=0;i<n;i++)\n\tR[i]=(R[i>>1]>>1)|((i&1)<<(L-1));\n\tNTT(a,1,n);NTT(b,1,n);\n\tfor(register int i=0;i<=n;i++)a[i]=1ll*a[i]*b[i]%mod;\n\tNTT(a,-1,n);\n\treturn m;\n}\n```\n  $\\ \\ \\ \\ \\ \\ \\,$那么不是NTT模数的时候怎么办啊？我们不妨用CRT合并，具体在这里可以看到的[【由CRT合并引入的各种扩展求余和同余问题】](/2018/12/30/由CRT合并引入的各种扩展求余和同余问题)。这个方法叫**三模NTT**，你可以用这个方法过洛谷的模板，但是写起来非常复杂。下面还有一种方法:\n\n\n### MTT\n\n **Mettaton**\n\n  ![](https://img-blog.csdnimg.cn/img_convert/86d214ac619e9afde2057b6ba8d131b7.png)\n  \n  $\\ \\ \\ \\ \\ \\ \\,$OH，YEAH~\n  \n  $\\ \\ \\ \\ \\ \\ \\,$~~（MTT就是镁塔顿啊，雾）~~\n  \n  $\\ \\ \\ \\ \\ \\ \\,$好吧让我们重新打开一下：\n\n  $\\ \\ \\ \\ \\ \\ \\,$对于一个长度为$n$的多项式$f$，和一个常数$a$，我们知道可以这样运算：\n  \n  $\\frac{f}{a}=\\sum_{i=1}^{n}\\frac{f_i}{a}$\n  \n  $\\ \\ \\ \\ \\ \\ \\,$同理，对于一个长度为$n$的多项式$g$:\n  \n  $\\frac{g}{a}=\\sum_{i=1}^{n}\\frac{g_i}{a}$\n  \n  $\\ \\ \\ \\ \\ \\ \\,$那么有：\n  \n  $\\left(\\frac{f}{a} \\bigotimes \\frac{g}{a}\\right)_x = \\sum_{i=1}^{x}\\frac{f_i}{a}\\cdot \\frac{g_{x-i}}{a}$\n  \n  $\\frac{f}{a} \\bigotimes \\frac{g}{a}= \\frac{f \\bigotimes g}{a^2}$\n  \n  ${f \\bigotimes g}= \\left(\\frac{f}{a} \\bigotimes \\frac{g}{a}\\right)\\times a^2$\n  \n  $\\ \\ \\ \\ \\ \\ \\,$所以我们想，要是我们把每一项的系数拆了，最后合并不就是我们想要的答案了吗？于是就有了上面那个这个式子，但是很多时候并不能整除啊，就有了下面这个式子:\n  \n  ${f \\bigotimes g }=\\left(\\frac{f}{a} \\bigotimes \\frac{g}{a}\\right)\\times a^2+\\left({f}\\%{a} \\bigotimes \\frac{g}{a}\\right)\\times a+\\left(\\frac{f}{a} \\bigotimes {g}\\%{a}\\right)\\times a+\\left(f \\% a \\bigotimes g\\%{a}\\right)$\n  \n  $\\ \\ \\ \\ \\ \\ \\,$就差不多这样了，取值$a$的时候需要保证用FFT时不会爆炸，不过也容易看出，这个算法精度特别特别卡，卡死了，需要开 $long\\ double$ 还有一些特别的奇技淫巧，下面给出模板，$a=2^{15}$，这个板子因为精度问题是过不了洛谷的模板题的，看看就好：\n  \n``` cpp\nvoid merge(cpx *a,cpx *b,int L,int len,int val,int *Ret){\n\tfor(int i=0;i<=L;i++)f[i]=a[i]*b[i];\n\tFFT(f,-1,L);\n\tfor(int i=0;i<len;i++)\n\tRet[i]=(Ret[i]+1ll*(long long)(f[i].r+0.5)%mod*val%mod)%mod;\n}\nvoid merge_mtt(int *A,int *B,int la,int lb,int *Ret){\n\tint M=32768,L,l=0,len=la;\n\tfor(int i=0;i<(len<<1);++i)a[i]=b[i]=c[i]=d[i]=(cpx){0,0};\n\tfor(int i=0;i<=len;i++)a[i].r=A[i]/M,b[i].r=A[i]%M;\n\tfor(int i=0;i<=len;i++)c[i].r=B[i]/M,d[i].r=B[i]%M;\n\tfor(L=1;L<=len;L<<=1)++l;\n\tfor(int i=0;i<L;++i)R[i]=(R[i>>1]>>1)|((i&1)<<(l-1));\n\tFFT(a,1,L);FFT(b,1,L);FFT(c,1,L);FFT(d,1,L);\n\tfor(int i=0;i<len;++i)Ret[i]=0;\n\tmerge(a,c,L,len,M*M%mod,Ret);\n\tmerge(b,c,L,len,M%mod,Ret);\n\tmerge(a,d,L,len,M%mod,Ret);\n\tmerge(b,d,L,len,1,Ret);\n\tfor(int i=0;i<len;++i)Ret[i]=(Ret[i]+mod)%mod;\n}\n```\n\n\n## 快速沃尔什变换（FWT） \n\n  $\\ \\ \\ \\ \\ \\ \\,$首先引入一种生成函数集合幂级数$F$，其中$f$ 是集合中的元素：\n  \n  $F=\\sum_{s\\subseteq O}f_s\\cdot x^s$\n  \n  $\\ \\ \\ \\ \\ \\ \\,$集合幂级数的集合卷积：\n  \n  - 交 $\\bigcap$ （与 $and$）\n    \n    $F\\bigotimes_{\\bigcap} G=\\sum_{i\\subseteq O}\\sum_{j\\subseteq O}f_i\\times g_j[i\\bigcap j=S]$\n    \n  - 并 $\\bigcup$ （或 $or$）\n    \n    $F\\bigotimes_{\\bigcup} G=\\sum_{i\\subseteq O}\\sum_{j\\subseteq O}f_i\\times g_j[i\\bigcup j=S]$\n    \n  - 对称差 $\\Delta$ （异或 $xor$）\n    \n    $F\\bigotimes_{\\Delta} G=\\sum_{i\\subseteq O}\\sum_{j\\subseteq O}f_i\\Delta g_j[i\\Delta=S]$\n  \n  $\\ \\ \\ \\ \\ \\ \\,$而快速沃尔什变换（FWT）就是快速求出集合幂级数的集合卷积的算法，证明在这里看[【FWT(Fast Walsh Transformation)快速沃尔什变换学习笔记】](https://blog.csdn.net/VictoryCzt/article/details/80879652#t7)，下面给出结论和模板代码：\n  \n  $\\ \\ \\ \\ \\ \\ \\,$其中$x=a_{i+j}$，$y=a_{i+j+bit}$:\n  \n| 运算方式 | 交 $\\bigcap$ （与 $and$） | 并 $\\bigcup$ （或 $or$） | 对称差 $\\Delta$ （异或 $xor$） |\n| :----------: | :----------: | :----------: | :----------: |\n|沃尔什变换|$a_{i+j}=x+y$|$a_{i+j+bit}=x+y$|$a_{i+j}=x+y$,$a_{i+j+bit}=x-y$|\n|沃尔什逆变换|$a_{i+j}=x-y$|$a_{i+j+bit}=y-x$|$a_{i+j}=\\frac{x+y}{2}$,$a_{i+j+bit}=\\frac{x-y}{2}$|\n\n``` cpp\nvoid FWT(int *a,int n,int f,int type){\n  for(int i=1;i<n;i<<=1)\n  for(int j=0;j<n;j+=(i<<1))\n  for(int k=0;k<i;k++){\n    int p=a[j+k],q=a[j+k+i];\n    if(type==1){//and &\n      a[j+k]=(1ll*f*q+p+mod)%mod;\n    }\n    if(type==2){//or |\n      a[j+k+i]=(1ll*f*p+q+mod)%mod;\n    }\n    if(type==3){//xor ^\n      a[j+k]=(p+q)%mod;\n      a[j+k+i]=(p-q+mod)%mod;\n      if(f==-1){\n        a[j+k]=1ll*a[j+k]*inv2%mod;\n        a[j+k+i]=1ll*a[j+k+i]*inv2%mod;\n      }\n    }\n  }\n}\nvoid merge_fwt(int *a,int *b,int lim,int type){\n  FWT(a,lim,1,type);FWT(b,lim,1,type);\n  for(int i=0;i<lim;i++)a[i]=(long long)a[i]*b[i]%mod;\n  FWT(a,lim,-1,type);\n}\n\n```\n  \n  ","source":"_posts/求多项式卷积的变换.md","raw":"---\ntitle: '求多项式卷积的变换'\ndate: 2018-12-29 14:39:48\ncategories:\n- 学习笔记\ntags:\n- OI\n- 多项式\n- FFT\n- NTT\n- FWT\n- MTT\nmathjax: true\n---\n\n$\\ \\ \\ \\ \\ \\ \\ \\,$关于导数和牛顿迭代的复习笔记：\n\n<!-- more -->\n\n## 多项式的卷积\n\n  $\\ \\ \\ \\ \\ \\ \\,$在泛函分析中，卷积、旋积或摺积(英语：Convolution)是通过两个函数f 和g 生成第三个函数的一种数学算子，表征函数f 与g经过翻转和平移的重叠部分的面积。\n\n  $\\ \\ \\ \\ \\ \\ \\,$对于一个长度为 $n$ 的多项式 $f$ ,和一个长度为 $m$ 的多项式 $g$，那么他们的卷积就可以表达为：\n  \n  $(f \\bigotimes g)_x = \\sum_{i=0}^{x}f_i\\cdot g_{x-i}$\n  \n  $\\ \\ \\ \\ \\ \\ \\,$其中暴力求的复杂度会是$O(nm)$的，在很多情况下是不允许有这么多复杂度的，下面我们来引入一些快速变换：\n  \n### 快速傅里叶变换（FFT）\n\n  $\\ \\ \\ \\ \\ \\ \\,$这个算法算是非常常见的对卷积的处理了，讲起来也非常繁琐，留个链接[【傅里叶变换(FFT)学习笔记】](https://www.luogu.org/blog/command-block/fft-xue-xi-bi-ji) [【VictoryCzt_FFT学习笔记】](https://blog.csdn.net/VictoryCzt/article/details/80971795)。\n  \n  $\\ \\ \\ \\ \\ \\ \\,$这里还有 $\\tt 3Blue1Brown$ 的视频，可以形象理解一下：[【形象展示傅里叶变换】](https://www.bilibili.com/video/av19141078)\n  \n  $\\ \\ \\ \\ \\ \\ \\,$然后就贴板子吧：\n\n  $\\ \\ \\ \\ \\ \\ \\,$依然是对于一个长度为 $n$ 的多项式 $f$ ,和一个长度为 $m$ 的多项式 $g$，那么他们的卷积就可以表达为：\n  \n  $(f \\bigotimes g)_x = \\sum_{i=1}^{x}f_i\\cdot g_{x-i}$\n  \n  $\\ \\ \\ \\ \\ \\ \\,$使用快速傅里叶变换（FFT）可以达到$O(n\\log n)$的优秀复杂度。\n  \n``` cpp\nstruct cpx{\n\tdouble r,i;\n\tinline cpx operator *(const cpx&x)const{return (cpx){r*x.r-i*x.i,r*x.i+i*x.r};}\n\tinline cpx operator +(const cpx&x)const{return (cpx){r+x.r,i+x.i};}\n\tinline cpx operator -(const cpx&x)const{return (cpx){r-x.r,i-x.i};}\n}a[N],b[N];\nint m,n,R[N];\nvoid FFT(cpx*a,int f,int la){\n\tint n=la;\n\tfor(register int i=0;i<n;++i)if(i<R[i])swap(a[i],a[R[i]]);\n\tfor(register int i=1;i<n;i<<=1){\n\t\tcpx wn=(cpx){cos(pi/i),f*sin(pi/i)};\n\t\tfor(register int j=0;j<n;j+=(i<<1)){\n\t\t\tcpx w=(cpx){1,0};\n\t\t\tfor(register int k=0;k<i;++k,w=w*wn){\n\t\t\t\tcpx x=a[j+k],y=w*a[j+k+i];\n\t\t\t\ta[j+k]=x+y;a[j+k+i]=x-y;\n\t\t\t}\n\t\t}\n\t}\n\tif(f==-1)\n\tfor(register int i=0;i<n;i++)a[i].r/=n;\n}\nint merge_fft(cpx *a,cpx *b,int la,int lb){\n\tint n=la,m=lb;\n\tint L=0;for(m+=n,n=1;n<=m;n<<=1)L++;\n\tfor(register int i=0;i<n;i++)\n\tR[i]=(R[i>>1]>>1)|((i&1)<<(L-1));\n\tFFT(a,1,n);FFT(b,1,n);\n\tfor(register int i=0;i<=n;i++)a[i]=a[i]*b[i];\n\tFFT(a,-1,n);\n\treturn m;\n}\n```\n\n### 分治FFT\n\n  $\\ \\ \\ \\ \\ \\ \\,$对于一个长度为 $n$ 的多项式 $g$ ,和一个长度为 $n$ 的多项式 $f$，定义$f$为：\n  \n  $f_x=\\sum_{i=1}^xf_{x-i}\\cdot g_i$\n  \n  $\\ \\ \\ \\ \\ \\ \\,$其中，$f_0=1$。\n  \n  $\\ \\ \\ \\ \\ \\ \\,$很容易看出这个式子是卷积形式:\n  \n  $f_x=(f \\bigotimes g)_x = \\sum_{i=1}^{x}g_i\\cdot f_{x-i}$\n  \n  $\\ \\ \\ \\ \\ \\ \\,$我们想到上面提到的FFT算法，但是这里是$f$函数有卷之前算到的自己，所以我们第一次$f$的有效范围是$1$，卷一次，可以得到$f$有效范围是$2$，，再一次是$4$，就像倍增一样，所以我们的复杂度就应该是$O(n\\log ^2 n)$。\n  \n  $\\ \\ \\ \\ \\ \\ \\,$具体怎么做？\n  \n  $\\ \\ \\ \\ \\ \\ \\,$假设对于$x$的取值区间$l$到$r$，我们知道了$l$到 $\\frac{l+r}{2}$ 的$f_x$的值，那么我们令一个长度为 $\\frac{r-l}{2}$ 的多项式 $A$ 等于这知道的 $\\frac{r-l}{2}$ 项，我们现在想知道前面这一段对于后面 $\\frac{l+r}{2}$ 到 $r$ 这一段的贡献是多少：\n  \n  $f_x= \\sum_{i=1}^{x}g_i\\cdot f_{x-i}$\n  \n  $f_x= \\sum_{i=1}^{x}g_{x-i}\\cdot f_i$\n  \n  $f_x= \\sum_{i=1}^{x}g_{x-i}\\cdot A_i$\n  \n  $f_x= g \\bigotimes A$\n  \n  $\\ \\ \\ \\ \\ \\ \\,$注意我们这里把$g$的长度只取前$r-l$个哦，因为$x$的范围限制，我们需要保证卷出来的长度是我们需要的。然后贴板子：\n  ``` cpp\n  void cdq_FFT(int l,int r){\n    \tif(l==r)return;\n    \tint mid=(l+r)>>1;\n    \tcdq_FFT(l,mid);\n    memset(A,0,sizeof(A));memset(G,0,sizeof(G));\n    \tfor(int i=l;i<=mid;i++)A[i-l].r=(double)f[i];\n    \tfor(int i=1;i<=r-l;i++)G[i-1].r=(double)g[i];\n    \tmerge_fft(A,G,mid-l,r-l-1);\n    \tfor(int i=mid+1;i<=r;i++)f[i]+=(int)A[i-l-1].r;\n    \tcdq_FFT(mid+1,r);\n  }\n  ```\n  $\\ \\ \\ \\ \\ \\ \\,$然而……要是你用这个就死了，主要是死在 $\\tt memset$了，所以我们把 $\\tt merge\\_fft$ 托下来：\n\n  ``` cpp\n  void cdq_FFT(int l,int r){\n    \tif(l==r)return;\n    \tint mid=(l+r)>>1;\n    \tcdq_FFT(l,mid);\n    \tint L=0,n=1;\n    \tfor(;n<=r-l+1;n<<=1)L++;\n    \tfor(int i=0;i<n;i++)\n    \tR[i]=(R[i>>1]>>1)|((i&1)<<(L-1));\n    \tfor(int i=0;i<=n;i++)\n\t\t  A[i].r=G[i].r=A[i].i=G[i].i=0\n    \tfor(int i=l;i<=mid;i++)A[i-l].r=(double)f[i];\n    \tfor(int i=1;i<=r-l;i++)G[i-1].r=(double)g[i];\n    \tFFT(A,1,n);FFT(G,1,n);\n    \tfor(register int i=0;i<=n;i++)A[i]=A[i]*G[i];\n    \tFFT(A,-1,n);\n    \tfor(int i=mid+1;i<=r;i++)f[i]+=(int)A[i-l-1].r;\n    \tcdq_FFT(mid+1,r);\n  }\n  ```\n  \n  $\\ \\ \\ \\ \\ \\ \\,$至于洛谷那道模板题[P4721](https://www.luogu.org/problemnew/show/P4721)还是算了吧，要取模，建议把FFT换成NTT，~~（NTT模数明示）~~\n  \n  $\\ \\ \\ \\ \\ \\ \\,$那么还有比$O(n\\log ^2n)$更快的做法吗？当然有了啊，但是又要涉及生成函数的姿势，~~还有**多项式求逆！！！我不会啊！！！**~~\n  \n  $\\ \\ \\ \\ \\ \\ \\,$先占坑:\n  \n  $\\ \\ \\ \\ \\ \\ \\,$我们令$F$为$f$的生成函数，$G$为$g$的生成函数：\n  \n  $F(x)=\\sum_{i=0}^{n}f_i\\cdot x^i$\n  \n  $G(x)=\\sum_{i=0}^{n}g_i\\cdot x^i$\n  \n  $\\ \\ \\ \\ \\ \\ \\,$那么就有：\n  \n  $\\begin{aligned}F(x)\\times  G(x) &= \\left(\\sum_{i=0}^{n}f_i\\cdot x^i\\right)\\cdot \\left(\\sum_{i=0}^{n}g_i\\cdot x^i\\right)\\\\&=\\sum_{i=0}^{n}x^i\\sum_{j=0}^{i}g_j\\cdot f_{i-j}\\\\&=\\sum_{i=0}^{n}x^i(f \\bigotimes g)_i\\end{aligned}$\n  \n  $\\ \\ \\ \\ \\ \\ \\,$也就是说两个函数的生成函数的积，就是他们卷积的生成函数~~@贝尔级数~~。\n  \n  $\\ \\ \\ \\ \\ \\ \\,$我们知道的$f_{mid+1,r}= f_{l,mid} \\bigotimes g$，当然了，$f_0$是不满足这个卷积的，所以有：\n  \n  $F(x)\\times  G(x)\\equiv F(x)-f_0x^0\\ \\ (mod \\ x^n)$\n  \n  $F(x)\\times  G(x)\\equiv F(x)-f_0\\ \\ (mod \\ x^n)$\n  \n  $F(x)\\times \\left(1-G(x)\\right)\\equiv f_0\\ \\ (mod \\ x^n)$\n  \n  $F(x)\\equiv \\frac{f_0}{1-G(x)}\\ \\ (mod \\ x^n)$\n  \n  $F(x)\\equiv \\frac{1}{1-G(x)}\\ \\ (mod \\ x^n)$\n  \n  $F(x)\\equiv {(1-G(x))}^{-1}\\ \\ (mod \\ x^n)$\n  \n  $\\ \\ \\ \\ \\ \\ \\,$然后多项式求逆啊~，~~并不会~~，复杂度$O(n\\log n)$，就不贴代码了啊。\n  \n---\n  \n## 快速数论变换（NTT）\n\n  $\\ \\ \\ \\ \\ \\ \\,$由于FFT是在复平面上操作变换，会用到很多的三角函数，丢精度非常严重，当有模数的时候且模数为NTT模数，形如$a\\cdot 2^b+1$，且为素数的时候，常见的是$998244353$，我们推荐使用NTT来操作。\n  ### - [【原根】~~%%%大巨佬orz~~](https://www.luogu.org/blog/hdxrie/yuan-gen)\n\n  - 定义：\n\n    $\\ \\ \\ \\ \\ \\ \\,$考虑方程$a^{x}\\equiv 1(mod \\ b)$，根据欧拉定理，当$a$与$b$互质的时候，一定有解$x=\\varphi(b)$，如果$\\varphi(b)$既为该方程的最小解，那么$a$就称为$(mod \\ b)$的原根。\n\n  - 性质：\n\n    $\\ \\ \\ \\ \\ \\ \\,1$、若$a$就为$(mod \\ b)$的原根，那么集合$\\{a^1,a^2,...,a^{b-1}\\}=\\{0,1,2,...,b-1\\}$。也就是说，$a$的任意次方遍历了$(mod \\ b)$的剩余系。\n  \n    $\\ \\ \\ \\ \\ \\ \\,2$、如果$(mod \\ b)$意义下有原根，那么原根恰好有$\\varphi(\\varphi(b))$个，这个数量很小。\n\n    $\\ \\ \\ \\ \\ \\ \\,3$、原根一般都不大，我们可以暴力从$2$到$b-1$枚举$a$，判断$a^{\\varphi(b)}\\equiv 1(mod \\ b)$是否当且仅当$x=\\varphi(b)$时成立，注意$x$的解仅有可能是$\\varphi(b)$的约数，还有快的求法，可以用**欧拉定理和裴蜀定理**证明，可是我不会。\n  \n  $\\ \\ \\ \\ \\ \\ \\,$当然了，对于原根的理解我们只需要理解到它是$a^{x}\\equiv 1(mod \\ b)$的最小解，而且可以暴力求就行了~~2333~~就行了。\n  \n  $\\ \\ \\ \\ \\ \\ \\,$那么如何用到快速变换中去呢？\n  \n  $\\ \\ \\ \\ \\ \\ \\,$考虑FFT中的单位根$x^n=1$，现在在取模的意义下，就变成了$x^n\\equiv 1\\ \\ (mod \\ P)$，所以我们用原根$gn$去替换掉FFT中的单位根$wn$就好了呀，现在的问题是，原根具体怎么求：\n  \n  $\\ \\ \\ \\ \\ \\ \\,$对于一个NTT模数的原根，是有特殊求法的，这就是为什么一般NTT会有NTT模数这个限制：\n  \n  $gn=g^{\\frac{P-1}{2^{i+1}}}$\n  \n  $\\ \\ \\ \\ \\ \\ \\,$原根表在这里：[【FFT用到的各种素数】](http://blog.miskcoo.com/2014/07/fft-prime-table)\n  \n  $\\ \\ \\ \\ \\ \\ \\,$下面直接给板子了,这里的模数是$998244353$，原根是$3$：\n  \n``` cpp\nvoid NTT(int *a,int f,int la){\n\tint n=la;\n\tfor(register int i=0;i<n;++i)if(i<R[i])swap(a[i],a[R[i]]);\n\tfor(register int i=1;i<n;i<<=1){\n\t\tint gn=power(3,(mod-1)/(i<<1));\n\t\tfor(register int j=0;j<n;j+=(i<<1)){\n\t\t\tint g=1;\n\t\t\tfor(register int k=0;k<i;++k,g=1ll*g*gn%mod){\n\t\t\t\tint x=a[j+k],y=1ll*g*a[j+k+i]%mod;\n\t\t\t\ta[j+k]=(x+y)%mod;a[j+k+i]=(x-y+mod)%mod;\n\t\t\t}\n\t\t}\n\t}\n\tif(f==-1){\n\t\treverse(a+1,a+n);\n\t\tint inv=power(n,mod-2);\n\t\tfor(register int i=0;i<n;i++)a[i]=1ll*a[i]*inv%mod;\n\t}\n}\nint merge_ntt(int *a,int *b,int la,int lb){\n\tint n=la,m=lb;\n\tint L=0;for(m+=n,n=1;n<=m;n<<=1)L++;\n\tfor(register int i=0;i<n;i++)\n\tR[i]=(R[i>>1]>>1)|((i&1)<<(L-1));\n\tNTT(a,1,n);NTT(b,1,n);\n\tfor(register int i=0;i<=n;i++)a[i]=1ll*a[i]*b[i]%mod;\n\tNTT(a,-1,n);\n\treturn m;\n}\n```\n  $\\ \\ \\ \\ \\ \\ \\,$那么不是NTT模数的时候怎么办啊？我们不妨用CRT合并，具体在这里可以看到的[【由CRT合并引入的各种扩展求余和同余问题】](/2018/12/30/由CRT合并引入的各种扩展求余和同余问题)。这个方法叫**三模NTT**，你可以用这个方法过洛谷的模板，但是写起来非常复杂。下面还有一种方法:\n\n\n### MTT\n\n **Mettaton**\n\n  ![](https://img-blog.csdnimg.cn/img_convert/86d214ac619e9afde2057b6ba8d131b7.png)\n  \n  $\\ \\ \\ \\ \\ \\ \\,$OH，YEAH~\n  \n  $\\ \\ \\ \\ \\ \\ \\,$~~（MTT就是镁塔顿啊，雾）~~\n  \n  $\\ \\ \\ \\ \\ \\ \\,$好吧让我们重新打开一下：\n\n  $\\ \\ \\ \\ \\ \\ \\,$对于一个长度为$n$的多项式$f$，和一个常数$a$，我们知道可以这样运算：\n  \n  $\\frac{f}{a}=\\sum_{i=1}^{n}\\frac{f_i}{a}$\n  \n  $\\ \\ \\ \\ \\ \\ \\,$同理，对于一个长度为$n$的多项式$g$:\n  \n  $\\frac{g}{a}=\\sum_{i=1}^{n}\\frac{g_i}{a}$\n  \n  $\\ \\ \\ \\ \\ \\ \\,$那么有：\n  \n  $\\left(\\frac{f}{a} \\bigotimes \\frac{g}{a}\\right)_x = \\sum_{i=1}^{x}\\frac{f_i}{a}\\cdot \\frac{g_{x-i}}{a}$\n  \n  $\\frac{f}{a} \\bigotimes \\frac{g}{a}= \\frac{f \\bigotimes g}{a^2}$\n  \n  ${f \\bigotimes g}= \\left(\\frac{f}{a} \\bigotimes \\frac{g}{a}\\right)\\times a^2$\n  \n  $\\ \\ \\ \\ \\ \\ \\,$所以我们想，要是我们把每一项的系数拆了，最后合并不就是我们想要的答案了吗？于是就有了上面那个这个式子，但是很多时候并不能整除啊，就有了下面这个式子:\n  \n  ${f \\bigotimes g }=\\left(\\frac{f}{a} \\bigotimes \\frac{g}{a}\\right)\\times a^2+\\left({f}\\%{a} \\bigotimes \\frac{g}{a}\\right)\\times a+\\left(\\frac{f}{a} \\bigotimes {g}\\%{a}\\right)\\times a+\\left(f \\% a \\bigotimes g\\%{a}\\right)$\n  \n  $\\ \\ \\ \\ \\ \\ \\,$就差不多这样了，取值$a$的时候需要保证用FFT时不会爆炸，不过也容易看出，这个算法精度特别特别卡，卡死了，需要开 $long\\ double$ 还有一些特别的奇技淫巧，下面给出模板，$a=2^{15}$，这个板子因为精度问题是过不了洛谷的模板题的，看看就好：\n  \n``` cpp\nvoid merge(cpx *a,cpx *b,int L,int len,int val,int *Ret){\n\tfor(int i=0;i<=L;i++)f[i]=a[i]*b[i];\n\tFFT(f,-1,L);\n\tfor(int i=0;i<len;i++)\n\tRet[i]=(Ret[i]+1ll*(long long)(f[i].r+0.5)%mod*val%mod)%mod;\n}\nvoid merge_mtt(int *A,int *B,int la,int lb,int *Ret){\n\tint M=32768,L,l=0,len=la;\n\tfor(int i=0;i<(len<<1);++i)a[i]=b[i]=c[i]=d[i]=(cpx){0,0};\n\tfor(int i=0;i<=len;i++)a[i].r=A[i]/M,b[i].r=A[i]%M;\n\tfor(int i=0;i<=len;i++)c[i].r=B[i]/M,d[i].r=B[i]%M;\n\tfor(L=1;L<=len;L<<=1)++l;\n\tfor(int i=0;i<L;++i)R[i]=(R[i>>1]>>1)|((i&1)<<(l-1));\n\tFFT(a,1,L);FFT(b,1,L);FFT(c,1,L);FFT(d,1,L);\n\tfor(int i=0;i<len;++i)Ret[i]=0;\n\tmerge(a,c,L,len,M*M%mod,Ret);\n\tmerge(b,c,L,len,M%mod,Ret);\n\tmerge(a,d,L,len,M%mod,Ret);\n\tmerge(b,d,L,len,1,Ret);\n\tfor(int i=0;i<len;++i)Ret[i]=(Ret[i]+mod)%mod;\n}\n```\n\n\n## 快速沃尔什变换（FWT） \n\n  $\\ \\ \\ \\ \\ \\ \\,$首先引入一种生成函数集合幂级数$F$，其中$f$ 是集合中的元素：\n  \n  $F=\\sum_{s\\subseteq O}f_s\\cdot x^s$\n  \n  $\\ \\ \\ \\ \\ \\ \\,$集合幂级数的集合卷积：\n  \n  - 交 $\\bigcap$ （与 $and$）\n    \n    $F\\bigotimes_{\\bigcap} G=\\sum_{i\\subseteq O}\\sum_{j\\subseteq O}f_i\\times g_j[i\\bigcap j=S]$\n    \n  - 并 $\\bigcup$ （或 $or$）\n    \n    $F\\bigotimes_{\\bigcup} G=\\sum_{i\\subseteq O}\\sum_{j\\subseteq O}f_i\\times g_j[i\\bigcup j=S]$\n    \n  - 对称差 $\\Delta$ （异或 $xor$）\n    \n    $F\\bigotimes_{\\Delta} G=\\sum_{i\\subseteq O}\\sum_{j\\subseteq O}f_i\\Delta g_j[i\\Delta=S]$\n  \n  $\\ \\ \\ \\ \\ \\ \\,$而快速沃尔什变换（FWT）就是快速求出集合幂级数的集合卷积的算法，证明在这里看[【FWT(Fast Walsh Transformation)快速沃尔什变换学习笔记】](https://blog.csdn.net/VictoryCzt/article/details/80879652#t7)，下面给出结论和模板代码：\n  \n  $\\ \\ \\ \\ \\ \\ \\,$其中$x=a_{i+j}$，$y=a_{i+j+bit}$:\n  \n| 运算方式 | 交 $\\bigcap$ （与 $and$） | 并 $\\bigcup$ （或 $or$） | 对称差 $\\Delta$ （异或 $xor$） |\n| :----------: | :----------: | :----------: | :----------: |\n|沃尔什变换|$a_{i+j}=x+y$|$a_{i+j+bit}=x+y$|$a_{i+j}=x+y$,$a_{i+j+bit}=x-y$|\n|沃尔什逆变换|$a_{i+j}=x-y$|$a_{i+j+bit}=y-x$|$a_{i+j}=\\frac{x+y}{2}$,$a_{i+j+bit}=\\frac{x-y}{2}$|\n\n``` cpp\nvoid FWT(int *a,int n,int f,int type){\n  for(int i=1;i<n;i<<=1)\n  for(int j=0;j<n;j+=(i<<1))\n  for(int k=0;k<i;k++){\n    int p=a[j+k],q=a[j+k+i];\n    if(type==1){//and &\n      a[j+k]=(1ll*f*q+p+mod)%mod;\n    }\n    if(type==2){//or |\n      a[j+k+i]=(1ll*f*p+q+mod)%mod;\n    }\n    if(type==3){//xor ^\n      a[j+k]=(p+q)%mod;\n      a[j+k+i]=(p-q+mod)%mod;\n      if(f==-1){\n        a[j+k]=1ll*a[j+k]*inv2%mod;\n        a[j+k+i]=1ll*a[j+k+i]*inv2%mod;\n      }\n    }\n  }\n}\nvoid merge_fwt(int *a,int *b,int lim,int type){\n  FWT(a,lim,1,type);FWT(b,lim,1,type);\n  for(int i=0;i<lim;i++)a[i]=(long long)a[i]*b[i]%mod;\n  FWT(a,lim,-1,type);\n}\n\n```\n  \n  ","slug":"求多项式卷积的变换","published":1,"updated":"2022-02-14T05:36:17.830Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0i63w6b001ou4gbdkri705w","content":"<p>$\\ \\ \\ \\ \\ \\ \\ \\,$关于导数和牛顿迭代的复习笔记：</p>\n<span id=\"more\"></span>\n<h2 id=\"多项式的卷积\"><a href=\"#多项式的卷积\" class=\"headerlink\" title=\"多项式的卷积\"></a>多项式的卷积</h2><p>  $\\ \\ \\ \\ \\ \\ \\,$在泛函分析中，卷积、旋积或摺积(英语：Convolution)是通过两个函数f 和g 生成第三个函数的一种数学算子，表征函数f 与g经过翻转和平移的重叠部分的面积。</p>\n<p>  $\\ \\ \\ \\ \\ \\ \\,$对于一个长度为 $n$ 的多项式 $f$ ,和一个长度为 $m$ 的多项式 $g$，那么他们的卷积就可以表达为：</p>\n<p>  $(f \\bigotimes g)_x = \\sum_{i=0}^{x}f_i\\cdot g_{x-i}$</p>\n<p>  $\\ \\ \\ \\ \\ \\ \\,$其中暴力求的复杂度会是$O(nm)$的，在很多情况下是不允许有这么多复杂度的，下面我们来引入一些快速变换：</p>\n<h3 id=\"快速傅里叶变换（FFT）\"><a href=\"#快速傅里叶变换（FFT）\" class=\"headerlink\" title=\"快速傅里叶变换（FFT）\"></a>快速傅里叶变换（FFT）</h3><p>  $\\ \\ \\ \\ \\ \\ \\,$这个算法算是非常常见的对卷积的处理了，讲起来也非常繁琐，留个链接<a href=\"https://www.luogu.org/blog/command-block/fft-xue-xi-bi-ji\">【傅里叶变换(FFT)学习笔记】</a> <a href=\"https://blog.csdn.net/VictoryCzt/article/details/80971795\">【VictoryCzt_FFT学习笔记】</a>。</p>\n<p>  $\\ \\ \\ \\ \\ \\ \\,$这里还有 $\\tt 3Blue1Brown$ 的视频，可以形象理解一下：<a href=\"https://www.bilibili.com/video/av19141078\">【形象展示傅里叶变换】</a></p>\n<p>  $\\ \\ \\ \\ \\ \\ \\,$然后就贴板子吧：</p>\n<p>  $\\ \\ \\ \\ \\ \\ \\,$依然是对于一个长度为 $n$ 的多项式 $f$ ,和一个长度为 $m$ 的多项式 $g$，那么他们的卷积就可以表达为：</p>\n<p>  $(f \\bigotimes g)_x = \\sum_{i=1}^{x}f_i\\cdot g_{x-i}$</p>\n<p>  $\\ \\ \\ \\ \\ \\ \\,$使用快速傅里叶变换（FFT）可以达到$O(n\\log n)$的优秀复杂度。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">cpx</span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">double</span> r,i;</span><br><span class=\"line\">\t<span class=\"keyword\">inline</span> cpx <span class=\"keyword\">operator</span> *(<span class=\"type\">const</span> cpx&amp;x)<span class=\"type\">const</span>&#123;<span class=\"keyword\">return</span> (cpx)&#123;r*x.r-i*x.i,r*x.i+i*x.r&#125;;&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">inline</span> cpx <span class=\"keyword\">operator</span> +(<span class=\"type\">const</span> cpx&amp;x)<span class=\"type\">const</span>&#123;<span class=\"keyword\">return</span> (cpx)&#123;r+x.r,i+x.i&#125;;&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">inline</span> cpx <span class=\"keyword\">operator</span> -(<span class=\"type\">const</span> cpx&amp;x)<span class=\"type\">const</span>&#123;<span class=\"keyword\">return</span> (cpx)&#123;r-x.r,i-x.i&#125;;&#125;</span><br><span class=\"line\">&#125;a[N],b[N];</span><br><span class=\"line\"><span class=\"type\">int</span> m,n,R[N];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">FFT</span><span class=\"params\">(cpx*a,<span class=\"type\">int</span> f,<span class=\"type\">int</span> la)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> n=la;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">register</span> <span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;n;++i)<span class=\"keyword\">if</span>(i&lt;R[i])<span class=\"built_in\">swap</span>(a[i],a[R[i]]);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">register</span> <span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;n;i&lt;&lt;=<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">\t\tcpx wn=(cpx)&#123;<span class=\"built_in\">cos</span>(pi/i),f*<span class=\"built_in\">sin</span>(pi/i)&#125;;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">register</span> <span class=\"type\">int</span> j=<span class=\"number\">0</span>;j&lt;n;j+=(i&lt;&lt;<span class=\"number\">1</span>))&#123;</span><br><span class=\"line\">\t\t\tcpx w=(cpx)&#123;<span class=\"number\">1</span>,<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">register</span> <span class=\"type\">int</span> k=<span class=\"number\">0</span>;k&lt;i;++k,w=w*wn)&#123;</span><br><span class=\"line\">\t\t\t\tcpx x=a[j+k],y=w*a[j+k+i];</span><br><span class=\"line\">\t\t\t\ta[j+k]=x+y;a[j+k+i]=x-y;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(f==<span class=\"number\">-1</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">register</span> <span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)a[i].r/=n;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">merge_fft</span><span class=\"params\">(cpx *a,cpx *b,<span class=\"type\">int</span> la,<span class=\"type\">int</span> lb)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> n=la,m=lb;</span><br><span class=\"line\">\t<span class=\"type\">int</span> L=<span class=\"number\">0</span>;<span class=\"keyword\">for</span>(m+=n,n=<span class=\"number\">1</span>;n&lt;=m;n&lt;&lt;=<span class=\"number\">1</span>)L++;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">register</span> <span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)</span><br><span class=\"line\">\tR[i]=(R[i&gt;&gt;<span class=\"number\">1</span>]&gt;&gt;<span class=\"number\">1</span>)|((i&amp;<span class=\"number\">1</span>)&lt;&lt;(L<span class=\"number\">-1</span>));</span><br><span class=\"line\">\t<span class=\"built_in\">FFT</span>(a,<span class=\"number\">1</span>,n);<span class=\"built_in\">FFT</span>(b,<span class=\"number\">1</span>,n);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">register</span> <span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;=n;i++)a[i]=a[i]*b[i];</span><br><span class=\"line\">\t<span class=\"built_in\">FFT</span>(a,<span class=\"number\">-1</span>,n);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> m;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"分治FFT\"><a href=\"#分治FFT\" class=\"headerlink\" title=\"分治FFT\"></a>分治FFT</h3><p>  $\\ \\ \\ \\ \\ \\ \\,$对于一个长度为 $n$ 的多项式 $g$ ,和一个长度为 $n$ 的多项式 $f$，定义$f$为：</p>\n<p>  $f_x=\\sum_{i=1}^xf_{x-i}\\cdot g_i$</p>\n<p>  $\\ \\ \\ \\ \\ \\ \\,$其中，$f_0=1$。</p>\n<p>  $\\ \\ \\ \\ \\ \\ \\,$很容易看出这个式子是卷积形式:</p>\n<p>  $f_x=(f \\bigotimes g)_x = \\sum_{i=1}^{x}g_i\\cdot f_{x-i}$</p>\n<p>  $\\ \\ \\ \\ \\ \\ \\,$我们想到上面提到的FFT算法，但是这里是$f$函数有卷之前算到的自己，所以我们第一次$f$的有效范围是$1$，卷一次，可以得到$f$有效范围是$2$，，再一次是$4$，就像倍增一样，所以我们的复杂度就应该是$O(n\\log ^2 n)$。</p>\n<p>  $\\ \\ \\ \\ \\ \\ \\,$具体怎么做？</p>\n<p>  $\\ \\ \\ \\ \\ \\ \\,$假设对于$x$的取值区间$l$到$r$，我们知道了$l$到 $\\frac{l+r}{2}$ 的$f_x$的值，那么我们令一个长度为 $\\frac{r-l}{2}$ 的多项式 $A$ 等于这知道的 $\\frac{r-l}{2}$ 项，我们现在想知道前面这一段对于后面 $\\frac{l+r}{2}$ 到 $r$ 这一段的贡献是多少：</p>\n<p>  $f_x= \\sum_{i=1}^{x}g_i\\cdot f_{x-i}$</p>\n<p>  $f_x= \\sum_{i=1}^{x}g_{x-i}\\cdot f_i$</p>\n<p>  $f_x= \\sum_{i=1}^{x}g_{x-i}\\cdot A_i$</p>\n<p>  $f_x= g \\bigotimes A$</p>\n<p>  $\\ \\ \\ \\ \\ \\ \\,$注意我们这里把$g$的长度只取前$r-l$个哦，因为$x$的范围限制，我们需要保证卷出来的长度是我们需要的。然后贴板子：<br>  <figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">cdq_FFT</span><span class=\"params\">(<span class=\"type\">int</span> l,<span class=\"type\">int</span> r)</span></span>&#123;</span><br><span class=\"line\">  \t<span class=\"keyword\">if</span>(l==r)<span class=\"keyword\">return</span>;</span><br><span class=\"line\">  \t<span class=\"type\">int</span> mid=(l+r)&gt;&gt;<span class=\"number\">1</span>;</span><br><span class=\"line\">  \t<span class=\"built_in\">cdq_FFT</span>(l,mid);</span><br><span class=\"line\">  <span class=\"built_in\">memset</span>(A,<span class=\"number\">0</span>,<span class=\"built_in\">sizeof</span>(A));<span class=\"built_in\">memset</span>(G,<span class=\"number\">0</span>,<span class=\"built_in\">sizeof</span>(G));</span><br><span class=\"line\">  \t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=l;i&lt;=mid;i++)A[i-l].r=(<span class=\"type\">double</span>)f[i];</span><br><span class=\"line\">  \t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=r-l;i++)G[i<span class=\"number\">-1</span>].r=(<span class=\"type\">double</span>)g[i];</span><br><span class=\"line\">  \t<span class=\"built_in\">merge_fft</span>(A,G,mid-l,r-l<span class=\"number\">-1</span>);</span><br><span class=\"line\">  \t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=mid+<span class=\"number\">1</span>;i&lt;=r;i++)f[i]+=(<span class=\"type\">int</span>)A[i-l<span class=\"number\">-1</span>].r;</span><br><span class=\"line\">  \t<span class=\"built_in\">cdq_FFT</span>(mid+<span class=\"number\">1</span>,r);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>  $\\ \\ \\ \\ \\ \\ \\,$然而……要是你用这个就死了，主要是死在 $\\tt memset$了，所以我们把 $\\tt merge_fft$ 托下来：</p>\n  <figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">cdq_FFT</span><span class=\"params\">(<span class=\"type\">int</span> l,<span class=\"type\">int</span> r)</span></span>&#123;</span><br><span class=\"line\">  \t<span class=\"keyword\">if</span>(l==r)<span class=\"keyword\">return</span>;</span><br><span class=\"line\">  \t<span class=\"type\">int</span> mid=(l+r)&gt;&gt;<span class=\"number\">1</span>;</span><br><span class=\"line\">  \t<span class=\"built_in\">cdq_FFT</span>(l,mid);</span><br><span class=\"line\">  \t<span class=\"type\">int</span> L=<span class=\"number\">0</span>,n=<span class=\"number\">1</span>;</span><br><span class=\"line\">  \t<span class=\"keyword\">for</span>(;n&lt;=r-l+<span class=\"number\">1</span>;n&lt;&lt;=<span class=\"number\">1</span>)L++;</span><br><span class=\"line\">  \t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)</span><br><span class=\"line\">  \tR[i]=(R[i&gt;&gt;<span class=\"number\">1</span>]&gt;&gt;<span class=\"number\">1</span>)|((i&amp;<span class=\"number\">1</span>)&lt;&lt;(L<span class=\"number\">-1</span>));</span><br><span class=\"line\">  \t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;=n;i++)</span><br><span class=\"line\">  A[i].r=G[i].r=A[i].i=G[i].i=<span class=\"number\">0</span></span><br><span class=\"line\">  \t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=l;i&lt;=mid;i++)A[i-l].r=(<span class=\"type\">double</span>)f[i];</span><br><span class=\"line\">  \t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=r-l;i++)G[i<span class=\"number\">-1</span>].r=(<span class=\"type\">double</span>)g[i];</span><br><span class=\"line\">  \t<span class=\"built_in\">FFT</span>(A,<span class=\"number\">1</span>,n);<span class=\"built_in\">FFT</span>(G,<span class=\"number\">1</span>,n);</span><br><span class=\"line\">  \t<span class=\"keyword\">for</span>(<span class=\"keyword\">register</span> <span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;=n;i++)A[i]=A[i]*G[i];</span><br><span class=\"line\">  \t<span class=\"built_in\">FFT</span>(A,<span class=\"number\">-1</span>,n);</span><br><span class=\"line\">  \t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=mid+<span class=\"number\">1</span>;i&lt;=r;i++)f[i]+=(<span class=\"type\">int</span>)A[i-l<span class=\"number\">-1</span>].r;</span><br><span class=\"line\">  \t<span class=\"built_in\">cdq_FFT</span>(mid+<span class=\"number\">1</span>,r);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>  $\\ \\ \\ \\ \\ \\ \\,$至于洛谷那道模板题<a href=\"https://www.luogu.org/problemnew/show/P4721\">P4721</a>还是算了吧，要取模，建议把FFT换成NTT，<del>（NTT模数明示）</del></p>\n<p>  $\\ \\ \\ \\ \\ \\ \\,$那么还有比$O(n\\log ^2n)$更快的做法吗？当然有了啊，但是又要涉及生成函数的姿势，<del>还有<strong>多项式求逆！！！我不会啊！！！</strong></del></p>\n<p>  $\\ \\ \\ \\ \\ \\ \\,$先占坑:</p>\n<p>  $\\ \\ \\ \\ \\ \\ \\,$我们令$F$为$f$的生成函数，$G$为$g$的生成函数：</p>\n<p>  $F(x)=\\sum_{i=0}^{n}f_i\\cdot x^i$</p>\n<p>  $G(x)=\\sum_{i=0}^{n}g_i\\cdot x^i$</p>\n<p>  $\\ \\ \\ \\ \\ \\ \\,$那么就有：</p>\n<p>  $\\begin{aligned}F(x)\\times  G(x) &amp;= \\left(\\sum_{i=0}^{n}f_i\\cdot x^i\\right)\\cdot \\left(\\sum_{i=0}^{n}g_i\\cdot x^i\\right)\\\\&amp;=\\sum_{i=0}^{n}x^i\\sum_{j=0}^{i}g_j\\cdot f_{i-j}\\\\&amp;=\\sum_{i=0}^{n}x^i(f \\bigotimes g)_i\\end{aligned}$</p>\n<p>  $\\ \\ \\ \\ \\ \\ \\,$也就是说两个函数的生成函数的积，就是他们卷积的生成函数<del>@贝尔级数</del>。</p>\n<p>  $\\ \\ \\ \\ \\ \\ \\,$我们知道的$f_{mid+1,r}= f_{l,mid} \\bigotimes g$，当然了，$f_0$是不满足这个卷积的，所以有：</p>\n<p>  $F(x)\\times  G(x)\\equiv F(x)-f_0x^0\\ \\ (mod \\ x^n)$</p>\n<p>  $F(x)\\times  G(x)\\equiv F(x)-f_0\\ \\ (mod \\ x^n)$</p>\n<p>  $F(x)\\times \\left(1-G(x)\\right)\\equiv f_0\\ \\ (mod \\ x^n)$</p>\n<p>  $F(x)\\equiv \\frac{f_0}{1-G(x)}\\ \\ (mod \\ x^n)$</p>\n<p>  $F(x)\\equiv \\frac{1}{1-G(x)}\\ \\ (mod \\ x^n)$</p>\n<p>  $F(x)\\equiv {(1-G(x))}^{-1}\\ \\ (mod \\ x^n)$</p>\n<p>  $\\ \\ \\ \\ \\ \\ \\,$然后多项式求逆啊~，<del>并不会</del>，复杂度$O(n\\log n)$，就不贴代码了啊。</p>\n<hr>\n<h2 id=\"快速数论变换（NTT）\"><a href=\"#快速数论变换（NTT）\" class=\"headerlink\" title=\"快速数论变换（NTT）\"></a>快速数论变换（NTT）</h2><p>  $\\ \\ \\ \\ \\ \\ \\,$由于FFT是在复平面上操作变换，会用到很多的三角函数，丢精度非常严重，当有模数的时候且模数为NTT模数，形如$a\\cdot 2^b+1$，且为素数的时候，常见的是$998244353$，我们推荐使用NTT来操作。</p>\n<h3 id=\"【原根】-大巨佬orz\"><a href=\"#【原根】-大巨佬orz\" class=\"headerlink\" title=\"- 【原根】%%%大巨佬orz\"></a>- <a href=\"https://www.luogu.org/blog/hdxrie/yuan-gen\">【原根】<del>%%%大巨佬orz</del></a></h3><ul>\n<li><p>定义：</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$考虑方程$a^{x}\\equiv 1(mod \\ b)$，根据欧拉定理，当$a$与$b$互质的时候，一定有解$x=\\varphi(b)$，如果$\\varphi(b)$既为该方程的最小解，那么$a$就称为$(mod \\ b)$的原根。</p>\n</li>\n<li><p>性质：</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,1$、若$a$就为$(mod \\ b)$的原根，那么集合$\\{a^1,a^2,…,a^{b-1}\\}=\\{0,1,2,…,b-1\\}$。也就是说，$a$的任意次方遍历了$(mod \\ b)$的剩余系。</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,2$、如果$(mod \\ b)$意义下有原根，那么原根恰好有$\\varphi(\\varphi(b))$个，这个数量很小。</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,3$、原根一般都不大，我们可以暴力从$2$到$b-1$枚举$a$，判断$a^{\\varphi(b)}\\equiv 1(mod \\ b)$是否当且仅当$x=\\varphi(b)$时成立，注意$x$的解仅有可能是$\\varphi(b)$的约数，还有快的求法，可以用<strong>欧拉定理和裴蜀定理</strong>证明，可是我不会。</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$当然了，对于原根的理解我们只需要理解到它是$a^{x}\\equiv 1(mod \\ b)$的最小解，而且可以暴力求就行了<del>2333</del>就行了。</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$那么如何用到快速变换中去呢？</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$考虑FFT中的单位根$x^n=1$，现在在取模的意义下，就变成了$x^n\\equiv 1\\ \\ (mod \\ P)$，所以我们用原根$gn$去替换掉FFT中的单位根$wn$就好了呀，现在的问题是，原根具体怎么求：</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$对于一个NTT模数的原根，是有特殊求法的，这就是为什么一般NTT会有NTT模数这个限制：</p>\n<p>$gn=g^{\\frac{P-1}{2^{i+1}}}$</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$原根表在这里：<a href=\"http://blog.miskcoo.com/2014/07/fft-prime-table\">【FFT用到的各种素数】</a></p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$下面直接给板子了,这里的模数是$998244353$，原根是$3$：</p>\n</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">NTT</span><span class=\"params\">(<span class=\"type\">int</span> *a,<span class=\"type\">int</span> f,<span class=\"type\">int</span> la)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> n=la;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">register</span> <span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;n;++i)<span class=\"keyword\">if</span>(i&lt;R[i])<span class=\"built_in\">swap</span>(a[i],a[R[i]]);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">register</span> <span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;n;i&lt;&lt;=<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> gn=<span class=\"built_in\">power</span>(<span class=\"number\">3</span>,(mod<span class=\"number\">-1</span>)/(i&lt;&lt;<span class=\"number\">1</span>));</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">register</span> <span class=\"type\">int</span> j=<span class=\"number\">0</span>;j&lt;n;j+=(i&lt;&lt;<span class=\"number\">1</span>))&#123;</span><br><span class=\"line\">\t\t\t<span class=\"type\">int</span> g=<span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">register</span> <span class=\"type\">int</span> k=<span class=\"number\">0</span>;k&lt;i;++k,g=<span class=\"number\">1ll</span>*g*gn%mod)&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"type\">int</span> x=a[j+k],y=<span class=\"number\">1ll</span>*g*a[j+k+i]%mod;</span><br><span class=\"line\">\t\t\t\ta[j+k]=(x+y)%mod;a[j+k+i]=(x-y+mod)%mod;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(f==<span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">reverse</span>(a+<span class=\"number\">1</span>,a+n);</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> inv=<span class=\"built_in\">power</span>(n,mod<span class=\"number\">-2</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">register</span> <span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)a[i]=<span class=\"number\">1ll</span>*a[i]*inv%mod;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">merge_ntt</span><span class=\"params\">(<span class=\"type\">int</span> *a,<span class=\"type\">int</span> *b,<span class=\"type\">int</span> la,<span class=\"type\">int</span> lb)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> n=la,m=lb;</span><br><span class=\"line\">\t<span class=\"type\">int</span> L=<span class=\"number\">0</span>;<span class=\"keyword\">for</span>(m+=n,n=<span class=\"number\">1</span>;n&lt;=m;n&lt;&lt;=<span class=\"number\">1</span>)L++;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">register</span> <span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)</span><br><span class=\"line\">\tR[i]=(R[i&gt;&gt;<span class=\"number\">1</span>]&gt;&gt;<span class=\"number\">1</span>)|((i&amp;<span class=\"number\">1</span>)&lt;&lt;(L<span class=\"number\">-1</span>));</span><br><span class=\"line\">\t<span class=\"built_in\">NTT</span>(a,<span class=\"number\">1</span>,n);<span class=\"built_in\">NTT</span>(b,<span class=\"number\">1</span>,n);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">register</span> <span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;=n;i++)a[i]=<span class=\"number\">1ll</span>*a[i]*b[i]%mod;</span><br><span class=\"line\">\t<span class=\"built_in\">NTT</span>(a,<span class=\"number\">-1</span>,n);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> m;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>  $\\ \\ \\ \\ \\ \\ \\,$那么不是NTT模数的时候怎么办啊？我们不妨用CRT合并，具体在这里可以看到的<a href=\"/2018/12/30/由CRT合并引入的各种扩展求余和同余问题\">【由CRT合并引入的各种扩展求余和同余问题】</a>。这个方法叫<strong>三模NTT</strong>，你可以用这个方法过洛谷的模板，但是写起来非常复杂。下面还有一种方法:</p>\n<h3 id=\"MTT\"><a href=\"#MTT\" class=\"headerlink\" title=\"MTT\"></a>MTT</h3><p> <strong>Mettaton</strong></p>\n<p>  <img src=\"https://img-blog.csdnimg.cn/img_convert/86d214ac619e9afde2057b6ba8d131b7.png\" alt=\"\"></p>\n<p>  $\\ \\ \\ \\ \\ \\ \\,$OH，YEAH~</p>\n<p>  $\\ \\ \\ \\ \\ \\ \\,$<del>（MTT就是镁塔顿啊，雾）</del></p>\n<p>  $\\ \\ \\ \\ \\ \\ \\,$好吧让我们重新打开一下：</p>\n<p>  $\\ \\ \\ \\ \\ \\ \\,$对于一个长度为$n$的多项式$f$，和一个常数$a$，我们知道可以这样运算：</p>\n<p>  $\\frac{f}{a}=\\sum_{i=1}^{n}\\frac{f_i}{a}$</p>\n<p>  $\\ \\ \\ \\ \\ \\ \\,$同理，对于一个长度为$n$的多项式$g$:</p>\n<p>  $\\frac{g}{a}=\\sum_{i=1}^{n}\\frac{g_i}{a}$</p>\n<p>  $\\ \\ \\ \\ \\ \\ \\,$那么有：</p>\n<p>  $\\left(\\frac{f}{a} \\bigotimes \\frac{g}{a}\\right)_x = \\sum_{i=1}^{x}\\frac{f_i}{a}\\cdot \\frac{g_{x-i}}{a}$</p>\n<p>  $\\frac{f}{a} \\bigotimes \\frac{g}{a}= \\frac{f \\bigotimes g}{a^2}$</p>\n<p>  ${f \\bigotimes g}= \\left(\\frac{f}{a} \\bigotimes \\frac{g}{a}\\right)\\times a^2$</p>\n<p>  $\\ \\ \\ \\ \\ \\ \\,$所以我们想，要是我们把每一项的系数拆了，最后合并不就是我们想要的答案了吗？于是就有了上面那个这个式子，但是很多时候并不能整除啊，就有了下面这个式子:</p>\n<p>  ${f \\bigotimes g }=\\left(\\frac{f}{a} \\bigotimes \\frac{g}{a}\\right)\\times a^2+\\left({f}\\%{a} \\bigotimes \\frac{g}{a}\\right)\\times a+\\left(\\frac{f}{a} \\bigotimes {g}\\%{a}\\right)\\times a+\\left(f \\% a \\bigotimes g\\%{a}\\right)$</p>\n<p>  $\\ \\ \\ \\ \\ \\ \\,$就差不多这样了，取值$a$的时候需要保证用FFT时不会爆炸，不过也容易看出，这个算法精度特别特别卡，卡死了，需要开 $long\\ double$ 还有一些特别的奇技淫巧，下面给出模板，$a=2^{15}$，这个板子因为精度问题是过不了洛谷的模板题的，看看就好：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">merge</span><span class=\"params\">(cpx *a,cpx *b,<span class=\"type\">int</span> L,<span class=\"type\">int</span> len,<span class=\"type\">int</span> val,<span class=\"type\">int</span> *Ret)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;=L;i++)f[i]=a[i]*b[i];</span><br><span class=\"line\">\t<span class=\"built_in\">FFT</span>(f,<span class=\"number\">-1</span>,L);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;len;i++)</span><br><span class=\"line\">\tRet[i]=(Ret[i]+<span class=\"number\">1ll</span>*(<span class=\"type\">long</span> <span class=\"type\">long</span>)(f[i].r+<span class=\"number\">0.5</span>)%mod*val%mod)%mod;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">merge_mtt</span><span class=\"params\">(<span class=\"type\">int</span> *A,<span class=\"type\">int</span> *B,<span class=\"type\">int</span> la,<span class=\"type\">int</span> lb,<span class=\"type\">int</span> *Ret)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> M=<span class=\"number\">32768</span>,L,l=<span class=\"number\">0</span>,len=la;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;(len&lt;&lt;<span class=\"number\">1</span>);++i)a[i]=b[i]=c[i]=d[i]=(cpx)&#123;<span class=\"number\">0</span>,<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;=len;i++)a[i].r=A[i]/M,b[i].r=A[i]%M;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;=len;i++)c[i].r=B[i]/M,d[i].r=B[i]%M;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(L=<span class=\"number\">1</span>;L&lt;=len;L&lt;&lt;=<span class=\"number\">1</span>)++l;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;L;++i)R[i]=(R[i&gt;&gt;<span class=\"number\">1</span>]&gt;&gt;<span class=\"number\">1</span>)|((i&amp;<span class=\"number\">1</span>)&lt;&lt;(l<span class=\"number\">-1</span>));</span><br><span class=\"line\">\t<span class=\"built_in\">FFT</span>(a,<span class=\"number\">1</span>,L);<span class=\"built_in\">FFT</span>(b,<span class=\"number\">1</span>,L);<span class=\"built_in\">FFT</span>(c,<span class=\"number\">1</span>,L);<span class=\"built_in\">FFT</span>(d,<span class=\"number\">1</span>,L);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;len;++i)Ret[i]=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">merge</span>(a,c,L,len,M*M%mod,Ret);</span><br><span class=\"line\">\t<span class=\"built_in\">merge</span>(b,c,L,len,M%mod,Ret);</span><br><span class=\"line\">\t<span class=\"built_in\">merge</span>(a,d,L,len,M%mod,Ret);</span><br><span class=\"line\">\t<span class=\"built_in\">merge</span>(b,d,L,len,<span class=\"number\">1</span>,Ret);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;len;++i)Ret[i]=(Ret[i]+mod)%mod;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"快速沃尔什变换（FWT）\"><a href=\"#快速沃尔什变换（FWT）\" class=\"headerlink\" title=\"快速沃尔什变换（FWT）\"></a>快速沃尔什变换（FWT）</h2><p>  $\\ \\ \\ \\ \\ \\ \\,$首先引入一种生成函数集合幂级数$F$，其中$f$ 是集合中的元素：</p>\n<p>  $F=\\sum_{s\\subseteq O}f_s\\cdot x^s$</p>\n<p>  $\\ \\ \\ \\ \\ \\ \\,$集合幂级数的集合卷积：</p>\n<ul>\n<li><p>交 $\\bigcap$ （与 $and$）</p>\n<p>$F\\bigotimes_{\\bigcap} G=\\sum_{i\\subseteq O}\\sum_{j\\subseteq O}f_i\\times g_j[i\\bigcap j=S]$</p>\n</li>\n<li><p>并 $\\bigcup$ （或 $or$）</p>\n<p>$F\\bigotimes_{\\bigcup} G=\\sum_{i\\subseteq O}\\sum_{j\\subseteq O}f_i\\times g_j[i\\bigcup j=S]$</p>\n</li>\n<li><p>对称差 $\\Delta$ （异或 $xor$）</p>\n<p>$F\\bigotimes_{\\Delta} G=\\sum_{i\\subseteq O}\\sum_{j\\subseteq O}f_i\\Delta g_j[i\\Delta=S]$</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$而快速沃尔什变换（FWT）就是快速求出集合幂级数的集合卷积的算法，证明在这里看<a href=\"https://blog.csdn.net/VictoryCzt/article/details/80879652#t7\">【FWT(Fast Walsh Transformation)快速沃尔什变换学习笔记】</a>，下面给出结论和模板代码：</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$其中$x=a_{i+j}$，$y=a_{i+j+bit}$:</p>\n</li>\n</ul>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">运算方式</th>\n<th style=\"text-align:center\">交 $\\bigcap$ （与 $and$）</th>\n<th style=\"text-align:center\">并 $\\bigcup$ （或 $or$）</th>\n<th style=\"text-align:center\">对称差 $\\Delta$ （异或 $xor$）</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">沃尔什变换</td>\n<td style=\"text-align:center\">$a_{i+j}=x+y$</td>\n<td style=\"text-align:center\">$a_{i+j+bit}=x+y$</td>\n<td style=\"text-align:center\">$a_{i+j}=x+y$,$a_{i+j+bit}=x-y$</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">沃尔什逆变换</td>\n<td style=\"text-align:center\">$a_{i+j}=x-y$</td>\n<td style=\"text-align:center\">$a_{i+j+bit}=y-x$</td>\n<td style=\"text-align:center\">$a_{i+j}=\\frac{x+y}{2}$,$a_{i+j+bit}=\\frac{x-y}{2}$</td>\n</tr>\n</tbody>\n</table>\n</div>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">FWT</span><span class=\"params\">(<span class=\"type\">int</span> *a,<span class=\"type\">int</span> n,<span class=\"type\">int</span> f,<span class=\"type\">int</span> type)</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;n;i&lt;&lt;=<span class=\"number\">1</span>)</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">0</span>;j&lt;n;j+=(i&lt;&lt;<span class=\"number\">1</span>))</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> k=<span class=\"number\">0</span>;k&lt;i;k++)&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> p=a[j+k],q=a[j+k+i];</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(type==<span class=\"number\">1</span>)&#123;<span class=\"comment\">//and &amp;</span></span><br><span class=\"line\">      a[j+k]=(<span class=\"number\">1ll</span>*f*q+p+mod)%mod;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(type==<span class=\"number\">2</span>)&#123;<span class=\"comment\">//or |</span></span><br><span class=\"line\">      a[j+k+i]=(<span class=\"number\">1ll</span>*f*p+q+mod)%mod;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(type==<span class=\"number\">3</span>)&#123;<span class=\"comment\">//xor ^</span></span><br><span class=\"line\">      a[j+k]=(p+q)%mod;</span><br><span class=\"line\">      a[j+k+i]=(p-q+mod)%mod;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(f==<span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">        a[j+k]=<span class=\"number\">1ll</span>*a[j+k]*inv2%mod;</span><br><span class=\"line\">        a[j+k+i]=<span class=\"number\">1ll</span>*a[j+k+i]*inv2%mod;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">merge_fwt</span><span class=\"params\">(<span class=\"type\">int</span> *a,<span class=\"type\">int</span> *b,<span class=\"type\">int</span> lim,<span class=\"type\">int</span> type)</span></span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">FWT</span>(a,lim,<span class=\"number\">1</span>,type);<span class=\"built_in\">FWT</span>(b,lim,<span class=\"number\">1</span>,type);</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;lim;i++)a[i]=(<span class=\"type\">long</span> <span class=\"type\">long</span>)a[i]*b[i]%mod;</span><br><span class=\"line\">  <span class=\"built_in\">FWT</span>(a,lim,<span class=\"number\">-1</span>,type);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>$\\ \\ \\ \\ \\ \\ \\ \\,$关于导数和牛顿迭代的复习笔记：</p>","more":"<h2 id=\"多项式的卷积\"><a href=\"#多项式的卷积\" class=\"headerlink\" title=\"多项式的卷积\"></a>多项式的卷积</h2><p>  $\\ \\ \\ \\ \\ \\ \\,$在泛函分析中，卷积、旋积或摺积(英语：Convolution)是通过两个函数f 和g 生成第三个函数的一种数学算子，表征函数f 与g经过翻转和平移的重叠部分的面积。</p>\n<p>  $\\ \\ \\ \\ \\ \\ \\,$对于一个长度为 $n$ 的多项式 $f$ ,和一个长度为 $m$ 的多项式 $g$，那么他们的卷积就可以表达为：</p>\n<p>  $(f \\bigotimes g)_x = \\sum_{i=0}^{x}f_i\\cdot g_{x-i}$</p>\n<p>  $\\ \\ \\ \\ \\ \\ \\,$其中暴力求的复杂度会是$O(nm)$的，在很多情况下是不允许有这么多复杂度的，下面我们来引入一些快速变换：</p>\n<h3 id=\"快速傅里叶变换（FFT）\"><a href=\"#快速傅里叶变换（FFT）\" class=\"headerlink\" title=\"快速傅里叶变换（FFT）\"></a>快速傅里叶变换（FFT）</h3><p>  $\\ \\ \\ \\ \\ \\ \\,$这个算法算是非常常见的对卷积的处理了，讲起来也非常繁琐，留个链接<a href=\"https://www.luogu.org/blog/command-block/fft-xue-xi-bi-ji\">【傅里叶变换(FFT)学习笔记】</a> <a href=\"https://blog.csdn.net/VictoryCzt/article/details/80971795\">【VictoryCzt_FFT学习笔记】</a>。</p>\n<p>  $\\ \\ \\ \\ \\ \\ \\,$这里还有 $\\tt 3Blue1Brown$ 的视频，可以形象理解一下：<a href=\"https://www.bilibili.com/video/av19141078\">【形象展示傅里叶变换】</a></p>\n<p>  $\\ \\ \\ \\ \\ \\ \\,$然后就贴板子吧：</p>\n<p>  $\\ \\ \\ \\ \\ \\ \\,$依然是对于一个长度为 $n$ 的多项式 $f$ ,和一个长度为 $m$ 的多项式 $g$，那么他们的卷积就可以表达为：</p>\n<p>  $(f \\bigotimes g)_x = \\sum_{i=1}^{x}f_i\\cdot g_{x-i}$</p>\n<p>  $\\ \\ \\ \\ \\ \\ \\,$使用快速傅里叶变换（FFT）可以达到$O(n\\log n)$的优秀复杂度。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">cpx</span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">double</span> r,i;</span><br><span class=\"line\">\t<span class=\"keyword\">inline</span> cpx <span class=\"keyword\">operator</span> *(<span class=\"type\">const</span> cpx&amp;x)<span class=\"type\">const</span>&#123;<span class=\"keyword\">return</span> (cpx)&#123;r*x.r-i*x.i,r*x.i+i*x.r&#125;;&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">inline</span> cpx <span class=\"keyword\">operator</span> +(<span class=\"type\">const</span> cpx&amp;x)<span class=\"type\">const</span>&#123;<span class=\"keyword\">return</span> (cpx)&#123;r+x.r,i+x.i&#125;;&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">inline</span> cpx <span class=\"keyword\">operator</span> -(<span class=\"type\">const</span> cpx&amp;x)<span class=\"type\">const</span>&#123;<span class=\"keyword\">return</span> (cpx)&#123;r-x.r,i-x.i&#125;;&#125;</span><br><span class=\"line\">&#125;a[N],b[N];</span><br><span class=\"line\"><span class=\"type\">int</span> m,n,R[N];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">FFT</span><span class=\"params\">(cpx*a,<span class=\"type\">int</span> f,<span class=\"type\">int</span> la)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> n=la;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">register</span> <span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;n;++i)<span class=\"keyword\">if</span>(i&lt;R[i])<span class=\"built_in\">swap</span>(a[i],a[R[i]]);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">register</span> <span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;n;i&lt;&lt;=<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">\t\tcpx wn=(cpx)&#123;<span class=\"built_in\">cos</span>(pi/i),f*<span class=\"built_in\">sin</span>(pi/i)&#125;;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">register</span> <span class=\"type\">int</span> j=<span class=\"number\">0</span>;j&lt;n;j+=(i&lt;&lt;<span class=\"number\">1</span>))&#123;</span><br><span class=\"line\">\t\t\tcpx w=(cpx)&#123;<span class=\"number\">1</span>,<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">register</span> <span class=\"type\">int</span> k=<span class=\"number\">0</span>;k&lt;i;++k,w=w*wn)&#123;</span><br><span class=\"line\">\t\t\t\tcpx x=a[j+k],y=w*a[j+k+i];</span><br><span class=\"line\">\t\t\t\ta[j+k]=x+y;a[j+k+i]=x-y;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(f==<span class=\"number\">-1</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">register</span> <span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)a[i].r/=n;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">merge_fft</span><span class=\"params\">(cpx *a,cpx *b,<span class=\"type\">int</span> la,<span class=\"type\">int</span> lb)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> n=la,m=lb;</span><br><span class=\"line\">\t<span class=\"type\">int</span> L=<span class=\"number\">0</span>;<span class=\"keyword\">for</span>(m+=n,n=<span class=\"number\">1</span>;n&lt;=m;n&lt;&lt;=<span class=\"number\">1</span>)L++;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">register</span> <span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)</span><br><span class=\"line\">\tR[i]=(R[i&gt;&gt;<span class=\"number\">1</span>]&gt;&gt;<span class=\"number\">1</span>)|((i&amp;<span class=\"number\">1</span>)&lt;&lt;(L<span class=\"number\">-1</span>));</span><br><span class=\"line\">\t<span class=\"built_in\">FFT</span>(a,<span class=\"number\">1</span>,n);<span class=\"built_in\">FFT</span>(b,<span class=\"number\">1</span>,n);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">register</span> <span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;=n;i++)a[i]=a[i]*b[i];</span><br><span class=\"line\">\t<span class=\"built_in\">FFT</span>(a,<span class=\"number\">-1</span>,n);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> m;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"分治FFT\"><a href=\"#分治FFT\" class=\"headerlink\" title=\"分治FFT\"></a>分治FFT</h3><p>  $\\ \\ \\ \\ \\ \\ \\,$对于一个长度为 $n$ 的多项式 $g$ ,和一个长度为 $n$ 的多项式 $f$，定义$f$为：</p>\n<p>  $f_x=\\sum_{i=1}^xf_{x-i}\\cdot g_i$</p>\n<p>  $\\ \\ \\ \\ \\ \\ \\,$其中，$f_0=1$。</p>\n<p>  $\\ \\ \\ \\ \\ \\ \\,$很容易看出这个式子是卷积形式:</p>\n<p>  $f_x=(f \\bigotimes g)_x = \\sum_{i=1}^{x}g_i\\cdot f_{x-i}$</p>\n<p>  $\\ \\ \\ \\ \\ \\ \\,$我们想到上面提到的FFT算法，但是这里是$f$函数有卷之前算到的自己，所以我们第一次$f$的有效范围是$1$，卷一次，可以得到$f$有效范围是$2$，，再一次是$4$，就像倍增一样，所以我们的复杂度就应该是$O(n\\log ^2 n)$。</p>\n<p>  $\\ \\ \\ \\ \\ \\ \\,$具体怎么做？</p>\n<p>  $\\ \\ \\ \\ \\ \\ \\,$假设对于$x$的取值区间$l$到$r$，我们知道了$l$到 $\\frac{l+r}{2}$ 的$f_x$的值，那么我们令一个长度为 $\\frac{r-l}{2}$ 的多项式 $A$ 等于这知道的 $\\frac{r-l}{2}$ 项，我们现在想知道前面这一段对于后面 $\\frac{l+r}{2}$ 到 $r$ 这一段的贡献是多少：</p>\n<p>  $f_x= \\sum_{i=1}^{x}g_i\\cdot f_{x-i}$</p>\n<p>  $f_x= \\sum_{i=1}^{x}g_{x-i}\\cdot f_i$</p>\n<p>  $f_x= \\sum_{i=1}^{x}g_{x-i}\\cdot A_i$</p>\n<p>  $f_x= g \\bigotimes A$</p>\n<p>  $\\ \\ \\ \\ \\ \\ \\,$注意我们这里把$g$的长度只取前$r-l$个哦，因为$x$的范围限制，我们需要保证卷出来的长度是我们需要的。然后贴板子：<br>  <figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">cdq_FFT</span><span class=\"params\">(<span class=\"type\">int</span> l,<span class=\"type\">int</span> r)</span></span>&#123;</span><br><span class=\"line\">  \t<span class=\"keyword\">if</span>(l==r)<span class=\"keyword\">return</span>;</span><br><span class=\"line\">  \t<span class=\"type\">int</span> mid=(l+r)&gt;&gt;<span class=\"number\">1</span>;</span><br><span class=\"line\">  \t<span class=\"built_in\">cdq_FFT</span>(l,mid);</span><br><span class=\"line\">  <span class=\"built_in\">memset</span>(A,<span class=\"number\">0</span>,<span class=\"built_in\">sizeof</span>(A));<span class=\"built_in\">memset</span>(G,<span class=\"number\">0</span>,<span class=\"built_in\">sizeof</span>(G));</span><br><span class=\"line\">  \t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=l;i&lt;=mid;i++)A[i-l].r=(<span class=\"type\">double</span>)f[i];</span><br><span class=\"line\">  \t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=r-l;i++)G[i<span class=\"number\">-1</span>].r=(<span class=\"type\">double</span>)g[i];</span><br><span class=\"line\">  \t<span class=\"built_in\">merge_fft</span>(A,G,mid-l,r-l<span class=\"number\">-1</span>);</span><br><span class=\"line\">  \t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=mid+<span class=\"number\">1</span>;i&lt;=r;i++)f[i]+=(<span class=\"type\">int</span>)A[i-l<span class=\"number\">-1</span>].r;</span><br><span class=\"line\">  \t<span class=\"built_in\">cdq_FFT</span>(mid+<span class=\"number\">1</span>,r);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>  $\\ \\ \\ \\ \\ \\ \\,$然而……要是你用这个就死了，主要是死在 $\\tt memset$了，所以我们把 $\\tt merge_fft$ 托下来：</p>\n  <figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">cdq_FFT</span><span class=\"params\">(<span class=\"type\">int</span> l,<span class=\"type\">int</span> r)</span></span>&#123;</span><br><span class=\"line\">  \t<span class=\"keyword\">if</span>(l==r)<span class=\"keyword\">return</span>;</span><br><span class=\"line\">  \t<span class=\"type\">int</span> mid=(l+r)&gt;&gt;<span class=\"number\">1</span>;</span><br><span class=\"line\">  \t<span class=\"built_in\">cdq_FFT</span>(l,mid);</span><br><span class=\"line\">  \t<span class=\"type\">int</span> L=<span class=\"number\">0</span>,n=<span class=\"number\">1</span>;</span><br><span class=\"line\">  \t<span class=\"keyword\">for</span>(;n&lt;=r-l+<span class=\"number\">1</span>;n&lt;&lt;=<span class=\"number\">1</span>)L++;</span><br><span class=\"line\">  \t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)</span><br><span class=\"line\">  \tR[i]=(R[i&gt;&gt;<span class=\"number\">1</span>]&gt;&gt;<span class=\"number\">1</span>)|((i&amp;<span class=\"number\">1</span>)&lt;&lt;(L<span class=\"number\">-1</span>));</span><br><span class=\"line\">  \t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;=n;i++)</span><br><span class=\"line\">  A[i].r=G[i].r=A[i].i=G[i].i=<span class=\"number\">0</span></span><br><span class=\"line\">  \t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=l;i&lt;=mid;i++)A[i-l].r=(<span class=\"type\">double</span>)f[i];</span><br><span class=\"line\">  \t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=r-l;i++)G[i<span class=\"number\">-1</span>].r=(<span class=\"type\">double</span>)g[i];</span><br><span class=\"line\">  \t<span class=\"built_in\">FFT</span>(A,<span class=\"number\">1</span>,n);<span class=\"built_in\">FFT</span>(G,<span class=\"number\">1</span>,n);</span><br><span class=\"line\">  \t<span class=\"keyword\">for</span>(<span class=\"keyword\">register</span> <span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;=n;i++)A[i]=A[i]*G[i];</span><br><span class=\"line\">  \t<span class=\"built_in\">FFT</span>(A,<span class=\"number\">-1</span>,n);</span><br><span class=\"line\">  \t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=mid+<span class=\"number\">1</span>;i&lt;=r;i++)f[i]+=(<span class=\"type\">int</span>)A[i-l<span class=\"number\">-1</span>].r;</span><br><span class=\"line\">  \t<span class=\"built_in\">cdq_FFT</span>(mid+<span class=\"number\">1</span>,r);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>  $\\ \\ \\ \\ \\ \\ \\,$至于洛谷那道模板题<a href=\"https://www.luogu.org/problemnew/show/P4721\">P4721</a>还是算了吧，要取模，建议把FFT换成NTT，<del>（NTT模数明示）</del></p>\n<p>  $\\ \\ \\ \\ \\ \\ \\,$那么还有比$O(n\\log ^2n)$更快的做法吗？当然有了啊，但是又要涉及生成函数的姿势，<del>还有<strong>多项式求逆！！！我不会啊！！！</strong></del></p>\n<p>  $\\ \\ \\ \\ \\ \\ \\,$先占坑:</p>\n<p>  $\\ \\ \\ \\ \\ \\ \\,$我们令$F$为$f$的生成函数，$G$为$g$的生成函数：</p>\n<p>  $F(x)=\\sum_{i=0}^{n}f_i\\cdot x^i$</p>\n<p>  $G(x)=\\sum_{i=0}^{n}g_i\\cdot x^i$</p>\n<p>  $\\ \\ \\ \\ \\ \\ \\,$那么就有：</p>\n<p>  $\\begin{aligned}F(x)\\times  G(x) &amp;= \\left(\\sum_{i=0}^{n}f_i\\cdot x^i\\right)\\cdot \\left(\\sum_{i=0}^{n}g_i\\cdot x^i\\right)\\\\&amp;=\\sum_{i=0}^{n}x^i\\sum_{j=0}^{i}g_j\\cdot f_{i-j}\\\\&amp;=\\sum_{i=0}^{n}x^i(f \\bigotimes g)_i\\end{aligned}$</p>\n<p>  $\\ \\ \\ \\ \\ \\ \\,$也就是说两个函数的生成函数的积，就是他们卷积的生成函数<del>@贝尔级数</del>。</p>\n<p>  $\\ \\ \\ \\ \\ \\ \\,$我们知道的$f_{mid+1,r}= f_{l,mid} \\bigotimes g$，当然了，$f_0$是不满足这个卷积的，所以有：</p>\n<p>  $F(x)\\times  G(x)\\equiv F(x)-f_0x^0\\ \\ (mod \\ x^n)$</p>\n<p>  $F(x)\\times  G(x)\\equiv F(x)-f_0\\ \\ (mod \\ x^n)$</p>\n<p>  $F(x)\\times \\left(1-G(x)\\right)\\equiv f_0\\ \\ (mod \\ x^n)$</p>\n<p>  $F(x)\\equiv \\frac{f_0}{1-G(x)}\\ \\ (mod \\ x^n)$</p>\n<p>  $F(x)\\equiv \\frac{1}{1-G(x)}\\ \\ (mod \\ x^n)$</p>\n<p>  $F(x)\\equiv {(1-G(x))}^{-1}\\ \\ (mod \\ x^n)$</p>\n<p>  $\\ \\ \\ \\ \\ \\ \\,$然后多项式求逆啊~，<del>并不会</del>，复杂度$O(n\\log n)$，就不贴代码了啊。</p>\n<hr>\n<h2 id=\"快速数论变换（NTT）\"><a href=\"#快速数论变换（NTT）\" class=\"headerlink\" title=\"快速数论变换（NTT）\"></a>快速数论变换（NTT）</h2><p>  $\\ \\ \\ \\ \\ \\ \\,$由于FFT是在复平面上操作变换，会用到很多的三角函数，丢精度非常严重，当有模数的时候且模数为NTT模数，形如$a\\cdot 2^b+1$，且为素数的时候，常见的是$998244353$，我们推荐使用NTT来操作。</p>\n<h3 id=\"【原根】-大巨佬orz\"><a href=\"#【原根】-大巨佬orz\" class=\"headerlink\" title=\"- 【原根】%%%大巨佬orz\"></a>- <a href=\"https://www.luogu.org/blog/hdxrie/yuan-gen\">【原根】<del>%%%大巨佬orz</del></a></h3><ul>\n<li><p>定义：</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$考虑方程$a^{x}\\equiv 1(mod \\ b)$，根据欧拉定理，当$a$与$b$互质的时候，一定有解$x=\\varphi(b)$，如果$\\varphi(b)$既为该方程的最小解，那么$a$就称为$(mod \\ b)$的原根。</p>\n</li>\n<li><p>性质：</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,1$、若$a$就为$(mod \\ b)$的原根，那么集合$\\{a^1,a^2,…,a^{b-1}\\}=\\{0,1,2,…,b-1\\}$。也就是说，$a$的任意次方遍历了$(mod \\ b)$的剩余系。</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,2$、如果$(mod \\ b)$意义下有原根，那么原根恰好有$\\varphi(\\varphi(b))$个，这个数量很小。</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,3$、原根一般都不大，我们可以暴力从$2$到$b-1$枚举$a$，判断$a^{\\varphi(b)}\\equiv 1(mod \\ b)$是否当且仅当$x=\\varphi(b)$时成立，注意$x$的解仅有可能是$\\varphi(b)$的约数，还有快的求法，可以用<strong>欧拉定理和裴蜀定理</strong>证明，可是我不会。</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$当然了，对于原根的理解我们只需要理解到它是$a^{x}\\equiv 1(mod \\ b)$的最小解，而且可以暴力求就行了<del>2333</del>就行了。</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$那么如何用到快速变换中去呢？</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$考虑FFT中的单位根$x^n=1$，现在在取模的意义下，就变成了$x^n\\equiv 1\\ \\ (mod \\ P)$，所以我们用原根$gn$去替换掉FFT中的单位根$wn$就好了呀，现在的问题是，原根具体怎么求：</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$对于一个NTT模数的原根，是有特殊求法的，这就是为什么一般NTT会有NTT模数这个限制：</p>\n<p>$gn=g^{\\frac{P-1}{2^{i+1}}}$</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$原根表在这里：<a href=\"http://blog.miskcoo.com/2014/07/fft-prime-table\">【FFT用到的各种素数】</a></p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$下面直接给板子了,这里的模数是$998244353$，原根是$3$：</p>\n</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">NTT</span><span class=\"params\">(<span class=\"type\">int</span> *a,<span class=\"type\">int</span> f,<span class=\"type\">int</span> la)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> n=la;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">register</span> <span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;n;++i)<span class=\"keyword\">if</span>(i&lt;R[i])<span class=\"built_in\">swap</span>(a[i],a[R[i]]);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">register</span> <span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;n;i&lt;&lt;=<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> gn=<span class=\"built_in\">power</span>(<span class=\"number\">3</span>,(mod<span class=\"number\">-1</span>)/(i&lt;&lt;<span class=\"number\">1</span>));</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">register</span> <span class=\"type\">int</span> j=<span class=\"number\">0</span>;j&lt;n;j+=(i&lt;&lt;<span class=\"number\">1</span>))&#123;</span><br><span class=\"line\">\t\t\t<span class=\"type\">int</span> g=<span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">register</span> <span class=\"type\">int</span> k=<span class=\"number\">0</span>;k&lt;i;++k,g=<span class=\"number\">1ll</span>*g*gn%mod)&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"type\">int</span> x=a[j+k],y=<span class=\"number\">1ll</span>*g*a[j+k+i]%mod;</span><br><span class=\"line\">\t\t\t\ta[j+k]=(x+y)%mod;a[j+k+i]=(x-y+mod)%mod;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(f==<span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">reverse</span>(a+<span class=\"number\">1</span>,a+n);</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> inv=<span class=\"built_in\">power</span>(n,mod<span class=\"number\">-2</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">register</span> <span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)a[i]=<span class=\"number\">1ll</span>*a[i]*inv%mod;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">merge_ntt</span><span class=\"params\">(<span class=\"type\">int</span> *a,<span class=\"type\">int</span> *b,<span class=\"type\">int</span> la,<span class=\"type\">int</span> lb)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> n=la,m=lb;</span><br><span class=\"line\">\t<span class=\"type\">int</span> L=<span class=\"number\">0</span>;<span class=\"keyword\">for</span>(m+=n,n=<span class=\"number\">1</span>;n&lt;=m;n&lt;&lt;=<span class=\"number\">1</span>)L++;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">register</span> <span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)</span><br><span class=\"line\">\tR[i]=(R[i&gt;&gt;<span class=\"number\">1</span>]&gt;&gt;<span class=\"number\">1</span>)|((i&amp;<span class=\"number\">1</span>)&lt;&lt;(L<span class=\"number\">-1</span>));</span><br><span class=\"line\">\t<span class=\"built_in\">NTT</span>(a,<span class=\"number\">1</span>,n);<span class=\"built_in\">NTT</span>(b,<span class=\"number\">1</span>,n);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">register</span> <span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;=n;i++)a[i]=<span class=\"number\">1ll</span>*a[i]*b[i]%mod;</span><br><span class=\"line\">\t<span class=\"built_in\">NTT</span>(a,<span class=\"number\">-1</span>,n);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> m;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>  $\\ \\ \\ \\ \\ \\ \\,$那么不是NTT模数的时候怎么办啊？我们不妨用CRT合并，具体在这里可以看到的<a href=\"/2018/12/30/由CRT合并引入的各种扩展求余和同余问题\">【由CRT合并引入的各种扩展求余和同余问题】</a>。这个方法叫<strong>三模NTT</strong>，你可以用这个方法过洛谷的模板，但是写起来非常复杂。下面还有一种方法:</p>\n<h3 id=\"MTT\"><a href=\"#MTT\" class=\"headerlink\" title=\"MTT\"></a>MTT</h3><p> <strong>Mettaton</strong></p>\n<p>  <img src=\"https://img-blog.csdnimg.cn/img_convert/86d214ac619e9afde2057b6ba8d131b7.png\" alt=\"\"></p>\n<p>  $\\ \\ \\ \\ \\ \\ \\,$OH，YEAH~</p>\n<p>  $\\ \\ \\ \\ \\ \\ \\,$<del>（MTT就是镁塔顿啊，雾）</del></p>\n<p>  $\\ \\ \\ \\ \\ \\ \\,$好吧让我们重新打开一下：</p>\n<p>  $\\ \\ \\ \\ \\ \\ \\,$对于一个长度为$n$的多项式$f$，和一个常数$a$，我们知道可以这样运算：</p>\n<p>  $\\frac{f}{a}=\\sum_{i=1}^{n}\\frac{f_i}{a}$</p>\n<p>  $\\ \\ \\ \\ \\ \\ \\,$同理，对于一个长度为$n$的多项式$g$:</p>\n<p>  $\\frac{g}{a}=\\sum_{i=1}^{n}\\frac{g_i}{a}$</p>\n<p>  $\\ \\ \\ \\ \\ \\ \\,$那么有：</p>\n<p>  $\\left(\\frac{f}{a} \\bigotimes \\frac{g}{a}\\right)_x = \\sum_{i=1}^{x}\\frac{f_i}{a}\\cdot \\frac{g_{x-i}}{a}$</p>\n<p>  $\\frac{f}{a} \\bigotimes \\frac{g}{a}= \\frac{f \\bigotimes g}{a^2}$</p>\n<p>  ${f \\bigotimes g}= \\left(\\frac{f}{a} \\bigotimes \\frac{g}{a}\\right)\\times a^2$</p>\n<p>  $\\ \\ \\ \\ \\ \\ \\,$所以我们想，要是我们把每一项的系数拆了，最后合并不就是我们想要的答案了吗？于是就有了上面那个这个式子，但是很多时候并不能整除啊，就有了下面这个式子:</p>\n<p>  ${f \\bigotimes g }=\\left(\\frac{f}{a} \\bigotimes \\frac{g}{a}\\right)\\times a^2+\\left({f}\\%{a} \\bigotimes \\frac{g}{a}\\right)\\times a+\\left(\\frac{f}{a} \\bigotimes {g}\\%{a}\\right)\\times a+\\left(f \\% a \\bigotimes g\\%{a}\\right)$</p>\n<p>  $\\ \\ \\ \\ \\ \\ \\,$就差不多这样了，取值$a$的时候需要保证用FFT时不会爆炸，不过也容易看出，这个算法精度特别特别卡，卡死了，需要开 $long\\ double$ 还有一些特别的奇技淫巧，下面给出模板，$a=2^{15}$，这个板子因为精度问题是过不了洛谷的模板题的，看看就好：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">merge</span><span class=\"params\">(cpx *a,cpx *b,<span class=\"type\">int</span> L,<span class=\"type\">int</span> len,<span class=\"type\">int</span> val,<span class=\"type\">int</span> *Ret)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;=L;i++)f[i]=a[i]*b[i];</span><br><span class=\"line\">\t<span class=\"built_in\">FFT</span>(f,<span class=\"number\">-1</span>,L);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;len;i++)</span><br><span class=\"line\">\tRet[i]=(Ret[i]+<span class=\"number\">1ll</span>*(<span class=\"type\">long</span> <span class=\"type\">long</span>)(f[i].r+<span class=\"number\">0.5</span>)%mod*val%mod)%mod;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">merge_mtt</span><span class=\"params\">(<span class=\"type\">int</span> *A,<span class=\"type\">int</span> *B,<span class=\"type\">int</span> la,<span class=\"type\">int</span> lb,<span class=\"type\">int</span> *Ret)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> M=<span class=\"number\">32768</span>,L,l=<span class=\"number\">0</span>,len=la;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;(len&lt;&lt;<span class=\"number\">1</span>);++i)a[i]=b[i]=c[i]=d[i]=(cpx)&#123;<span class=\"number\">0</span>,<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;=len;i++)a[i].r=A[i]/M,b[i].r=A[i]%M;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;=len;i++)c[i].r=B[i]/M,d[i].r=B[i]%M;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(L=<span class=\"number\">1</span>;L&lt;=len;L&lt;&lt;=<span class=\"number\">1</span>)++l;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;L;++i)R[i]=(R[i&gt;&gt;<span class=\"number\">1</span>]&gt;&gt;<span class=\"number\">1</span>)|((i&amp;<span class=\"number\">1</span>)&lt;&lt;(l<span class=\"number\">-1</span>));</span><br><span class=\"line\">\t<span class=\"built_in\">FFT</span>(a,<span class=\"number\">1</span>,L);<span class=\"built_in\">FFT</span>(b,<span class=\"number\">1</span>,L);<span class=\"built_in\">FFT</span>(c,<span class=\"number\">1</span>,L);<span class=\"built_in\">FFT</span>(d,<span class=\"number\">1</span>,L);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;len;++i)Ret[i]=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">merge</span>(a,c,L,len,M*M%mod,Ret);</span><br><span class=\"line\">\t<span class=\"built_in\">merge</span>(b,c,L,len,M%mod,Ret);</span><br><span class=\"line\">\t<span class=\"built_in\">merge</span>(a,d,L,len,M%mod,Ret);</span><br><span class=\"line\">\t<span class=\"built_in\">merge</span>(b,d,L,len,<span class=\"number\">1</span>,Ret);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;len;++i)Ret[i]=(Ret[i]+mod)%mod;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"快速沃尔什变换（FWT）\"><a href=\"#快速沃尔什变换（FWT）\" class=\"headerlink\" title=\"快速沃尔什变换（FWT）\"></a>快速沃尔什变换（FWT）</h2><p>  $\\ \\ \\ \\ \\ \\ \\,$首先引入一种生成函数集合幂级数$F$，其中$f$ 是集合中的元素：</p>\n<p>  $F=\\sum_{s\\subseteq O}f_s\\cdot x^s$</p>\n<p>  $\\ \\ \\ \\ \\ \\ \\,$集合幂级数的集合卷积：</p>\n<ul>\n<li><p>交 $\\bigcap$ （与 $and$）</p>\n<p>$F\\bigotimes_{\\bigcap} G=\\sum_{i\\subseteq O}\\sum_{j\\subseteq O}f_i\\times g_j[i\\bigcap j=S]$</p>\n</li>\n<li><p>并 $\\bigcup$ （或 $or$）</p>\n<p>$F\\bigotimes_{\\bigcup} G=\\sum_{i\\subseteq O}\\sum_{j\\subseteq O}f_i\\times g_j[i\\bigcup j=S]$</p>\n</li>\n<li><p>对称差 $\\Delta$ （异或 $xor$）</p>\n<p>$F\\bigotimes_{\\Delta} G=\\sum_{i\\subseteq O}\\sum_{j\\subseteq O}f_i\\Delta g_j[i\\Delta=S]$</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$而快速沃尔什变换（FWT）就是快速求出集合幂级数的集合卷积的算法，证明在这里看<a href=\"https://blog.csdn.net/VictoryCzt/article/details/80879652#t7\">【FWT(Fast Walsh Transformation)快速沃尔什变换学习笔记】</a>，下面给出结论和模板代码：</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$其中$x=a_{i+j}$，$y=a_{i+j+bit}$:</p>\n</li>\n</ul>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">运算方式</th>\n<th style=\"text-align:center\">交 $\\bigcap$ （与 $and$）</th>\n<th style=\"text-align:center\">并 $\\bigcup$ （或 $or$）</th>\n<th style=\"text-align:center\">对称差 $\\Delta$ （异或 $xor$）</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">沃尔什变换</td>\n<td style=\"text-align:center\">$a_{i+j}=x+y$</td>\n<td style=\"text-align:center\">$a_{i+j+bit}=x+y$</td>\n<td style=\"text-align:center\">$a_{i+j}=x+y$,$a_{i+j+bit}=x-y$</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">沃尔什逆变换</td>\n<td style=\"text-align:center\">$a_{i+j}=x-y$</td>\n<td style=\"text-align:center\">$a_{i+j+bit}=y-x$</td>\n<td style=\"text-align:center\">$a_{i+j}=\\frac{x+y}{2}$,$a_{i+j+bit}=\\frac{x-y}{2}$</td>\n</tr>\n</tbody>\n</table>\n</div>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">FWT</span><span class=\"params\">(<span class=\"type\">int</span> *a,<span class=\"type\">int</span> n,<span class=\"type\">int</span> f,<span class=\"type\">int</span> type)</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;n;i&lt;&lt;=<span class=\"number\">1</span>)</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">0</span>;j&lt;n;j+=(i&lt;&lt;<span class=\"number\">1</span>))</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> k=<span class=\"number\">0</span>;k&lt;i;k++)&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> p=a[j+k],q=a[j+k+i];</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(type==<span class=\"number\">1</span>)&#123;<span class=\"comment\">//and &amp;</span></span><br><span class=\"line\">      a[j+k]=(<span class=\"number\">1ll</span>*f*q+p+mod)%mod;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(type==<span class=\"number\">2</span>)&#123;<span class=\"comment\">//or |</span></span><br><span class=\"line\">      a[j+k+i]=(<span class=\"number\">1ll</span>*f*p+q+mod)%mod;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(type==<span class=\"number\">3</span>)&#123;<span class=\"comment\">//xor ^</span></span><br><span class=\"line\">      a[j+k]=(p+q)%mod;</span><br><span class=\"line\">      a[j+k+i]=(p-q+mod)%mod;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(f==<span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">        a[j+k]=<span class=\"number\">1ll</span>*a[j+k]*inv2%mod;</span><br><span class=\"line\">        a[j+k+i]=<span class=\"number\">1ll</span>*a[j+k+i]*inv2%mod;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">merge_fwt</span><span class=\"params\">(<span class=\"type\">int</span> *a,<span class=\"type\">int</span> *b,<span class=\"type\">int</span> lim,<span class=\"type\">int</span> type)</span></span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">FWT</span>(a,lim,<span class=\"number\">1</span>,type);<span class=\"built_in\">FWT</span>(b,lim,<span class=\"number\">1</span>,type);</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;lim;i++)a[i]=(<span class=\"type\">long</span> <span class=\"type\">long</span>)a[i]*b[i]%mod;</span><br><span class=\"line\">  <span class=\"built_in\">FWT</span>(a,lim,<span class=\"number\">-1</span>,type);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>"},{"title":"树分治","date":"2019-01-03T13:52:23.000Z","mathjax":true,"_content":"\n$\\ \\ \\ \\ \\ \\ \\ \\,$关于树分治的复习笔记：\n\n<!-- more -->\n\n## 树链剖分\n\n$\\ \\ \\ \\ \\ \\ \\ \\,$树链剖分也叫轻重链剖分，一般会套一个线段树，相当于一个优化过的DFS序，用每次优先遍历重儿子达到优化目的，常用于处理：\n\n1. 关于两点间路径的询问和修改（$O(n\\log^2n)$）\n\n2. 关于某点子树的询问和修改（$O(n\\log n)$），这里只用到了DFS序。\n\n\n``` cpp\nint w[N],v[N];\nvector<int> G[N];\nstruct Tree_Chain_Dissection{\n\tint idx[N],w[N];\n\tint deep[N],fa[N],son[N],tot[N];\n\tint cnt,top[N];\n\tint dfs1(int a,int f,int dep){\n\t  deep[a]=deep[fa[a]=f]+1;tot[a]=1;\n\t  int maxson=-1;\n\t  for(auto v:G[a])\n\t  if(v!=f){\n\t    tot[a]+=dfs1(v,a,dep+1);\n\t    if(tot[v]>maxson) \n\t    maxson=tot[v],son[a]=v;\n\t  }\n\t  return tot[a];\n\t}\n\tvoid dfs2(int a,int topf){\n\t  v[idx[a]=++cnt]=w[a];top[a]=topf;\n\t  if(!son[a])return;\n\t  dfs2(son[a],topf);\n\t  for(auto v:G[a])\n\t  if(!idx[v])dfs2(v,v);\n\t}\n\tvoid Init(){\n\t \tdfs1(rt,0,1);dfs2(rt,rt);\n\t  Seg.build(1,n,1);\n\t}\n\tint Query_Chain(int x,int y){//满足交换律\n\t  int ans=0;\n\t  while(top[x]!=top[y]){\n\t    if(deep[top[x]]<deep[top[y]])swap(x,y);\n\t    ans=(ans+Seg.query(idx[top[x]],idx[x],1,n,1))%mod;\n\t    x=fa[top[x]];\n\t  }\n\t  if(deep[x]>deep[y])swap(x,y);\n\t  ans=(ans+Seg.query(idx[x],idx[y],1,n,1))%mod;\n\t  return ans;\n\t}\n\tvoid Updata_Chain(int x,int y,int val){\n\t  while(top[x]!=top[y]){\n\t    if(deep[top[x]]<deep[top[y]]) swap(x,y);\n\t    Seg.updata(idx[top[x]],idx[x],val,1,n,1);\n\t    x=fa[top[x]];\n\t  }\n\t  if(deep[x]>deep[y]) swap(x,y);\n\t  Seg.updata(idx[x],idx[y],val,1,n,1);\n\t}\n\tint Query_Tree(int x)\n\t{return Seg.query(idx[x],idx[x]+tot[x]-1,1,n,1);}\n\tvoid Updata_Tree(int x,int val)\n\t{Seg.updata(idx[x],idx[x]+tot[x]-1,val,1,n,1);}\n}TCD;\n```\n\n## 点分治\n\n$\\ \\ \\ \\ \\ \\ \\ \\,$点分治是一种分治策略，其核心在于寻找树的重心，从重心分治解决，从而优化复杂度，实现的$O(n\\log n)$分治复杂度，算上分治的操作可能复杂度会更高。\n\n``` cpp\nint K,root,sum;\nint f[N],size[N];\nvector<int> G[N];\nbool used[N];\nvoid getroot(int u,int fa){\n  size[u]=1;f[u]=0;\n  for(auto v:G[u]){\n    if(used[v]||v==fa) continue;\n    getroot(v,u);\n    size[u]+=size[v];\n    f[u]=max(f[u],size[v]);\n  }\n  f[u]=max(f[u],sum-size[u]);\n  if(f[u]<f[root]) root=u;\n}\nvoid getans(int u){\n  //something\n  used[u]=1;\n  for(auto v:G[u])\n  if(!used[v]){\n    root=0;sum=size[v];\n    getroot(v,0);\n    getans(root);\n  }\n}\n```\n\n$\\ \\ \\ \\ \\ \\ \\ \\,$顺带一提动态点分治（点分树），只需要把重儿子重新连在一个图里，这样子我们会得到一个类似于二叉树的新树，每次修改操作的影响我们可以暴力上传，复杂度为$O(n\\log n)$，算上细节的操作可能复杂度会更高。\n\n\n## 边分治\n\n$\\ \\ \\ \\ \\ \\ \\ \\,$边分治的思想是把一棵树每次找到一个边，使得去掉这个边后，留下的两棵树尽量一样大（重边），分治下去，使得复杂度降至$O(n\\log n)$分治复杂度，算上分治的操作可能复杂度会更高。\n\n``` cpp\nint size[N],ctedge,sum;\nvoid getctedge(int u,int fa){\n  size[u]=1;f[u]=0;\n  for(int i=head[u];i;i=G[i].last){\n    if(used[G[i].v]||G[i].v==fa) continue;\n    getctedge(G[i].v,u);\n    size[u]+=size[G[i].v];\n  \tint siz=max(size[G[i].v],sum-size[G[i].v]);\n    if(siz<ctsiz)ctsiz=siz,ctedge=i;\n  }\n}\nvoid getans(int u){\n  //something\n  used[u]=1;\n  for(int i=head[u];i;i=G[i].last)\n  if(!used[G[i].v]){\n    ctedge=0;sum=size[G[i].v];\n    getroot(G[i].v,0);\n  }\n\tgetans(G[ctedge].v);\n\tgetans(G[ctedge].from);\n}\n```","source":"_posts/树分治.md","raw":"---\ntitle: '树分治'\ndate: 2019-01-03 21:52:23\ncategories:\n- 学习笔记\ntags:\n- OI\n- 图论\n- 数据结构\n- 树链剖分\n- 点分治\n- 边分治\nmathjax: true\n---\n\n$\\ \\ \\ \\ \\ \\ \\ \\,$关于树分治的复习笔记：\n\n<!-- more -->\n\n## 树链剖分\n\n$\\ \\ \\ \\ \\ \\ \\ \\,$树链剖分也叫轻重链剖分，一般会套一个线段树，相当于一个优化过的DFS序，用每次优先遍历重儿子达到优化目的，常用于处理：\n\n1. 关于两点间路径的询问和修改（$O(n\\log^2n)$）\n\n2. 关于某点子树的询问和修改（$O(n\\log n)$），这里只用到了DFS序。\n\n\n``` cpp\nint w[N],v[N];\nvector<int> G[N];\nstruct Tree_Chain_Dissection{\n\tint idx[N],w[N];\n\tint deep[N],fa[N],son[N],tot[N];\n\tint cnt,top[N];\n\tint dfs1(int a,int f,int dep){\n\t  deep[a]=deep[fa[a]=f]+1;tot[a]=1;\n\t  int maxson=-1;\n\t  for(auto v:G[a])\n\t  if(v!=f){\n\t    tot[a]+=dfs1(v,a,dep+1);\n\t    if(tot[v]>maxson) \n\t    maxson=tot[v],son[a]=v;\n\t  }\n\t  return tot[a];\n\t}\n\tvoid dfs2(int a,int topf){\n\t  v[idx[a]=++cnt]=w[a];top[a]=topf;\n\t  if(!son[a])return;\n\t  dfs2(son[a],topf);\n\t  for(auto v:G[a])\n\t  if(!idx[v])dfs2(v,v);\n\t}\n\tvoid Init(){\n\t \tdfs1(rt,0,1);dfs2(rt,rt);\n\t  Seg.build(1,n,1);\n\t}\n\tint Query_Chain(int x,int y){//满足交换律\n\t  int ans=0;\n\t  while(top[x]!=top[y]){\n\t    if(deep[top[x]]<deep[top[y]])swap(x,y);\n\t    ans=(ans+Seg.query(idx[top[x]],idx[x],1,n,1))%mod;\n\t    x=fa[top[x]];\n\t  }\n\t  if(deep[x]>deep[y])swap(x,y);\n\t  ans=(ans+Seg.query(idx[x],idx[y],1,n,1))%mod;\n\t  return ans;\n\t}\n\tvoid Updata_Chain(int x,int y,int val){\n\t  while(top[x]!=top[y]){\n\t    if(deep[top[x]]<deep[top[y]]) swap(x,y);\n\t    Seg.updata(idx[top[x]],idx[x],val,1,n,1);\n\t    x=fa[top[x]];\n\t  }\n\t  if(deep[x]>deep[y]) swap(x,y);\n\t  Seg.updata(idx[x],idx[y],val,1,n,1);\n\t}\n\tint Query_Tree(int x)\n\t{return Seg.query(idx[x],idx[x]+tot[x]-1,1,n,1);}\n\tvoid Updata_Tree(int x,int val)\n\t{Seg.updata(idx[x],idx[x]+tot[x]-1,val,1,n,1);}\n}TCD;\n```\n\n## 点分治\n\n$\\ \\ \\ \\ \\ \\ \\ \\,$点分治是一种分治策略，其核心在于寻找树的重心，从重心分治解决，从而优化复杂度，实现的$O(n\\log n)$分治复杂度，算上分治的操作可能复杂度会更高。\n\n``` cpp\nint K,root,sum;\nint f[N],size[N];\nvector<int> G[N];\nbool used[N];\nvoid getroot(int u,int fa){\n  size[u]=1;f[u]=0;\n  for(auto v:G[u]){\n    if(used[v]||v==fa) continue;\n    getroot(v,u);\n    size[u]+=size[v];\n    f[u]=max(f[u],size[v]);\n  }\n  f[u]=max(f[u],sum-size[u]);\n  if(f[u]<f[root]) root=u;\n}\nvoid getans(int u){\n  //something\n  used[u]=1;\n  for(auto v:G[u])\n  if(!used[v]){\n    root=0;sum=size[v];\n    getroot(v,0);\n    getans(root);\n  }\n}\n```\n\n$\\ \\ \\ \\ \\ \\ \\ \\,$顺带一提动态点分治（点分树），只需要把重儿子重新连在一个图里，这样子我们会得到一个类似于二叉树的新树，每次修改操作的影响我们可以暴力上传，复杂度为$O(n\\log n)$，算上细节的操作可能复杂度会更高。\n\n\n## 边分治\n\n$\\ \\ \\ \\ \\ \\ \\ \\,$边分治的思想是把一棵树每次找到一个边，使得去掉这个边后，留下的两棵树尽量一样大（重边），分治下去，使得复杂度降至$O(n\\log n)$分治复杂度，算上分治的操作可能复杂度会更高。\n\n``` cpp\nint size[N],ctedge,sum;\nvoid getctedge(int u,int fa){\n  size[u]=1;f[u]=0;\n  for(int i=head[u];i;i=G[i].last){\n    if(used[G[i].v]||G[i].v==fa) continue;\n    getctedge(G[i].v,u);\n    size[u]+=size[G[i].v];\n  \tint siz=max(size[G[i].v],sum-size[G[i].v]);\n    if(siz<ctsiz)ctsiz=siz,ctedge=i;\n  }\n}\nvoid getans(int u){\n  //something\n  used[u]=1;\n  for(int i=head[u];i;i=G[i].last)\n  if(!used[G[i].v]){\n    ctedge=0;sum=size[G[i].v];\n    getroot(G[i].v,0);\n  }\n\tgetans(G[ctedge].v);\n\tgetans(G[ctedge].from);\n}\n```","slug":"树分治","published":1,"updated":"2022-02-13T13:04:10.698Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0i63w6d001su4gb2ws35vnt","content":"<p>$\\ \\ \\ \\ \\ \\ \\ \\,$关于树分治的复习笔记：</p>\n<span id=\"more\"></span>\n<h2 id=\"树链剖分\"><a href=\"#树链剖分\" class=\"headerlink\" title=\"树链剖分\"></a>树链剖分</h2><p>$\\ \\ \\ \\ \\ \\ \\ \\,$树链剖分也叫轻重链剖分，一般会套一个线段树，相当于一个优化过的DFS序，用每次优先遍历重儿子达到优化目的，常用于处理：</p>\n<ol>\n<li><p>关于两点间路径的询问和修改（$O(n\\log^2n)$）</p>\n</li>\n<li><p>关于某点子树的询问和修改（$O(n\\log n)$），这里只用到了DFS序。</p>\n</li>\n</ol>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> w[N],v[N];</span><br><span class=\"line\">vector&lt;<span class=\"type\">int</span>&gt; G[N];</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Tree_Chain_Dissection</span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> idx[N],w[N];</span><br><span class=\"line\">\t<span class=\"type\">int</span> deep[N],fa[N],son[N],tot[N];</span><br><span class=\"line\">\t<span class=\"type\">int</span> cnt,top[N];</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">dfs1</span><span class=\"params\">(<span class=\"type\">int</span> a,<span class=\"type\">int</span> f,<span class=\"type\">int</span> dep)</span></span>&#123;</span><br><span class=\"line\">\t  deep[a]=deep[fa[a]=f]+<span class=\"number\">1</span>;tot[a]=<span class=\"number\">1</span>;</span><br><span class=\"line\">\t  <span class=\"type\">int</span> maxson=<span class=\"number\">-1</span>;</span><br><span class=\"line\">\t  <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> v:G[a])</span><br><span class=\"line\">\t  <span class=\"keyword\">if</span>(v!=f)&#123;</span><br><span class=\"line\">\t    tot[a]+=<span class=\"built_in\">dfs1</span>(v,a,dep+<span class=\"number\">1</span>);</span><br><span class=\"line\">\t    <span class=\"keyword\">if</span>(tot[v]&gt;maxson) </span><br><span class=\"line\">\t    maxson=tot[v],son[a]=v;</span><br><span class=\"line\">\t  &#125;</span><br><span class=\"line\">\t  <span class=\"keyword\">return</span> tot[a];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">dfs2</span><span class=\"params\">(<span class=\"type\">int</span> a,<span class=\"type\">int</span> topf)</span></span>&#123;</span><br><span class=\"line\">\t  v[idx[a]=++cnt]=w[a];top[a]=topf;</span><br><span class=\"line\">\t  <span class=\"keyword\">if</span>(!son[a])<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t  <span class=\"built_in\">dfs2</span>(son[a],topf);</span><br><span class=\"line\">\t  <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> v:G[a])</span><br><span class=\"line\">\t  <span class=\"keyword\">if</span>(!idx[v])<span class=\"built_in\">dfs2</span>(v,v);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Init</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t \t<span class=\"built_in\">dfs1</span>(rt,<span class=\"number\">0</span>,<span class=\"number\">1</span>);<span class=\"built_in\">dfs2</span>(rt,rt);</span><br><span class=\"line\">\t  Seg.<span class=\"built_in\">build</span>(<span class=\"number\">1</span>,n,<span class=\"number\">1</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">Query_Chain</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> y)</span></span>&#123;<span class=\"comment\">//满足交换律</span></span><br><span class=\"line\">\t  <span class=\"type\">int</span> ans=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t  <span class=\"keyword\">while</span>(top[x]!=top[y])&#123;</span><br><span class=\"line\">\t    <span class=\"keyword\">if</span>(deep[top[x]]&lt;deep[top[y]])<span class=\"built_in\">swap</span>(x,y);</span><br><span class=\"line\">\t    ans=(ans+Seg.<span class=\"built_in\">query</span>(idx[top[x]],idx[x],<span class=\"number\">1</span>,n,<span class=\"number\">1</span>))%mod;</span><br><span class=\"line\">\t    x=fa[top[x]];</span><br><span class=\"line\">\t  &#125;</span><br><span class=\"line\">\t  <span class=\"keyword\">if</span>(deep[x]&gt;deep[y])<span class=\"built_in\">swap</span>(x,y);</span><br><span class=\"line\">\t  ans=(ans+Seg.<span class=\"built_in\">query</span>(idx[x],idx[y],<span class=\"number\">1</span>,n,<span class=\"number\">1</span>))%mod;</span><br><span class=\"line\">\t  <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Updata_Chain</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> y,<span class=\"type\">int</span> val)</span></span>&#123;</span><br><span class=\"line\">\t  <span class=\"keyword\">while</span>(top[x]!=top[y])&#123;</span><br><span class=\"line\">\t    <span class=\"keyword\">if</span>(deep[top[x]]&lt;deep[top[y]]) <span class=\"built_in\">swap</span>(x,y);</span><br><span class=\"line\">\t    Seg.<span class=\"built_in\">updata</span>(idx[top[x]],idx[x],val,<span class=\"number\">1</span>,n,<span class=\"number\">1</span>);</span><br><span class=\"line\">\t    x=fa[top[x]];</span><br><span class=\"line\">\t  &#125;</span><br><span class=\"line\">\t  <span class=\"keyword\">if</span>(deep[x]&gt;deep[y]) <span class=\"built_in\">swap</span>(x,y);</span><br><span class=\"line\">\t  Seg.<span class=\"built_in\">updata</span>(idx[x],idx[y],val,<span class=\"number\">1</span>,n,<span class=\"number\">1</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">Query_Tree</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;<span class=\"keyword\">return</span> Seg.<span class=\"built_in\">query</span>(idx[x],idx[x]+tot[x]<span class=\"number\">-1</span>,<span class=\"number\">1</span>,n,<span class=\"number\">1</span>);&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Updata_Tree</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> val)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;Seg.<span class=\"built_in\">updata</span>(idx[x],idx[x]+tot[x]<span class=\"number\">-1</span>,val,<span class=\"number\">1</span>,n,<span class=\"number\">1</span>);&#125;</span><br><span class=\"line\">&#125;TCD;</span><br></pre></td></tr></table></figure>\n<h2 id=\"点分治\"><a href=\"#点分治\" class=\"headerlink\" title=\"点分治\"></a>点分治</h2><p>$\\ \\ \\ \\ \\ \\ \\ \\,$点分治是一种分治策略，其核心在于寻找树的重心，从重心分治解决，从而优化复杂度，实现的$O(n\\log n)$分治复杂度，算上分治的操作可能复杂度会更高。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> K,root,sum;</span><br><span class=\"line\"><span class=\"type\">int</span> f[N],size[N];</span><br><span class=\"line\">vector&lt;<span class=\"type\">int</span>&gt; G[N];</span><br><span class=\"line\"><span class=\"type\">bool</span> used[N];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">getroot</span><span class=\"params\">(<span class=\"type\">int</span> u,<span class=\"type\">int</span> fa)</span></span>&#123;</span><br><span class=\"line\">  size[u]=<span class=\"number\">1</span>;f[u]=<span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> v:G[u])&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(used[v]||v==fa) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">    <span class=\"built_in\">getroot</span>(v,u);</span><br><span class=\"line\">    size[u]+=size[v];</span><br><span class=\"line\">    f[u]=<span class=\"built_in\">max</span>(f[u],size[v]);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  f[u]=<span class=\"built_in\">max</span>(f[u],sum-size[u]);</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(f[u]&lt;f[root]) root=u;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">getans</span><span class=\"params\">(<span class=\"type\">int</span> u)</span></span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//something</span></span><br><span class=\"line\">  used[u]=<span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> v:G[u])</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(!used[v])&#123;</span><br><span class=\"line\">    root=<span class=\"number\">0</span>;sum=size[v];</span><br><span class=\"line\">    <span class=\"built_in\">getroot</span>(v,<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"built_in\">getans</span>(root);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>$\\ \\ \\ \\ \\ \\ \\ \\,$顺带一提动态点分治（点分树），只需要把重儿子重新连在一个图里，这样子我们会得到一个类似于二叉树的新树，每次修改操作的影响我们可以暴力上传，复杂度为$O(n\\log n)$，算上细节的操作可能复杂度会更高。</p>\n<h2 id=\"边分治\"><a href=\"#边分治\" class=\"headerlink\" title=\"边分治\"></a>边分治</h2><p>$\\ \\ \\ \\ \\ \\ \\ \\,$边分治的思想是把一棵树每次找到一个边，使得去掉这个边后，留下的两棵树尽量一样大（重边），分治下去，使得复杂度降至$O(n\\log n)$分治复杂度，算上分治的操作可能复杂度会更高。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> size[N],ctedge,sum;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">getctedge</span><span class=\"params\">(<span class=\"type\">int</span> u,<span class=\"type\">int</span> fa)</span></span>&#123;</span><br><span class=\"line\">  size[u]=<span class=\"number\">1</span>;f[u]=<span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=head[u];i;i=G[i].last)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(used[G[i].v]||G[i].v==fa) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">    <span class=\"built_in\">getctedge</span>(G[i].v,u);</span><br><span class=\"line\">    size[u]+=size[G[i].v];</span><br><span class=\"line\">  \t<span class=\"type\">int</span> siz=<span class=\"built_in\">max</span>(size[G[i].v],sum-size[G[i].v]);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(siz&lt;ctsiz)ctsiz=siz,ctedge=i;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">getans</span><span class=\"params\">(<span class=\"type\">int</span> u)</span></span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//something</span></span><br><span class=\"line\">  used[u]=<span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=head[u];i;i=G[i].last)</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(!used[G[i].v])&#123;</span><br><span class=\"line\">    ctedge=<span class=\"number\">0</span>;sum=size[G[i].v];</span><br><span class=\"line\">    <span class=\"built_in\">getroot</span>(G[i].v,<span class=\"number\">0</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">\t<span class=\"built_in\">getans</span>(G[ctedge].v);</span><br><span class=\"line\">\t<span class=\"built_in\">getans</span>(G[ctedge].from);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p>$\\ \\ \\ \\ \\ \\ \\ \\,$关于树分治的复习笔记：</p>","more":"<h2 id=\"树链剖分\"><a href=\"#树链剖分\" class=\"headerlink\" title=\"树链剖分\"></a>树链剖分</h2><p>$\\ \\ \\ \\ \\ \\ \\ \\,$树链剖分也叫轻重链剖分，一般会套一个线段树，相当于一个优化过的DFS序，用每次优先遍历重儿子达到优化目的，常用于处理：</p>\n<ol>\n<li><p>关于两点间路径的询问和修改（$O(n\\log^2n)$）</p>\n</li>\n<li><p>关于某点子树的询问和修改（$O(n\\log n)$），这里只用到了DFS序。</p>\n</li>\n</ol>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> w[N],v[N];</span><br><span class=\"line\">vector&lt;<span class=\"type\">int</span>&gt; G[N];</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Tree_Chain_Dissection</span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> idx[N],w[N];</span><br><span class=\"line\">\t<span class=\"type\">int</span> deep[N],fa[N],son[N],tot[N];</span><br><span class=\"line\">\t<span class=\"type\">int</span> cnt,top[N];</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">dfs1</span><span class=\"params\">(<span class=\"type\">int</span> a,<span class=\"type\">int</span> f,<span class=\"type\">int</span> dep)</span></span>&#123;</span><br><span class=\"line\">\t  deep[a]=deep[fa[a]=f]+<span class=\"number\">1</span>;tot[a]=<span class=\"number\">1</span>;</span><br><span class=\"line\">\t  <span class=\"type\">int</span> maxson=<span class=\"number\">-1</span>;</span><br><span class=\"line\">\t  <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> v:G[a])</span><br><span class=\"line\">\t  <span class=\"keyword\">if</span>(v!=f)&#123;</span><br><span class=\"line\">\t    tot[a]+=<span class=\"built_in\">dfs1</span>(v,a,dep+<span class=\"number\">1</span>);</span><br><span class=\"line\">\t    <span class=\"keyword\">if</span>(tot[v]&gt;maxson) </span><br><span class=\"line\">\t    maxson=tot[v],son[a]=v;</span><br><span class=\"line\">\t  &#125;</span><br><span class=\"line\">\t  <span class=\"keyword\">return</span> tot[a];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">dfs2</span><span class=\"params\">(<span class=\"type\">int</span> a,<span class=\"type\">int</span> topf)</span></span>&#123;</span><br><span class=\"line\">\t  v[idx[a]=++cnt]=w[a];top[a]=topf;</span><br><span class=\"line\">\t  <span class=\"keyword\">if</span>(!son[a])<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t  <span class=\"built_in\">dfs2</span>(son[a],topf);</span><br><span class=\"line\">\t  <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> v:G[a])</span><br><span class=\"line\">\t  <span class=\"keyword\">if</span>(!idx[v])<span class=\"built_in\">dfs2</span>(v,v);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Init</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t \t<span class=\"built_in\">dfs1</span>(rt,<span class=\"number\">0</span>,<span class=\"number\">1</span>);<span class=\"built_in\">dfs2</span>(rt,rt);</span><br><span class=\"line\">\t  Seg.<span class=\"built_in\">build</span>(<span class=\"number\">1</span>,n,<span class=\"number\">1</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">Query_Chain</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> y)</span></span>&#123;<span class=\"comment\">//满足交换律</span></span><br><span class=\"line\">\t  <span class=\"type\">int</span> ans=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t  <span class=\"keyword\">while</span>(top[x]!=top[y])&#123;</span><br><span class=\"line\">\t    <span class=\"keyword\">if</span>(deep[top[x]]&lt;deep[top[y]])<span class=\"built_in\">swap</span>(x,y);</span><br><span class=\"line\">\t    ans=(ans+Seg.<span class=\"built_in\">query</span>(idx[top[x]],idx[x],<span class=\"number\">1</span>,n,<span class=\"number\">1</span>))%mod;</span><br><span class=\"line\">\t    x=fa[top[x]];</span><br><span class=\"line\">\t  &#125;</span><br><span class=\"line\">\t  <span class=\"keyword\">if</span>(deep[x]&gt;deep[y])<span class=\"built_in\">swap</span>(x,y);</span><br><span class=\"line\">\t  ans=(ans+Seg.<span class=\"built_in\">query</span>(idx[x],idx[y],<span class=\"number\">1</span>,n,<span class=\"number\">1</span>))%mod;</span><br><span class=\"line\">\t  <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Updata_Chain</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> y,<span class=\"type\">int</span> val)</span></span>&#123;</span><br><span class=\"line\">\t  <span class=\"keyword\">while</span>(top[x]!=top[y])&#123;</span><br><span class=\"line\">\t    <span class=\"keyword\">if</span>(deep[top[x]]&lt;deep[top[y]]) <span class=\"built_in\">swap</span>(x,y);</span><br><span class=\"line\">\t    Seg.<span class=\"built_in\">updata</span>(idx[top[x]],idx[x],val,<span class=\"number\">1</span>,n,<span class=\"number\">1</span>);</span><br><span class=\"line\">\t    x=fa[top[x]];</span><br><span class=\"line\">\t  &#125;</span><br><span class=\"line\">\t  <span class=\"keyword\">if</span>(deep[x]&gt;deep[y]) <span class=\"built_in\">swap</span>(x,y);</span><br><span class=\"line\">\t  Seg.<span class=\"built_in\">updata</span>(idx[x],idx[y],val,<span class=\"number\">1</span>,n,<span class=\"number\">1</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">Query_Tree</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;<span class=\"keyword\">return</span> Seg.<span class=\"built_in\">query</span>(idx[x],idx[x]+tot[x]<span class=\"number\">-1</span>,<span class=\"number\">1</span>,n,<span class=\"number\">1</span>);&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Updata_Tree</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> val)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;Seg.<span class=\"built_in\">updata</span>(idx[x],idx[x]+tot[x]<span class=\"number\">-1</span>,val,<span class=\"number\">1</span>,n,<span class=\"number\">1</span>);&#125;</span><br><span class=\"line\">&#125;TCD;</span><br></pre></td></tr></table></figure>\n<h2 id=\"点分治\"><a href=\"#点分治\" class=\"headerlink\" title=\"点分治\"></a>点分治</h2><p>$\\ \\ \\ \\ \\ \\ \\ \\,$点分治是一种分治策略，其核心在于寻找树的重心，从重心分治解决，从而优化复杂度，实现的$O(n\\log n)$分治复杂度，算上分治的操作可能复杂度会更高。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> K,root,sum;</span><br><span class=\"line\"><span class=\"type\">int</span> f[N],size[N];</span><br><span class=\"line\">vector&lt;<span class=\"type\">int</span>&gt; G[N];</span><br><span class=\"line\"><span class=\"type\">bool</span> used[N];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">getroot</span><span class=\"params\">(<span class=\"type\">int</span> u,<span class=\"type\">int</span> fa)</span></span>&#123;</span><br><span class=\"line\">  size[u]=<span class=\"number\">1</span>;f[u]=<span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> v:G[u])&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(used[v]||v==fa) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">    <span class=\"built_in\">getroot</span>(v,u);</span><br><span class=\"line\">    size[u]+=size[v];</span><br><span class=\"line\">    f[u]=<span class=\"built_in\">max</span>(f[u],size[v]);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  f[u]=<span class=\"built_in\">max</span>(f[u],sum-size[u]);</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(f[u]&lt;f[root]) root=u;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">getans</span><span class=\"params\">(<span class=\"type\">int</span> u)</span></span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//something</span></span><br><span class=\"line\">  used[u]=<span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> v:G[u])</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(!used[v])&#123;</span><br><span class=\"line\">    root=<span class=\"number\">0</span>;sum=size[v];</span><br><span class=\"line\">    <span class=\"built_in\">getroot</span>(v,<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"built_in\">getans</span>(root);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>$\\ \\ \\ \\ \\ \\ \\ \\,$顺带一提动态点分治（点分树），只需要把重儿子重新连在一个图里，这样子我们会得到一个类似于二叉树的新树，每次修改操作的影响我们可以暴力上传，复杂度为$O(n\\log n)$，算上细节的操作可能复杂度会更高。</p>\n<h2 id=\"边分治\"><a href=\"#边分治\" class=\"headerlink\" title=\"边分治\"></a>边分治</h2><p>$\\ \\ \\ \\ \\ \\ \\ \\,$边分治的思想是把一棵树每次找到一个边，使得去掉这个边后，留下的两棵树尽量一样大（重边），分治下去，使得复杂度降至$O(n\\log n)$分治复杂度，算上分治的操作可能复杂度会更高。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> size[N],ctedge,sum;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">getctedge</span><span class=\"params\">(<span class=\"type\">int</span> u,<span class=\"type\">int</span> fa)</span></span>&#123;</span><br><span class=\"line\">  size[u]=<span class=\"number\">1</span>;f[u]=<span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=head[u];i;i=G[i].last)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(used[G[i].v]||G[i].v==fa) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">    <span class=\"built_in\">getctedge</span>(G[i].v,u);</span><br><span class=\"line\">    size[u]+=size[G[i].v];</span><br><span class=\"line\">  \t<span class=\"type\">int</span> siz=<span class=\"built_in\">max</span>(size[G[i].v],sum-size[G[i].v]);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(siz&lt;ctsiz)ctsiz=siz,ctedge=i;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">getans</span><span class=\"params\">(<span class=\"type\">int</span> u)</span></span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//something</span></span><br><span class=\"line\">  used[u]=<span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=head[u];i;i=G[i].last)</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(!used[G[i].v])&#123;</span><br><span class=\"line\">    ctedge=<span class=\"number\">0</span>;sum=size[G[i].v];</span><br><span class=\"line\">    <span class=\"built_in\">getroot</span>(G[i].v,<span class=\"number\">0</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">\t<span class=\"built_in\">getans</span>(G[ctedge].v);</span><br><span class=\"line\">\t<span class=\"built_in\">getans</span>(G[ctedge].from);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"洛谷P1110\\BZOJ1058 [ZJOI2007]报表统计","date":"2019-03-12T12:56:20.000Z","mathjax":true,"_content":"\n题目传送门：[洛谷P1110\\BZOJ1058 [ZJOI2007]报表统计](https://www.luogu.com.cn/problem/P1110)\n\n<!-- more -->\n## 想法\n\n### 引入\n\n第一次看见这个题：想了一会，woc，三颗平衡树，好麻烦呀，先放一放。\n\n第二次看见这个题：想了一会，woc，平衡树加线段树，好麻烦呀，先放一放。\n\n第三次看见这个题：想了一会，woc，一棵权值平衡树加一棵位置平衡树，好麻烦呀，先放一放。\n\n第四次看见这个题：想了一会，woc，一棵平衡树加堆，好麻烦呀……诶等等，好像可以就开两个差不多的平衡树就行了……\n\n----\n\n写的时候脑袋有点懵，不过还是肝好了呢。\n\n### 解法\n\n当他插入的时候，显然可以发现，就是在堆里面删除元素：$abs(head[id+1]-tail[id])$；然后插入两个新元素：$abs(head[id+1]-new)$，$abs(new-tail[id])$。然后新的 $tail[id]$ 再附上 $new$。每次询问 $MIN\\\\_GAP$ 就是询问堆里面的最小值了。\n\n支持删除，插入，查询权值最小，显然可以用平衡树去搞。\n\n对于第二种询问，单独插入一个元素，我们需要在集合里面查找他的前驱和后继，便可以计算最小的差值，显然这个询问的答案是单调的，所以我们开全局变量去记录。\n\n支持插入，查前驱，查后继，显然可以又用平衡树去搞。\n\n这里我用了我喜欢的$Fhq\\\\_Treap$，然后前驱后继是直接查的，其实可以通过$pushup$上传最大最小值，但是不知道为什么会慢一点，然后卡了会儿常，代码有点丑：\n\n## 代码\n\n``` cpp\n#include<algorithm>\n#include<iostream>\n#include<cstdlib>\n#include<cstring>\n#include<cctype>\n#include<cstdio>\n#include<vector>\n#include<string>\n#include<queue>\n#include<stack>\n#include<cmath>\n#include<ctime>\n#include<map>\n#include<set>\nusing namespace std;\nconst int inf=0x7fffffff;\nconst double eps=1e-10;\nconst double pi=acos(-1.0);\n//char buf[1<<15],*S=buf,*T=buf;\n//char getch(){return S==T&&(T=(S=buf)+fread(buf,1,1<<15,stdin),S==T)?0:*S++;}\ninline int read(){\n  int x=0,f=1;char ch;ch=getchar();\n  while(ch<'0'||ch>'9'){if(ch=='-') f=0;ch=getchar();}\n  while(ch>='0'&&ch<='9'){x=(x<<1)+(x<<3)+(ch&15);ch=getchar();}\n  if(f)return x;else return -x;\n}\nconst int N=1000010;\nint ans=inf;\ninline int Abs(const int &a){if(a<0)return -a;return a;}\ninline int min(const int &a,const int &b){if(a<b)return a;return b;}\ninline int max(const int &a,const int &b){if(a>b)return a;return b;}\nstruct fhq_treap_val{\n  #define lson ls[rt]\n  #define rson rs[rt]\n  int val[N],size[N],key[N];\n  int ls[N],rs[N];\n  int root,cnt;\n  void pushup(int rt){size[rt]=size[lson]+size[rson]+1;}\n  int merge(int a,int b){\n    if(!a||!b)return a|b;\n    if(key[a]<key[b]){rs[a]=merge(rs[a],b);pushup(a);return a;}\n    else {ls[b]=merge(a,ls[b]);pushup(b);return b;}\n  }\n  void split(int rt,int x,int &a,int &b){\n    if(!rt){a=b=0;return;}\n    if(val[rt]<=x){a=rt;split(rson,x,rson,b);}\n    else{b=rt;split(lson,x,a,lson);}\n    pushup(rt);\n  }\n  int Max(int rt){while(rson)rt=rson;return val[rt];}\n  int Min(int rt){while(lson)rt=lson;return val[rt];}\n  int newnode(int x){\n    int rt=++cnt;\n    val[rt]=x;\n    size[rt]=1;key[rt]=rand();\n    lson=rson=0;\n    return rt;\n  }\n  void Insert(int x){\n    int a,b;\n    split(root,x,a,b);\n    int rt=newnode(x);\n    root=merge(merge(a,rt),b);\n  }\n  void Insert_2(int x){\n    int a,b;\n    split(root,x,a,b);\n    if(size[a])ans=min(ans,abs(x-Max(a)));\n    if(size[b])ans=min(ans,abs(Min(b)-x));\n    int rt=newnode(x);\n    root=merge(merge(a,rt),b);\n  }\n  void Delete(int x){\n    int a,b,c;\n    split(root,x,a,c);\n    split(a,x-1,a,b);\n    b=merge(ls[b],rs[b]);\n    root=merge(merge(a,b),c);\n  }\n}T1,T2;\nint n,m,a[N],b[N],id,g;\nchar op[20];\nint main()\n{\n  srand(time(NULL));\n  n=read();m=read();\n  for(int i=1;i<=n;i++)a[i]=b[i]=read();\n  for(int i=1;i<n;i++)T1.Insert(Abs(a[i+1]-a[i]));\n  for(int i=1;i<=n;i++)T2.Insert_2(a[i]);\n  while(m--){\n    scanf(\"%s\",op);\n    if(op[0]=='I'){\n      id=read();g=read();\n      T2.Insert_2(g);\n      if(id!=n){\n        T1.Delete(Abs(a[id+1]-b[id]));\n        T1.Insert(Abs(a[id+1]-g));\n      }\n      T1.Insert(Abs(b[id]-g));\n      b[id]=g;\n    }\n    else if(op[4]=='G')printf(\"%d\\n\",T1.Min(T1.root));\n    else printf(\"%d\\n\",ans);\n  }\n  return 0;\n}\n\n```\n\n\n","source":"_posts/洛谷P1110-BZOJ1058-ZJOI2007-报表统计.md","raw":"---\ntitle: '洛谷P1110\\BZOJ1058 [ZJOI2007]报表统计'\ndate: 2019-03-12 20:56:20\ncategories:\n- 题解\ntags:\n- OI\n- 数据结构\n- 平衡树\n- Fhq_Treap\nmathjax: true\n---\n\n题目传送门：[洛谷P1110\\BZOJ1058 [ZJOI2007]报表统计](https://www.luogu.com.cn/problem/P1110)\n\n<!-- more -->\n## 想法\n\n### 引入\n\n第一次看见这个题：想了一会，woc，三颗平衡树，好麻烦呀，先放一放。\n\n第二次看见这个题：想了一会，woc，平衡树加线段树，好麻烦呀，先放一放。\n\n第三次看见这个题：想了一会，woc，一棵权值平衡树加一棵位置平衡树，好麻烦呀，先放一放。\n\n第四次看见这个题：想了一会，woc，一棵平衡树加堆，好麻烦呀……诶等等，好像可以就开两个差不多的平衡树就行了……\n\n----\n\n写的时候脑袋有点懵，不过还是肝好了呢。\n\n### 解法\n\n当他插入的时候，显然可以发现，就是在堆里面删除元素：$abs(head[id+1]-tail[id])$；然后插入两个新元素：$abs(head[id+1]-new)$，$abs(new-tail[id])$。然后新的 $tail[id]$ 再附上 $new$。每次询问 $MIN\\\\_GAP$ 就是询问堆里面的最小值了。\n\n支持删除，插入，查询权值最小，显然可以用平衡树去搞。\n\n对于第二种询问，单独插入一个元素，我们需要在集合里面查找他的前驱和后继，便可以计算最小的差值，显然这个询问的答案是单调的，所以我们开全局变量去记录。\n\n支持插入，查前驱，查后继，显然可以又用平衡树去搞。\n\n这里我用了我喜欢的$Fhq\\\\_Treap$，然后前驱后继是直接查的，其实可以通过$pushup$上传最大最小值，但是不知道为什么会慢一点，然后卡了会儿常，代码有点丑：\n\n## 代码\n\n``` cpp\n#include<algorithm>\n#include<iostream>\n#include<cstdlib>\n#include<cstring>\n#include<cctype>\n#include<cstdio>\n#include<vector>\n#include<string>\n#include<queue>\n#include<stack>\n#include<cmath>\n#include<ctime>\n#include<map>\n#include<set>\nusing namespace std;\nconst int inf=0x7fffffff;\nconst double eps=1e-10;\nconst double pi=acos(-1.0);\n//char buf[1<<15],*S=buf,*T=buf;\n//char getch(){return S==T&&(T=(S=buf)+fread(buf,1,1<<15,stdin),S==T)?0:*S++;}\ninline int read(){\n  int x=0,f=1;char ch;ch=getchar();\n  while(ch<'0'||ch>'9'){if(ch=='-') f=0;ch=getchar();}\n  while(ch>='0'&&ch<='9'){x=(x<<1)+(x<<3)+(ch&15);ch=getchar();}\n  if(f)return x;else return -x;\n}\nconst int N=1000010;\nint ans=inf;\ninline int Abs(const int &a){if(a<0)return -a;return a;}\ninline int min(const int &a,const int &b){if(a<b)return a;return b;}\ninline int max(const int &a,const int &b){if(a>b)return a;return b;}\nstruct fhq_treap_val{\n  #define lson ls[rt]\n  #define rson rs[rt]\n  int val[N],size[N],key[N];\n  int ls[N],rs[N];\n  int root,cnt;\n  void pushup(int rt){size[rt]=size[lson]+size[rson]+1;}\n  int merge(int a,int b){\n    if(!a||!b)return a|b;\n    if(key[a]<key[b]){rs[a]=merge(rs[a],b);pushup(a);return a;}\n    else {ls[b]=merge(a,ls[b]);pushup(b);return b;}\n  }\n  void split(int rt,int x,int &a,int &b){\n    if(!rt){a=b=0;return;}\n    if(val[rt]<=x){a=rt;split(rson,x,rson,b);}\n    else{b=rt;split(lson,x,a,lson);}\n    pushup(rt);\n  }\n  int Max(int rt){while(rson)rt=rson;return val[rt];}\n  int Min(int rt){while(lson)rt=lson;return val[rt];}\n  int newnode(int x){\n    int rt=++cnt;\n    val[rt]=x;\n    size[rt]=1;key[rt]=rand();\n    lson=rson=0;\n    return rt;\n  }\n  void Insert(int x){\n    int a,b;\n    split(root,x,a,b);\n    int rt=newnode(x);\n    root=merge(merge(a,rt),b);\n  }\n  void Insert_2(int x){\n    int a,b;\n    split(root,x,a,b);\n    if(size[a])ans=min(ans,abs(x-Max(a)));\n    if(size[b])ans=min(ans,abs(Min(b)-x));\n    int rt=newnode(x);\n    root=merge(merge(a,rt),b);\n  }\n  void Delete(int x){\n    int a,b,c;\n    split(root,x,a,c);\n    split(a,x-1,a,b);\n    b=merge(ls[b],rs[b]);\n    root=merge(merge(a,b),c);\n  }\n}T1,T2;\nint n,m,a[N],b[N],id,g;\nchar op[20];\nint main()\n{\n  srand(time(NULL));\n  n=read();m=read();\n  for(int i=1;i<=n;i++)a[i]=b[i]=read();\n  for(int i=1;i<n;i++)T1.Insert(Abs(a[i+1]-a[i]));\n  for(int i=1;i<=n;i++)T2.Insert_2(a[i]);\n  while(m--){\n    scanf(\"%s\",op);\n    if(op[0]=='I'){\n      id=read();g=read();\n      T2.Insert_2(g);\n      if(id!=n){\n        T1.Delete(Abs(a[id+1]-b[id]));\n        T1.Insert(Abs(a[id+1]-g));\n      }\n      T1.Insert(Abs(b[id]-g));\n      b[id]=g;\n    }\n    else if(op[4]=='G')printf(\"%d\\n\",T1.Min(T1.root));\n    else printf(\"%d\\n\",ans);\n  }\n  return 0;\n}\n\n```\n\n\n","slug":"洛谷P1110-BZOJ1058-ZJOI2007-报表统计","published":1,"updated":"2022-02-13T08:54:49.862Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0i63w6e001vu4gbasmc8dx4","content":"<p>题目传送门：<a href=\"https://www.luogu.com.cn/problem/P1110\">洛谷P1110\\BZOJ1058 [ZJOI2007]报表统计</a></p>\n<span id=\"more\"></span>\n<h2 id=\"想法\"><a href=\"#想法\" class=\"headerlink\" title=\"想法\"></a>想法</h2><h3 id=\"引入\"><a href=\"#引入\" class=\"headerlink\" title=\"引入\"></a>引入</h3><p>第一次看见这个题：想了一会，woc，三颗平衡树，好麻烦呀，先放一放。</p>\n<p>第二次看见这个题：想了一会，woc，平衡树加线段树，好麻烦呀，先放一放。</p>\n<p>第三次看见这个题：想了一会，woc，一棵权值平衡树加一棵位置平衡树，好麻烦呀，先放一放。</p>\n<p>第四次看见这个题：想了一会，woc，一棵平衡树加堆，好麻烦呀……诶等等，好像可以就开两个差不多的平衡树就行了……</p>\n<hr>\n<p>写的时候脑袋有点懵，不过还是肝好了呢。</p>\n<h3 id=\"解法\"><a href=\"#解法\" class=\"headerlink\" title=\"解法\"></a>解法</h3><p>当他插入的时候，显然可以发现，就是在堆里面删除元素：$abs(head[id+1]-tail[id])$；然后插入两个新元素：$abs(head[id+1]-new)$，$abs(new-tail[id])$。然后新的 $tail[id]$ 再附上 $new$。每次询问 $MIN\\_GAP$ 就是询问堆里面的最小值了。</p>\n<p>支持删除，插入，查询权值最小，显然可以用平衡树去搞。</p>\n<p>对于第二种询问，单独插入一个元素，我们需要在集合里面查找他的前驱和后继，便可以计算最小的差值，显然这个询问的答案是单调的，所以我们开全局变量去记录。</p>\n<p>支持插入，查前驱，查后继，显然可以又用平衡树去搞。</p>\n<p>这里我用了我喜欢的$Fhq\\_Treap$，然后前驱后继是直接查的，其实可以通过$pushup$上传最大最小值，但是不知道为什么会慢一点，然后卡了会儿常，代码有点丑：</p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdlib&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cctype&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;stack&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;ctime&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;map&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;set&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> inf=<span class=\"number\">0x7fffffff</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">double</span> eps=<span class=\"number\">1e-10</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">double</span> pi=<span class=\"built_in\">acos</span>(<span class=\"number\">-1.0</span>);</span><br><span class=\"line\"><span class=\"comment\">//char buf[1&lt;&lt;15],*S=buf,*T=buf;</span></span><br><span class=\"line\"><span class=\"comment\">//char getch()&#123;return S==T&amp;&amp;(T=(S=buf)+fread(buf,1,1&lt;&lt;15,stdin),S==T)?0:*S++;&#125;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">int</span> <span class=\"title\">read</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">  <span class=\"type\">int</span> x=<span class=\"number\">0</span>,f=<span class=\"number\">1</span>;<span class=\"type\">char</span> ch;ch=<span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(ch&lt;<span class=\"string\">&#x27;0&#x27;</span>||ch&gt;<span class=\"string\">&#x27;9&#x27;</span>)&#123;<span class=\"keyword\">if</span>(ch==<span class=\"string\">&#x27;-&#x27;</span>) f=<span class=\"number\">0</span>;ch=<span class=\"built_in\">getchar</span>();&#125;</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(ch&gt;=<span class=\"string\">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class=\"string\">&#x27;9&#x27;</span>)&#123;x=(x&lt;&lt;<span class=\"number\">1</span>)+(x&lt;&lt;<span class=\"number\">3</span>)+(ch&amp;<span class=\"number\">15</span>);ch=<span class=\"built_in\">getchar</span>();&#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(f)<span class=\"keyword\">return</span> x;<span class=\"keyword\">else</span> <span class=\"keyword\">return</span> -x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">1000010</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> ans=inf;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">int</span> <span class=\"title\">Abs</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">int</span> &amp;a)</span></span>&#123;<span class=\"keyword\">if</span>(a&lt;<span class=\"number\">0</span>)<span class=\"keyword\">return</span> -a;<span class=\"keyword\">return</span> a;&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">int</span> <span class=\"title\">min</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">int</span> &amp;a,<span class=\"type\">const</span> <span class=\"type\">int</span> &amp;b)</span></span>&#123;<span class=\"keyword\">if</span>(a&lt;b)<span class=\"keyword\">return</span> a;<span class=\"keyword\">return</span> b;&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">int</span> <span class=\"title\">max</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">int</span> &amp;a,<span class=\"type\">const</span> <span class=\"type\">int</span> &amp;b)</span></span>&#123;<span class=\"keyword\">if</span>(a&gt;b)<span class=\"keyword\">return</span> a;<span class=\"keyword\">return</span> b;&#125;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">fhq_treap_val</span>&#123;</span><br><span class=\"line\">  <span class=\"meta\">#<span class=\"keyword\">define</span> lson ls[rt]</span></span><br><span class=\"line\">  <span class=\"meta\">#<span class=\"keyword\">define</span> rson rs[rt]</span></span><br><span class=\"line\">  <span class=\"type\">int</span> val[N],size[N],key[N];</span><br><span class=\"line\">  <span class=\"type\">int</span> ls[N],rs[N];</span><br><span class=\"line\">  <span class=\"type\">int</span> root,cnt;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">pushup</span><span class=\"params\">(<span class=\"type\">int</span> rt)</span></span>&#123;size[rt]=size[lson]+size[rson]+<span class=\"number\">1</span>;&#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">merge</span><span class=\"params\">(<span class=\"type\">int</span> a,<span class=\"type\">int</span> b)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!a||!b)<span class=\"keyword\">return</span> a|b;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(key[a]&lt;key[b])&#123;rs[a]=<span class=\"built_in\">merge</span>(rs[a],b);<span class=\"built_in\">pushup</span>(a);<span class=\"keyword\">return</span> a;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;ls[b]=<span class=\"built_in\">merge</span>(a,ls[b]);<span class=\"built_in\">pushup</span>(b);<span class=\"keyword\">return</span> b;&#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">split</span><span class=\"params\">(<span class=\"type\">int</span> rt,<span class=\"type\">int</span> x,<span class=\"type\">int</span> &amp;a,<span class=\"type\">int</span> &amp;b)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!rt)&#123;a=b=<span class=\"number\">0</span>;<span class=\"keyword\">return</span>;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(val[rt]&lt;=x)&#123;a=rt;<span class=\"built_in\">split</span>(rson,x,rson,b);&#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span>&#123;b=rt;<span class=\"built_in\">split</span>(lson,x,a,lson);&#125;</span><br><span class=\"line\">    <span class=\"built_in\">pushup</span>(rt);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">Max</span><span class=\"params\">(<span class=\"type\">int</span> rt)</span></span>&#123;<span class=\"keyword\">while</span>(rson)rt=rson;<span class=\"keyword\">return</span> val[rt];&#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">Min</span><span class=\"params\">(<span class=\"type\">int</span> rt)</span></span>&#123;<span class=\"keyword\">while</span>(lson)rt=lson;<span class=\"keyword\">return</span> val[rt];&#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">newnode</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> rt=++cnt;</span><br><span class=\"line\">    val[rt]=x;</span><br><span class=\"line\">    size[rt]=<span class=\"number\">1</span>;key[rt]=<span class=\"built_in\">rand</span>();</span><br><span class=\"line\">    lson=rson=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> rt;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Insert</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> a,b;</span><br><span class=\"line\">    <span class=\"built_in\">split</span>(root,x,a,b);</span><br><span class=\"line\">    <span class=\"type\">int</span> rt=<span class=\"built_in\">newnode</span>(x);</span><br><span class=\"line\">    root=<span class=\"built_in\">merge</span>(<span class=\"built_in\">merge</span>(a,rt),b);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Insert_2</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> a,b;</span><br><span class=\"line\">    <span class=\"built_in\">split</span>(root,x,a,b);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(size[a])ans=<span class=\"built_in\">min</span>(ans,<span class=\"built_in\">abs</span>(x-<span class=\"built_in\">Max</span>(a)));</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(size[b])ans=<span class=\"built_in\">min</span>(ans,<span class=\"built_in\">abs</span>(<span class=\"built_in\">Min</span>(b)-x));</span><br><span class=\"line\">    <span class=\"type\">int</span> rt=<span class=\"built_in\">newnode</span>(x);</span><br><span class=\"line\">    root=<span class=\"built_in\">merge</span>(<span class=\"built_in\">merge</span>(a,rt),b);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Delete</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> a,b,c;</span><br><span class=\"line\">    <span class=\"built_in\">split</span>(root,x,a,c);</span><br><span class=\"line\">    <span class=\"built_in\">split</span>(a,x<span class=\"number\">-1</span>,a,b);</span><br><span class=\"line\">    b=<span class=\"built_in\">merge</span>(ls[b],rs[b]);</span><br><span class=\"line\">    root=<span class=\"built_in\">merge</span>(<span class=\"built_in\">merge</span>(a,b),c);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;T1,T2;</span><br><span class=\"line\"><span class=\"type\">int</span> n,m,a[N],b[N],id,g;</span><br><span class=\"line\"><span class=\"type\">char</span> op[<span class=\"number\">20</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">srand</span>(<span class=\"built_in\">time</span>(<span class=\"literal\">NULL</span>));</span><br><span class=\"line\">  n=<span class=\"built_in\">read</span>();m=<span class=\"built_in\">read</span>();</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)a[i]=b[i]=<span class=\"built_in\">read</span>();</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;n;i++)T1.<span class=\"built_in\">Insert</span>(<span class=\"built_in\">Abs</span>(a[i+<span class=\"number\">1</span>]-a[i]));</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)T2.<span class=\"built_in\">Insert_2</span>(a[i]);</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(m--)&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%s&quot;</span>,op);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(op[<span class=\"number\">0</span>]==<span class=\"string\">&#x27;I&#x27;</span>)&#123;</span><br><span class=\"line\">      id=<span class=\"built_in\">read</span>();g=<span class=\"built_in\">read</span>();</span><br><span class=\"line\">      T2.<span class=\"built_in\">Insert_2</span>(g);</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(id!=n)&#123;</span><br><span class=\"line\">        T1.<span class=\"built_in\">Delete</span>(<span class=\"built_in\">Abs</span>(a[id+<span class=\"number\">1</span>]-b[id]));</span><br><span class=\"line\">        T1.<span class=\"built_in\">Insert</span>(<span class=\"built_in\">Abs</span>(a[id+<span class=\"number\">1</span>]-g));</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      T1.<span class=\"built_in\">Insert</span>(<span class=\"built_in\">Abs</span>(b[id]-g));</span><br><span class=\"line\">      b[id]=g;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(op[<span class=\"number\">4</span>]==<span class=\"string\">&#x27;G&#x27;</span>)<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>,T1.<span class=\"built_in\">Min</span>(T1.root));</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>,ans);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>题目传送门：<a href=\"https://www.luogu.com.cn/problem/P1110\">洛谷P1110\\BZOJ1058 [ZJOI2007]报表统计</a></p>","more":"<h2 id=\"想法\"><a href=\"#想法\" class=\"headerlink\" title=\"想法\"></a>想法</h2><h3 id=\"引入\"><a href=\"#引入\" class=\"headerlink\" title=\"引入\"></a>引入</h3><p>第一次看见这个题：想了一会，woc，三颗平衡树，好麻烦呀，先放一放。</p>\n<p>第二次看见这个题：想了一会，woc，平衡树加线段树，好麻烦呀，先放一放。</p>\n<p>第三次看见这个题：想了一会，woc，一棵权值平衡树加一棵位置平衡树，好麻烦呀，先放一放。</p>\n<p>第四次看见这个题：想了一会，woc，一棵平衡树加堆，好麻烦呀……诶等等，好像可以就开两个差不多的平衡树就行了……</p>\n<hr>\n<p>写的时候脑袋有点懵，不过还是肝好了呢。</p>\n<h3 id=\"解法\"><a href=\"#解法\" class=\"headerlink\" title=\"解法\"></a>解法</h3><p>当他插入的时候，显然可以发现，就是在堆里面删除元素：$abs(head[id+1]-tail[id])$；然后插入两个新元素：$abs(head[id+1]-new)$，$abs(new-tail[id])$。然后新的 $tail[id]$ 再附上 $new$。每次询问 $MIN\\_GAP$ 就是询问堆里面的最小值了。</p>\n<p>支持删除，插入，查询权值最小，显然可以用平衡树去搞。</p>\n<p>对于第二种询问，单独插入一个元素，我们需要在集合里面查找他的前驱和后继，便可以计算最小的差值，显然这个询问的答案是单调的，所以我们开全局变量去记录。</p>\n<p>支持插入，查前驱，查后继，显然可以又用平衡树去搞。</p>\n<p>这里我用了我喜欢的$Fhq\\_Treap$，然后前驱后继是直接查的，其实可以通过$pushup$上传最大最小值，但是不知道为什么会慢一点，然后卡了会儿常，代码有点丑：</p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdlib&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cctype&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;stack&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;ctime&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;map&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;set&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> inf=<span class=\"number\">0x7fffffff</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">double</span> eps=<span class=\"number\">1e-10</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">double</span> pi=<span class=\"built_in\">acos</span>(<span class=\"number\">-1.0</span>);</span><br><span class=\"line\"><span class=\"comment\">//char buf[1&lt;&lt;15],*S=buf,*T=buf;</span></span><br><span class=\"line\"><span class=\"comment\">//char getch()&#123;return S==T&amp;&amp;(T=(S=buf)+fread(buf,1,1&lt;&lt;15,stdin),S==T)?0:*S++;&#125;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">int</span> <span class=\"title\">read</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">  <span class=\"type\">int</span> x=<span class=\"number\">0</span>,f=<span class=\"number\">1</span>;<span class=\"type\">char</span> ch;ch=<span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(ch&lt;<span class=\"string\">&#x27;0&#x27;</span>||ch&gt;<span class=\"string\">&#x27;9&#x27;</span>)&#123;<span class=\"keyword\">if</span>(ch==<span class=\"string\">&#x27;-&#x27;</span>) f=<span class=\"number\">0</span>;ch=<span class=\"built_in\">getchar</span>();&#125;</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(ch&gt;=<span class=\"string\">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class=\"string\">&#x27;9&#x27;</span>)&#123;x=(x&lt;&lt;<span class=\"number\">1</span>)+(x&lt;&lt;<span class=\"number\">3</span>)+(ch&amp;<span class=\"number\">15</span>);ch=<span class=\"built_in\">getchar</span>();&#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(f)<span class=\"keyword\">return</span> x;<span class=\"keyword\">else</span> <span class=\"keyword\">return</span> -x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">1000010</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> ans=inf;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">int</span> <span class=\"title\">Abs</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">int</span> &amp;a)</span></span>&#123;<span class=\"keyword\">if</span>(a&lt;<span class=\"number\">0</span>)<span class=\"keyword\">return</span> -a;<span class=\"keyword\">return</span> a;&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">int</span> <span class=\"title\">min</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">int</span> &amp;a,<span class=\"type\">const</span> <span class=\"type\">int</span> &amp;b)</span></span>&#123;<span class=\"keyword\">if</span>(a&lt;b)<span class=\"keyword\">return</span> a;<span class=\"keyword\">return</span> b;&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">int</span> <span class=\"title\">max</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">int</span> &amp;a,<span class=\"type\">const</span> <span class=\"type\">int</span> &amp;b)</span></span>&#123;<span class=\"keyword\">if</span>(a&gt;b)<span class=\"keyword\">return</span> a;<span class=\"keyword\">return</span> b;&#125;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">fhq_treap_val</span>&#123;</span><br><span class=\"line\">  <span class=\"meta\">#<span class=\"keyword\">define</span> lson ls[rt]</span></span><br><span class=\"line\">  <span class=\"meta\">#<span class=\"keyword\">define</span> rson rs[rt]</span></span><br><span class=\"line\">  <span class=\"type\">int</span> val[N],size[N],key[N];</span><br><span class=\"line\">  <span class=\"type\">int</span> ls[N],rs[N];</span><br><span class=\"line\">  <span class=\"type\">int</span> root,cnt;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">pushup</span><span class=\"params\">(<span class=\"type\">int</span> rt)</span></span>&#123;size[rt]=size[lson]+size[rson]+<span class=\"number\">1</span>;&#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">merge</span><span class=\"params\">(<span class=\"type\">int</span> a,<span class=\"type\">int</span> b)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!a||!b)<span class=\"keyword\">return</span> a|b;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(key[a]&lt;key[b])&#123;rs[a]=<span class=\"built_in\">merge</span>(rs[a],b);<span class=\"built_in\">pushup</span>(a);<span class=\"keyword\">return</span> a;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;ls[b]=<span class=\"built_in\">merge</span>(a,ls[b]);<span class=\"built_in\">pushup</span>(b);<span class=\"keyword\">return</span> b;&#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">split</span><span class=\"params\">(<span class=\"type\">int</span> rt,<span class=\"type\">int</span> x,<span class=\"type\">int</span> &amp;a,<span class=\"type\">int</span> &amp;b)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!rt)&#123;a=b=<span class=\"number\">0</span>;<span class=\"keyword\">return</span>;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(val[rt]&lt;=x)&#123;a=rt;<span class=\"built_in\">split</span>(rson,x,rson,b);&#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span>&#123;b=rt;<span class=\"built_in\">split</span>(lson,x,a,lson);&#125;</span><br><span class=\"line\">    <span class=\"built_in\">pushup</span>(rt);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">Max</span><span class=\"params\">(<span class=\"type\">int</span> rt)</span></span>&#123;<span class=\"keyword\">while</span>(rson)rt=rson;<span class=\"keyword\">return</span> val[rt];&#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">Min</span><span class=\"params\">(<span class=\"type\">int</span> rt)</span></span>&#123;<span class=\"keyword\">while</span>(lson)rt=lson;<span class=\"keyword\">return</span> val[rt];&#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">newnode</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> rt=++cnt;</span><br><span class=\"line\">    val[rt]=x;</span><br><span class=\"line\">    size[rt]=<span class=\"number\">1</span>;key[rt]=<span class=\"built_in\">rand</span>();</span><br><span class=\"line\">    lson=rson=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> rt;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Insert</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> a,b;</span><br><span class=\"line\">    <span class=\"built_in\">split</span>(root,x,a,b);</span><br><span class=\"line\">    <span class=\"type\">int</span> rt=<span class=\"built_in\">newnode</span>(x);</span><br><span class=\"line\">    root=<span class=\"built_in\">merge</span>(<span class=\"built_in\">merge</span>(a,rt),b);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Insert_2</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> a,b;</span><br><span class=\"line\">    <span class=\"built_in\">split</span>(root,x,a,b);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(size[a])ans=<span class=\"built_in\">min</span>(ans,<span class=\"built_in\">abs</span>(x-<span class=\"built_in\">Max</span>(a)));</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(size[b])ans=<span class=\"built_in\">min</span>(ans,<span class=\"built_in\">abs</span>(<span class=\"built_in\">Min</span>(b)-x));</span><br><span class=\"line\">    <span class=\"type\">int</span> rt=<span class=\"built_in\">newnode</span>(x);</span><br><span class=\"line\">    root=<span class=\"built_in\">merge</span>(<span class=\"built_in\">merge</span>(a,rt),b);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Delete</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> a,b,c;</span><br><span class=\"line\">    <span class=\"built_in\">split</span>(root,x,a,c);</span><br><span class=\"line\">    <span class=\"built_in\">split</span>(a,x<span class=\"number\">-1</span>,a,b);</span><br><span class=\"line\">    b=<span class=\"built_in\">merge</span>(ls[b],rs[b]);</span><br><span class=\"line\">    root=<span class=\"built_in\">merge</span>(<span class=\"built_in\">merge</span>(a,b),c);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;T1,T2;</span><br><span class=\"line\"><span class=\"type\">int</span> n,m,a[N],b[N],id,g;</span><br><span class=\"line\"><span class=\"type\">char</span> op[<span class=\"number\">20</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">srand</span>(<span class=\"built_in\">time</span>(<span class=\"literal\">NULL</span>));</span><br><span class=\"line\">  n=<span class=\"built_in\">read</span>();m=<span class=\"built_in\">read</span>();</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)a[i]=b[i]=<span class=\"built_in\">read</span>();</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;n;i++)T1.<span class=\"built_in\">Insert</span>(<span class=\"built_in\">Abs</span>(a[i+<span class=\"number\">1</span>]-a[i]));</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)T2.<span class=\"built_in\">Insert_2</span>(a[i]);</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(m--)&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%s&quot;</span>,op);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(op[<span class=\"number\">0</span>]==<span class=\"string\">&#x27;I&#x27;</span>)&#123;</span><br><span class=\"line\">      id=<span class=\"built_in\">read</span>();g=<span class=\"built_in\">read</span>();</span><br><span class=\"line\">      T2.<span class=\"built_in\">Insert_2</span>(g);</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(id!=n)&#123;</span><br><span class=\"line\">        T1.<span class=\"built_in\">Delete</span>(<span class=\"built_in\">Abs</span>(a[id+<span class=\"number\">1</span>]-b[id]));</span><br><span class=\"line\">        T1.<span class=\"built_in\">Insert</span>(<span class=\"built_in\">Abs</span>(a[id+<span class=\"number\">1</span>]-g));</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      T1.<span class=\"built_in\">Insert</span>(<span class=\"built_in\">Abs</span>(b[id]-g));</span><br><span class=\"line\">      b[id]=g;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(op[<span class=\"number\">4</span>]==<span class=\"string\">&#x27;G&#x27;</span>)<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>,T1.<span class=\"built_in\">Min</span>(T1.root));</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>,ans);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>"},{"title":"由CRT合并引入的各种扩展求余和同余问题","date":"2018-12-30T04:32:09.000Z","mathjax":true,"_content":"\n$\\ \\ \\ \\ \\ \\ \\ \\,$扩展中国剩余定理的引入，使得在模特定素数意义下的算法得以扩张为模任意数，这大大方便了我们对于算法的运用。\n\n<!-- more -->\n\n## 大前提[【中国剩余定理】](/2018/12/29/扩展中国剩余定理/)\n\n## 扩展卢卡斯定理（exLucas）\n  ### 卢卡斯定理（Lucas）\n  \n  $\\ \\ \\ \\ \\ \\ \\,$卢卡斯定理是快速求组合数余的算法，其中最基本的卢卡斯定理只能解决模数为素数的情况，复杂度是$O(p)$预处理阶乘和逆元，每次回答$O(\\log n)$。\n  \n  $\\ \\ \\ \\ \\ \\ \\,$当$n$或$m>p$，套用下面的公式递归处理：\n\n  $C_{n}^{m}\\equiv C_{\\left\\lfloor\\frac{n}{P}\\right\\rfloor}^{\\left\\lfloor\\frac{m}{P}\\right\\rfloor}\\times C_{n\\%P}^{m\\%P}({\\rm mod}\\ P)$\n\n  $\\ \\ \\ \\ \\ \\ \\,$当$n$或$m\\leq p$时，套用定义公式：\n  \n  $C_{n}^{m}=\\frac{n!}{m!(n-m)!}({\\rm mod}\\ P)$\n  \n  $\\ \\ \\ \\ \\ \\ \\,$那么当模数不为素数的情况下，我们使用中国剩余定理（CRT）合并。\n  \n  - 将$P$分解质因数：\n$P=\\prod_{i=1}^rp_i^{c_i}$\n    \n  - 得到同余方程：\n$\\begin{cases}x\\equiv C_{n}^{m}\\ \\ ({\\rm mod}\\ p_1^{c_1})\\\\x\\equiv C_{n}^{m}\\ \\ ({\\rm mod}\\ p_2^{c_2})\\\\x\\equiv C_{n}^{m}\\ \\ ({\\rm mod}\\ p_3^{c_3})\\\\\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\cdots\\\\x\\equiv C_{n}^{m}\\ \\ ({\\rm mod}\\ p_r^{c_r})\\end{cases}$\n    \n$\\ \\ \\ \\ \\ \\ \\,$显然可以很方便的用中国剩余定理（CRT）求出$x$的值，现在我们的问题是如何快速求出$C_{n}^{m}\\% p_i^{c_i}$的值。\n  \n  $\\ \\ \\ \\ \\ \\ \\,$先忘记卢卡斯定理吧，这里并用不到它。\n  \n  $\\ \\ \\ \\ \\ \\ \\,$观察组合数的定义式：\n  \n  $C_{n}^{m}=\\frac{n!}{m!(n-m)!}=\\frac{\\prod_{i=1}^ni}{\\prod_{i=1}^mi\\prod_{i=1}^{n-m}i}$\n  \n  $\\ \\ \\ \\ \\ \\ \\,$现在的问题是如何快速求出$\\prod_{i=1}^ni\\ (\\% p^{c})$的值。\n  \n  $\\ \\ \\ \\ \\ \\ \\,$我们开始拆开它：\n  \n  $\\prod_{i=1}^ni\\ (\\% p^{c})$\n  \n  $\\prod_{i=1,p|i}^ni\\prod_{i=1,p\\nmid i}^ni\\ (\\% p^{c})$\n  \n  $\\prod_{i=1}^{\\left\\lfloor\\frac{n}{p}\\right\\rfloor}ip\\prod_{i=1,p\\nmid i}^ni\\ (\\% p^{c})$\n  \n  ${\\left\\lfloor\\frac{n}{p}\\right\\rfloor}!\\cdot p\\prod_{i=1,p\\nmid i}^ni\\ (\\% p^{c})$\n  \n  $\\ \\ \\ \\ \\ \\ \\,$前面那一块阶乘我们递归处理，后面那一块嘛，我们可以发现他是有循环节的，而且长度最多为$p^{c}$，所以暴力算出循环节然后快速幂咯，至于中间那个$p$，我们最后再计算要方便不少。\n  \n  $\\ \\ \\ \\ \\ \\ \\,$现在阶乘倒是处理完了，我们带回定义式，发现还需要求个逆元。这个还是扩展欧几里得来吧，然后我们发现还有很多$p$没有乘，需要统计一下里面乘$p$的次数再快速幂乘回去。\n  \n  $\\ \\ \\ \\ \\ \\ \\,$说了这么多，终于有下面的模板了，复杂度大约在$O(P\\log P)$左右：\n  \n``` cpp\nlong long inv(long long a,long long p){\n  long long x,y;exgcd(a,p,x,y);\n  return (x+p)%p==0?p:(x+p)%p;\n}\nlong long fac(long long n,long long p,long long pc){\n  if(n==1||n==0)return 1;\n  long long res=1;\n  for(long long i=2;i<=pc;i++)if(i%p)res=(res*i)%pc;\n  res=power(res,n/pc,pc);\n  for(long long i=2;i<=n%pc;i++)if(i%p)res=(res*i)%pc;\n  return (res*fac(n/p,p,pc))%pc;\n}\nlong long C(long long n,long long m,long long p,long long pc,long long Mod){\n  if(n<m)return 0;\n  long long a=fac(n,p,pc),b=fac(m,p,pc),c=fac(n-m,p,pc);\n  long long k=0;\n  for(long long i=n;i;i/=p)k+=i/p;\n  for(long long i=m;i;i/=p)k-=i/p;\n  for(long long i=n-m;i;i/=p)k-=i/p;\n  long long res=a*inv(b,pc)%pc*inv(c,pc)%pc*power(p,k,pc)%pc;\n}\nlong long exLucas(long long n,long long m,long long Mod){\n  long long res=0,P=Mod;\n  for(long long i=2;i<=P;i++)\n    if(P%i==0){\n      long long pc=1;\n      while(P%i==0)P/=i,pc*=i;\n      res=(res+C(n,m,i,pc,Mod)*(Mod/pc)%Mod*inv(Mod/pc,pc)%Mod)%Mod;\n    }\n  return res;\n}\n\n```\n\n### [【P4720 【模板】扩展卢卡斯】](https://www.luogu.org/problemnew/show/P4720)\n  $\\ \\ \\ \\ \\ \\ \\,$既然是模板题，就不多废话了：\n  \n``` cpp\n#include<algorithm>\n#include<iostream>\n#include<cstdlib>\n#include<cstring>\n#include<cctype>\n#include<cstdio>\n#include<vector>\n#include<string>\n#include<queue>\n#include<stack>\n#include<cmath>\n#include<map>\n#include<set>\nusing namespace std;\nconst int inf=0x7fffffff;\nconst double eps=1e-10;\nconst double pi=acos(-1.0);\n//char buf[1<<15],*S=buf,*T=buf;\n//char getch(){return S==T&&(T=(S=buf)+fread(buf,1,1<<15,stdin),S==T)?0:*S++;}\ninline long long read(){\n    long long x=0,f=1;char ch;ch=getchar();\n    while(ch<'0'||ch>'9'){if(ch=='-') f=0;ch=getchar();}\n    while(ch>='0'&&ch<='9'){x=(x<<1)+(x<<3)+(ch&15);ch=getchar();}\n    if(f)return x;else return -x;\n}\nlong long power(long long a,long long b,long long c){\n  long long ans=1;a=a%c;\n  for(;b;b>>=1,a=(a*a)%c)if(b&1)ans=(ans*a)%c;\n  return ans;\n}\nvoid exgcd(long long a,long long b,long long &x,long long &y){\n  if(!b){x=1ll;y=0ll;return;}\n  exgcd(b,a%b,y,x);y-=x*(a/b);\n}\nlong long inv(long long a,long long p){\n  long long x,y;exgcd(a,p,x,y);\n  return (x+p)%p==0?p:(x+p)%p;\n}\nlong long fac(long long n,long long p,long long pc){\n  if(n==1||n==0)return 1;\n  long long res=1;\n  for(long long i=2;i<=pc;i++)if(i%p)res=(res*i)%pc;\n  res=power(res,n/pc,pc);\n  for(long long i=2;i<=n%pc;i++)if(i%p)res=(res*i)%pc;\n  return (res*fac(n/p,p,pc))%pc;\n}\nlong long C(long long n,long long m,long long p,long long pc,long long Mod){\n  if(n<m)return 0;\n  long long a=fac(n,p,pc),b=fac(m,p,pc),c=fac(n-m,p,pc);\n  long long k=0;\n  for(long long i=n;i;i/=p)k+=i/p;\n  for(long long i=m;i;i/=p)k-=i/p;\n  for(long long i=n-m;i;i/=p)k-=i/p;\n  return (a*inv(b,pc)%pc*inv(c,pc)%pc*power(p,k,pc)%pc)*(Mod/pc)%Mod*inv(Mod/pc,pc)%Mod;\n}\nlong long exLucas(long long n,long long m,long long Mod){\n  long long res=0,P=Mod;\n  for(long long i=2;i<=P;i++)\n    if(P%i==0){\n      long long pc=1;\n      while(P%i==0)P/=i,pc*=i;\n      res=(res+C(n,m,i,pc,Mod))%Mod;\n    }\n  return res;\n}\nint main()\n{\n  long long n=read(),m=read(),P=read();\n  printf(\"%lld\\n\",exLucas(n,m,P));\n  return 0;\n}\n\n```\n\n## 扩展欧拉算法（exEuler）\n\n  ### 欧拉算法（Euler）\n\n$\\ \\ \\ \\ \\ \\,$欧拉算法是快速求$a^b\\%P$的值的算法，其核心是欧拉定理：\n\n$\\ \\ \\ \\ \\ \\,$当$a$,$P$互质时,有 $a^{\\varphi(P)}\\equiv1({\\rm mod}\\ P)$\n\n$\\ \\ \\ \\ \\ \\,$那么就有，欧拉算法：$a^b\\%P=a^{b\\%{\\varphi(P)}}\\%P$\n\n$\\ \\ \\ \\ \\ \\,$当模数不为素数的情况下，我们依然使用中国剩余定理（CRT）合并。\n  \n  - 将$P$分解质因数：\n$P=\\prod_{i=1}^rp_i^{c_i}$\n    \n  - 得到同余方程：\n$\\begin{cases}x\\equiv a^b\\ \\ ({\\rm mod}\\ p_1^{c_1})\\\\x\\equiv a^b\\ \\ ({\\rm mod}\\ p_2^{c_2})\\\\x\\equiv a^b\\ \\ ({\\rm mod}\\ p_3^{c_3})\\\\\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\cdots\\\\x\\equiv a^b\\ \\ ({\\rm mod}\\ p_r^{c_r})\\end{cases}$\n  \n  $\\ \\ \\ \\ \\ \\ \\,$好吧其实这个结论挺简单的，证明比较麻烦，所以我们就开心地记结论吧，[证明在这里哦](https://blog.csdn.net/synapse7/article/details/19610361)。\n  \n  $a^b\\%P=\\begin{cases}a^{b\\%{\\varphi(P)}}\\%P, & {[\\gcd(a,P)=1]}\\\\a^{b\\%{\\varphi(P)}+\\varphi(P)}\\%P, & {[\\gcd(a,P)\\neq 1,b>\\varphi(P)]}\\\\a^b\\%P, & {[\\gcd(a,P)\\neq 1,b\\leq\\varphi(P)]}\\end{cases}$\n\n``` cpp\nint Euler_Power(int a,int b,int n){\n  if(n==1)return 0;\n  if(gcd(a,n)==1)return power(a,b%phi[n],n);\n  if(b>phi[n])return power(a,b%phi[n]+phi[n],n)%n;\n  if(b<=phi[n])return power(a,b,n);\n}\n```\n\n### [【P4139 上帝与集合的正确用法】](https://www.luogu.org/problemnew/show/P4139)\n  $\\ \\ \\ \\ \\ \\ \\,$这道题是只用了欧拉算法呢，我们不断递归过去，一定会遇到指数为$1$的时候，退出就行了：\n  \n``` cpp\n#include<algorithm>\n#include<iostream>\n#include<cstdlib>\n#include<cstring>\n#include<cctype>\n#include<cstdio>\n#include<vector>\n#include<string>\n#include<queue>\n#include<stack>\n#include<cmath>\n#include<map>\n#include<set>\nusing namespace std;\nconst int inf=0x7fffffff;\nconst double eps=1e-10;\nconst double pi=acos(-1.0);\n//char buf[1<<15],*S=buf,*T=buf;\n//char getch(){return S==T&&(T=(S=buf)+fread(buf,1,1<<15,stdin),S==T)?0:*S++;}\ninline int read(){\n  int x=0,f=1;char ch;ch=getchar();\n  while(ch<'0'||ch>'9'){if(ch=='-') f=0;ch=getchar();}\n  while(ch>='0'&&ch<='9'){x=(x<<1)+(x<<3)+(ch&15);ch=getchar();}\n  if(f)return x;else return -x;\n}\nconst int N=1e7+10;\nint phi[N];\nvoid phi_table(int n){\n  for(int i=2;i<=n;i++)phi[i]=0;\n  phi[1]=1;\n  for(int i=2;i<=n;i++)if(!phi[i])\n  for(int j=i;j<=n;j+=i){\n    if(!phi[j])phi[j]=j;\n    phi[j]=phi[j]/i*(i-1);\n  }\n}\nint gcd(int a,int b){return b?gcd(b,a%b):a;}\nlong long power(long long a,long long b,long long mod){\n  long long ans=1ll;\n  while(b){\n    if(b&1)ans=(1ll*ans*a)%mod;\n    a=(1ll*a*a)%mod;b>>=1;\n  }\n  return ans;\n}\nint solve(int mod){\n  if(mod==1)return 0;\n  return power(2,solve(phi[mod])+phi[mod],mod);\n}\nint main()\n{\n  phi_table(N-10);\n  int T=read();\n  while(T--){\n    int mod=read();\n    printf(\"%d\\n\",solve(mod));\n  }\n  return 0;\n}\n\n```\n\n## 扩展大步小步算法（exBSGS）\n\n  ### 大步小步算法（BSGS）\n    \n$\\ \\ \\ \\ \\ \\ \\,$大步小步算法，是求解指数方程同余最小自然数解的算法，其中必须保证模数与$a$互质,形如:\n    \n$a^x\\equiv b\\ \\ ({\\rm mod}\\ P)$\n    \n$\\ \\ \\ \\ \\ \\ \\,$其实想法还是挺简单的，因为$p$是素数，所以我们可以知道解 $x<P$，那么我们$\\sqrt P$ 分块。\n    \n$\\ \\ \\ \\ \\ \\ \\,$我们不妨假设我们的答案$x=k\\sqrt P+l$，显然 $l<\\sqrt P$，$k<\\sqrt P$：\n    \n$a^x\\equiv b\\ \\ ({\\rm mod}\\ P)$\n    \n$a^{k\\sqrt p+l}\\equiv b\\ \\ ({\\rm mod}\\ P)$\n$(a^{\\sqrt p})^{k}a^l\\equiv b\\ \\ ({\\rm mod}\\ P)$\n    \n$\\left(a^{\\sqrt p}\\right)^{k}\\equiv \\left(a^l\\right)^{-1}b\\ \\ ({\\rm mod}\\ P)$\n    \n$\\left(a^{\\sqrt p}\\right)^{k}\\equiv a^{-l}b\\ \\ ({\\rm mod}\\ P)$\n    \n$\\ \\ \\ \\ \\ \\ \\,$那么我们枚举一个 $k$,就可以确定那个唯一的 $l$了,前提是我们要把所有$a^{-l}b\\ \\ ({\\rm mod}\\ P)$预处理出来，当然了，这不是问题，我们可以用$\\rm map$存一下，复杂度$O(\\sqrt P)$：\n\n    \n  ``` cpp\n  long long BSGS(long long a,long long b,long long p){\n    map<int,int>hash;hash.clear();b%=p;\n    int t=(int)sqrt(p)+1;\n    for(int j=0;j<t;j++){\n      int val=(int)(b*power(a,j,p)%p);\n      hash[val]=j;\n    }\n    a=power(a,t,p);\n    if(a==0){\n  \t  if(b==0)return 1;\n      else return -1;\n    }\n    for(int i=0;i<=t;i++){\n      int val=power(a,i,p);\n      int j=hash.find(val)==hash.end()?-1:hash[val];\n      if(j>=0&&i*t-j>=0)return i*t-j;\n    }\n    return -1;\n  }\n\n  ```\n  \n  $\\ \\ \\ \\ \\ \\ \\,$那么当模数与$a$不互质的情况下，我们依然使用中国剩余定理（CRT）合并。\n    \n  $\\ \\ \\ \\ \\ \\ \\,$由扩展欧拉定理可以得到，当$\\gcd (a,P)\\nmid b$并且$b\\neq1$的时候，方程是无解的，我们先把他判掉。\n  \n  $\\ \\ \\ \\ \\ \\ \\,$首先我们的想法是，如何一步一步把它化简成模数与$a$互质，再BSGS就行了：\n    \n  $a^x\\equiv b\\ \\ ({\\rm mod}\\ P)$\n  \n  $\\frac{a^x}{\\gcd (a,P)} \\equiv \\frac{b}{\\gcd (a,P)}\\ \\ ({\\rm mod}\\ \\frac{P}{\\gcd (a,P)})$\n  \n  ${a^{x-1}} \\frac{a}{\\gcd (a,P)}\\equiv \\frac{b}{\\gcd (a,P)}\\ \\ ({\\rm mod}\\ \\frac{P}{\\gcd (a,P)})$\n  \n  ${a^{x-1}} \\equiv \\frac{b}{a}\\ \\ ({\\rm mod}\\ \\frac{P}{\\gcd (a,P)})$\n  \n  $\\ \\ \\ \\ \\ \\ \\,$如此递归下去，化简成模数与$a$互质，再BSGS，返回值记住加上递归层数：~~（- 然而并没有用到CRT啊，它是怎么混进来的？？- ex嘛，一样的）~~\n  \n``` cpp\nlong long exBSGS(long long a,long long b,long long p){\n\tif(p==1)return 0;a%=p,b%=p;\n\tif(b==1)return 0;\n  if(a==0){\n  \tif(b==0)return 1;\n    else return -1;\n  }\n\tint k=0,d=1;\n  for(int g=gcd(a,p);g!=1;g=gcd(a,p)){\n    if(b%g) return -1;\n    p/=g;b/=g;d=d*(a/g)%p;k++;\n    if(d==b) return k;\n  }\n  a%=p;\n\tmap<int,int>hash;hash.clear();\n\tint t=(int)sqrt(p)+1;\n  for(int j=0;j<t;j++){\n    int val=(int)(b*power(a,j,p)%p);\n    hash[val]=j;\n  }\n  a=power(a,t,p);\n  for(int i=1;i<=t;i++){\n    int val=d*power(a,i,p)%p;\n    int j=hash.find(val)==hash.end()?-1:hash[val];\n    if(j>=0&&i*t-j+k>=0)return i*t-j+k;\n  }\n  return -1;\n}\n```\n### [【P4195 【模板】exBSGS/Spoj3105 Mod】](https://www.luogu.org/problemnew/show/P4195)\n  $\\ \\ \\ \\ \\ \\ \\,$模板题，不废话：\n  \n``` cpp\n#include<algorithm>\n#include<iostream>\n#include<cstdlib>\n#include<cstring>\n#include<cctype>\n#include<cstdio>\n#include<vector>\n#include<string>\n#include<queue>\n#include<stack>\n#include<cmath>\n#include<map>\n#include<set>\nusing namespace std;\nconst int inf=0x7fffffff;\nconst double eps=1e-10;\nconst double pi=acos(-1.0);\n//char buf[1<<15],*S=buf,*T=buf;\n//char getch(){return S==T&&(T=(S=buf)+fread(buf,1,1<<15,stdin),S==T)?0:*S++;}\ninline int read(){\n\tint x=0,f=1;char ch;ch=getchar();\n\twhile(ch<'0'||ch>'9'){if(ch=='-') f=0;ch=getchar();}\n\twhile(ch>='0'&&ch<='9'){x=(x<<1)+(x<<3)+(ch&15);ch=getchar();}\n\tif(f)return x;else return -x;\n}\nint gcd(int a,int b){return b?gcd(b,a%b):a;}\nint power(int a,int b,int mod){\n\tint ans=1ll;\n\tfor(;b;a=1ll*a*a%mod,b>>=1)\n\tif(b&1)ans=1ll*ans*a%mod;\n\treturn ans;\n}\nconst int mod=100208;\nstruct HaHashsh{\n\tint head[mod],p;\n\tstruct ss{int v;int w,last;}G[100000];\n\tvoid clear(){memset(head,0,sizeof(head));p=0;}\n\tint find(int a){\n\t\tint A=a%mod;\n\t\tfor(int i=head[A];i;i=G[i].last)\n\t\tif(G[i].v==a)return G[i].w;\n\t\treturn -1;\n\t}\n\tvoid insert(int a,int b){\n\t\tint A=a%mod;\n\t\tG[++p]=(ss){a,b,head[A]};head[A]=p;\n\t}\n}hash;\nint exBSGS(int a,int b,int c){\n\tif(c==1)return 0;\n\ta%=c,b%=c;\n\tif(b==1)return 0;\n\tif(a==0)return (b==0)?1:-1;\n\tint k=0,d=1;\n\tfor(int g=gcd(a,c);g^1;g=gcd(a,c)){\n\t\tif(b%g)return -1;\n\t\tc/=g;b/=g;d=1ll*d*(a/g)%c;k++;\n\t\tif(d==b)return k;\n\t}\n\ta%=c;\n\thash.clear();\n\tint t=(int)sqrt(c)+1;\n\tint val=b;\n\tfor(int j=0;j<t;j++)\n\thash.insert(val,j),val=1ll*val*a%c;\n\tval=a=power(a,t,c);val=1ll*d*val%c;\n\tfor(int i=1,j;i<=t;i++){\n\t\tj=hash.find(val);val=1ll*val*a%c;\n\t\tif((~j)&&1ll*i*t-j+k>=0)return 1ll*i*t-j+k;\n\t}\n\treturn -1;\n}\nint a,b,c,ans;\nint main()\n{\n\twhile(scanf(\"%d%d%d\",&a,&c,&b)==3&&(a||b||c))\n\tif(~(ans=exBSGS(a,b,c)))cout<<ans<<endl;\n\telse cout<<\"No Solution\"<<endl;\n\treturn 0;\n}\n\n```\n\n## 任意模数NTT\n\n  $\\ \\ \\ \\ \\ \\ \\,$在[【求多项式卷积的变换】](/2018/12/29/求多项式卷积的变换/)中我们知道，一般NTT只在模数为NTT模数的时候才合法。那么当模数为任意数的时候怎么办呢？\n  \n  **$\\ \\ \\ \\ \\ \\ \\,$ 一种解法，3模NTT**\n  \n  $\\ \\ \\ \\ \\ \\ \\,$假设在求卷积过后，我们的系数最大为 $A_{max}$，那么我们找若干个NTT模数，求一次NTT变换过后，我们对于这一项，可以得到一个同余方程组：\n  \n   $\\begin{cases}A_{max}\\equiv A_x\\ \\ ({\\rm mod}\\ p_1)\\\\A_{max}\\equiv A_x\\ \\ ({\\rm mod}\\ p_2)\\\\A_{max}\\equiv A_x\\ \\ ({\\rm mod}\\ p_3)\\\\\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\cdots\\\\A_{max}\\equiv A_x\\ \\ ({\\rm mod}\\ p_r)\\end{cases}$\n   \n   $\\ \\ \\ \\ \\ \\ \\,$显然，当$\\prod_{i-1}^rp_r\\geq P$的时候，可以解出$A_{max}$的具体值。这个时候用CRT合并，再模$P$就出来了。\n   \n   $\\ \\ \\ \\ \\ \\ \\,$下面还是给出模板，这里取的NTT模数为$469762049$，$998244353$，$1004535809$，他们的原根都是 $3$：\n   \n``` cpp\nconst long long p1=469762049ll,p2=998244353ll,p3=1004535809ll;\nvoid NTT(long long *a,int f,int n,int mod){\n  for(int i=0;i<n;i++)if(i<R[i])swap(a[i],a[R[i]]);\n  for(register int i=1;i<n;i<<=1){\n    int gn=power(3,(mod-1)/(i<<1),mod);\n    for(register int j=0;j<n;j+=(i<<1)){\n      int g=1,x,y;\n      for(register int n=0;n<i;++n,g=1ll*g*gn%mod){\n        x=a[j+n],y=1ll*g*a[j+n+i]%mod;\n        a[j+n]=(x+y)%mod;a[j+n+i]=(x-y+mod)%mod;\n      }\n    }\n  }\n\tif(f==-1){\n    reverse(a+1,a+n);\n    int inv=power(n,mod-2,mod);\n    for(register int i=0;i<n;i++)a[i]=1ll*a[i]*inv%mod;\n  }\n}\nvoid merge_ntt(long long *a,long long *b,int n,int mod){\n  NTT(a,1,n,mod);NTT(b,1,n,mod);\n  for(register int i=0;i<=n;i++)a[i]=1ll*a[i]*b[i]%mod;\n}\nvoid mcpy(int d){\n  for(int i=0;i<=n;i++) ans[d][i]=lsa[i];\n  if(d==2) return;\n  memset(lsa,0,sizeof(lsa));memset(lsb,0,sizeof(lsb));\n  for(int i=0;i<=n;i++) lsa[i]=a[i];\n  for(int i=0;i<=m;i++) lsb[i]=b[i];\n}\nint ex_merge_NTT(long long *a,long long *b,int la,int lb,int p){\n\tn=la,m=lb;\n  for(int i=0;i<=la;i++) lsa[i]=a[i];\n  for(int i=0;i<=lb;i++) lsb[i]=b[i];\n\tint L=0;for(m+=n,n=1;n<=m;n<<=1)L++;\n  for(register int i=0;i<n;i++)\n  R[i]=(R[i>>1]>>1)|((i&1)<<(L-1));\n  merge_ntt(lsa,lsb,n,p1);mcpy(0);\n  merge_ntt(lsa,lsb,n,p2);mcpy(1);\n  merge_ntt(lsa,lsb,n,p3);mcpy(2);\n  NTT(ans[0],-1,n,p1);\n  NTT(ans[1],-1,n,p2);\n  NTT(ans[2],-1,n,p3);\n  for(int i=0;i<=la+lb;i++){\n    long long x=((mul(1ll*ans[0][i]*p2%(p1*p2),power(p2%p1,p1-2,p1),(p1*p2)))+(mul(1ll*ans[1][i]*p1%(p1*p2),power(p1%p2,p2-2,p2),(p1*p2))))%(p1*p2);\n    long long y=((((ans[2][i]-x)%p3+p3)%p3)*power((p1*p2)%p3,p3-2,p3))%p3;\n    a[i]=(1ll*(y%p)*((p1*p2)%p)%p+x%p)%p;\n  }\n  return la+lb;\n}\n\n```","source":"_posts/由CRT合并引入的各种扩展求余和同余问题.md","raw":"---\ntitle: '由CRT合并引入的各种扩展求余和同余问题'\ndate: 2018-12-30 12:32:09\ncategories:\n- 学习笔记\ntags:\n- OI\n- 数学\n- CRT\n- exCRT\n- Lucas\n- exLucas\n- Euler\n- exEuler\n- BSGS\n- exBSGS\n- NTT\n- 任意模数NTT\n\nmathjax: true\n---\n\n$\\ \\ \\ \\ \\ \\ \\ \\,$扩展中国剩余定理的引入，使得在模特定素数意义下的算法得以扩张为模任意数，这大大方便了我们对于算法的运用。\n\n<!-- more -->\n\n## 大前提[【中国剩余定理】](/2018/12/29/扩展中国剩余定理/)\n\n## 扩展卢卡斯定理（exLucas）\n  ### 卢卡斯定理（Lucas）\n  \n  $\\ \\ \\ \\ \\ \\ \\,$卢卡斯定理是快速求组合数余的算法，其中最基本的卢卡斯定理只能解决模数为素数的情况，复杂度是$O(p)$预处理阶乘和逆元，每次回答$O(\\log n)$。\n  \n  $\\ \\ \\ \\ \\ \\ \\,$当$n$或$m>p$，套用下面的公式递归处理：\n\n  $C_{n}^{m}\\equiv C_{\\left\\lfloor\\frac{n}{P}\\right\\rfloor}^{\\left\\lfloor\\frac{m}{P}\\right\\rfloor}\\times C_{n\\%P}^{m\\%P}({\\rm mod}\\ P)$\n\n  $\\ \\ \\ \\ \\ \\ \\,$当$n$或$m\\leq p$时，套用定义公式：\n  \n  $C_{n}^{m}=\\frac{n!}{m!(n-m)!}({\\rm mod}\\ P)$\n  \n  $\\ \\ \\ \\ \\ \\ \\,$那么当模数不为素数的情况下，我们使用中国剩余定理（CRT）合并。\n  \n  - 将$P$分解质因数：\n$P=\\prod_{i=1}^rp_i^{c_i}$\n    \n  - 得到同余方程：\n$\\begin{cases}x\\equiv C_{n}^{m}\\ \\ ({\\rm mod}\\ p_1^{c_1})\\\\x\\equiv C_{n}^{m}\\ \\ ({\\rm mod}\\ p_2^{c_2})\\\\x\\equiv C_{n}^{m}\\ \\ ({\\rm mod}\\ p_3^{c_3})\\\\\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\cdots\\\\x\\equiv C_{n}^{m}\\ \\ ({\\rm mod}\\ p_r^{c_r})\\end{cases}$\n    \n$\\ \\ \\ \\ \\ \\ \\,$显然可以很方便的用中国剩余定理（CRT）求出$x$的值，现在我们的问题是如何快速求出$C_{n}^{m}\\% p_i^{c_i}$的值。\n  \n  $\\ \\ \\ \\ \\ \\ \\,$先忘记卢卡斯定理吧，这里并用不到它。\n  \n  $\\ \\ \\ \\ \\ \\ \\,$观察组合数的定义式：\n  \n  $C_{n}^{m}=\\frac{n!}{m!(n-m)!}=\\frac{\\prod_{i=1}^ni}{\\prod_{i=1}^mi\\prod_{i=1}^{n-m}i}$\n  \n  $\\ \\ \\ \\ \\ \\ \\,$现在的问题是如何快速求出$\\prod_{i=1}^ni\\ (\\% p^{c})$的值。\n  \n  $\\ \\ \\ \\ \\ \\ \\,$我们开始拆开它：\n  \n  $\\prod_{i=1}^ni\\ (\\% p^{c})$\n  \n  $\\prod_{i=1,p|i}^ni\\prod_{i=1,p\\nmid i}^ni\\ (\\% p^{c})$\n  \n  $\\prod_{i=1}^{\\left\\lfloor\\frac{n}{p}\\right\\rfloor}ip\\prod_{i=1,p\\nmid i}^ni\\ (\\% p^{c})$\n  \n  ${\\left\\lfloor\\frac{n}{p}\\right\\rfloor}!\\cdot p\\prod_{i=1,p\\nmid i}^ni\\ (\\% p^{c})$\n  \n  $\\ \\ \\ \\ \\ \\ \\,$前面那一块阶乘我们递归处理，后面那一块嘛，我们可以发现他是有循环节的，而且长度最多为$p^{c}$，所以暴力算出循环节然后快速幂咯，至于中间那个$p$，我们最后再计算要方便不少。\n  \n  $\\ \\ \\ \\ \\ \\ \\,$现在阶乘倒是处理完了，我们带回定义式，发现还需要求个逆元。这个还是扩展欧几里得来吧，然后我们发现还有很多$p$没有乘，需要统计一下里面乘$p$的次数再快速幂乘回去。\n  \n  $\\ \\ \\ \\ \\ \\ \\,$说了这么多，终于有下面的模板了，复杂度大约在$O(P\\log P)$左右：\n  \n``` cpp\nlong long inv(long long a,long long p){\n  long long x,y;exgcd(a,p,x,y);\n  return (x+p)%p==0?p:(x+p)%p;\n}\nlong long fac(long long n,long long p,long long pc){\n  if(n==1||n==0)return 1;\n  long long res=1;\n  for(long long i=2;i<=pc;i++)if(i%p)res=(res*i)%pc;\n  res=power(res,n/pc,pc);\n  for(long long i=2;i<=n%pc;i++)if(i%p)res=(res*i)%pc;\n  return (res*fac(n/p,p,pc))%pc;\n}\nlong long C(long long n,long long m,long long p,long long pc,long long Mod){\n  if(n<m)return 0;\n  long long a=fac(n,p,pc),b=fac(m,p,pc),c=fac(n-m,p,pc);\n  long long k=0;\n  for(long long i=n;i;i/=p)k+=i/p;\n  for(long long i=m;i;i/=p)k-=i/p;\n  for(long long i=n-m;i;i/=p)k-=i/p;\n  long long res=a*inv(b,pc)%pc*inv(c,pc)%pc*power(p,k,pc)%pc;\n}\nlong long exLucas(long long n,long long m,long long Mod){\n  long long res=0,P=Mod;\n  for(long long i=2;i<=P;i++)\n    if(P%i==0){\n      long long pc=1;\n      while(P%i==0)P/=i,pc*=i;\n      res=(res+C(n,m,i,pc,Mod)*(Mod/pc)%Mod*inv(Mod/pc,pc)%Mod)%Mod;\n    }\n  return res;\n}\n\n```\n\n### [【P4720 【模板】扩展卢卡斯】](https://www.luogu.org/problemnew/show/P4720)\n  $\\ \\ \\ \\ \\ \\ \\,$既然是模板题，就不多废话了：\n  \n``` cpp\n#include<algorithm>\n#include<iostream>\n#include<cstdlib>\n#include<cstring>\n#include<cctype>\n#include<cstdio>\n#include<vector>\n#include<string>\n#include<queue>\n#include<stack>\n#include<cmath>\n#include<map>\n#include<set>\nusing namespace std;\nconst int inf=0x7fffffff;\nconst double eps=1e-10;\nconst double pi=acos(-1.0);\n//char buf[1<<15],*S=buf,*T=buf;\n//char getch(){return S==T&&(T=(S=buf)+fread(buf,1,1<<15,stdin),S==T)?0:*S++;}\ninline long long read(){\n    long long x=0,f=1;char ch;ch=getchar();\n    while(ch<'0'||ch>'9'){if(ch=='-') f=0;ch=getchar();}\n    while(ch>='0'&&ch<='9'){x=(x<<1)+(x<<3)+(ch&15);ch=getchar();}\n    if(f)return x;else return -x;\n}\nlong long power(long long a,long long b,long long c){\n  long long ans=1;a=a%c;\n  for(;b;b>>=1,a=(a*a)%c)if(b&1)ans=(ans*a)%c;\n  return ans;\n}\nvoid exgcd(long long a,long long b,long long &x,long long &y){\n  if(!b){x=1ll;y=0ll;return;}\n  exgcd(b,a%b,y,x);y-=x*(a/b);\n}\nlong long inv(long long a,long long p){\n  long long x,y;exgcd(a,p,x,y);\n  return (x+p)%p==0?p:(x+p)%p;\n}\nlong long fac(long long n,long long p,long long pc){\n  if(n==1||n==0)return 1;\n  long long res=1;\n  for(long long i=2;i<=pc;i++)if(i%p)res=(res*i)%pc;\n  res=power(res,n/pc,pc);\n  for(long long i=2;i<=n%pc;i++)if(i%p)res=(res*i)%pc;\n  return (res*fac(n/p,p,pc))%pc;\n}\nlong long C(long long n,long long m,long long p,long long pc,long long Mod){\n  if(n<m)return 0;\n  long long a=fac(n,p,pc),b=fac(m,p,pc),c=fac(n-m,p,pc);\n  long long k=0;\n  for(long long i=n;i;i/=p)k+=i/p;\n  for(long long i=m;i;i/=p)k-=i/p;\n  for(long long i=n-m;i;i/=p)k-=i/p;\n  return (a*inv(b,pc)%pc*inv(c,pc)%pc*power(p,k,pc)%pc)*(Mod/pc)%Mod*inv(Mod/pc,pc)%Mod;\n}\nlong long exLucas(long long n,long long m,long long Mod){\n  long long res=0,P=Mod;\n  for(long long i=2;i<=P;i++)\n    if(P%i==0){\n      long long pc=1;\n      while(P%i==0)P/=i,pc*=i;\n      res=(res+C(n,m,i,pc,Mod))%Mod;\n    }\n  return res;\n}\nint main()\n{\n  long long n=read(),m=read(),P=read();\n  printf(\"%lld\\n\",exLucas(n,m,P));\n  return 0;\n}\n\n```\n\n## 扩展欧拉算法（exEuler）\n\n  ### 欧拉算法（Euler）\n\n$\\ \\ \\ \\ \\ \\,$欧拉算法是快速求$a^b\\%P$的值的算法，其核心是欧拉定理：\n\n$\\ \\ \\ \\ \\ \\,$当$a$,$P$互质时,有 $a^{\\varphi(P)}\\equiv1({\\rm mod}\\ P)$\n\n$\\ \\ \\ \\ \\ \\,$那么就有，欧拉算法：$a^b\\%P=a^{b\\%{\\varphi(P)}}\\%P$\n\n$\\ \\ \\ \\ \\ \\,$当模数不为素数的情况下，我们依然使用中国剩余定理（CRT）合并。\n  \n  - 将$P$分解质因数：\n$P=\\prod_{i=1}^rp_i^{c_i}$\n    \n  - 得到同余方程：\n$\\begin{cases}x\\equiv a^b\\ \\ ({\\rm mod}\\ p_1^{c_1})\\\\x\\equiv a^b\\ \\ ({\\rm mod}\\ p_2^{c_2})\\\\x\\equiv a^b\\ \\ ({\\rm mod}\\ p_3^{c_3})\\\\\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\cdots\\\\x\\equiv a^b\\ \\ ({\\rm mod}\\ p_r^{c_r})\\end{cases}$\n  \n  $\\ \\ \\ \\ \\ \\ \\,$好吧其实这个结论挺简单的，证明比较麻烦，所以我们就开心地记结论吧，[证明在这里哦](https://blog.csdn.net/synapse7/article/details/19610361)。\n  \n  $a^b\\%P=\\begin{cases}a^{b\\%{\\varphi(P)}}\\%P, & {[\\gcd(a,P)=1]}\\\\a^{b\\%{\\varphi(P)}+\\varphi(P)}\\%P, & {[\\gcd(a,P)\\neq 1,b>\\varphi(P)]}\\\\a^b\\%P, & {[\\gcd(a,P)\\neq 1,b\\leq\\varphi(P)]}\\end{cases}$\n\n``` cpp\nint Euler_Power(int a,int b,int n){\n  if(n==1)return 0;\n  if(gcd(a,n)==1)return power(a,b%phi[n],n);\n  if(b>phi[n])return power(a,b%phi[n]+phi[n],n)%n;\n  if(b<=phi[n])return power(a,b,n);\n}\n```\n\n### [【P4139 上帝与集合的正确用法】](https://www.luogu.org/problemnew/show/P4139)\n  $\\ \\ \\ \\ \\ \\ \\,$这道题是只用了欧拉算法呢，我们不断递归过去，一定会遇到指数为$1$的时候，退出就行了：\n  \n``` cpp\n#include<algorithm>\n#include<iostream>\n#include<cstdlib>\n#include<cstring>\n#include<cctype>\n#include<cstdio>\n#include<vector>\n#include<string>\n#include<queue>\n#include<stack>\n#include<cmath>\n#include<map>\n#include<set>\nusing namespace std;\nconst int inf=0x7fffffff;\nconst double eps=1e-10;\nconst double pi=acos(-1.0);\n//char buf[1<<15],*S=buf,*T=buf;\n//char getch(){return S==T&&(T=(S=buf)+fread(buf,1,1<<15,stdin),S==T)?0:*S++;}\ninline int read(){\n  int x=0,f=1;char ch;ch=getchar();\n  while(ch<'0'||ch>'9'){if(ch=='-') f=0;ch=getchar();}\n  while(ch>='0'&&ch<='9'){x=(x<<1)+(x<<3)+(ch&15);ch=getchar();}\n  if(f)return x;else return -x;\n}\nconst int N=1e7+10;\nint phi[N];\nvoid phi_table(int n){\n  for(int i=2;i<=n;i++)phi[i]=0;\n  phi[1]=1;\n  for(int i=2;i<=n;i++)if(!phi[i])\n  for(int j=i;j<=n;j+=i){\n    if(!phi[j])phi[j]=j;\n    phi[j]=phi[j]/i*(i-1);\n  }\n}\nint gcd(int a,int b){return b?gcd(b,a%b):a;}\nlong long power(long long a,long long b,long long mod){\n  long long ans=1ll;\n  while(b){\n    if(b&1)ans=(1ll*ans*a)%mod;\n    a=(1ll*a*a)%mod;b>>=1;\n  }\n  return ans;\n}\nint solve(int mod){\n  if(mod==1)return 0;\n  return power(2,solve(phi[mod])+phi[mod],mod);\n}\nint main()\n{\n  phi_table(N-10);\n  int T=read();\n  while(T--){\n    int mod=read();\n    printf(\"%d\\n\",solve(mod));\n  }\n  return 0;\n}\n\n```\n\n## 扩展大步小步算法（exBSGS）\n\n  ### 大步小步算法（BSGS）\n    \n$\\ \\ \\ \\ \\ \\ \\,$大步小步算法，是求解指数方程同余最小自然数解的算法，其中必须保证模数与$a$互质,形如:\n    \n$a^x\\equiv b\\ \\ ({\\rm mod}\\ P)$\n    \n$\\ \\ \\ \\ \\ \\ \\,$其实想法还是挺简单的，因为$p$是素数，所以我们可以知道解 $x<P$，那么我们$\\sqrt P$ 分块。\n    \n$\\ \\ \\ \\ \\ \\ \\,$我们不妨假设我们的答案$x=k\\sqrt P+l$，显然 $l<\\sqrt P$，$k<\\sqrt P$：\n    \n$a^x\\equiv b\\ \\ ({\\rm mod}\\ P)$\n    \n$a^{k\\sqrt p+l}\\equiv b\\ \\ ({\\rm mod}\\ P)$\n$(a^{\\sqrt p})^{k}a^l\\equiv b\\ \\ ({\\rm mod}\\ P)$\n    \n$\\left(a^{\\sqrt p}\\right)^{k}\\equiv \\left(a^l\\right)^{-1}b\\ \\ ({\\rm mod}\\ P)$\n    \n$\\left(a^{\\sqrt p}\\right)^{k}\\equiv a^{-l}b\\ \\ ({\\rm mod}\\ P)$\n    \n$\\ \\ \\ \\ \\ \\ \\,$那么我们枚举一个 $k$,就可以确定那个唯一的 $l$了,前提是我们要把所有$a^{-l}b\\ \\ ({\\rm mod}\\ P)$预处理出来，当然了，这不是问题，我们可以用$\\rm map$存一下，复杂度$O(\\sqrt P)$：\n\n    \n  ``` cpp\n  long long BSGS(long long a,long long b,long long p){\n    map<int,int>hash;hash.clear();b%=p;\n    int t=(int)sqrt(p)+1;\n    for(int j=0;j<t;j++){\n      int val=(int)(b*power(a,j,p)%p);\n      hash[val]=j;\n    }\n    a=power(a,t,p);\n    if(a==0){\n  \t  if(b==0)return 1;\n      else return -1;\n    }\n    for(int i=0;i<=t;i++){\n      int val=power(a,i,p);\n      int j=hash.find(val)==hash.end()?-1:hash[val];\n      if(j>=0&&i*t-j>=0)return i*t-j;\n    }\n    return -1;\n  }\n\n  ```\n  \n  $\\ \\ \\ \\ \\ \\ \\,$那么当模数与$a$不互质的情况下，我们依然使用中国剩余定理（CRT）合并。\n    \n  $\\ \\ \\ \\ \\ \\ \\,$由扩展欧拉定理可以得到，当$\\gcd (a,P)\\nmid b$并且$b\\neq1$的时候，方程是无解的，我们先把他判掉。\n  \n  $\\ \\ \\ \\ \\ \\ \\,$首先我们的想法是，如何一步一步把它化简成模数与$a$互质，再BSGS就行了：\n    \n  $a^x\\equiv b\\ \\ ({\\rm mod}\\ P)$\n  \n  $\\frac{a^x}{\\gcd (a,P)} \\equiv \\frac{b}{\\gcd (a,P)}\\ \\ ({\\rm mod}\\ \\frac{P}{\\gcd (a,P)})$\n  \n  ${a^{x-1}} \\frac{a}{\\gcd (a,P)}\\equiv \\frac{b}{\\gcd (a,P)}\\ \\ ({\\rm mod}\\ \\frac{P}{\\gcd (a,P)})$\n  \n  ${a^{x-1}} \\equiv \\frac{b}{a}\\ \\ ({\\rm mod}\\ \\frac{P}{\\gcd (a,P)})$\n  \n  $\\ \\ \\ \\ \\ \\ \\,$如此递归下去，化简成模数与$a$互质，再BSGS，返回值记住加上递归层数：~~（- 然而并没有用到CRT啊，它是怎么混进来的？？- ex嘛，一样的）~~\n  \n``` cpp\nlong long exBSGS(long long a,long long b,long long p){\n\tif(p==1)return 0;a%=p,b%=p;\n\tif(b==1)return 0;\n  if(a==0){\n  \tif(b==0)return 1;\n    else return -1;\n  }\n\tint k=0,d=1;\n  for(int g=gcd(a,p);g!=1;g=gcd(a,p)){\n    if(b%g) return -1;\n    p/=g;b/=g;d=d*(a/g)%p;k++;\n    if(d==b) return k;\n  }\n  a%=p;\n\tmap<int,int>hash;hash.clear();\n\tint t=(int)sqrt(p)+1;\n  for(int j=0;j<t;j++){\n    int val=(int)(b*power(a,j,p)%p);\n    hash[val]=j;\n  }\n  a=power(a,t,p);\n  for(int i=1;i<=t;i++){\n    int val=d*power(a,i,p)%p;\n    int j=hash.find(val)==hash.end()?-1:hash[val];\n    if(j>=0&&i*t-j+k>=0)return i*t-j+k;\n  }\n  return -1;\n}\n```\n### [【P4195 【模板】exBSGS/Spoj3105 Mod】](https://www.luogu.org/problemnew/show/P4195)\n  $\\ \\ \\ \\ \\ \\ \\,$模板题，不废话：\n  \n``` cpp\n#include<algorithm>\n#include<iostream>\n#include<cstdlib>\n#include<cstring>\n#include<cctype>\n#include<cstdio>\n#include<vector>\n#include<string>\n#include<queue>\n#include<stack>\n#include<cmath>\n#include<map>\n#include<set>\nusing namespace std;\nconst int inf=0x7fffffff;\nconst double eps=1e-10;\nconst double pi=acos(-1.0);\n//char buf[1<<15],*S=buf,*T=buf;\n//char getch(){return S==T&&(T=(S=buf)+fread(buf,1,1<<15,stdin),S==T)?0:*S++;}\ninline int read(){\n\tint x=0,f=1;char ch;ch=getchar();\n\twhile(ch<'0'||ch>'9'){if(ch=='-') f=0;ch=getchar();}\n\twhile(ch>='0'&&ch<='9'){x=(x<<1)+(x<<3)+(ch&15);ch=getchar();}\n\tif(f)return x;else return -x;\n}\nint gcd(int a,int b){return b?gcd(b,a%b):a;}\nint power(int a,int b,int mod){\n\tint ans=1ll;\n\tfor(;b;a=1ll*a*a%mod,b>>=1)\n\tif(b&1)ans=1ll*ans*a%mod;\n\treturn ans;\n}\nconst int mod=100208;\nstruct HaHashsh{\n\tint head[mod],p;\n\tstruct ss{int v;int w,last;}G[100000];\n\tvoid clear(){memset(head,0,sizeof(head));p=0;}\n\tint find(int a){\n\t\tint A=a%mod;\n\t\tfor(int i=head[A];i;i=G[i].last)\n\t\tif(G[i].v==a)return G[i].w;\n\t\treturn -1;\n\t}\n\tvoid insert(int a,int b){\n\t\tint A=a%mod;\n\t\tG[++p]=(ss){a,b,head[A]};head[A]=p;\n\t}\n}hash;\nint exBSGS(int a,int b,int c){\n\tif(c==1)return 0;\n\ta%=c,b%=c;\n\tif(b==1)return 0;\n\tif(a==0)return (b==0)?1:-1;\n\tint k=0,d=1;\n\tfor(int g=gcd(a,c);g^1;g=gcd(a,c)){\n\t\tif(b%g)return -1;\n\t\tc/=g;b/=g;d=1ll*d*(a/g)%c;k++;\n\t\tif(d==b)return k;\n\t}\n\ta%=c;\n\thash.clear();\n\tint t=(int)sqrt(c)+1;\n\tint val=b;\n\tfor(int j=0;j<t;j++)\n\thash.insert(val,j),val=1ll*val*a%c;\n\tval=a=power(a,t,c);val=1ll*d*val%c;\n\tfor(int i=1,j;i<=t;i++){\n\t\tj=hash.find(val);val=1ll*val*a%c;\n\t\tif((~j)&&1ll*i*t-j+k>=0)return 1ll*i*t-j+k;\n\t}\n\treturn -1;\n}\nint a,b,c,ans;\nint main()\n{\n\twhile(scanf(\"%d%d%d\",&a,&c,&b)==3&&(a||b||c))\n\tif(~(ans=exBSGS(a,b,c)))cout<<ans<<endl;\n\telse cout<<\"No Solution\"<<endl;\n\treturn 0;\n}\n\n```\n\n## 任意模数NTT\n\n  $\\ \\ \\ \\ \\ \\ \\,$在[【求多项式卷积的变换】](/2018/12/29/求多项式卷积的变换/)中我们知道，一般NTT只在模数为NTT模数的时候才合法。那么当模数为任意数的时候怎么办呢？\n  \n  **$\\ \\ \\ \\ \\ \\ \\,$ 一种解法，3模NTT**\n  \n  $\\ \\ \\ \\ \\ \\ \\,$假设在求卷积过后，我们的系数最大为 $A_{max}$，那么我们找若干个NTT模数，求一次NTT变换过后，我们对于这一项，可以得到一个同余方程组：\n  \n   $\\begin{cases}A_{max}\\equiv A_x\\ \\ ({\\rm mod}\\ p_1)\\\\A_{max}\\equiv A_x\\ \\ ({\\rm mod}\\ p_2)\\\\A_{max}\\equiv A_x\\ \\ ({\\rm mod}\\ p_3)\\\\\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\cdots\\\\A_{max}\\equiv A_x\\ \\ ({\\rm mod}\\ p_r)\\end{cases}$\n   \n   $\\ \\ \\ \\ \\ \\ \\,$显然，当$\\prod_{i-1}^rp_r\\geq P$的时候，可以解出$A_{max}$的具体值。这个时候用CRT合并，再模$P$就出来了。\n   \n   $\\ \\ \\ \\ \\ \\ \\,$下面还是给出模板，这里取的NTT模数为$469762049$，$998244353$，$1004535809$，他们的原根都是 $3$：\n   \n``` cpp\nconst long long p1=469762049ll,p2=998244353ll,p3=1004535809ll;\nvoid NTT(long long *a,int f,int n,int mod){\n  for(int i=0;i<n;i++)if(i<R[i])swap(a[i],a[R[i]]);\n  for(register int i=1;i<n;i<<=1){\n    int gn=power(3,(mod-1)/(i<<1),mod);\n    for(register int j=0;j<n;j+=(i<<1)){\n      int g=1,x,y;\n      for(register int n=0;n<i;++n,g=1ll*g*gn%mod){\n        x=a[j+n],y=1ll*g*a[j+n+i]%mod;\n        a[j+n]=(x+y)%mod;a[j+n+i]=(x-y+mod)%mod;\n      }\n    }\n  }\n\tif(f==-1){\n    reverse(a+1,a+n);\n    int inv=power(n,mod-2,mod);\n    for(register int i=0;i<n;i++)a[i]=1ll*a[i]*inv%mod;\n  }\n}\nvoid merge_ntt(long long *a,long long *b,int n,int mod){\n  NTT(a,1,n,mod);NTT(b,1,n,mod);\n  for(register int i=0;i<=n;i++)a[i]=1ll*a[i]*b[i]%mod;\n}\nvoid mcpy(int d){\n  for(int i=0;i<=n;i++) ans[d][i]=lsa[i];\n  if(d==2) return;\n  memset(lsa,0,sizeof(lsa));memset(lsb,0,sizeof(lsb));\n  for(int i=0;i<=n;i++) lsa[i]=a[i];\n  for(int i=0;i<=m;i++) lsb[i]=b[i];\n}\nint ex_merge_NTT(long long *a,long long *b,int la,int lb,int p){\n\tn=la,m=lb;\n  for(int i=0;i<=la;i++) lsa[i]=a[i];\n  for(int i=0;i<=lb;i++) lsb[i]=b[i];\n\tint L=0;for(m+=n,n=1;n<=m;n<<=1)L++;\n  for(register int i=0;i<n;i++)\n  R[i]=(R[i>>1]>>1)|((i&1)<<(L-1));\n  merge_ntt(lsa,lsb,n,p1);mcpy(0);\n  merge_ntt(lsa,lsb,n,p2);mcpy(1);\n  merge_ntt(lsa,lsb,n,p3);mcpy(2);\n  NTT(ans[0],-1,n,p1);\n  NTT(ans[1],-1,n,p2);\n  NTT(ans[2],-1,n,p3);\n  for(int i=0;i<=la+lb;i++){\n    long long x=((mul(1ll*ans[0][i]*p2%(p1*p2),power(p2%p1,p1-2,p1),(p1*p2)))+(mul(1ll*ans[1][i]*p1%(p1*p2),power(p1%p2,p2-2,p2),(p1*p2))))%(p1*p2);\n    long long y=((((ans[2][i]-x)%p3+p3)%p3)*power((p1*p2)%p3,p3-2,p3))%p3;\n    a[i]=(1ll*(y%p)*((p1*p2)%p)%p+x%p)%p;\n  }\n  return la+lb;\n}\n\n```","slug":"由CRT合并引入的各种扩展求余和同余问题","published":1,"updated":"2022-02-14T05:37:32.540Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0i63w6h001zu4gb2u084osn","content":"<p>$\\ \\ \\ \\ \\ \\ \\ \\,$扩展中国剩余定理的引入，使得在模特定素数意义下的算法得以扩张为模任意数，这大大方便了我们对于算法的运用。</p>\n<span id=\"more\"></span>\n<h2 id=\"大前提【中国剩余定理】\"><a href=\"#大前提【中国剩余定理】\" class=\"headerlink\" title=\"大前提【中国剩余定理】\"></a>大前提<a href=\"/2018/12/29/扩展中国剩余定理/\">【中国剩余定理】</a></h2><h2 id=\"扩展卢卡斯定理（exLucas）\"><a href=\"#扩展卢卡斯定理（exLucas）\" class=\"headerlink\" title=\"扩展卢卡斯定理（exLucas）\"></a>扩展卢卡斯定理（exLucas）</h2><h3 id=\"卢卡斯定理（Lucas）\"><a href=\"#卢卡斯定理（Lucas）\" class=\"headerlink\" title=\"卢卡斯定理（Lucas）\"></a>卢卡斯定理（Lucas）</h3><p>  $\\ \\ \\ \\ \\ \\ \\,$卢卡斯定理是快速求组合数余的算法，其中最基本的卢卡斯定理只能解决模数为素数的情况，复杂度是$O(p)$预处理阶乘和逆元，每次回答$O(\\log n)$。</p>\n<p>  $\\ \\ \\ \\ \\ \\ \\,$当$n$或$m&gt;p$，套用下面的公式递归处理：</p>\n<p>  $C_{n}^{m}\\equiv C_{\\left\\lfloor\\frac{n}{P}\\right\\rfloor}^{\\left\\lfloor\\frac{m}{P}\\right\\rfloor}\\times C_{n\\%P}^{m\\%P}({\\rm mod}\\ P)$</p>\n<p>  $\\ \\ \\ \\ \\ \\ \\,$当$n$或$m\\leq p$时，套用定义公式：</p>\n<p>  $C_{n}^{m}=\\frac{n!}{m!(n-m)!}({\\rm mod}\\ P)$</p>\n<p>  $\\ \\ \\ \\ \\ \\ \\,$那么当模数不为素数的情况下，我们使用中国剩余定理（CRT）合并。</p>\n<ul>\n<li><p>将$P$分解质因数：<br>$P=\\prod_{i=1}^rp_i^{c_i}$</p>\n</li>\n<li><p>得到同余方程：<br>$\\begin{cases}x\\equiv C_{n}^{m}\\ \\ ({\\rm mod}\\ p_1^{c_1})\\\\x\\equiv C_{n}^{m}\\ \\ ({\\rm mod}\\ p_2^{c_2})\\\\x\\equiv C_{n}^{m}\\ \\ ({\\rm mod}\\ p_3^{c_3})\\\\\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\cdots\\\\x\\equiv C_{n}^{m}\\ \\ ({\\rm mod}\\ p_r^{c_r})\\end{cases}$</p>\n</li>\n</ul>\n<p>$\\ \\ \\ \\ \\ \\ \\,$显然可以很方便的用中国剩余定理（CRT）求出$x$的值，现在我们的问题是如何快速求出$C_{n}^{m}\\% p_i^{c_i}$的值。</p>\n<p>  $\\ \\ \\ \\ \\ \\ \\,$先忘记卢卡斯定理吧，这里并用不到它。</p>\n<p>  $\\ \\ \\ \\ \\ \\ \\,$观察组合数的定义式：</p>\n<p>  $C_{n}^{m}=\\frac{n!}{m!(n-m)!}=\\frac{\\prod_{i=1}^ni}{\\prod_{i=1}^mi\\prod_{i=1}^{n-m}i}$</p>\n<p>  $\\ \\ \\ \\ \\ \\ \\,$现在的问题是如何快速求出$\\prod_{i=1}^ni\\ (\\% p^{c})$的值。</p>\n<p>  $\\ \\ \\ \\ \\ \\ \\,$我们开始拆开它：</p>\n<p>  $\\prod_{i=1}^ni\\ (\\% p^{c})$</p>\n<p>  $\\prod_{i=1,p|i}^ni\\prod_{i=1,p\\nmid i}^ni\\ (\\% p^{c})$</p>\n<p>  $\\prod_{i=1}^{\\left\\lfloor\\frac{n}{p}\\right\\rfloor}ip\\prod_{i=1,p\\nmid i}^ni\\ (\\% p^{c})$</p>\n<p>  ${\\left\\lfloor\\frac{n}{p}\\right\\rfloor}!\\cdot p\\prod_{i=1,p\\nmid i}^ni\\ (\\% p^{c})$</p>\n<p>  $\\ \\ \\ \\ \\ \\ \\,$前面那一块阶乘我们递归处理，后面那一块嘛，我们可以发现他是有循环节的，而且长度最多为$p^{c}$，所以暴力算出循环节然后快速幂咯，至于中间那个$p$，我们最后再计算要方便不少。</p>\n<p>  $\\ \\ \\ \\ \\ \\ \\,$现在阶乘倒是处理完了，我们带回定义式，发现还需要求个逆元。这个还是扩展欧几里得来吧，然后我们发现还有很多$p$没有乘，需要统计一下里面乘$p$的次数再快速幂乘回去。</p>\n<p>  $\\ \\ \\ \\ \\ \\ \\,$说了这么多，终于有下面的模板了，复杂度大约在$O(P\\log P)$左右：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"title\">inv</span><span class=\"params\">(<span class=\"type\">long</span> <span class=\"type\">long</span> a,<span class=\"type\">long</span> <span class=\"type\">long</span> p)</span></span>&#123;</span><br><span class=\"line\">  <span class=\"type\">long</span> <span class=\"type\">long</span> x,y;<span class=\"built_in\">exgcd</span>(a,p,x,y);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (x+p)%p==<span class=\"number\">0</span>?p:(x+p)%p;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"title\">fac</span><span class=\"params\">(<span class=\"type\">long</span> <span class=\"type\">long</span> n,<span class=\"type\">long</span> <span class=\"type\">long</span> p,<span class=\"type\">long</span> <span class=\"type\">long</span> pc)</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(n==<span class=\"number\">1</span>||n==<span class=\"number\">0</span>)<span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"type\">long</span> <span class=\"type\">long</span> res=<span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">long</span> <span class=\"type\">long</span> i=<span class=\"number\">2</span>;i&lt;=pc;i++)<span class=\"keyword\">if</span>(i%p)res=(res*i)%pc;</span><br><span class=\"line\">  res=<span class=\"built_in\">power</span>(res,n/pc,pc);</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">long</span> <span class=\"type\">long</span> i=<span class=\"number\">2</span>;i&lt;=n%pc;i++)<span class=\"keyword\">if</span>(i%p)res=(res*i)%pc;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (res*<span class=\"built_in\">fac</span>(n/p,p,pc))%pc;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"title\">C</span><span class=\"params\">(<span class=\"type\">long</span> <span class=\"type\">long</span> n,<span class=\"type\">long</span> <span class=\"type\">long</span> m,<span class=\"type\">long</span> <span class=\"type\">long</span> p,<span class=\"type\">long</span> <span class=\"type\">long</span> pc,<span class=\"type\">long</span> <span class=\"type\">long</span> Mod)</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(n&lt;m)<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"type\">long</span> <span class=\"type\">long</span> a=<span class=\"built_in\">fac</span>(n,p,pc),b=<span class=\"built_in\">fac</span>(m,p,pc),c=<span class=\"built_in\">fac</span>(n-m,p,pc);</span><br><span class=\"line\">  <span class=\"type\">long</span> <span class=\"type\">long</span> k=<span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">long</span> <span class=\"type\">long</span> i=n;i;i/=p)k+=i/p;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">long</span> <span class=\"type\">long</span> i=m;i;i/=p)k-=i/p;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">long</span> <span class=\"type\">long</span> i=n-m;i;i/=p)k-=i/p;</span><br><span class=\"line\">  <span class=\"type\">long</span> <span class=\"type\">long</span> res=a*<span class=\"built_in\">inv</span>(b,pc)%pc*<span class=\"built_in\">inv</span>(c,pc)%pc*<span class=\"built_in\">power</span>(p,k,pc)%pc;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"title\">exLucas</span><span class=\"params\">(<span class=\"type\">long</span> <span class=\"type\">long</span> n,<span class=\"type\">long</span> <span class=\"type\">long</span> m,<span class=\"type\">long</span> <span class=\"type\">long</span> Mod)</span></span>&#123;</span><br><span class=\"line\">  <span class=\"type\">long</span> <span class=\"type\">long</span> res=<span class=\"number\">0</span>,P=Mod;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">long</span> <span class=\"type\">long</span> i=<span class=\"number\">2</span>;i&lt;=P;i++)</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(P%i==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">      <span class=\"type\">long</span> <span class=\"type\">long</span> pc=<span class=\"number\">1</span>;</span><br><span class=\"line\">      <span class=\"keyword\">while</span>(P%i==<span class=\"number\">0</span>)P/=i,pc*=i;</span><br><span class=\"line\">      res=(res+<span class=\"built_in\">C</span>(n,m,i,pc,Mod)*(Mod/pc)%Mod*<span class=\"built_in\">inv</span>(Mod/pc,pc)%Mod)%Mod;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"【P4720-【模板】扩展卢卡斯】\"><a href=\"#【P4720-【模板】扩展卢卡斯】\" class=\"headerlink\" title=\"【P4720 【模板】扩展卢卡斯】\"></a><a href=\"https://www.luogu.org/problemnew/show/P4720\">【P4720 【模板】扩展卢卡斯】</a></h3><p>  $\\ \\ \\ \\ \\ \\ \\,$既然是模板题，就不多废话了：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdlib&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cctype&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;stack&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;map&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;set&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> inf=<span class=\"number\">0x7fffffff</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">double</span> eps=<span class=\"number\">1e-10</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">double</span> pi=<span class=\"built_in\">acos</span>(<span class=\"number\">-1.0</span>);</span><br><span class=\"line\"><span class=\"comment\">//char buf[1&lt;&lt;15],*S=buf,*T=buf;</span></span><br><span class=\"line\"><span class=\"comment\">//char getch()&#123;return S==T&amp;&amp;(T=(S=buf)+fread(buf,1,1&lt;&lt;15,stdin),S==T)?0:*S++;&#125;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"title\">read</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">long</span> <span class=\"type\">long</span> x=<span class=\"number\">0</span>,f=<span class=\"number\">1</span>;<span class=\"type\">char</span> ch;ch=<span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(ch&lt;<span class=\"string\">&#x27;0&#x27;</span>||ch&gt;<span class=\"string\">&#x27;9&#x27;</span>)&#123;<span class=\"keyword\">if</span>(ch==<span class=\"string\">&#x27;-&#x27;</span>) f=<span class=\"number\">0</span>;ch=<span class=\"built_in\">getchar</span>();&#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(ch&gt;=<span class=\"string\">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class=\"string\">&#x27;9&#x27;</span>)&#123;x=(x&lt;&lt;<span class=\"number\">1</span>)+(x&lt;&lt;<span class=\"number\">3</span>)+(ch&amp;<span class=\"number\">15</span>);ch=<span class=\"built_in\">getchar</span>();&#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(f)<span class=\"keyword\">return</span> x;<span class=\"keyword\">else</span> <span class=\"keyword\">return</span> -x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"title\">power</span><span class=\"params\">(<span class=\"type\">long</span> <span class=\"type\">long</span> a,<span class=\"type\">long</span> <span class=\"type\">long</span> b,<span class=\"type\">long</span> <span class=\"type\">long</span> c)</span></span>&#123;</span><br><span class=\"line\">  <span class=\"type\">long</span> <span class=\"type\">long</span> ans=<span class=\"number\">1</span>;a=a%c;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(;b;b&gt;&gt;=<span class=\"number\">1</span>,a=(a*a)%c)<span class=\"keyword\">if</span>(b&amp;<span class=\"number\">1</span>)ans=(ans*a)%c;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">exgcd</span><span class=\"params\">(<span class=\"type\">long</span> <span class=\"type\">long</span> a,<span class=\"type\">long</span> <span class=\"type\">long</span> b,<span class=\"type\">long</span> <span class=\"type\">long</span> &amp;x,<span class=\"type\">long</span> <span class=\"type\">long</span> &amp;y)</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(!b)&#123;x=<span class=\"number\">1ll</span>;y=<span class=\"number\">0ll</span>;<span class=\"keyword\">return</span>;&#125;</span><br><span class=\"line\">  <span class=\"built_in\">exgcd</span>(b,a%b,y,x);y-=x*(a/b);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"title\">inv</span><span class=\"params\">(<span class=\"type\">long</span> <span class=\"type\">long</span> a,<span class=\"type\">long</span> <span class=\"type\">long</span> p)</span></span>&#123;</span><br><span class=\"line\">  <span class=\"type\">long</span> <span class=\"type\">long</span> x,y;<span class=\"built_in\">exgcd</span>(a,p,x,y);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (x+p)%p==<span class=\"number\">0</span>?p:(x+p)%p;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"title\">fac</span><span class=\"params\">(<span class=\"type\">long</span> <span class=\"type\">long</span> n,<span class=\"type\">long</span> <span class=\"type\">long</span> p,<span class=\"type\">long</span> <span class=\"type\">long</span> pc)</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(n==<span class=\"number\">1</span>||n==<span class=\"number\">0</span>)<span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"type\">long</span> <span class=\"type\">long</span> res=<span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">long</span> <span class=\"type\">long</span> i=<span class=\"number\">2</span>;i&lt;=pc;i++)<span class=\"keyword\">if</span>(i%p)res=(res*i)%pc;</span><br><span class=\"line\">  res=<span class=\"built_in\">power</span>(res,n/pc,pc);</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">long</span> <span class=\"type\">long</span> i=<span class=\"number\">2</span>;i&lt;=n%pc;i++)<span class=\"keyword\">if</span>(i%p)res=(res*i)%pc;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (res*<span class=\"built_in\">fac</span>(n/p,p,pc))%pc;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"title\">C</span><span class=\"params\">(<span class=\"type\">long</span> <span class=\"type\">long</span> n,<span class=\"type\">long</span> <span class=\"type\">long</span> m,<span class=\"type\">long</span> <span class=\"type\">long</span> p,<span class=\"type\">long</span> <span class=\"type\">long</span> pc,<span class=\"type\">long</span> <span class=\"type\">long</span> Mod)</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(n&lt;m)<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"type\">long</span> <span class=\"type\">long</span> a=<span class=\"built_in\">fac</span>(n,p,pc),b=<span class=\"built_in\">fac</span>(m,p,pc),c=<span class=\"built_in\">fac</span>(n-m,p,pc);</span><br><span class=\"line\">  <span class=\"type\">long</span> <span class=\"type\">long</span> k=<span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">long</span> <span class=\"type\">long</span> i=n;i;i/=p)k+=i/p;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">long</span> <span class=\"type\">long</span> i=m;i;i/=p)k-=i/p;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">long</span> <span class=\"type\">long</span> i=n-m;i;i/=p)k-=i/p;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (a*<span class=\"built_in\">inv</span>(b,pc)%pc*<span class=\"built_in\">inv</span>(c,pc)%pc*<span class=\"built_in\">power</span>(p,k,pc)%pc)*(Mod/pc)%Mod*<span class=\"built_in\">inv</span>(Mod/pc,pc)%Mod;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"title\">exLucas</span><span class=\"params\">(<span class=\"type\">long</span> <span class=\"type\">long</span> n,<span class=\"type\">long</span> <span class=\"type\">long</span> m,<span class=\"type\">long</span> <span class=\"type\">long</span> Mod)</span></span>&#123;</span><br><span class=\"line\">  <span class=\"type\">long</span> <span class=\"type\">long</span> res=<span class=\"number\">0</span>,P=Mod;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">long</span> <span class=\"type\">long</span> i=<span class=\"number\">2</span>;i&lt;=P;i++)</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(P%i==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">      <span class=\"type\">long</span> <span class=\"type\">long</span> pc=<span class=\"number\">1</span>;</span><br><span class=\"line\">      <span class=\"keyword\">while</span>(P%i==<span class=\"number\">0</span>)P/=i,pc*=i;</span><br><span class=\"line\">      res=(res+<span class=\"built_in\">C</span>(n,m,i,pc,Mod))%Mod;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"type\">long</span> <span class=\"type\">long</span> n=<span class=\"built_in\">read</span>(),m=<span class=\"built_in\">read</span>(),P=<span class=\"built_in\">read</span>();</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%lld\\n&quot;</span>,<span class=\"built_in\">exLucas</span>(n,m,P));</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"扩展欧拉算法（exEuler）\"><a href=\"#扩展欧拉算法（exEuler）\" class=\"headerlink\" title=\"扩展欧拉算法（exEuler）\"></a>扩展欧拉算法（exEuler）</h2><h3 id=\"欧拉算法（Euler）\"><a href=\"#欧拉算法（Euler）\" class=\"headerlink\" title=\"欧拉算法（Euler）\"></a>欧拉算法（Euler）</h3><p>$\\ \\ \\ \\ \\ \\,$欧拉算法是快速求$a^b\\%P$的值的算法，其核心是欧拉定理：</p>\n<p>$\\ \\ \\ \\ \\ \\,$当$a$,$P$互质时,有 $a^{\\varphi(P)}\\equiv1({\\rm mod}\\ P)$</p>\n<p>$\\ \\ \\ \\ \\ \\,$那么就有，欧拉算法：$a^b\\%P=a^{b\\%{\\varphi(P)}}\\%P$</p>\n<p>$\\ \\ \\ \\ \\ \\,$当模数不为素数的情况下，我们依然使用中国剩余定理（CRT）合并。</p>\n<ul>\n<li><p>将$P$分解质因数：<br>$P=\\prod_{i=1}^rp_i^{c_i}$</p>\n</li>\n<li><p>得到同余方程：<br>$\\begin{cases}x\\equiv a^b\\ \\ ({\\rm mod}\\ p_1^{c_1})\\\\x\\equiv a^b\\ \\ ({\\rm mod}\\ p_2^{c_2})\\\\x\\equiv a^b\\ \\ ({\\rm mod}\\ p_3^{c_3})\\\\\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\cdots\\\\x\\equiv a^b\\ \\ ({\\rm mod}\\ p_r^{c_r})\\end{cases}$</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$好吧其实这个结论挺简单的，证明比较麻烦，所以我们就开心地记结论吧，<a href=\"https://blog.csdn.net/synapse7/article/details/19610361\">证明在这里哦</a>。</p>\n<p>$a^b\\%P=\\begin{cases}a^{b\\%{\\varphi(P)}}\\%P, &amp; {[\\gcd(a,P)=1]}\\\\a^{b\\%{\\varphi(P)}+\\varphi(P)}\\%P, &amp; {[\\gcd(a,P)\\neq 1,b&gt;\\varphi(P)]}\\\\a^b\\%P, &amp; {[\\gcd(a,P)\\neq 1,b\\leq\\varphi(P)]}\\end{cases}$</p>\n</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">Euler_Power</span><span class=\"params\">(<span class=\"type\">int</span> a,<span class=\"type\">int</span> b,<span class=\"type\">int</span> n)</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(n==<span class=\"number\">1</span>)<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(<span class=\"built_in\">gcd</span>(a,n)==<span class=\"number\">1</span>)<span class=\"keyword\">return</span> <span class=\"built_in\">power</span>(a,b%phi[n],n);</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(b&gt;phi[n])<span class=\"keyword\">return</span> <span class=\"built_in\">power</span>(a,b%phi[n]+phi[n],n)%n;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(b&lt;=phi[n])<span class=\"keyword\">return</span> <span class=\"built_in\">power</span>(a,b,n);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"【P4139-上帝与集合的正确用法】\"><a href=\"#【P4139-上帝与集合的正确用法】\" class=\"headerlink\" title=\"【P4139 上帝与集合的正确用法】\"></a><a href=\"https://www.luogu.org/problemnew/show/P4139\">【P4139 上帝与集合的正确用法】</a></h3><p>  $\\ \\ \\ \\ \\ \\ \\,$这道题是只用了欧拉算法呢，我们不断递归过去，一定会遇到指数为$1$的时候，退出就行了：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdlib&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cctype&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;stack&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;map&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;set&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> inf=<span class=\"number\">0x7fffffff</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">double</span> eps=<span class=\"number\">1e-10</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">double</span> pi=<span class=\"built_in\">acos</span>(<span class=\"number\">-1.0</span>);</span><br><span class=\"line\"><span class=\"comment\">//char buf[1&lt;&lt;15],*S=buf,*T=buf;</span></span><br><span class=\"line\"><span class=\"comment\">//char getch()&#123;return S==T&amp;&amp;(T=(S=buf)+fread(buf,1,1&lt;&lt;15,stdin),S==T)?0:*S++;&#125;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">int</span> <span class=\"title\">read</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">  <span class=\"type\">int</span> x=<span class=\"number\">0</span>,f=<span class=\"number\">1</span>;<span class=\"type\">char</span> ch;ch=<span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(ch&lt;<span class=\"string\">&#x27;0&#x27;</span>||ch&gt;<span class=\"string\">&#x27;9&#x27;</span>)&#123;<span class=\"keyword\">if</span>(ch==<span class=\"string\">&#x27;-&#x27;</span>) f=<span class=\"number\">0</span>;ch=<span class=\"built_in\">getchar</span>();&#125;</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(ch&gt;=<span class=\"string\">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class=\"string\">&#x27;9&#x27;</span>)&#123;x=(x&lt;&lt;<span class=\"number\">1</span>)+(x&lt;&lt;<span class=\"number\">3</span>)+(ch&amp;<span class=\"number\">15</span>);ch=<span class=\"built_in\">getchar</span>();&#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(f)<span class=\"keyword\">return</span> x;<span class=\"keyword\">else</span> <span class=\"keyword\">return</span> -x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">1e7</span>+<span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> phi[N];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">phi_table</span><span class=\"params\">(<span class=\"type\">int</span> n)</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">2</span>;i&lt;=n;i++)phi[i]=<span class=\"number\">0</span>;</span><br><span class=\"line\">  phi[<span class=\"number\">1</span>]=<span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">2</span>;i&lt;=n;i++)<span class=\"keyword\">if</span>(!phi[i])</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=i;j&lt;=n;j+=i)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!phi[j])phi[j]=j;</span><br><span class=\"line\">    phi[j]=phi[j]/i*(i<span class=\"number\">-1</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">gcd</span><span class=\"params\">(<span class=\"type\">int</span> a,<span class=\"type\">int</span> b)</span></span>&#123;<span class=\"keyword\">return</span> b?<span class=\"built_in\">gcd</span>(b,a%b):a;&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"title\">power</span><span class=\"params\">(<span class=\"type\">long</span> <span class=\"type\">long</span> a,<span class=\"type\">long</span> <span class=\"type\">long</span> b,<span class=\"type\">long</span> <span class=\"type\">long</span> mod)</span></span>&#123;</span><br><span class=\"line\">  <span class=\"type\">long</span> <span class=\"type\">long</span> ans=<span class=\"number\">1ll</span>;</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(b)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(b&amp;<span class=\"number\">1</span>)ans=(<span class=\"number\">1ll</span>*ans*a)%mod;</span><br><span class=\"line\">    a=(<span class=\"number\">1ll</span>*a*a)%mod;b&gt;&gt;=<span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">solve</span><span class=\"params\">(<span class=\"type\">int</span> mod)</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(mod==<span class=\"number\">1</span>)<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">power</span>(<span class=\"number\">2</span>,<span class=\"built_in\">solve</span>(phi[mod])+phi[mod],mod);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">phi_table</span>(N<span class=\"number\">-10</span>);</span><br><span class=\"line\">  <span class=\"type\">int</span> T=<span class=\"built_in\">read</span>();</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(T--)&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> mod=<span class=\"built_in\">read</span>();</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>,<span class=\"built_in\">solve</span>(mod));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"扩展大步小步算法（exBSGS）\"><a href=\"#扩展大步小步算法（exBSGS）\" class=\"headerlink\" title=\"扩展大步小步算法（exBSGS）\"></a>扩展大步小步算法（exBSGS）</h2><h3 id=\"大步小步算法（BSGS）\"><a href=\"#大步小步算法（BSGS）\" class=\"headerlink\" title=\"大步小步算法（BSGS）\"></a>大步小步算法（BSGS）</h3><p>$\\ \\ \\ \\ \\ \\ \\,$大步小步算法，是求解指数方程同余最小自然数解的算法，其中必须保证模数与$a$互质,形如:</p>\n<p>$a^x\\equiv b\\ \\ ({\\rm mod}\\ P)$</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$其实想法还是挺简单的，因为$p$是素数，所以我们可以知道解 $x&lt;P$，那么我们$\\sqrt P$ 分块。</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$我们不妨假设我们的答案$x=k\\sqrt P+l$，显然 $l&lt;\\sqrt P$，$k&lt;\\sqrt P$：</p>\n<p>$a^x\\equiv b\\ \\ ({\\rm mod}\\ P)$</p>\n<p>$a^{k\\sqrt p+l}\\equiv b\\ \\ ({\\rm mod}\\ P)$<br>$(a^{\\sqrt p})^{k}a^l\\equiv b\\ \\ ({\\rm mod}\\ P)$</p>\n<p>$\\left(a^{\\sqrt p}\\right)^{k}\\equiv \\left(a^l\\right)^{-1}b\\ \\ ({\\rm mod}\\ P)$</p>\n<p>$\\left(a^{\\sqrt p}\\right)^{k}\\equiv a^{-l}b\\ \\ ({\\rm mod}\\ P)$</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$那么我们枚举一个 $k$,就可以确定那个唯一的 $l$了,前提是我们要把所有$a^{-l}b\\ \\ ({\\rm mod}\\ P)$预处理出来，当然了，这不是问题，我们可以用$\\rm map$存一下，复杂度$O(\\sqrt P)$：</p>\n  <figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"title\">BSGS</span><span class=\"params\">(<span class=\"type\">long</span> <span class=\"type\">long</span> a,<span class=\"type\">long</span> <span class=\"type\">long</span> b,<span class=\"type\">long</span> <span class=\"type\">long</span> p)</span></span>&#123;</span><br><span class=\"line\">  map&lt;<span class=\"type\">int</span>,<span class=\"type\">int</span>&gt;hash;hash.<span class=\"built_in\">clear</span>();b%=p;</span><br><span class=\"line\">  <span class=\"type\">int</span> t=(<span class=\"type\">int</span>)<span class=\"built_in\">sqrt</span>(p)+<span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">0</span>;j&lt;t;j++)&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> val=(<span class=\"type\">int</span>)(b*<span class=\"built_in\">power</span>(a,j,p)%p);</span><br><span class=\"line\">    hash[val]=j;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  a=<span class=\"built_in\">power</span>(a,t,p);</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(a==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">\t  <span class=\"keyword\">if</span>(b==<span class=\"number\">0</span>)<span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;=t;i++)&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> val=<span class=\"built_in\">power</span>(a,i,p);</span><br><span class=\"line\">    <span class=\"type\">int</span> j=hash.<span class=\"built_in\">find</span>(val)==hash.<span class=\"built_in\">end</span>()?<span class=\"number\">-1</span>:hash[val];</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(j&gt;=<span class=\"number\">0</span>&amp;&amp;i*t-j&gt;=<span class=\"number\">0</span>)<span class=\"keyword\">return</span> i*t-j;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>  $\\ \\ \\ \\ \\ \\ \\,$那么当模数与$a$不互质的情况下，我们依然使用中国剩余定理（CRT）合并。</p>\n<p>  $\\ \\ \\ \\ \\ \\ \\,$由扩展欧拉定理可以得到，当$\\gcd (a,P)\\nmid b$并且$b\\neq1$的时候，方程是无解的，我们先把他判掉。</p>\n<p>  $\\ \\ \\ \\ \\ \\ \\,$首先我们的想法是，如何一步一步把它化简成模数与$a$互质，再BSGS就行了：</p>\n<p>  $a^x\\equiv b\\ \\ ({\\rm mod}\\ P)$</p>\n<p>  $\\frac{a^x}{\\gcd (a,P)} \\equiv \\frac{b}{\\gcd (a,P)}\\ \\ ({\\rm mod}\\ \\frac{P}{\\gcd (a,P)})$</p>\n<p>  ${a^{x-1}} \\frac{a}{\\gcd (a,P)}\\equiv \\frac{b}{\\gcd (a,P)}\\ \\ ({\\rm mod}\\ \\frac{P}{\\gcd (a,P)})$</p>\n<p>  ${a^{x-1}} \\equiv \\frac{b}{a}\\ \\ ({\\rm mod}\\ \\frac{P}{\\gcd (a,P)})$</p>\n<p>  $\\ \\ \\ \\ \\ \\ \\,$如此递归下去，化简成模数与$a$互质，再BSGS，返回值记住加上递归层数：<del>（- 然而并没有用到CRT啊，它是怎么混进来的？？- ex嘛，一样的）</del></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"title\">exBSGS</span><span class=\"params\">(<span class=\"type\">long</span> <span class=\"type\">long</span> a,<span class=\"type\">long</span> <span class=\"type\">long</span> b,<span class=\"type\">long</span> <span class=\"type\">long</span> p)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(p==<span class=\"number\">1</span>)<span class=\"keyword\">return</span> <span class=\"number\">0</span>;a%=p,b%=p;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(b==<span class=\"number\">1</span>)<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(a==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">  \t<span class=\"keyword\">if</span>(b==<span class=\"number\">0</span>)<span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">\t<span class=\"type\">int</span> k=<span class=\"number\">0</span>,d=<span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> g=<span class=\"built_in\">gcd</span>(a,p);g!=<span class=\"number\">1</span>;g=<span class=\"built_in\">gcd</span>(a,p))&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(b%g) <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    p/=g;b/=g;d=d*(a/g)%p;k++;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(d==b) <span class=\"keyword\">return</span> k;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  a%=p;</span><br><span class=\"line\">\tmap&lt;<span class=\"type\">int</span>,<span class=\"type\">int</span>&gt;hash;hash.<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">\t<span class=\"type\">int</span> t=(<span class=\"type\">int</span>)<span class=\"built_in\">sqrt</span>(p)+<span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">0</span>;j&lt;t;j++)&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> val=(<span class=\"type\">int</span>)(b*<span class=\"built_in\">power</span>(a,j,p)%p);</span><br><span class=\"line\">    hash[val]=j;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  a=<span class=\"built_in\">power</span>(a,t,p);</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=t;i++)&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> val=d*<span class=\"built_in\">power</span>(a,i,p)%p;</span><br><span class=\"line\">    <span class=\"type\">int</span> j=hash.<span class=\"built_in\">find</span>(val)==hash.<span class=\"built_in\">end</span>()?<span class=\"number\">-1</span>:hash[val];</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(j&gt;=<span class=\"number\">0</span>&amp;&amp;i*t-j+k&gt;=<span class=\"number\">0</span>)<span class=\"keyword\">return</span> i*t-j+k;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"【P4195-【模板】exBSGS-Spoj3105-Mod】\"><a href=\"#【P4195-【模板】exBSGS-Spoj3105-Mod】\" class=\"headerlink\" title=\"【P4195 【模板】exBSGS/Spoj3105 Mod】\"></a><a href=\"https://www.luogu.org/problemnew/show/P4195\">【P4195 【模板】exBSGS/Spoj3105 Mod】</a></h3><p>  $\\ \\ \\ \\ \\ \\ \\,$模板题，不废话：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdlib&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cctype&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;stack&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;map&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;set&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> inf=<span class=\"number\">0x7fffffff</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">double</span> eps=<span class=\"number\">1e-10</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">double</span> pi=<span class=\"built_in\">acos</span>(<span class=\"number\">-1.0</span>);</span><br><span class=\"line\"><span class=\"comment\">//char buf[1&lt;&lt;15],*S=buf,*T=buf;</span></span><br><span class=\"line\"><span class=\"comment\">//char getch()&#123;return S==T&amp;&amp;(T=(S=buf)+fread(buf,1,1&lt;&lt;15,stdin),S==T)?0:*S++;&#125;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">int</span> <span class=\"title\">read</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> x=<span class=\"number\">0</span>,f=<span class=\"number\">1</span>;<span class=\"type\">char</span> ch;ch=<span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(ch&lt;<span class=\"string\">&#x27;0&#x27;</span>||ch&gt;<span class=\"string\">&#x27;9&#x27;</span>)&#123;<span class=\"keyword\">if</span>(ch==<span class=\"string\">&#x27;-&#x27;</span>) f=<span class=\"number\">0</span>;ch=<span class=\"built_in\">getchar</span>();&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(ch&gt;=<span class=\"string\">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class=\"string\">&#x27;9&#x27;</span>)&#123;x=(x&lt;&lt;<span class=\"number\">1</span>)+(x&lt;&lt;<span class=\"number\">3</span>)+(ch&amp;<span class=\"number\">15</span>);ch=<span class=\"built_in\">getchar</span>();&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(f)<span class=\"keyword\">return</span> x;<span class=\"keyword\">else</span> <span class=\"keyword\">return</span> -x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">gcd</span><span class=\"params\">(<span class=\"type\">int</span> a,<span class=\"type\">int</span> b)</span></span>&#123;<span class=\"keyword\">return</span> b?<span class=\"built_in\">gcd</span>(b,a%b):a;&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">power</span><span class=\"params\">(<span class=\"type\">int</span> a,<span class=\"type\">int</span> b,<span class=\"type\">int</span> mod)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> ans=<span class=\"number\">1ll</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(;b;a=<span class=\"number\">1ll</span>*a*a%mod,b&gt;&gt;=<span class=\"number\">1</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(b&amp;<span class=\"number\">1</span>)ans=<span class=\"number\">1ll</span>*ans*a%mod;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> mod=<span class=\"number\">100208</span>;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">HaHashsh</span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> head[mod],p;</span><br><span class=\"line\">\t<span class=\"keyword\">struct</span> <span class=\"title class_\">ss</span>&#123;<span class=\"type\">int</span> v;<span class=\"type\">int</span> w,last;&#125;G[<span class=\"number\">100000</span>];</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">clear</span><span class=\"params\">()</span></span>&#123;<span class=\"built_in\">memset</span>(head,<span class=\"number\">0</span>,<span class=\"built_in\">sizeof</span>(head));p=<span class=\"number\">0</span>;&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">find</span><span class=\"params\">(<span class=\"type\">int</span> a)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> A=a%mod;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=head[A];i;i=G[i].last)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(G[i].v==a)<span class=\"keyword\">return</span> G[i].w;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">insert</span><span class=\"params\">(<span class=\"type\">int</span> a,<span class=\"type\">int</span> b)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> A=a%mod;</span><br><span class=\"line\">\t\tG[++p]=(ss)&#123;a,b,head[A]&#125;;head[A]=p;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;hash;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">exBSGS</span><span class=\"params\">(<span class=\"type\">int</span> a,<span class=\"type\">int</span> b,<span class=\"type\">int</span> c)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(c==<span class=\"number\">1</span>)<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">\ta%=c,b%=c;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(b==<span class=\"number\">1</span>)<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(a==<span class=\"number\">0</span>)<span class=\"keyword\">return</span> (b==<span class=\"number\">0</span>)?<span class=\"number\">1</span>:<span class=\"number\">-1</span>;</span><br><span class=\"line\">\t<span class=\"type\">int</span> k=<span class=\"number\">0</span>,d=<span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> g=<span class=\"built_in\">gcd</span>(a,c);g^<span class=\"number\">1</span>;g=<span class=\"built_in\">gcd</span>(a,c))&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(b%g)<span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t\tc/=g;b/=g;d=<span class=\"number\">1ll</span>*d*(a/g)%c;k++;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(d==b)<span class=\"keyword\">return</span> k;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\ta%=c;</span><br><span class=\"line\">\thash.<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">\t<span class=\"type\">int</span> t=(<span class=\"type\">int</span>)<span class=\"built_in\">sqrt</span>(c)+<span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"type\">int</span> val=b;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">0</span>;j&lt;t;j++)</span><br><span class=\"line\">\thash.<span class=\"built_in\">insert</span>(val,j),val=<span class=\"number\">1ll</span>*val*a%c;</span><br><span class=\"line\">\tval=a=<span class=\"built_in\">power</span>(a,t,c);val=<span class=\"number\">1ll</span>*d*val%c;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>,j;i&lt;=t;i++)&#123;</span><br><span class=\"line\">\t\tj=hash.<span class=\"built_in\">find</span>(val);val=<span class=\"number\">1ll</span>*val*a%c;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>((~j)&amp;&amp;<span class=\"number\">1ll</span>*i*t-j+k&gt;=<span class=\"number\">0</span>)<span class=\"keyword\">return</span> <span class=\"number\">1ll</span>*i*t-j+k;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> a,b,c,ans;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d%d&quot;</span>,&amp;a,&amp;c,&amp;b)==<span class=\"number\">3</span>&amp;&amp;(a||b||c))</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(~(ans=<span class=\"built_in\">exBSGS</span>(a,b,c)))cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> cout&lt;&lt;<span class=\"string\">&quot;No Solution&quot;</span>&lt;&lt;endl;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"任意模数NTT\"><a href=\"#任意模数NTT\" class=\"headerlink\" title=\"任意模数NTT\"></a>任意模数NTT</h2><p>  $\\ \\ \\ \\ \\ \\ \\,$在<a href=\"/2018/12/29/求多项式卷积的变换/\">【求多项式卷积的变换】</a>中我们知道，一般NTT只在模数为NTT模数的时候才合法。那么当模数为任意数的时候怎么办呢？</p>\n<p>  <strong>$\\ \\ \\ \\ \\ \\ \\,$ 一种解法，3模NTT</strong></p>\n<p>  $\\ \\ \\ \\ \\ \\ \\,$假设在求卷积过后，我们的系数最大为 $A_{max}$，那么我们找若干个NTT模数，求一次NTT变换过后，我们对于这一项，可以得到一个同余方程组：</p>\n<p>   $\\begin{cases}A_{max}\\equiv A_x\\ \\ ({\\rm mod}\\ p_1)\\\\A_{max}\\equiv A_x\\ \\ ({\\rm mod}\\ p_2)\\\\A_{max}\\equiv A_x\\ \\ ({\\rm mod}\\ p_3)\\\\\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\cdots\\\\A_{max}\\equiv A_x\\ \\ ({\\rm mod}\\ p_r)\\end{cases}$</p>\n<p>   $\\ \\ \\ \\ \\ \\ \\,$显然，当$\\prod_{i-1}^rp_r\\geq P$的时候，可以解出$A_{max}$的具体值。这个时候用CRT合并，再模$P$就出来了。</p>\n<p>   $\\ \\ \\ \\ \\ \\ \\,$下面还是给出模板，这里取的NTT模数为$469762049$，$998244353$，$1004535809$，他们的原根都是 $3$：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">long</span> <span class=\"type\">long</span> p1=<span class=\"number\">469762049ll</span>,p2=<span class=\"number\">998244353ll</span>,p3=<span class=\"number\">1004535809ll</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">NTT</span><span class=\"params\">(<span class=\"type\">long</span> <span class=\"type\">long</span> *a,<span class=\"type\">int</span> f,<span class=\"type\">int</span> n,<span class=\"type\">int</span> mod)</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)<span class=\"keyword\">if</span>(i&lt;R[i])<span class=\"built_in\">swap</span>(a[i],a[R[i]]);</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">register</span> <span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;n;i&lt;&lt;=<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> gn=<span class=\"built_in\">power</span>(<span class=\"number\">3</span>,(mod<span class=\"number\">-1</span>)/(i&lt;&lt;<span class=\"number\">1</span>),mod);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">register</span> <span class=\"type\">int</span> j=<span class=\"number\">0</span>;j&lt;n;j+=(i&lt;&lt;<span class=\"number\">1</span>))&#123;</span><br><span class=\"line\">      <span class=\"type\">int</span> g=<span class=\"number\">1</span>,x,y;</span><br><span class=\"line\">      <span class=\"keyword\">for</span>(<span class=\"keyword\">register</span> <span class=\"type\">int</span> n=<span class=\"number\">0</span>;n&lt;i;++n,g=<span class=\"number\">1ll</span>*g*gn%mod)&#123;</span><br><span class=\"line\">        x=a[j+n],y=<span class=\"number\">1ll</span>*g*a[j+n+i]%mod;</span><br><span class=\"line\">        a[j+n]=(x+y)%mod;a[j+n+i]=(x-y+mod)%mod;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(f==<span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">    <span class=\"built_in\">reverse</span>(a+<span class=\"number\">1</span>,a+n);</span><br><span class=\"line\">    <span class=\"type\">int</span> inv=<span class=\"built_in\">power</span>(n,mod<span class=\"number\">-2</span>,mod);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">register</span> <span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)a[i]=<span class=\"number\">1ll</span>*a[i]*inv%mod;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">merge_ntt</span><span class=\"params\">(<span class=\"type\">long</span> <span class=\"type\">long</span> *a,<span class=\"type\">long</span> <span class=\"type\">long</span> *b,<span class=\"type\">int</span> n,<span class=\"type\">int</span> mod)</span></span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">NTT</span>(a,<span class=\"number\">1</span>,n,mod);<span class=\"built_in\">NTT</span>(b,<span class=\"number\">1</span>,n,mod);</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">register</span> <span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;=n;i++)a[i]=<span class=\"number\">1ll</span>*a[i]*b[i]%mod;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">mcpy</span><span class=\"params\">(<span class=\"type\">int</span> d)</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;=n;i++) ans[d][i]=lsa[i];</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(d==<span class=\"number\">2</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  <span class=\"built_in\">memset</span>(lsa,<span class=\"number\">0</span>,<span class=\"built_in\">sizeof</span>(lsa));<span class=\"built_in\">memset</span>(lsb,<span class=\"number\">0</span>,<span class=\"built_in\">sizeof</span>(lsb));</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;=n;i++) lsa[i]=a[i];</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;=m;i++) lsb[i]=b[i];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">ex_merge_NTT</span><span class=\"params\">(<span class=\"type\">long</span> <span class=\"type\">long</span> *a,<span class=\"type\">long</span> <span class=\"type\">long</span> *b,<span class=\"type\">int</span> la,<span class=\"type\">int</span> lb,<span class=\"type\">int</span> p)</span></span>&#123;</span><br><span class=\"line\">\tn=la,m=lb;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;=la;i++) lsa[i]=a[i];</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;=lb;i++) lsb[i]=b[i];</span><br><span class=\"line\">\t<span class=\"type\">int</span> L=<span class=\"number\">0</span>;<span class=\"keyword\">for</span>(m+=n,n=<span class=\"number\">1</span>;n&lt;=m;n&lt;&lt;=<span class=\"number\">1</span>)L++;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">register</span> <span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)</span><br><span class=\"line\">  R[i]=(R[i&gt;&gt;<span class=\"number\">1</span>]&gt;&gt;<span class=\"number\">1</span>)|((i&amp;<span class=\"number\">1</span>)&lt;&lt;(L<span class=\"number\">-1</span>));</span><br><span class=\"line\">  <span class=\"built_in\">merge_ntt</span>(lsa,lsb,n,p1);<span class=\"built_in\">mcpy</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">  <span class=\"built_in\">merge_ntt</span>(lsa,lsb,n,p2);<span class=\"built_in\">mcpy</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">  <span class=\"built_in\">merge_ntt</span>(lsa,lsb,n,p3);<span class=\"built_in\">mcpy</span>(<span class=\"number\">2</span>);</span><br><span class=\"line\">  <span class=\"built_in\">NTT</span>(ans[<span class=\"number\">0</span>],<span class=\"number\">-1</span>,n,p1);</span><br><span class=\"line\">  <span class=\"built_in\">NTT</span>(ans[<span class=\"number\">1</span>],<span class=\"number\">-1</span>,n,p2);</span><br><span class=\"line\">  <span class=\"built_in\">NTT</span>(ans[<span class=\"number\">2</span>],<span class=\"number\">-1</span>,n,p3);</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;=la+lb;i++)&#123;</span><br><span class=\"line\">    <span class=\"type\">long</span> <span class=\"type\">long</span> x=((<span class=\"built_in\">mul</span>(<span class=\"number\">1ll</span>*ans[<span class=\"number\">0</span>][i]*p2%(p1*p2),<span class=\"built_in\">power</span>(p2%p1,p1<span class=\"number\">-2</span>,p1),(p1*p2)))+(<span class=\"built_in\">mul</span>(<span class=\"number\">1ll</span>*ans[<span class=\"number\">1</span>][i]*p1%(p1*p2),<span class=\"built_in\">power</span>(p1%p2,p2<span class=\"number\">-2</span>,p2),(p1*p2))))%(p1*p2);</span><br><span class=\"line\">    <span class=\"type\">long</span> <span class=\"type\">long</span> y=((((ans[<span class=\"number\">2</span>][i]-x)%p3+p3)%p3)*<span class=\"built_in\">power</span>((p1*p2)%p3,p3<span class=\"number\">-2</span>,p3))%p3;</span><br><span class=\"line\">    a[i]=(<span class=\"number\">1ll</span>*(y%p)*((p1*p2)%p)%p+x%p)%p;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> la+lb;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p>$\\ \\ \\ \\ \\ \\ \\ \\,$扩展中国剩余定理的引入，使得在模特定素数意义下的算法得以扩张为模任意数，这大大方便了我们对于算法的运用。</p>","more":"<h2 id=\"大前提【中国剩余定理】\"><a href=\"#大前提【中国剩余定理】\" class=\"headerlink\" title=\"大前提【中国剩余定理】\"></a>大前提<a href=\"/2018/12/29/扩展中国剩余定理/\">【中国剩余定理】</a></h2><h2 id=\"扩展卢卡斯定理（exLucas）\"><a href=\"#扩展卢卡斯定理（exLucas）\" class=\"headerlink\" title=\"扩展卢卡斯定理（exLucas）\"></a>扩展卢卡斯定理（exLucas）</h2><h3 id=\"卢卡斯定理（Lucas）\"><a href=\"#卢卡斯定理（Lucas）\" class=\"headerlink\" title=\"卢卡斯定理（Lucas）\"></a>卢卡斯定理（Lucas）</h3><p>  $\\ \\ \\ \\ \\ \\ \\,$卢卡斯定理是快速求组合数余的算法，其中最基本的卢卡斯定理只能解决模数为素数的情况，复杂度是$O(p)$预处理阶乘和逆元，每次回答$O(\\log n)$。</p>\n<p>  $\\ \\ \\ \\ \\ \\ \\,$当$n$或$m&gt;p$，套用下面的公式递归处理：</p>\n<p>  $C_{n}^{m}\\equiv C_{\\left\\lfloor\\frac{n}{P}\\right\\rfloor}^{\\left\\lfloor\\frac{m}{P}\\right\\rfloor}\\times C_{n\\%P}^{m\\%P}({\\rm mod}\\ P)$</p>\n<p>  $\\ \\ \\ \\ \\ \\ \\,$当$n$或$m\\leq p$时，套用定义公式：</p>\n<p>  $C_{n}^{m}=\\frac{n!}{m!(n-m)!}({\\rm mod}\\ P)$</p>\n<p>  $\\ \\ \\ \\ \\ \\ \\,$那么当模数不为素数的情况下，我们使用中国剩余定理（CRT）合并。</p>\n<ul>\n<li><p>将$P$分解质因数：<br>$P=\\prod_{i=1}^rp_i^{c_i}$</p>\n</li>\n<li><p>得到同余方程：<br>$\\begin{cases}x\\equiv C_{n}^{m}\\ \\ ({\\rm mod}\\ p_1^{c_1})\\\\x\\equiv C_{n}^{m}\\ \\ ({\\rm mod}\\ p_2^{c_2})\\\\x\\equiv C_{n}^{m}\\ \\ ({\\rm mod}\\ p_3^{c_3})\\\\\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\cdots\\\\x\\equiv C_{n}^{m}\\ \\ ({\\rm mod}\\ p_r^{c_r})\\end{cases}$</p>\n</li>\n</ul>\n<p>$\\ \\ \\ \\ \\ \\ \\,$显然可以很方便的用中国剩余定理（CRT）求出$x$的值，现在我们的问题是如何快速求出$C_{n}^{m}\\% p_i^{c_i}$的值。</p>\n<p>  $\\ \\ \\ \\ \\ \\ \\,$先忘记卢卡斯定理吧，这里并用不到它。</p>\n<p>  $\\ \\ \\ \\ \\ \\ \\,$观察组合数的定义式：</p>\n<p>  $C_{n}^{m}=\\frac{n!}{m!(n-m)!}=\\frac{\\prod_{i=1}^ni}{\\prod_{i=1}^mi\\prod_{i=1}^{n-m}i}$</p>\n<p>  $\\ \\ \\ \\ \\ \\ \\,$现在的问题是如何快速求出$\\prod_{i=1}^ni\\ (\\% p^{c})$的值。</p>\n<p>  $\\ \\ \\ \\ \\ \\ \\,$我们开始拆开它：</p>\n<p>  $\\prod_{i=1}^ni\\ (\\% p^{c})$</p>\n<p>  $\\prod_{i=1,p|i}^ni\\prod_{i=1,p\\nmid i}^ni\\ (\\% p^{c})$</p>\n<p>  $\\prod_{i=1}^{\\left\\lfloor\\frac{n}{p}\\right\\rfloor}ip\\prod_{i=1,p\\nmid i}^ni\\ (\\% p^{c})$</p>\n<p>  ${\\left\\lfloor\\frac{n}{p}\\right\\rfloor}!\\cdot p\\prod_{i=1,p\\nmid i}^ni\\ (\\% p^{c})$</p>\n<p>  $\\ \\ \\ \\ \\ \\ \\,$前面那一块阶乘我们递归处理，后面那一块嘛，我们可以发现他是有循环节的，而且长度最多为$p^{c}$，所以暴力算出循环节然后快速幂咯，至于中间那个$p$，我们最后再计算要方便不少。</p>\n<p>  $\\ \\ \\ \\ \\ \\ \\,$现在阶乘倒是处理完了，我们带回定义式，发现还需要求个逆元。这个还是扩展欧几里得来吧，然后我们发现还有很多$p$没有乘，需要统计一下里面乘$p$的次数再快速幂乘回去。</p>\n<p>  $\\ \\ \\ \\ \\ \\ \\,$说了这么多，终于有下面的模板了，复杂度大约在$O(P\\log P)$左右：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"title\">inv</span><span class=\"params\">(<span class=\"type\">long</span> <span class=\"type\">long</span> a,<span class=\"type\">long</span> <span class=\"type\">long</span> p)</span></span>&#123;</span><br><span class=\"line\">  <span class=\"type\">long</span> <span class=\"type\">long</span> x,y;<span class=\"built_in\">exgcd</span>(a,p,x,y);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (x+p)%p==<span class=\"number\">0</span>?p:(x+p)%p;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"title\">fac</span><span class=\"params\">(<span class=\"type\">long</span> <span class=\"type\">long</span> n,<span class=\"type\">long</span> <span class=\"type\">long</span> p,<span class=\"type\">long</span> <span class=\"type\">long</span> pc)</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(n==<span class=\"number\">1</span>||n==<span class=\"number\">0</span>)<span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"type\">long</span> <span class=\"type\">long</span> res=<span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">long</span> <span class=\"type\">long</span> i=<span class=\"number\">2</span>;i&lt;=pc;i++)<span class=\"keyword\">if</span>(i%p)res=(res*i)%pc;</span><br><span class=\"line\">  res=<span class=\"built_in\">power</span>(res,n/pc,pc);</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">long</span> <span class=\"type\">long</span> i=<span class=\"number\">2</span>;i&lt;=n%pc;i++)<span class=\"keyword\">if</span>(i%p)res=(res*i)%pc;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (res*<span class=\"built_in\">fac</span>(n/p,p,pc))%pc;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"title\">C</span><span class=\"params\">(<span class=\"type\">long</span> <span class=\"type\">long</span> n,<span class=\"type\">long</span> <span class=\"type\">long</span> m,<span class=\"type\">long</span> <span class=\"type\">long</span> p,<span class=\"type\">long</span> <span class=\"type\">long</span> pc,<span class=\"type\">long</span> <span class=\"type\">long</span> Mod)</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(n&lt;m)<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"type\">long</span> <span class=\"type\">long</span> a=<span class=\"built_in\">fac</span>(n,p,pc),b=<span class=\"built_in\">fac</span>(m,p,pc),c=<span class=\"built_in\">fac</span>(n-m,p,pc);</span><br><span class=\"line\">  <span class=\"type\">long</span> <span class=\"type\">long</span> k=<span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">long</span> <span class=\"type\">long</span> i=n;i;i/=p)k+=i/p;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">long</span> <span class=\"type\">long</span> i=m;i;i/=p)k-=i/p;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">long</span> <span class=\"type\">long</span> i=n-m;i;i/=p)k-=i/p;</span><br><span class=\"line\">  <span class=\"type\">long</span> <span class=\"type\">long</span> res=a*<span class=\"built_in\">inv</span>(b,pc)%pc*<span class=\"built_in\">inv</span>(c,pc)%pc*<span class=\"built_in\">power</span>(p,k,pc)%pc;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"title\">exLucas</span><span class=\"params\">(<span class=\"type\">long</span> <span class=\"type\">long</span> n,<span class=\"type\">long</span> <span class=\"type\">long</span> m,<span class=\"type\">long</span> <span class=\"type\">long</span> Mod)</span></span>&#123;</span><br><span class=\"line\">  <span class=\"type\">long</span> <span class=\"type\">long</span> res=<span class=\"number\">0</span>,P=Mod;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">long</span> <span class=\"type\">long</span> i=<span class=\"number\">2</span>;i&lt;=P;i++)</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(P%i==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">      <span class=\"type\">long</span> <span class=\"type\">long</span> pc=<span class=\"number\">1</span>;</span><br><span class=\"line\">      <span class=\"keyword\">while</span>(P%i==<span class=\"number\">0</span>)P/=i,pc*=i;</span><br><span class=\"line\">      res=(res+<span class=\"built_in\">C</span>(n,m,i,pc,Mod)*(Mod/pc)%Mod*<span class=\"built_in\">inv</span>(Mod/pc,pc)%Mod)%Mod;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"【P4720-【模板】扩展卢卡斯】\"><a href=\"#【P4720-【模板】扩展卢卡斯】\" class=\"headerlink\" title=\"【P4720 【模板】扩展卢卡斯】\"></a><a href=\"https://www.luogu.org/problemnew/show/P4720\">【P4720 【模板】扩展卢卡斯】</a></h3><p>  $\\ \\ \\ \\ \\ \\ \\,$既然是模板题，就不多废话了：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdlib&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cctype&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;stack&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;map&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;set&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> inf=<span class=\"number\">0x7fffffff</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">double</span> eps=<span class=\"number\">1e-10</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">double</span> pi=<span class=\"built_in\">acos</span>(<span class=\"number\">-1.0</span>);</span><br><span class=\"line\"><span class=\"comment\">//char buf[1&lt;&lt;15],*S=buf,*T=buf;</span></span><br><span class=\"line\"><span class=\"comment\">//char getch()&#123;return S==T&amp;&amp;(T=(S=buf)+fread(buf,1,1&lt;&lt;15,stdin),S==T)?0:*S++;&#125;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"title\">read</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">long</span> <span class=\"type\">long</span> x=<span class=\"number\">0</span>,f=<span class=\"number\">1</span>;<span class=\"type\">char</span> ch;ch=<span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(ch&lt;<span class=\"string\">&#x27;0&#x27;</span>||ch&gt;<span class=\"string\">&#x27;9&#x27;</span>)&#123;<span class=\"keyword\">if</span>(ch==<span class=\"string\">&#x27;-&#x27;</span>) f=<span class=\"number\">0</span>;ch=<span class=\"built_in\">getchar</span>();&#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(ch&gt;=<span class=\"string\">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class=\"string\">&#x27;9&#x27;</span>)&#123;x=(x&lt;&lt;<span class=\"number\">1</span>)+(x&lt;&lt;<span class=\"number\">3</span>)+(ch&amp;<span class=\"number\">15</span>);ch=<span class=\"built_in\">getchar</span>();&#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(f)<span class=\"keyword\">return</span> x;<span class=\"keyword\">else</span> <span class=\"keyword\">return</span> -x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"title\">power</span><span class=\"params\">(<span class=\"type\">long</span> <span class=\"type\">long</span> a,<span class=\"type\">long</span> <span class=\"type\">long</span> b,<span class=\"type\">long</span> <span class=\"type\">long</span> c)</span></span>&#123;</span><br><span class=\"line\">  <span class=\"type\">long</span> <span class=\"type\">long</span> ans=<span class=\"number\">1</span>;a=a%c;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(;b;b&gt;&gt;=<span class=\"number\">1</span>,a=(a*a)%c)<span class=\"keyword\">if</span>(b&amp;<span class=\"number\">1</span>)ans=(ans*a)%c;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">exgcd</span><span class=\"params\">(<span class=\"type\">long</span> <span class=\"type\">long</span> a,<span class=\"type\">long</span> <span class=\"type\">long</span> b,<span class=\"type\">long</span> <span class=\"type\">long</span> &amp;x,<span class=\"type\">long</span> <span class=\"type\">long</span> &amp;y)</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(!b)&#123;x=<span class=\"number\">1ll</span>;y=<span class=\"number\">0ll</span>;<span class=\"keyword\">return</span>;&#125;</span><br><span class=\"line\">  <span class=\"built_in\">exgcd</span>(b,a%b,y,x);y-=x*(a/b);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"title\">inv</span><span class=\"params\">(<span class=\"type\">long</span> <span class=\"type\">long</span> a,<span class=\"type\">long</span> <span class=\"type\">long</span> p)</span></span>&#123;</span><br><span class=\"line\">  <span class=\"type\">long</span> <span class=\"type\">long</span> x,y;<span class=\"built_in\">exgcd</span>(a,p,x,y);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (x+p)%p==<span class=\"number\">0</span>?p:(x+p)%p;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"title\">fac</span><span class=\"params\">(<span class=\"type\">long</span> <span class=\"type\">long</span> n,<span class=\"type\">long</span> <span class=\"type\">long</span> p,<span class=\"type\">long</span> <span class=\"type\">long</span> pc)</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(n==<span class=\"number\">1</span>||n==<span class=\"number\">0</span>)<span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"type\">long</span> <span class=\"type\">long</span> res=<span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">long</span> <span class=\"type\">long</span> i=<span class=\"number\">2</span>;i&lt;=pc;i++)<span class=\"keyword\">if</span>(i%p)res=(res*i)%pc;</span><br><span class=\"line\">  res=<span class=\"built_in\">power</span>(res,n/pc,pc);</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">long</span> <span class=\"type\">long</span> i=<span class=\"number\">2</span>;i&lt;=n%pc;i++)<span class=\"keyword\">if</span>(i%p)res=(res*i)%pc;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (res*<span class=\"built_in\">fac</span>(n/p,p,pc))%pc;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"title\">C</span><span class=\"params\">(<span class=\"type\">long</span> <span class=\"type\">long</span> n,<span class=\"type\">long</span> <span class=\"type\">long</span> m,<span class=\"type\">long</span> <span class=\"type\">long</span> p,<span class=\"type\">long</span> <span class=\"type\">long</span> pc,<span class=\"type\">long</span> <span class=\"type\">long</span> Mod)</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(n&lt;m)<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"type\">long</span> <span class=\"type\">long</span> a=<span class=\"built_in\">fac</span>(n,p,pc),b=<span class=\"built_in\">fac</span>(m,p,pc),c=<span class=\"built_in\">fac</span>(n-m,p,pc);</span><br><span class=\"line\">  <span class=\"type\">long</span> <span class=\"type\">long</span> k=<span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">long</span> <span class=\"type\">long</span> i=n;i;i/=p)k+=i/p;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">long</span> <span class=\"type\">long</span> i=m;i;i/=p)k-=i/p;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">long</span> <span class=\"type\">long</span> i=n-m;i;i/=p)k-=i/p;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (a*<span class=\"built_in\">inv</span>(b,pc)%pc*<span class=\"built_in\">inv</span>(c,pc)%pc*<span class=\"built_in\">power</span>(p,k,pc)%pc)*(Mod/pc)%Mod*<span class=\"built_in\">inv</span>(Mod/pc,pc)%Mod;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"title\">exLucas</span><span class=\"params\">(<span class=\"type\">long</span> <span class=\"type\">long</span> n,<span class=\"type\">long</span> <span class=\"type\">long</span> m,<span class=\"type\">long</span> <span class=\"type\">long</span> Mod)</span></span>&#123;</span><br><span class=\"line\">  <span class=\"type\">long</span> <span class=\"type\">long</span> res=<span class=\"number\">0</span>,P=Mod;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">long</span> <span class=\"type\">long</span> i=<span class=\"number\">2</span>;i&lt;=P;i++)</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(P%i==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">      <span class=\"type\">long</span> <span class=\"type\">long</span> pc=<span class=\"number\">1</span>;</span><br><span class=\"line\">      <span class=\"keyword\">while</span>(P%i==<span class=\"number\">0</span>)P/=i,pc*=i;</span><br><span class=\"line\">      res=(res+<span class=\"built_in\">C</span>(n,m,i,pc,Mod))%Mod;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"type\">long</span> <span class=\"type\">long</span> n=<span class=\"built_in\">read</span>(),m=<span class=\"built_in\">read</span>(),P=<span class=\"built_in\">read</span>();</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%lld\\n&quot;</span>,<span class=\"built_in\">exLucas</span>(n,m,P));</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"扩展欧拉算法（exEuler）\"><a href=\"#扩展欧拉算法（exEuler）\" class=\"headerlink\" title=\"扩展欧拉算法（exEuler）\"></a>扩展欧拉算法（exEuler）</h2><h3 id=\"欧拉算法（Euler）\"><a href=\"#欧拉算法（Euler）\" class=\"headerlink\" title=\"欧拉算法（Euler）\"></a>欧拉算法（Euler）</h3><p>$\\ \\ \\ \\ \\ \\,$欧拉算法是快速求$a^b\\%P$的值的算法，其核心是欧拉定理：</p>\n<p>$\\ \\ \\ \\ \\ \\,$当$a$,$P$互质时,有 $a^{\\varphi(P)}\\equiv1({\\rm mod}\\ P)$</p>\n<p>$\\ \\ \\ \\ \\ \\,$那么就有，欧拉算法：$a^b\\%P=a^{b\\%{\\varphi(P)}}\\%P$</p>\n<p>$\\ \\ \\ \\ \\ \\,$当模数不为素数的情况下，我们依然使用中国剩余定理（CRT）合并。</p>\n<ul>\n<li><p>将$P$分解质因数：<br>$P=\\prod_{i=1}^rp_i^{c_i}$</p>\n</li>\n<li><p>得到同余方程：<br>$\\begin{cases}x\\equiv a^b\\ \\ ({\\rm mod}\\ p_1^{c_1})\\\\x\\equiv a^b\\ \\ ({\\rm mod}\\ p_2^{c_2})\\\\x\\equiv a^b\\ \\ ({\\rm mod}\\ p_3^{c_3})\\\\\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\cdots\\\\x\\equiv a^b\\ \\ ({\\rm mod}\\ p_r^{c_r})\\end{cases}$</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$好吧其实这个结论挺简单的，证明比较麻烦，所以我们就开心地记结论吧，<a href=\"https://blog.csdn.net/synapse7/article/details/19610361\">证明在这里哦</a>。</p>\n<p>$a^b\\%P=\\begin{cases}a^{b\\%{\\varphi(P)}}\\%P, &amp; {[\\gcd(a,P)=1]}\\\\a^{b\\%{\\varphi(P)}+\\varphi(P)}\\%P, &amp; {[\\gcd(a,P)\\neq 1,b&gt;\\varphi(P)]}\\\\a^b\\%P, &amp; {[\\gcd(a,P)\\neq 1,b\\leq\\varphi(P)]}\\end{cases}$</p>\n</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">Euler_Power</span><span class=\"params\">(<span class=\"type\">int</span> a,<span class=\"type\">int</span> b,<span class=\"type\">int</span> n)</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(n==<span class=\"number\">1</span>)<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(<span class=\"built_in\">gcd</span>(a,n)==<span class=\"number\">1</span>)<span class=\"keyword\">return</span> <span class=\"built_in\">power</span>(a,b%phi[n],n);</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(b&gt;phi[n])<span class=\"keyword\">return</span> <span class=\"built_in\">power</span>(a,b%phi[n]+phi[n],n)%n;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(b&lt;=phi[n])<span class=\"keyword\">return</span> <span class=\"built_in\">power</span>(a,b,n);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"【P4139-上帝与集合的正确用法】\"><a href=\"#【P4139-上帝与集合的正确用法】\" class=\"headerlink\" title=\"【P4139 上帝与集合的正确用法】\"></a><a href=\"https://www.luogu.org/problemnew/show/P4139\">【P4139 上帝与集合的正确用法】</a></h3><p>  $\\ \\ \\ \\ \\ \\ \\,$这道题是只用了欧拉算法呢，我们不断递归过去，一定会遇到指数为$1$的时候，退出就行了：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdlib&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cctype&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;stack&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;map&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;set&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> inf=<span class=\"number\">0x7fffffff</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">double</span> eps=<span class=\"number\">1e-10</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">double</span> pi=<span class=\"built_in\">acos</span>(<span class=\"number\">-1.0</span>);</span><br><span class=\"line\"><span class=\"comment\">//char buf[1&lt;&lt;15],*S=buf,*T=buf;</span></span><br><span class=\"line\"><span class=\"comment\">//char getch()&#123;return S==T&amp;&amp;(T=(S=buf)+fread(buf,1,1&lt;&lt;15,stdin),S==T)?0:*S++;&#125;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">int</span> <span class=\"title\">read</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">  <span class=\"type\">int</span> x=<span class=\"number\">0</span>,f=<span class=\"number\">1</span>;<span class=\"type\">char</span> ch;ch=<span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(ch&lt;<span class=\"string\">&#x27;0&#x27;</span>||ch&gt;<span class=\"string\">&#x27;9&#x27;</span>)&#123;<span class=\"keyword\">if</span>(ch==<span class=\"string\">&#x27;-&#x27;</span>) f=<span class=\"number\">0</span>;ch=<span class=\"built_in\">getchar</span>();&#125;</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(ch&gt;=<span class=\"string\">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class=\"string\">&#x27;9&#x27;</span>)&#123;x=(x&lt;&lt;<span class=\"number\">1</span>)+(x&lt;&lt;<span class=\"number\">3</span>)+(ch&amp;<span class=\"number\">15</span>);ch=<span class=\"built_in\">getchar</span>();&#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(f)<span class=\"keyword\">return</span> x;<span class=\"keyword\">else</span> <span class=\"keyword\">return</span> -x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">1e7</span>+<span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> phi[N];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">phi_table</span><span class=\"params\">(<span class=\"type\">int</span> n)</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">2</span>;i&lt;=n;i++)phi[i]=<span class=\"number\">0</span>;</span><br><span class=\"line\">  phi[<span class=\"number\">1</span>]=<span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">2</span>;i&lt;=n;i++)<span class=\"keyword\">if</span>(!phi[i])</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=i;j&lt;=n;j+=i)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!phi[j])phi[j]=j;</span><br><span class=\"line\">    phi[j]=phi[j]/i*(i<span class=\"number\">-1</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">gcd</span><span class=\"params\">(<span class=\"type\">int</span> a,<span class=\"type\">int</span> b)</span></span>&#123;<span class=\"keyword\">return</span> b?<span class=\"built_in\">gcd</span>(b,a%b):a;&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"title\">power</span><span class=\"params\">(<span class=\"type\">long</span> <span class=\"type\">long</span> a,<span class=\"type\">long</span> <span class=\"type\">long</span> b,<span class=\"type\">long</span> <span class=\"type\">long</span> mod)</span></span>&#123;</span><br><span class=\"line\">  <span class=\"type\">long</span> <span class=\"type\">long</span> ans=<span class=\"number\">1ll</span>;</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(b)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(b&amp;<span class=\"number\">1</span>)ans=(<span class=\"number\">1ll</span>*ans*a)%mod;</span><br><span class=\"line\">    a=(<span class=\"number\">1ll</span>*a*a)%mod;b&gt;&gt;=<span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">solve</span><span class=\"params\">(<span class=\"type\">int</span> mod)</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(mod==<span class=\"number\">1</span>)<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">power</span>(<span class=\"number\">2</span>,<span class=\"built_in\">solve</span>(phi[mod])+phi[mod],mod);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">phi_table</span>(N<span class=\"number\">-10</span>);</span><br><span class=\"line\">  <span class=\"type\">int</span> T=<span class=\"built_in\">read</span>();</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(T--)&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> mod=<span class=\"built_in\">read</span>();</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>,<span class=\"built_in\">solve</span>(mod));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"扩展大步小步算法（exBSGS）\"><a href=\"#扩展大步小步算法（exBSGS）\" class=\"headerlink\" title=\"扩展大步小步算法（exBSGS）\"></a>扩展大步小步算法（exBSGS）</h2><h3 id=\"大步小步算法（BSGS）\"><a href=\"#大步小步算法（BSGS）\" class=\"headerlink\" title=\"大步小步算法（BSGS）\"></a>大步小步算法（BSGS）</h3><p>$\\ \\ \\ \\ \\ \\ \\,$大步小步算法，是求解指数方程同余最小自然数解的算法，其中必须保证模数与$a$互质,形如:</p>\n<p>$a^x\\equiv b\\ \\ ({\\rm mod}\\ P)$</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$其实想法还是挺简单的，因为$p$是素数，所以我们可以知道解 $x&lt;P$，那么我们$\\sqrt P$ 分块。</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$我们不妨假设我们的答案$x=k\\sqrt P+l$，显然 $l&lt;\\sqrt P$，$k&lt;\\sqrt P$：</p>\n<p>$a^x\\equiv b\\ \\ ({\\rm mod}\\ P)$</p>\n<p>$a^{k\\sqrt p+l}\\equiv b\\ \\ ({\\rm mod}\\ P)$<br>$(a^{\\sqrt p})^{k}a^l\\equiv b\\ \\ ({\\rm mod}\\ P)$</p>\n<p>$\\left(a^{\\sqrt p}\\right)^{k}\\equiv \\left(a^l\\right)^{-1}b\\ \\ ({\\rm mod}\\ P)$</p>\n<p>$\\left(a^{\\sqrt p}\\right)^{k}\\equiv a^{-l}b\\ \\ ({\\rm mod}\\ P)$</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$那么我们枚举一个 $k$,就可以确定那个唯一的 $l$了,前提是我们要把所有$a^{-l}b\\ \\ ({\\rm mod}\\ P)$预处理出来，当然了，这不是问题，我们可以用$\\rm map$存一下，复杂度$O(\\sqrt P)$：</p>\n  <figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"title\">BSGS</span><span class=\"params\">(<span class=\"type\">long</span> <span class=\"type\">long</span> a,<span class=\"type\">long</span> <span class=\"type\">long</span> b,<span class=\"type\">long</span> <span class=\"type\">long</span> p)</span></span>&#123;</span><br><span class=\"line\">  map&lt;<span class=\"type\">int</span>,<span class=\"type\">int</span>&gt;hash;hash.<span class=\"built_in\">clear</span>();b%=p;</span><br><span class=\"line\">  <span class=\"type\">int</span> t=(<span class=\"type\">int</span>)<span class=\"built_in\">sqrt</span>(p)+<span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">0</span>;j&lt;t;j++)&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> val=(<span class=\"type\">int</span>)(b*<span class=\"built_in\">power</span>(a,j,p)%p);</span><br><span class=\"line\">    hash[val]=j;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  a=<span class=\"built_in\">power</span>(a,t,p);</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(a==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">\t  <span class=\"keyword\">if</span>(b==<span class=\"number\">0</span>)<span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;=t;i++)&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> val=<span class=\"built_in\">power</span>(a,i,p);</span><br><span class=\"line\">    <span class=\"type\">int</span> j=hash.<span class=\"built_in\">find</span>(val)==hash.<span class=\"built_in\">end</span>()?<span class=\"number\">-1</span>:hash[val];</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(j&gt;=<span class=\"number\">0</span>&amp;&amp;i*t-j&gt;=<span class=\"number\">0</span>)<span class=\"keyword\">return</span> i*t-j;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>  $\\ \\ \\ \\ \\ \\ \\,$那么当模数与$a$不互质的情况下，我们依然使用中国剩余定理（CRT）合并。</p>\n<p>  $\\ \\ \\ \\ \\ \\ \\,$由扩展欧拉定理可以得到，当$\\gcd (a,P)\\nmid b$并且$b\\neq1$的时候，方程是无解的，我们先把他判掉。</p>\n<p>  $\\ \\ \\ \\ \\ \\ \\,$首先我们的想法是，如何一步一步把它化简成模数与$a$互质，再BSGS就行了：</p>\n<p>  $a^x\\equiv b\\ \\ ({\\rm mod}\\ P)$</p>\n<p>  $\\frac{a^x}{\\gcd (a,P)} \\equiv \\frac{b}{\\gcd (a,P)}\\ \\ ({\\rm mod}\\ \\frac{P}{\\gcd (a,P)})$</p>\n<p>  ${a^{x-1}} \\frac{a}{\\gcd (a,P)}\\equiv \\frac{b}{\\gcd (a,P)}\\ \\ ({\\rm mod}\\ \\frac{P}{\\gcd (a,P)})$</p>\n<p>  ${a^{x-1}} \\equiv \\frac{b}{a}\\ \\ ({\\rm mod}\\ \\frac{P}{\\gcd (a,P)})$</p>\n<p>  $\\ \\ \\ \\ \\ \\ \\,$如此递归下去，化简成模数与$a$互质，再BSGS，返回值记住加上递归层数：<del>（- 然而并没有用到CRT啊，它是怎么混进来的？？- ex嘛，一样的）</del></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"title\">exBSGS</span><span class=\"params\">(<span class=\"type\">long</span> <span class=\"type\">long</span> a,<span class=\"type\">long</span> <span class=\"type\">long</span> b,<span class=\"type\">long</span> <span class=\"type\">long</span> p)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(p==<span class=\"number\">1</span>)<span class=\"keyword\">return</span> <span class=\"number\">0</span>;a%=p,b%=p;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(b==<span class=\"number\">1</span>)<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(a==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">  \t<span class=\"keyword\">if</span>(b==<span class=\"number\">0</span>)<span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">\t<span class=\"type\">int</span> k=<span class=\"number\">0</span>,d=<span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> g=<span class=\"built_in\">gcd</span>(a,p);g!=<span class=\"number\">1</span>;g=<span class=\"built_in\">gcd</span>(a,p))&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(b%g) <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    p/=g;b/=g;d=d*(a/g)%p;k++;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(d==b) <span class=\"keyword\">return</span> k;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  a%=p;</span><br><span class=\"line\">\tmap&lt;<span class=\"type\">int</span>,<span class=\"type\">int</span>&gt;hash;hash.<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">\t<span class=\"type\">int</span> t=(<span class=\"type\">int</span>)<span class=\"built_in\">sqrt</span>(p)+<span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">0</span>;j&lt;t;j++)&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> val=(<span class=\"type\">int</span>)(b*<span class=\"built_in\">power</span>(a,j,p)%p);</span><br><span class=\"line\">    hash[val]=j;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  a=<span class=\"built_in\">power</span>(a,t,p);</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=t;i++)&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> val=d*<span class=\"built_in\">power</span>(a,i,p)%p;</span><br><span class=\"line\">    <span class=\"type\">int</span> j=hash.<span class=\"built_in\">find</span>(val)==hash.<span class=\"built_in\">end</span>()?<span class=\"number\">-1</span>:hash[val];</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(j&gt;=<span class=\"number\">0</span>&amp;&amp;i*t-j+k&gt;=<span class=\"number\">0</span>)<span class=\"keyword\">return</span> i*t-j+k;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"【P4195-【模板】exBSGS-Spoj3105-Mod】\"><a href=\"#【P4195-【模板】exBSGS-Spoj3105-Mod】\" class=\"headerlink\" title=\"【P4195 【模板】exBSGS/Spoj3105 Mod】\"></a><a href=\"https://www.luogu.org/problemnew/show/P4195\">【P4195 【模板】exBSGS/Spoj3105 Mod】</a></h3><p>  $\\ \\ \\ \\ \\ \\ \\,$模板题，不废话：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdlib&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cctype&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;stack&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;map&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;set&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> inf=<span class=\"number\">0x7fffffff</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">double</span> eps=<span class=\"number\">1e-10</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">double</span> pi=<span class=\"built_in\">acos</span>(<span class=\"number\">-1.0</span>);</span><br><span class=\"line\"><span class=\"comment\">//char buf[1&lt;&lt;15],*S=buf,*T=buf;</span></span><br><span class=\"line\"><span class=\"comment\">//char getch()&#123;return S==T&amp;&amp;(T=(S=buf)+fread(buf,1,1&lt;&lt;15,stdin),S==T)?0:*S++;&#125;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">int</span> <span class=\"title\">read</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> x=<span class=\"number\">0</span>,f=<span class=\"number\">1</span>;<span class=\"type\">char</span> ch;ch=<span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(ch&lt;<span class=\"string\">&#x27;0&#x27;</span>||ch&gt;<span class=\"string\">&#x27;9&#x27;</span>)&#123;<span class=\"keyword\">if</span>(ch==<span class=\"string\">&#x27;-&#x27;</span>) f=<span class=\"number\">0</span>;ch=<span class=\"built_in\">getchar</span>();&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(ch&gt;=<span class=\"string\">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class=\"string\">&#x27;9&#x27;</span>)&#123;x=(x&lt;&lt;<span class=\"number\">1</span>)+(x&lt;&lt;<span class=\"number\">3</span>)+(ch&amp;<span class=\"number\">15</span>);ch=<span class=\"built_in\">getchar</span>();&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(f)<span class=\"keyword\">return</span> x;<span class=\"keyword\">else</span> <span class=\"keyword\">return</span> -x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">gcd</span><span class=\"params\">(<span class=\"type\">int</span> a,<span class=\"type\">int</span> b)</span></span>&#123;<span class=\"keyword\">return</span> b?<span class=\"built_in\">gcd</span>(b,a%b):a;&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">power</span><span class=\"params\">(<span class=\"type\">int</span> a,<span class=\"type\">int</span> b,<span class=\"type\">int</span> mod)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> ans=<span class=\"number\">1ll</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(;b;a=<span class=\"number\">1ll</span>*a*a%mod,b&gt;&gt;=<span class=\"number\">1</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(b&amp;<span class=\"number\">1</span>)ans=<span class=\"number\">1ll</span>*ans*a%mod;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> mod=<span class=\"number\">100208</span>;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">HaHashsh</span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> head[mod],p;</span><br><span class=\"line\">\t<span class=\"keyword\">struct</span> <span class=\"title class_\">ss</span>&#123;<span class=\"type\">int</span> v;<span class=\"type\">int</span> w,last;&#125;G[<span class=\"number\">100000</span>];</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">clear</span><span class=\"params\">()</span></span>&#123;<span class=\"built_in\">memset</span>(head,<span class=\"number\">0</span>,<span class=\"built_in\">sizeof</span>(head));p=<span class=\"number\">0</span>;&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">find</span><span class=\"params\">(<span class=\"type\">int</span> a)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> A=a%mod;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=head[A];i;i=G[i].last)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(G[i].v==a)<span class=\"keyword\">return</span> G[i].w;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">insert</span><span class=\"params\">(<span class=\"type\">int</span> a,<span class=\"type\">int</span> b)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> A=a%mod;</span><br><span class=\"line\">\t\tG[++p]=(ss)&#123;a,b,head[A]&#125;;head[A]=p;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;hash;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">exBSGS</span><span class=\"params\">(<span class=\"type\">int</span> a,<span class=\"type\">int</span> b,<span class=\"type\">int</span> c)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(c==<span class=\"number\">1</span>)<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">\ta%=c,b%=c;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(b==<span class=\"number\">1</span>)<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(a==<span class=\"number\">0</span>)<span class=\"keyword\">return</span> (b==<span class=\"number\">0</span>)?<span class=\"number\">1</span>:<span class=\"number\">-1</span>;</span><br><span class=\"line\">\t<span class=\"type\">int</span> k=<span class=\"number\">0</span>,d=<span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> g=<span class=\"built_in\">gcd</span>(a,c);g^<span class=\"number\">1</span>;g=<span class=\"built_in\">gcd</span>(a,c))&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(b%g)<span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t\tc/=g;b/=g;d=<span class=\"number\">1ll</span>*d*(a/g)%c;k++;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(d==b)<span class=\"keyword\">return</span> k;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\ta%=c;</span><br><span class=\"line\">\thash.<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">\t<span class=\"type\">int</span> t=(<span class=\"type\">int</span>)<span class=\"built_in\">sqrt</span>(c)+<span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"type\">int</span> val=b;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">0</span>;j&lt;t;j++)</span><br><span class=\"line\">\thash.<span class=\"built_in\">insert</span>(val,j),val=<span class=\"number\">1ll</span>*val*a%c;</span><br><span class=\"line\">\tval=a=<span class=\"built_in\">power</span>(a,t,c);val=<span class=\"number\">1ll</span>*d*val%c;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>,j;i&lt;=t;i++)&#123;</span><br><span class=\"line\">\t\tj=hash.<span class=\"built_in\">find</span>(val);val=<span class=\"number\">1ll</span>*val*a%c;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>((~j)&amp;&amp;<span class=\"number\">1ll</span>*i*t-j+k&gt;=<span class=\"number\">0</span>)<span class=\"keyword\">return</span> <span class=\"number\">1ll</span>*i*t-j+k;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> a,b,c,ans;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d%d&quot;</span>,&amp;a,&amp;c,&amp;b)==<span class=\"number\">3</span>&amp;&amp;(a||b||c))</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(~(ans=<span class=\"built_in\">exBSGS</span>(a,b,c)))cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> cout&lt;&lt;<span class=\"string\">&quot;No Solution&quot;</span>&lt;&lt;endl;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"任意模数NTT\"><a href=\"#任意模数NTT\" class=\"headerlink\" title=\"任意模数NTT\"></a>任意模数NTT</h2><p>  $\\ \\ \\ \\ \\ \\ \\,$在<a href=\"/2018/12/29/求多项式卷积的变换/\">【求多项式卷积的变换】</a>中我们知道，一般NTT只在模数为NTT模数的时候才合法。那么当模数为任意数的时候怎么办呢？</p>\n<p>  <strong>$\\ \\ \\ \\ \\ \\ \\,$ 一种解法，3模NTT</strong></p>\n<p>  $\\ \\ \\ \\ \\ \\ \\,$假设在求卷积过后，我们的系数最大为 $A_{max}$，那么我们找若干个NTT模数，求一次NTT变换过后，我们对于这一项，可以得到一个同余方程组：</p>\n<p>   $\\begin{cases}A_{max}\\equiv A_x\\ \\ ({\\rm mod}\\ p_1)\\\\A_{max}\\equiv A_x\\ \\ ({\\rm mod}\\ p_2)\\\\A_{max}\\equiv A_x\\ \\ ({\\rm mod}\\ p_3)\\\\\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\cdots\\\\A_{max}\\equiv A_x\\ \\ ({\\rm mod}\\ p_r)\\end{cases}$</p>\n<p>   $\\ \\ \\ \\ \\ \\ \\,$显然，当$\\prod_{i-1}^rp_r\\geq P$的时候，可以解出$A_{max}$的具体值。这个时候用CRT合并，再模$P$就出来了。</p>\n<p>   $\\ \\ \\ \\ \\ \\ \\,$下面还是给出模板，这里取的NTT模数为$469762049$，$998244353$，$1004535809$，他们的原根都是 $3$：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">long</span> <span class=\"type\">long</span> p1=<span class=\"number\">469762049ll</span>,p2=<span class=\"number\">998244353ll</span>,p3=<span class=\"number\">1004535809ll</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">NTT</span><span class=\"params\">(<span class=\"type\">long</span> <span class=\"type\">long</span> *a,<span class=\"type\">int</span> f,<span class=\"type\">int</span> n,<span class=\"type\">int</span> mod)</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)<span class=\"keyword\">if</span>(i&lt;R[i])<span class=\"built_in\">swap</span>(a[i],a[R[i]]);</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">register</span> <span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;n;i&lt;&lt;=<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> gn=<span class=\"built_in\">power</span>(<span class=\"number\">3</span>,(mod<span class=\"number\">-1</span>)/(i&lt;&lt;<span class=\"number\">1</span>),mod);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">register</span> <span class=\"type\">int</span> j=<span class=\"number\">0</span>;j&lt;n;j+=(i&lt;&lt;<span class=\"number\">1</span>))&#123;</span><br><span class=\"line\">      <span class=\"type\">int</span> g=<span class=\"number\">1</span>,x,y;</span><br><span class=\"line\">      <span class=\"keyword\">for</span>(<span class=\"keyword\">register</span> <span class=\"type\">int</span> n=<span class=\"number\">0</span>;n&lt;i;++n,g=<span class=\"number\">1ll</span>*g*gn%mod)&#123;</span><br><span class=\"line\">        x=a[j+n],y=<span class=\"number\">1ll</span>*g*a[j+n+i]%mod;</span><br><span class=\"line\">        a[j+n]=(x+y)%mod;a[j+n+i]=(x-y+mod)%mod;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(f==<span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">    <span class=\"built_in\">reverse</span>(a+<span class=\"number\">1</span>,a+n);</span><br><span class=\"line\">    <span class=\"type\">int</span> inv=<span class=\"built_in\">power</span>(n,mod<span class=\"number\">-2</span>,mod);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">register</span> <span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)a[i]=<span class=\"number\">1ll</span>*a[i]*inv%mod;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">merge_ntt</span><span class=\"params\">(<span class=\"type\">long</span> <span class=\"type\">long</span> *a,<span class=\"type\">long</span> <span class=\"type\">long</span> *b,<span class=\"type\">int</span> n,<span class=\"type\">int</span> mod)</span></span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">NTT</span>(a,<span class=\"number\">1</span>,n,mod);<span class=\"built_in\">NTT</span>(b,<span class=\"number\">1</span>,n,mod);</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">register</span> <span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;=n;i++)a[i]=<span class=\"number\">1ll</span>*a[i]*b[i]%mod;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">mcpy</span><span class=\"params\">(<span class=\"type\">int</span> d)</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;=n;i++) ans[d][i]=lsa[i];</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(d==<span class=\"number\">2</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  <span class=\"built_in\">memset</span>(lsa,<span class=\"number\">0</span>,<span class=\"built_in\">sizeof</span>(lsa));<span class=\"built_in\">memset</span>(lsb,<span class=\"number\">0</span>,<span class=\"built_in\">sizeof</span>(lsb));</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;=n;i++) lsa[i]=a[i];</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;=m;i++) lsb[i]=b[i];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">ex_merge_NTT</span><span class=\"params\">(<span class=\"type\">long</span> <span class=\"type\">long</span> *a,<span class=\"type\">long</span> <span class=\"type\">long</span> *b,<span class=\"type\">int</span> la,<span class=\"type\">int</span> lb,<span class=\"type\">int</span> p)</span></span>&#123;</span><br><span class=\"line\">\tn=la,m=lb;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;=la;i++) lsa[i]=a[i];</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;=lb;i++) lsb[i]=b[i];</span><br><span class=\"line\">\t<span class=\"type\">int</span> L=<span class=\"number\">0</span>;<span class=\"keyword\">for</span>(m+=n,n=<span class=\"number\">1</span>;n&lt;=m;n&lt;&lt;=<span class=\"number\">1</span>)L++;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">register</span> <span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)</span><br><span class=\"line\">  R[i]=(R[i&gt;&gt;<span class=\"number\">1</span>]&gt;&gt;<span class=\"number\">1</span>)|((i&amp;<span class=\"number\">1</span>)&lt;&lt;(L<span class=\"number\">-1</span>));</span><br><span class=\"line\">  <span class=\"built_in\">merge_ntt</span>(lsa,lsb,n,p1);<span class=\"built_in\">mcpy</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">  <span class=\"built_in\">merge_ntt</span>(lsa,lsb,n,p2);<span class=\"built_in\">mcpy</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">  <span class=\"built_in\">merge_ntt</span>(lsa,lsb,n,p3);<span class=\"built_in\">mcpy</span>(<span class=\"number\">2</span>);</span><br><span class=\"line\">  <span class=\"built_in\">NTT</span>(ans[<span class=\"number\">0</span>],<span class=\"number\">-1</span>,n,p1);</span><br><span class=\"line\">  <span class=\"built_in\">NTT</span>(ans[<span class=\"number\">1</span>],<span class=\"number\">-1</span>,n,p2);</span><br><span class=\"line\">  <span class=\"built_in\">NTT</span>(ans[<span class=\"number\">2</span>],<span class=\"number\">-1</span>,n,p3);</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;=la+lb;i++)&#123;</span><br><span class=\"line\">    <span class=\"type\">long</span> <span class=\"type\">long</span> x=((<span class=\"built_in\">mul</span>(<span class=\"number\">1ll</span>*ans[<span class=\"number\">0</span>][i]*p2%(p1*p2),<span class=\"built_in\">power</span>(p2%p1,p1<span class=\"number\">-2</span>,p1),(p1*p2)))+(<span class=\"built_in\">mul</span>(<span class=\"number\">1ll</span>*ans[<span class=\"number\">1</span>][i]*p1%(p1*p2),<span class=\"built_in\">power</span>(p1%p2,p2<span class=\"number\">-2</span>,p2),(p1*p2))))%(p1*p2);</span><br><span class=\"line\">    <span class=\"type\">long</span> <span class=\"type\">long</span> y=((((ans[<span class=\"number\">2</span>][i]-x)%p3+p3)%p3)*<span class=\"built_in\">power</span>((p1*p2)%p3,p3<span class=\"number\">-2</span>,p3))%p3;</span><br><span class=\"line\">    a[i]=(<span class=\"number\">1ll</span>*(y%p)*((p1*p2)%p)%p+x%p)%p;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> la+lb;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>"},{"title":"网络流，费用流和二分图匹配模板","date":"2018-12-31T11:41:36.000Z","mathjax":true,"_content":"\n$\\ \\ \\ \\ \\ \\ \\ \\,$网络流，费用流相关的复习笔记：\n\n<!-- more -->\n\n## 网络流\n\n### Dinic\n\n``` cpp\nint head[N],p=1,S,T,n,m;\nstruct ss{int v,last,rl;}G[M<<1];\nvoid add(int a,int b,int c){\n\tG[++p]=(ss){b,head[a],c};head[a]=p;\n\tG[++p]=(ss){a,head[b],0};head[b]=p;\n}\nint dis[N];\nint bfs(int S,int T){\n  memset(dis,0,sizeof(dis));\n  queue<int> Q;dis[S]=1;Q.push(S);\n  while(!Q.empty()){\n    int u=Q.front();Q.pop();\n    for(int i=head[u];i;i=G[i].last)\n    if(G[i].rl>0&&dis[G[i].v]==0){\n      dis[G[i].v]=dis[u]+1;\n      Q.push(G[i].v);\n    }\n  }\n  if(dis[T]!=0)return 1;\n  else return 0;\n}\nint Augment(int a,int S,int T,int mi){\n  if(a==T)return mi;\n\tint flow=0;\n  for(int i=head[a];i;i=G[i].last)\n  if((dis[G[i].v]==dis[a]+1)&&(G[i].rl!=0)){\n    int ls=Augment(G[i].v,S,T,min(mi,G[i].rl));\n\t\tflow+=ls;mi-=ls;G[i].rl-=ls;G[i^1].rl+=ls;\n    if(!mi)return flow;\n  }\n  return flow;\n}\nint Dinic(int S,int T){\n\tint ans=0,ls;\n  while(bfs(S,T))ans+=Augment(S,S,T,inf);\n  return ans;\n}\n```\n\n### ISAP\n\n``` cpp\nint head[N],p=1,S,T,n,m;\nstruct ss{int v,last;int rl;}G[M<<1];\nvoid add(int a,int b,int c){\n\tG[++p]=(ss){b,head[a],c};head[a]=p;\n\tG[++p]=(ss){a,head[b],0};head[b]=p;\n}\nint dis[N],cur[N],num[N];\nvoid bfs(int T){\n\tmemset(dis,0,sizeof(dis));\n\tmemset(num,0,sizeof(num));\n\t++num[dis[T]=1];\n\tmemcpy(cur,head,sizeof(head));\n\tqueue<int> Q;Q.push(T);\n\twhile(!Q.empty()){\n\t\tint u=Q.front();Q.pop();\n\t\tfor(int i=head[u];i;i=G[i].last)if(!dis[G[i].v])\n\t\t{++num[dis[G[i].v]=dis[u]+1];Q.push(G[i].v);}\n\t}\n}\nint Augment(int a,int S,int T,int mi){\n\tif(a==T)return mi;\n\tint flow=0;\n\tfor(int i=cur[a];i;i=G[i].last)if(dis[G[i].v]==dis[a]-1){\n\t\tint ls=Augment(G[i].v,S,T,min(mi,G[i].rl));\n\t\tflow+=ls;mi-=ls;G[i].rl-=ls;G[i^1].rl+=ls;\n\t\tif(!mi)return flow;\n\t}\n\tif(!(--num[dis[a]]))dis[S]=n+1;\n\t++num[++dis[a]];cur[a]=head[a];\n\treturn flow;\n}\nint ISAP(int S,int T){\n\tbfs(T);\n\tint ret=Augment(S,S,T,inf);\n\twhile(dis[S]<=n)ret+=Augment(S,S,T,inf);\n\treturn ret;\n}\n```\n\n## 费用流（最小费用最大流）\n\n### ZKW\n\n``` cpp\nint head[N],p=1,S,T,n,m,k;\nstruct ss{int v,last;int rl,w;}G[M<<1];\nvoid add(int a,int b,int c,int d){\n\tG[++p]=(ss){b,head[a],c,d};head[a]=p;\n\tG[++p]=(ss){a,head[b],0,-d};head[b]=p;\n}\nqueue<int> Q;\nint dis[N],Mincost,Maxflow;\nbool used[N];\nbool vis[N];\nbool SPFA(int S,int T){\n\tfor(int i=0;i<N;i++)dis[i]=inf,vis[i]=0;\n\tdis[T]=0,vis[T]=1;\n\tQ.push(T);\n\twhile(!Q.empty()){\n\t\tint u=Q.front();Q.pop();vis[u]=0;\n\t\tfor(int i=head[u];i;i=G[i].last)\n\t\tif(G[i^1].rl>0&&dis[G[i].v]>dis[u]-G[i].w){\n\t\t\tdis[G[i].v]=dis[u]-G[i].w;\n\t\t\tif(!vis[G[i].v])\n\t\t\tQ.push(G[i].v),vis[G[i].v]=1;\n\t\t}\n\t}\n\treturn dis[S]<inf;\n}\nint Augment(int a,int S,int T,int mi){\n\tused[a]=1;\n\tif(a==T)return mi;\n  int flow=0;\n  for(int i=head[a];i;i=G[i].last)\n\tif(!used[G[i].v]&&G[i].rl&&dis[a]-G[i].w==dis[G[i].v]){\n\t  int ls=Augment(G[i].v,S,T,min(G[i].rl,mi));\n\t  Mincost+=ls*G[i].w,mi-=flow,G[i].rl-=ls,G[i^1].rl+=ls,flow+=ls;\n\t  if(!mi)return flow;\n  }\n  return flow;\n}\nvoid ZKW(int S,int T){\n\tMaxflow=Mincost=0;\n\twhile(SPFA(S,T)){\n\t\tused[T]=1;\n    while(used[T]){\n      memset(used,0,sizeof(used));\n      Maxflow+=Augment(S,S,T,inf);\n    }\n\t}\n}\n```\n\n## 二分图匹配\n\n### Hungary\n\n``` cpp\n\nbool used[N<<1];\nint n,m,e,ans;\nint head[N],p;\nstruct ss{int v,last;}G[N*N];\nvoid add(int a,int b)\n{G[++p].v=b;G[p].last=head[a];head[a]=p;}\nint match[N<<1];\nbool dfs(int u){\n\tfor(int i=head[u];i;i=G[i].last)if(!used[G[i].v]){\n\t\tused[G[i].v]=1;\n\t\tif(!match[G[i].v]||dfs(match[G[i].v]))\n\t\t{match[G[i].v]=u;return 1;}\n\t}\n\treturn 0;\n}\nint Hungary(int n){\n\tint ans=0;\n\tfor(int i=1;i<=n;i++){\n\t\tmemset(used,0,sizeof(used));\n\t\tif(dfs(i))ans++;\n\t}\n\treturn ans;\n}\n```\n\n### Kuhn Munkres（带权）\n\n``` cpp\nint head[N],p;\nstruct ss{int v,last,w;}G[N*N];\nvoid add(int a,int b,int c)\n{G[++p].v=b;G[p].last=head[a];G[p].w=c;head[a]=p;}\nbool usem[N<<1],usen[N<<1];\nint match[N<<1];\nint maxn[N<<1],maxm[N<<1];\nint slack[N<<1];\nbool dfs(int u){\n  usen[u]=1;\n  for(int i=head[u];i;i=G[i].last){\n    if(usem[G[i].v])continue;\n    int gap=maxn[u]+maxm[G[i].v]-G[i].w;\n    if(gap==0){\n      usem[G[i].v]=1;\n      if(match[G[i].v]==0||dfs(match[G[i].v]))\n\t\t\t{match[G[i].v]=u;return 1;}\n    } \n\t\telse slack[G[i].v]=min(slack[G[i].v],gap);\n  }\n  return 0;\n}\nint Kuhn_Munkres(int n){\n\tmemset(match,0,sizeof(match));\n\tmemset(maxm,0,sizeof(maxm));\n\tfor(int u=1;u<=n;u++){\n\t\tmaxn[u]=-inf;\n\t\tfor(int i=head[u];i;i=G[i].last)\n\t\tmaxn[u]=max(maxn[u],G[i].w);\n\t}\n\tfor(int i=1;i<=n;i++){\n\t\tfor(int j=1;j<=n;j++)slack[j]=inf;\n\t\twhile(1){\n\t\t\tmemset(usem,0,sizeof(usem));\n\t\t\tmemset(usen,0,sizeof(usen));\n\t\t\tif(dfs(i))break;\n\t\t\tint a=inf;\n      for(int j=1;j<=m;j++)\n      if(!usem[j])a=min(a,slack[j]);\n      for(int j=1;j<=n;j++)\n        if(usen[j])maxn[j]-=a;\n      for(int j=1;j<=m;j++)\n        if(usem[j])maxm[j]+=a;\n\t\t}\n\t}\n\tint res=0;\n  for(int u=1;u<=n;u++){\n\t\tfor(int i=head[u];i;i=G[i].last)\n\t\tif(match[G[i].v]==u)\n\t\tres+=G[i].w;\n\t}\n  return res;\n}\n```","source":"_posts/网络流-费用流和二分图匹配模板.md","raw":"---\ntitle: '网络流，费用流和二分图匹配模板'\ndate: 2018-12-31 19:41:36\ncategories:\n- 学习笔记\ntags:\n- OI\n- 图论\n- 网络流\n- 费用流\nmathjax: true\n---\n\n$\\ \\ \\ \\ \\ \\ \\ \\,$网络流，费用流相关的复习笔记：\n\n<!-- more -->\n\n## 网络流\n\n### Dinic\n\n``` cpp\nint head[N],p=1,S,T,n,m;\nstruct ss{int v,last,rl;}G[M<<1];\nvoid add(int a,int b,int c){\n\tG[++p]=(ss){b,head[a],c};head[a]=p;\n\tG[++p]=(ss){a,head[b],0};head[b]=p;\n}\nint dis[N];\nint bfs(int S,int T){\n  memset(dis,0,sizeof(dis));\n  queue<int> Q;dis[S]=1;Q.push(S);\n  while(!Q.empty()){\n    int u=Q.front();Q.pop();\n    for(int i=head[u];i;i=G[i].last)\n    if(G[i].rl>0&&dis[G[i].v]==0){\n      dis[G[i].v]=dis[u]+1;\n      Q.push(G[i].v);\n    }\n  }\n  if(dis[T]!=0)return 1;\n  else return 0;\n}\nint Augment(int a,int S,int T,int mi){\n  if(a==T)return mi;\n\tint flow=0;\n  for(int i=head[a];i;i=G[i].last)\n  if((dis[G[i].v]==dis[a]+1)&&(G[i].rl!=0)){\n    int ls=Augment(G[i].v,S,T,min(mi,G[i].rl));\n\t\tflow+=ls;mi-=ls;G[i].rl-=ls;G[i^1].rl+=ls;\n    if(!mi)return flow;\n  }\n  return flow;\n}\nint Dinic(int S,int T){\n\tint ans=0,ls;\n  while(bfs(S,T))ans+=Augment(S,S,T,inf);\n  return ans;\n}\n```\n\n### ISAP\n\n``` cpp\nint head[N],p=1,S,T,n,m;\nstruct ss{int v,last;int rl;}G[M<<1];\nvoid add(int a,int b,int c){\n\tG[++p]=(ss){b,head[a],c};head[a]=p;\n\tG[++p]=(ss){a,head[b],0};head[b]=p;\n}\nint dis[N],cur[N],num[N];\nvoid bfs(int T){\n\tmemset(dis,0,sizeof(dis));\n\tmemset(num,0,sizeof(num));\n\t++num[dis[T]=1];\n\tmemcpy(cur,head,sizeof(head));\n\tqueue<int> Q;Q.push(T);\n\twhile(!Q.empty()){\n\t\tint u=Q.front();Q.pop();\n\t\tfor(int i=head[u];i;i=G[i].last)if(!dis[G[i].v])\n\t\t{++num[dis[G[i].v]=dis[u]+1];Q.push(G[i].v);}\n\t}\n}\nint Augment(int a,int S,int T,int mi){\n\tif(a==T)return mi;\n\tint flow=0;\n\tfor(int i=cur[a];i;i=G[i].last)if(dis[G[i].v]==dis[a]-1){\n\t\tint ls=Augment(G[i].v,S,T,min(mi,G[i].rl));\n\t\tflow+=ls;mi-=ls;G[i].rl-=ls;G[i^1].rl+=ls;\n\t\tif(!mi)return flow;\n\t}\n\tif(!(--num[dis[a]]))dis[S]=n+1;\n\t++num[++dis[a]];cur[a]=head[a];\n\treturn flow;\n}\nint ISAP(int S,int T){\n\tbfs(T);\n\tint ret=Augment(S,S,T,inf);\n\twhile(dis[S]<=n)ret+=Augment(S,S,T,inf);\n\treturn ret;\n}\n```\n\n## 费用流（最小费用最大流）\n\n### ZKW\n\n``` cpp\nint head[N],p=1,S,T,n,m,k;\nstruct ss{int v,last;int rl,w;}G[M<<1];\nvoid add(int a,int b,int c,int d){\n\tG[++p]=(ss){b,head[a],c,d};head[a]=p;\n\tG[++p]=(ss){a,head[b],0,-d};head[b]=p;\n}\nqueue<int> Q;\nint dis[N],Mincost,Maxflow;\nbool used[N];\nbool vis[N];\nbool SPFA(int S,int T){\n\tfor(int i=0;i<N;i++)dis[i]=inf,vis[i]=0;\n\tdis[T]=0,vis[T]=1;\n\tQ.push(T);\n\twhile(!Q.empty()){\n\t\tint u=Q.front();Q.pop();vis[u]=0;\n\t\tfor(int i=head[u];i;i=G[i].last)\n\t\tif(G[i^1].rl>0&&dis[G[i].v]>dis[u]-G[i].w){\n\t\t\tdis[G[i].v]=dis[u]-G[i].w;\n\t\t\tif(!vis[G[i].v])\n\t\t\tQ.push(G[i].v),vis[G[i].v]=1;\n\t\t}\n\t}\n\treturn dis[S]<inf;\n}\nint Augment(int a,int S,int T,int mi){\n\tused[a]=1;\n\tif(a==T)return mi;\n  int flow=0;\n  for(int i=head[a];i;i=G[i].last)\n\tif(!used[G[i].v]&&G[i].rl&&dis[a]-G[i].w==dis[G[i].v]){\n\t  int ls=Augment(G[i].v,S,T,min(G[i].rl,mi));\n\t  Mincost+=ls*G[i].w,mi-=flow,G[i].rl-=ls,G[i^1].rl+=ls,flow+=ls;\n\t  if(!mi)return flow;\n  }\n  return flow;\n}\nvoid ZKW(int S,int T){\n\tMaxflow=Mincost=0;\n\twhile(SPFA(S,T)){\n\t\tused[T]=1;\n    while(used[T]){\n      memset(used,0,sizeof(used));\n      Maxflow+=Augment(S,S,T,inf);\n    }\n\t}\n}\n```\n\n## 二分图匹配\n\n### Hungary\n\n``` cpp\n\nbool used[N<<1];\nint n,m,e,ans;\nint head[N],p;\nstruct ss{int v,last;}G[N*N];\nvoid add(int a,int b)\n{G[++p].v=b;G[p].last=head[a];head[a]=p;}\nint match[N<<1];\nbool dfs(int u){\n\tfor(int i=head[u];i;i=G[i].last)if(!used[G[i].v]){\n\t\tused[G[i].v]=1;\n\t\tif(!match[G[i].v]||dfs(match[G[i].v]))\n\t\t{match[G[i].v]=u;return 1;}\n\t}\n\treturn 0;\n}\nint Hungary(int n){\n\tint ans=0;\n\tfor(int i=1;i<=n;i++){\n\t\tmemset(used,0,sizeof(used));\n\t\tif(dfs(i))ans++;\n\t}\n\treturn ans;\n}\n```\n\n### Kuhn Munkres（带权）\n\n``` cpp\nint head[N],p;\nstruct ss{int v,last,w;}G[N*N];\nvoid add(int a,int b,int c)\n{G[++p].v=b;G[p].last=head[a];G[p].w=c;head[a]=p;}\nbool usem[N<<1],usen[N<<1];\nint match[N<<1];\nint maxn[N<<1],maxm[N<<1];\nint slack[N<<1];\nbool dfs(int u){\n  usen[u]=1;\n  for(int i=head[u];i;i=G[i].last){\n    if(usem[G[i].v])continue;\n    int gap=maxn[u]+maxm[G[i].v]-G[i].w;\n    if(gap==0){\n      usem[G[i].v]=1;\n      if(match[G[i].v]==0||dfs(match[G[i].v]))\n\t\t\t{match[G[i].v]=u;return 1;}\n    } \n\t\telse slack[G[i].v]=min(slack[G[i].v],gap);\n  }\n  return 0;\n}\nint Kuhn_Munkres(int n){\n\tmemset(match,0,sizeof(match));\n\tmemset(maxm,0,sizeof(maxm));\n\tfor(int u=1;u<=n;u++){\n\t\tmaxn[u]=-inf;\n\t\tfor(int i=head[u];i;i=G[i].last)\n\t\tmaxn[u]=max(maxn[u],G[i].w);\n\t}\n\tfor(int i=1;i<=n;i++){\n\t\tfor(int j=1;j<=n;j++)slack[j]=inf;\n\t\twhile(1){\n\t\t\tmemset(usem,0,sizeof(usem));\n\t\t\tmemset(usen,0,sizeof(usen));\n\t\t\tif(dfs(i))break;\n\t\t\tint a=inf;\n      for(int j=1;j<=m;j++)\n      if(!usem[j])a=min(a,slack[j]);\n      for(int j=1;j<=n;j++)\n        if(usen[j])maxn[j]-=a;\n      for(int j=1;j<=m;j++)\n        if(usem[j])maxm[j]+=a;\n\t\t}\n\t}\n\tint res=0;\n  for(int u=1;u<=n;u++){\n\t\tfor(int i=head[u];i;i=G[i].last)\n\t\tif(match[G[i].v]==u)\n\t\tres+=G[i].w;\n\t}\n  return res;\n}\n```","slug":"网络流-费用流和二分图匹配模板","published":1,"updated":"2022-02-13T13:16:16.474Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0i63w6i0022u4gbhs8bd9s6","content":"<p>$\\ \\ \\ \\ \\ \\ \\ \\,$网络流，费用流相关的复习笔记：</p>\n<span id=\"more\"></span>\n<h2 id=\"网络流\"><a href=\"#网络流\" class=\"headerlink\" title=\"网络流\"></a>网络流</h2><h3 id=\"Dinic\"><a href=\"#Dinic\" class=\"headerlink\" title=\"Dinic\"></a>Dinic</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> head[N],p=<span class=\"number\">1</span>,S,T,n,m;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">ss</span>&#123;<span class=\"type\">int</span> v,last,rl;&#125;G[M&lt;&lt;<span class=\"number\">1</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"type\">int</span> a,<span class=\"type\">int</span> b,<span class=\"type\">int</span> c)</span></span>&#123;</span><br><span class=\"line\">\tG[++p]=(ss)&#123;b,head[a],c&#125;;head[a]=p;</span><br><span class=\"line\">\tG[++p]=(ss)&#123;a,head[b],<span class=\"number\">0</span>&#125;;head[b]=p;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> dis[N];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">bfs</span><span class=\"params\">(<span class=\"type\">int</span> S,<span class=\"type\">int</span> T)</span></span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">memset</span>(dis,<span class=\"number\">0</span>,<span class=\"built_in\">sizeof</span>(dis));</span><br><span class=\"line\">  queue&lt;<span class=\"type\">int</span>&gt; Q;dis[S]=<span class=\"number\">1</span>;Q.<span class=\"built_in\">push</span>(S);</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(!Q.<span class=\"built_in\">empty</span>())&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> u=Q.<span class=\"built_in\">front</span>();Q.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=head[u];i;i=G[i].last)</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(G[i].rl&gt;<span class=\"number\">0</span>&amp;&amp;dis[G[i].v]==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">      dis[G[i].v]=dis[u]+<span class=\"number\">1</span>;</span><br><span class=\"line\">      Q.<span class=\"built_in\">push</span>(G[i].v);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(dis[T]!=<span class=\"number\">0</span>)<span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">Augment</span><span class=\"params\">(<span class=\"type\">int</span> a,<span class=\"type\">int</span> S,<span class=\"type\">int</span> T,<span class=\"type\">int</span> mi)</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(a==T)<span class=\"keyword\">return</span> mi;</span><br><span class=\"line\">\t<span class=\"type\">int</span> flow=<span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=head[a];i;i=G[i].last)</span><br><span class=\"line\">  <span class=\"keyword\">if</span>((dis[G[i].v]==dis[a]+<span class=\"number\">1</span>)&amp;&amp;(G[i].rl!=<span class=\"number\">0</span>))&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> ls=<span class=\"built_in\">Augment</span>(G[i].v,S,T,<span class=\"built_in\">min</span>(mi,G[i].rl));</span><br><span class=\"line\">\t\tflow+=ls;mi-=ls;G[i].rl-=ls;G[i^<span class=\"number\">1</span>].rl+=ls;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!mi)<span class=\"keyword\">return</span> flow;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> flow;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">Dinic</span><span class=\"params\">(<span class=\"type\">int</span> S,<span class=\"type\">int</span> T)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> ans=<span class=\"number\">0</span>,ls;</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(<span class=\"built_in\">bfs</span>(S,T))ans+=<span class=\"built_in\">Augment</span>(S,S,T,inf);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"ISAP\"><a href=\"#ISAP\" class=\"headerlink\" title=\"ISAP\"></a>ISAP</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> head[N],p=<span class=\"number\">1</span>,S,T,n,m;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">ss</span>&#123;<span class=\"type\">int</span> v,last;<span class=\"type\">int</span> rl;&#125;G[M&lt;&lt;<span class=\"number\">1</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"type\">int</span> a,<span class=\"type\">int</span> b,<span class=\"type\">int</span> c)</span></span>&#123;</span><br><span class=\"line\">\tG[++p]=(ss)&#123;b,head[a],c&#125;;head[a]=p;</span><br><span class=\"line\">\tG[++p]=(ss)&#123;a,head[b],<span class=\"number\">0</span>&#125;;head[b]=p;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> dis[N],cur[N],num[N];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">bfs</span><span class=\"params\">(<span class=\"type\">int</span> T)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">memset</span>(dis,<span class=\"number\">0</span>,<span class=\"built_in\">sizeof</span>(dis));</span><br><span class=\"line\">\t<span class=\"built_in\">memset</span>(num,<span class=\"number\">0</span>,<span class=\"built_in\">sizeof</span>(num));</span><br><span class=\"line\">\t++num[dis[T]=<span class=\"number\">1</span>];</span><br><span class=\"line\">\t<span class=\"built_in\">memcpy</span>(cur,head,<span class=\"built_in\">sizeof</span>(head));</span><br><span class=\"line\">\tqueue&lt;<span class=\"type\">int</span>&gt; Q;Q.<span class=\"built_in\">push</span>(T);</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(!Q.<span class=\"built_in\">empty</span>())&#123;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> u=Q.<span class=\"built_in\">front</span>();Q.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=head[u];i;i=G[i].last)<span class=\"keyword\">if</span>(!dis[G[i].v])</span><br><span class=\"line\">\t\t&#123;++num[dis[G[i].v]=dis[u]+<span class=\"number\">1</span>];Q.<span class=\"built_in\">push</span>(G[i].v);&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">Augment</span><span class=\"params\">(<span class=\"type\">int</span> a,<span class=\"type\">int</span> S,<span class=\"type\">int</span> T,<span class=\"type\">int</span> mi)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(a==T)<span class=\"keyword\">return</span> mi;</span><br><span class=\"line\">\t<span class=\"type\">int</span> flow=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=cur[a];i;i=G[i].last)<span class=\"keyword\">if</span>(dis[G[i].v]==dis[a]<span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> ls=<span class=\"built_in\">Augment</span>(G[i].v,S,T,<span class=\"built_in\">min</span>(mi,G[i].rl));</span><br><span class=\"line\">\t\tflow+=ls;mi-=ls;G[i].rl-=ls;G[i^<span class=\"number\">1</span>].rl+=ls;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(!mi)<span class=\"keyword\">return</span> flow;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(!(--num[dis[a]]))dis[S]=n+<span class=\"number\">1</span>;</span><br><span class=\"line\">\t++num[++dis[a]];cur[a]=head[a];</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> flow;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">ISAP</span><span class=\"params\">(<span class=\"type\">int</span> S,<span class=\"type\">int</span> T)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">bfs</span>(T);</span><br><span class=\"line\">\t<span class=\"type\">int</span> ret=<span class=\"built_in\">Augment</span>(S,S,T,inf);</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(dis[S]&lt;=n)ret+=<span class=\"built_in\">Augment</span>(S,S,T,inf);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"费用流（最小费用最大流）\"><a href=\"#费用流（最小费用最大流）\" class=\"headerlink\" title=\"费用流（最小费用最大流）\"></a>费用流（最小费用最大流）</h2><h3 id=\"ZKW\"><a href=\"#ZKW\" class=\"headerlink\" title=\"ZKW\"></a>ZKW</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> head[N],p=<span class=\"number\">1</span>,S,T,n,m,k;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">ss</span>&#123;<span class=\"type\">int</span> v,last;<span class=\"type\">int</span> rl,w;&#125;G[M&lt;&lt;<span class=\"number\">1</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"type\">int</span> a,<span class=\"type\">int</span> b,<span class=\"type\">int</span> c,<span class=\"type\">int</span> d)</span></span>&#123;</span><br><span class=\"line\">\tG[++p]=(ss)&#123;b,head[a],c,d&#125;;head[a]=p;</span><br><span class=\"line\">\tG[++p]=(ss)&#123;a,head[b],<span class=\"number\">0</span>,-d&#125;;head[b]=p;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">queue&lt;<span class=\"type\">int</span>&gt; Q;</span><br><span class=\"line\"><span class=\"type\">int</span> dis[N],Mincost,Maxflow;</span><br><span class=\"line\"><span class=\"type\">bool</span> used[N];</span><br><span class=\"line\"><span class=\"type\">bool</span> vis[N];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">SPFA</span><span class=\"params\">(<span class=\"type\">int</span> S,<span class=\"type\">int</span> T)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;N;i++)dis[i]=inf,vis[i]=<span class=\"number\">0</span>;</span><br><span class=\"line\">\tdis[T]=<span class=\"number\">0</span>,vis[T]=<span class=\"number\">1</span>;</span><br><span class=\"line\">\tQ.<span class=\"built_in\">push</span>(T);</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(!Q.<span class=\"built_in\">empty</span>())&#123;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> u=Q.<span class=\"built_in\">front</span>();Q.<span class=\"built_in\">pop</span>();vis[u]=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=head[u];i;i=G[i].last)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(G[i^<span class=\"number\">1</span>].rl&gt;<span class=\"number\">0</span>&amp;&amp;dis[G[i].v]&gt;dis[u]-G[i].w)&#123;</span><br><span class=\"line\">\t\t\tdis[G[i].v]=dis[u]-G[i].w;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(!vis[G[i].v])</span><br><span class=\"line\">\t\t\tQ.<span class=\"built_in\">push</span>(G[i].v),vis[G[i].v]=<span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> dis[S]&lt;inf;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">Augment</span><span class=\"params\">(<span class=\"type\">int</span> a,<span class=\"type\">int</span> S,<span class=\"type\">int</span> T,<span class=\"type\">int</span> mi)</span></span>&#123;</span><br><span class=\"line\">\tused[a]=<span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(a==T)<span class=\"keyword\">return</span> mi;</span><br><span class=\"line\">  <span class=\"type\">int</span> flow=<span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=head[a];i;i=G[i].last)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(!used[G[i].v]&amp;&amp;G[i].rl&amp;&amp;dis[a]-G[i].w==dis[G[i].v])&#123;</span><br><span class=\"line\">\t  <span class=\"type\">int</span> ls=<span class=\"built_in\">Augment</span>(G[i].v,S,T,<span class=\"built_in\">min</span>(G[i].rl,mi));</span><br><span class=\"line\">\t  Mincost+=ls*G[i].w,mi-=flow,G[i].rl-=ls,G[i^<span class=\"number\">1</span>].rl+=ls,flow+=ls;</span><br><span class=\"line\">\t  <span class=\"keyword\">if</span>(!mi)<span class=\"keyword\">return</span> flow;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> flow;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">ZKW</span><span class=\"params\">(<span class=\"type\">int</span> S,<span class=\"type\">int</span> T)</span></span>&#123;</span><br><span class=\"line\">\tMaxflow=Mincost=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(<span class=\"built_in\">SPFA</span>(S,T))&#123;</span><br><span class=\"line\">\t\tused[T]=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(used[T])&#123;</span><br><span class=\"line\">      <span class=\"built_in\">memset</span>(used,<span class=\"number\">0</span>,<span class=\"built_in\">sizeof</span>(used));</span><br><span class=\"line\">      Maxflow+=<span class=\"built_in\">Augment</span>(S,S,T,inf);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"二分图匹配\"><a href=\"#二分图匹配\" class=\"headerlink\" title=\"二分图匹配\"></a>二分图匹配</h2><h3 id=\"Hungary\"><a href=\"#Hungary\" class=\"headerlink\" title=\"Hungary\"></a>Hungary</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">bool</span> used[N&lt;&lt;<span class=\"number\">1</span>];</span><br><span class=\"line\"><span class=\"type\">int</span> n,m,e,ans;</span><br><span class=\"line\"><span class=\"type\">int</span> head[N],p;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">ss</span>&#123;<span class=\"type\">int</span> v,last;&#125;G[N*N];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"type\">int</span> a,<span class=\"type\">int</span> b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;G[++p].v=b;G[p].last=head[a];head[a]=p;&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> match[N&lt;&lt;<span class=\"number\">1</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"type\">int</span> u)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=head[u];i;i=G[i].last)<span class=\"keyword\">if</span>(!used[G[i].v])&#123;</span><br><span class=\"line\">\t\tused[G[i].v]=<span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(!match[G[i].v]||<span class=\"built_in\">dfs</span>(match[G[i].v]))</span><br><span class=\"line\">\t\t&#123;match[G[i].v]=u;<span class=\"keyword\">return</span> <span class=\"number\">1</span>;&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">Hungary</span><span class=\"params\">(<span class=\"type\">int</span> n)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> ans=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">memset</span>(used,<span class=\"number\">0</span>,<span class=\"built_in\">sizeof</span>(used));</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(<span class=\"built_in\">dfs</span>(i))ans++;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Kuhn-Munkres（带权）\"><a href=\"#Kuhn-Munkres（带权）\" class=\"headerlink\" title=\"Kuhn Munkres（带权）\"></a>Kuhn Munkres（带权）</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> head[N],p;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">ss</span>&#123;<span class=\"type\">int</span> v,last,w;&#125;G[N*N];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"type\">int</span> a,<span class=\"type\">int</span> b,<span class=\"type\">int</span> c)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;G[++p].v=b;G[p].last=head[a];G[p].w=c;head[a]=p;&#125;</span><br><span class=\"line\"><span class=\"type\">bool</span> usem[N&lt;&lt;<span class=\"number\">1</span>],usen[N&lt;&lt;<span class=\"number\">1</span>];</span><br><span class=\"line\"><span class=\"type\">int</span> match[N&lt;&lt;<span class=\"number\">1</span>];</span><br><span class=\"line\"><span class=\"type\">int</span> maxn[N&lt;&lt;<span class=\"number\">1</span>],maxm[N&lt;&lt;<span class=\"number\">1</span>];</span><br><span class=\"line\"><span class=\"type\">int</span> slack[N&lt;&lt;<span class=\"number\">1</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"type\">int</span> u)</span></span>&#123;</span><br><span class=\"line\">  usen[u]=<span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=head[u];i;i=G[i].last)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(usem[G[i].v])<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> gap=maxn[u]+maxm[G[i].v]-G[i].w;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(gap==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">      usem[G[i].v]=<span class=\"number\">1</span>;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(match[G[i].v]==<span class=\"number\">0</span>||<span class=\"built_in\">dfs</span>(match[G[i].v]))</span><br><span class=\"line\">\t\t\t&#123;match[G[i].v]=u;<span class=\"keyword\">return</span> <span class=\"number\">1</span>;&#125;</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> slack[G[i].v]=<span class=\"built_in\">min</span>(slack[G[i].v],gap);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">Kuhn_Munkres</span><span class=\"params\">(<span class=\"type\">int</span> n)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">memset</span>(match,<span class=\"number\">0</span>,<span class=\"built_in\">sizeof</span>(match));</span><br><span class=\"line\">\t<span class=\"built_in\">memset</span>(maxm,<span class=\"number\">0</span>,<span class=\"built_in\">sizeof</span>(maxm));</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> u=<span class=\"number\">1</span>;u&lt;=n;u++)&#123;</span><br><span class=\"line\">\t\tmaxn[u]=-inf;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=head[u];i;i=G[i].last)</span><br><span class=\"line\">\t\tmaxn[u]=<span class=\"built_in\">max</span>(maxn[u],G[i].w);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;=n;j++)slack[j]=inf;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">memset</span>(usem,<span class=\"number\">0</span>,<span class=\"built_in\">sizeof</span>(usem));</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">memset</span>(usen,<span class=\"number\">0</span>,<span class=\"built_in\">sizeof</span>(usen));</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(<span class=\"built_in\">dfs</span>(i))<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t<span class=\"type\">int</span> a=inf;</span><br><span class=\"line\">      <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;=m;j++)</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(!usem[j])a=<span class=\"built_in\">min</span>(a,slack[j]);</span><br><span class=\"line\">      <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;=n;j++)</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(usen[j])maxn[j]-=a;</span><br><span class=\"line\">      <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;=m;j++)</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(usem[j])maxm[j]+=a;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"type\">int</span> res=<span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> u=<span class=\"number\">1</span>;u&lt;=n;u++)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=head[u];i;i=G[i].last)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(match[G[i].v]==u)</span><br><span class=\"line\">\t\tres+=G[i].w;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p>$\\ \\ \\ \\ \\ \\ \\ \\,$网络流，费用流相关的复习笔记：</p>","more":"<h2 id=\"网络流\"><a href=\"#网络流\" class=\"headerlink\" title=\"网络流\"></a>网络流</h2><h3 id=\"Dinic\"><a href=\"#Dinic\" class=\"headerlink\" title=\"Dinic\"></a>Dinic</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> head[N],p=<span class=\"number\">1</span>,S,T,n,m;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">ss</span>&#123;<span class=\"type\">int</span> v,last,rl;&#125;G[M&lt;&lt;<span class=\"number\">1</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"type\">int</span> a,<span class=\"type\">int</span> b,<span class=\"type\">int</span> c)</span></span>&#123;</span><br><span class=\"line\">\tG[++p]=(ss)&#123;b,head[a],c&#125;;head[a]=p;</span><br><span class=\"line\">\tG[++p]=(ss)&#123;a,head[b],<span class=\"number\">0</span>&#125;;head[b]=p;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> dis[N];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">bfs</span><span class=\"params\">(<span class=\"type\">int</span> S,<span class=\"type\">int</span> T)</span></span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">memset</span>(dis,<span class=\"number\">0</span>,<span class=\"built_in\">sizeof</span>(dis));</span><br><span class=\"line\">  queue&lt;<span class=\"type\">int</span>&gt; Q;dis[S]=<span class=\"number\">1</span>;Q.<span class=\"built_in\">push</span>(S);</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(!Q.<span class=\"built_in\">empty</span>())&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> u=Q.<span class=\"built_in\">front</span>();Q.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=head[u];i;i=G[i].last)</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(G[i].rl&gt;<span class=\"number\">0</span>&amp;&amp;dis[G[i].v]==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">      dis[G[i].v]=dis[u]+<span class=\"number\">1</span>;</span><br><span class=\"line\">      Q.<span class=\"built_in\">push</span>(G[i].v);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(dis[T]!=<span class=\"number\">0</span>)<span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">Augment</span><span class=\"params\">(<span class=\"type\">int</span> a,<span class=\"type\">int</span> S,<span class=\"type\">int</span> T,<span class=\"type\">int</span> mi)</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(a==T)<span class=\"keyword\">return</span> mi;</span><br><span class=\"line\">\t<span class=\"type\">int</span> flow=<span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=head[a];i;i=G[i].last)</span><br><span class=\"line\">  <span class=\"keyword\">if</span>((dis[G[i].v]==dis[a]+<span class=\"number\">1</span>)&amp;&amp;(G[i].rl!=<span class=\"number\">0</span>))&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> ls=<span class=\"built_in\">Augment</span>(G[i].v,S,T,<span class=\"built_in\">min</span>(mi,G[i].rl));</span><br><span class=\"line\">\t\tflow+=ls;mi-=ls;G[i].rl-=ls;G[i^<span class=\"number\">1</span>].rl+=ls;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!mi)<span class=\"keyword\">return</span> flow;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> flow;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">Dinic</span><span class=\"params\">(<span class=\"type\">int</span> S,<span class=\"type\">int</span> T)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> ans=<span class=\"number\">0</span>,ls;</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(<span class=\"built_in\">bfs</span>(S,T))ans+=<span class=\"built_in\">Augment</span>(S,S,T,inf);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"ISAP\"><a href=\"#ISAP\" class=\"headerlink\" title=\"ISAP\"></a>ISAP</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> head[N],p=<span class=\"number\">1</span>,S,T,n,m;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">ss</span>&#123;<span class=\"type\">int</span> v,last;<span class=\"type\">int</span> rl;&#125;G[M&lt;&lt;<span class=\"number\">1</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"type\">int</span> a,<span class=\"type\">int</span> b,<span class=\"type\">int</span> c)</span></span>&#123;</span><br><span class=\"line\">\tG[++p]=(ss)&#123;b,head[a],c&#125;;head[a]=p;</span><br><span class=\"line\">\tG[++p]=(ss)&#123;a,head[b],<span class=\"number\">0</span>&#125;;head[b]=p;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> dis[N],cur[N],num[N];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">bfs</span><span class=\"params\">(<span class=\"type\">int</span> T)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">memset</span>(dis,<span class=\"number\">0</span>,<span class=\"built_in\">sizeof</span>(dis));</span><br><span class=\"line\">\t<span class=\"built_in\">memset</span>(num,<span class=\"number\">0</span>,<span class=\"built_in\">sizeof</span>(num));</span><br><span class=\"line\">\t++num[dis[T]=<span class=\"number\">1</span>];</span><br><span class=\"line\">\t<span class=\"built_in\">memcpy</span>(cur,head,<span class=\"built_in\">sizeof</span>(head));</span><br><span class=\"line\">\tqueue&lt;<span class=\"type\">int</span>&gt; Q;Q.<span class=\"built_in\">push</span>(T);</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(!Q.<span class=\"built_in\">empty</span>())&#123;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> u=Q.<span class=\"built_in\">front</span>();Q.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=head[u];i;i=G[i].last)<span class=\"keyword\">if</span>(!dis[G[i].v])</span><br><span class=\"line\">\t\t&#123;++num[dis[G[i].v]=dis[u]+<span class=\"number\">1</span>];Q.<span class=\"built_in\">push</span>(G[i].v);&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">Augment</span><span class=\"params\">(<span class=\"type\">int</span> a,<span class=\"type\">int</span> S,<span class=\"type\">int</span> T,<span class=\"type\">int</span> mi)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(a==T)<span class=\"keyword\">return</span> mi;</span><br><span class=\"line\">\t<span class=\"type\">int</span> flow=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=cur[a];i;i=G[i].last)<span class=\"keyword\">if</span>(dis[G[i].v]==dis[a]<span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> ls=<span class=\"built_in\">Augment</span>(G[i].v,S,T,<span class=\"built_in\">min</span>(mi,G[i].rl));</span><br><span class=\"line\">\t\tflow+=ls;mi-=ls;G[i].rl-=ls;G[i^<span class=\"number\">1</span>].rl+=ls;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(!mi)<span class=\"keyword\">return</span> flow;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(!(--num[dis[a]]))dis[S]=n+<span class=\"number\">1</span>;</span><br><span class=\"line\">\t++num[++dis[a]];cur[a]=head[a];</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> flow;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">ISAP</span><span class=\"params\">(<span class=\"type\">int</span> S,<span class=\"type\">int</span> T)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">bfs</span>(T);</span><br><span class=\"line\">\t<span class=\"type\">int</span> ret=<span class=\"built_in\">Augment</span>(S,S,T,inf);</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(dis[S]&lt;=n)ret+=<span class=\"built_in\">Augment</span>(S,S,T,inf);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"费用流（最小费用最大流）\"><a href=\"#费用流（最小费用最大流）\" class=\"headerlink\" title=\"费用流（最小费用最大流）\"></a>费用流（最小费用最大流）</h2><h3 id=\"ZKW\"><a href=\"#ZKW\" class=\"headerlink\" title=\"ZKW\"></a>ZKW</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> head[N],p=<span class=\"number\">1</span>,S,T,n,m,k;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">ss</span>&#123;<span class=\"type\">int</span> v,last;<span class=\"type\">int</span> rl,w;&#125;G[M&lt;&lt;<span class=\"number\">1</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"type\">int</span> a,<span class=\"type\">int</span> b,<span class=\"type\">int</span> c,<span class=\"type\">int</span> d)</span></span>&#123;</span><br><span class=\"line\">\tG[++p]=(ss)&#123;b,head[a],c,d&#125;;head[a]=p;</span><br><span class=\"line\">\tG[++p]=(ss)&#123;a,head[b],<span class=\"number\">0</span>,-d&#125;;head[b]=p;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">queue&lt;<span class=\"type\">int</span>&gt; Q;</span><br><span class=\"line\"><span class=\"type\">int</span> dis[N],Mincost,Maxflow;</span><br><span class=\"line\"><span class=\"type\">bool</span> used[N];</span><br><span class=\"line\"><span class=\"type\">bool</span> vis[N];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">SPFA</span><span class=\"params\">(<span class=\"type\">int</span> S,<span class=\"type\">int</span> T)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;N;i++)dis[i]=inf,vis[i]=<span class=\"number\">0</span>;</span><br><span class=\"line\">\tdis[T]=<span class=\"number\">0</span>,vis[T]=<span class=\"number\">1</span>;</span><br><span class=\"line\">\tQ.<span class=\"built_in\">push</span>(T);</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(!Q.<span class=\"built_in\">empty</span>())&#123;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> u=Q.<span class=\"built_in\">front</span>();Q.<span class=\"built_in\">pop</span>();vis[u]=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=head[u];i;i=G[i].last)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(G[i^<span class=\"number\">1</span>].rl&gt;<span class=\"number\">0</span>&amp;&amp;dis[G[i].v]&gt;dis[u]-G[i].w)&#123;</span><br><span class=\"line\">\t\t\tdis[G[i].v]=dis[u]-G[i].w;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(!vis[G[i].v])</span><br><span class=\"line\">\t\t\tQ.<span class=\"built_in\">push</span>(G[i].v),vis[G[i].v]=<span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> dis[S]&lt;inf;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">Augment</span><span class=\"params\">(<span class=\"type\">int</span> a,<span class=\"type\">int</span> S,<span class=\"type\">int</span> T,<span class=\"type\">int</span> mi)</span></span>&#123;</span><br><span class=\"line\">\tused[a]=<span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(a==T)<span class=\"keyword\">return</span> mi;</span><br><span class=\"line\">  <span class=\"type\">int</span> flow=<span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=head[a];i;i=G[i].last)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(!used[G[i].v]&amp;&amp;G[i].rl&amp;&amp;dis[a]-G[i].w==dis[G[i].v])&#123;</span><br><span class=\"line\">\t  <span class=\"type\">int</span> ls=<span class=\"built_in\">Augment</span>(G[i].v,S,T,<span class=\"built_in\">min</span>(G[i].rl,mi));</span><br><span class=\"line\">\t  Mincost+=ls*G[i].w,mi-=flow,G[i].rl-=ls,G[i^<span class=\"number\">1</span>].rl+=ls,flow+=ls;</span><br><span class=\"line\">\t  <span class=\"keyword\">if</span>(!mi)<span class=\"keyword\">return</span> flow;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> flow;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">ZKW</span><span class=\"params\">(<span class=\"type\">int</span> S,<span class=\"type\">int</span> T)</span></span>&#123;</span><br><span class=\"line\">\tMaxflow=Mincost=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(<span class=\"built_in\">SPFA</span>(S,T))&#123;</span><br><span class=\"line\">\t\tused[T]=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(used[T])&#123;</span><br><span class=\"line\">      <span class=\"built_in\">memset</span>(used,<span class=\"number\">0</span>,<span class=\"built_in\">sizeof</span>(used));</span><br><span class=\"line\">      Maxflow+=<span class=\"built_in\">Augment</span>(S,S,T,inf);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"二分图匹配\"><a href=\"#二分图匹配\" class=\"headerlink\" title=\"二分图匹配\"></a>二分图匹配</h2><h3 id=\"Hungary\"><a href=\"#Hungary\" class=\"headerlink\" title=\"Hungary\"></a>Hungary</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">bool</span> used[N&lt;&lt;<span class=\"number\">1</span>];</span><br><span class=\"line\"><span class=\"type\">int</span> n,m,e,ans;</span><br><span class=\"line\"><span class=\"type\">int</span> head[N],p;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">ss</span>&#123;<span class=\"type\">int</span> v,last;&#125;G[N*N];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"type\">int</span> a,<span class=\"type\">int</span> b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;G[++p].v=b;G[p].last=head[a];head[a]=p;&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> match[N&lt;&lt;<span class=\"number\">1</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"type\">int</span> u)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=head[u];i;i=G[i].last)<span class=\"keyword\">if</span>(!used[G[i].v])&#123;</span><br><span class=\"line\">\t\tused[G[i].v]=<span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(!match[G[i].v]||<span class=\"built_in\">dfs</span>(match[G[i].v]))</span><br><span class=\"line\">\t\t&#123;match[G[i].v]=u;<span class=\"keyword\">return</span> <span class=\"number\">1</span>;&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">Hungary</span><span class=\"params\">(<span class=\"type\">int</span> n)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> ans=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">memset</span>(used,<span class=\"number\">0</span>,<span class=\"built_in\">sizeof</span>(used));</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(<span class=\"built_in\">dfs</span>(i))ans++;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Kuhn-Munkres（带权）\"><a href=\"#Kuhn-Munkres（带权）\" class=\"headerlink\" title=\"Kuhn Munkres（带权）\"></a>Kuhn Munkres（带权）</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> head[N],p;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">ss</span>&#123;<span class=\"type\">int</span> v,last,w;&#125;G[N*N];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"type\">int</span> a,<span class=\"type\">int</span> b,<span class=\"type\">int</span> c)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;G[++p].v=b;G[p].last=head[a];G[p].w=c;head[a]=p;&#125;</span><br><span class=\"line\"><span class=\"type\">bool</span> usem[N&lt;&lt;<span class=\"number\">1</span>],usen[N&lt;&lt;<span class=\"number\">1</span>];</span><br><span class=\"line\"><span class=\"type\">int</span> match[N&lt;&lt;<span class=\"number\">1</span>];</span><br><span class=\"line\"><span class=\"type\">int</span> maxn[N&lt;&lt;<span class=\"number\">1</span>],maxm[N&lt;&lt;<span class=\"number\">1</span>];</span><br><span class=\"line\"><span class=\"type\">int</span> slack[N&lt;&lt;<span class=\"number\">1</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"type\">int</span> u)</span></span>&#123;</span><br><span class=\"line\">  usen[u]=<span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=head[u];i;i=G[i].last)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(usem[G[i].v])<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> gap=maxn[u]+maxm[G[i].v]-G[i].w;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(gap==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">      usem[G[i].v]=<span class=\"number\">1</span>;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(match[G[i].v]==<span class=\"number\">0</span>||<span class=\"built_in\">dfs</span>(match[G[i].v]))</span><br><span class=\"line\">\t\t\t&#123;match[G[i].v]=u;<span class=\"keyword\">return</span> <span class=\"number\">1</span>;&#125;</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> slack[G[i].v]=<span class=\"built_in\">min</span>(slack[G[i].v],gap);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">Kuhn_Munkres</span><span class=\"params\">(<span class=\"type\">int</span> n)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">memset</span>(match,<span class=\"number\">0</span>,<span class=\"built_in\">sizeof</span>(match));</span><br><span class=\"line\">\t<span class=\"built_in\">memset</span>(maxm,<span class=\"number\">0</span>,<span class=\"built_in\">sizeof</span>(maxm));</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> u=<span class=\"number\">1</span>;u&lt;=n;u++)&#123;</span><br><span class=\"line\">\t\tmaxn[u]=-inf;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=head[u];i;i=G[i].last)</span><br><span class=\"line\">\t\tmaxn[u]=<span class=\"built_in\">max</span>(maxn[u],G[i].w);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;=n;j++)slack[j]=inf;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">memset</span>(usem,<span class=\"number\">0</span>,<span class=\"built_in\">sizeof</span>(usem));</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">memset</span>(usen,<span class=\"number\">0</span>,<span class=\"built_in\">sizeof</span>(usen));</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(<span class=\"built_in\">dfs</span>(i))<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t<span class=\"type\">int</span> a=inf;</span><br><span class=\"line\">      <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;=m;j++)</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(!usem[j])a=<span class=\"built_in\">min</span>(a,slack[j]);</span><br><span class=\"line\">      <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;=n;j++)</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(usen[j])maxn[j]-=a;</span><br><span class=\"line\">      <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;=m;j++)</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(usem[j])maxm[j]+=a;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"type\">int</span> res=<span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> u=<span class=\"number\">1</span>;u&lt;=n;u++)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=head[u];i;i=G[i].last)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(match[G[i].v]==u)</span><br><span class=\"line\">\t\tres+=G[i].w;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"线性筛","date":"2018-12-30T04:31:38.000Z","mathjax":true,"_content":"\n$\\ \\ \\ \\ \\ \\ \\ \\,$利用线性欧拉筛筛选常见积性函数的模板总结：\n\n<!-- more -->\n\n## - 用欧拉筛法线性筛素数\n\n$\\ \\ \\ \\ \\ \\,$我们知道，若$x$为素数的话，那么必然若有任意一个不为$1$的数$a$，$(a\\cdot x)$不是素数，打上标记。\n\n$\\ \\ \\ \\ \\ \\,$并且必然有$a<a\\cdot x$，$x<a\\cdot x$，所以我们不断枚举$a$，在之前若是没有被打上标记，那么$a$就是素数。再不断枚举之前筛出来的素数$x$，对范围$[a,n]$中的$(a\\cdot x)$打上标记。\n\n$\\ \\ \\ \\ \\ \\,$若是当前$a$已经是某一个$x$的倍数，那么我们便可不必向后枚举$x$了，因为后面的$(a\\cdot x)$一定被打过标记了，这样子可以保证每一个数最多被打过一次标记，复杂度严格$O(n)$。\n\n``` cpp\n//prime[0]为素数个数。\nbool used[N];\nlong long prime[N];\nlong long n,q;\nvoid Get_Prime(long long n){\n\tused[1]=1;\n\tfor(long long i=2;i<=n;i++){\n\t\tif(!used[i])prime[++prime[0]]=i;\n\t\tfor(int j=1;j<=prime[0]&&i*prime[j]<=n;j++){\n\t\t\tused[i*prime[j]]=1;\n\t\t\tif(i%prime[j]==0)break;\n\t\t} \n\t}\n}\n```\n\n## - 用欧拉筛法线性筛欧拉函数$\\varphi$，莫比乌斯函数$\\mu$\n\n- 筛欧拉函数$\\varphi$\n\n$\\ \\ \\ \\ \\ \\,$根据欧拉函数$\\varphi$的3条性质:\n\n$\\ \\ \\ \\ \\ \\,1$.若$x$为素数，$\\varphi(x)=x-1$;\n  \n$\\ \\ \\ \\ \\ \\,2$.若$x\\%p=0$，$\\varphi(x\\cdot p)=\\varphi(x)\\cdot p$;\n  \n$\\ \\ \\ \\ \\ \\,3$.若$x\\%p\\neq 0$，且$p$为素数，$\\varphi(x\\cdot p)=\\varphi(x)\\cdot (p-1)$;\n\n$\\ \\ \\ \\ \\ \\,$稍微改动一下线性筛素数就好了。\n\n``` cpp\nbool vis[N];\nint prim[N],phi[N];\nvoid Get_Phi(int n){\n  phi[1]=1;\n  for(int i=2;i<=n;i++){\n    if(!vis[i]){phi[i]=i-1;prim[++prim[0]]=i;}\n    for(int j=1;j<=prim[0]&&i*prim[j]<=n;j++){\n      vis[i*prim[j]]=1;\n      if(i%prim[j]==0){phi[i*prim[j]]=phi[i]*prim[j];break;}\n      phi[i*prim[j]]=phi[i]*(prim[j]-1);\n    }\n  }\n}\n```\n\n- 筛莫比乌斯函数$\\mu$\n\n$\\ \\ \\ \\ \\ \\,$根据性质，若$x$为素数，$\\mu(x)=-1$；对于任意数$a$，存在$\\mu(a\\cdot x)=-\\mu(a)$。\n\n$\\ \\ \\ \\ \\ \\,$再稍微改动一下线性筛素数就好了。\n\n``` cpp\nbool vis[N];\nint prim[N],mu[N];\nvoid Get_Mu(int n){\n  mu[1]=1;\n  for(int i=2;i<=n;i++){\n    if(!vis[i]){mu[i]=-1;prim[++prim[0]]=i;}\n    for(int j=1;j<=prim[0]&&i*prim[j]<=n;j++){\n      vis[i*prim[j]]=1;\n      if(i%prim[j]==0)break;\n      mu[i*prim[j]]=-mu[i];\n    }\n  }\n}\n```\n\n## - 对于任意积性函数$f$线性筛\n \n$\\ \\ \\ \\ \\ \\,$对于任意积性函数$f$，我们如何线性筛。\n\n- 如果$p$是素数：$f(p)=F_1(p)$\n\n- 如果$p$是素数，$i\\%p\\neq0$：$f(pi)=f(i)\\times F_2(p)$\n\n- 如果$p$是素数，$i\\%p=0$：\n  \n  我们把 $pi$ 分解成 $p^cx$ ,可以保证 $p^c$ 与 $x$互质，那么有：$f(pi)=f(p^cx)=f(x)*F_3(p,c)$\n  \n$\\ \\ \\ \\ \\ \\,$其中，函数$F_1$,$F_2$,$F_3$需要情况制定，模板如下：\n\n``` cpp\nbool vis[N];\nint pri[N],cnt[N],power[N];\nint prime[N],f[N];\nvoid Get_Shai(int n){\n\tf[1]=1;\n\tfor(long long i=1;i<=n;i++)power[i]=1;\n    for(int i=2;i<=n;i++){\n        if(!vis[i]){\n                cnt[i]=1;pri[i]=i;power[i]=i;\n                prime[++prime[0]]=i;\n                f[i]=F1(i);\n            }\n        for(int j=1,v,pc;j<=prime[0]&&i*prime[j]<=n;j++){\n            v=i*prime[j];\n            vis[v]=1;\n            if(i%prime[j]==0){\n                cnt[v]=cnt[i]+1;pri[v]=pri[i];power[v]=power[i]*pri[i];\n                f[v]=f[v/power[v]]*F3(pri[v],cnt[v]);\n                break;\n            }\n            cnt[v]=1;pri[v]=prime[j];power[v]=prime[j];\n            f[v]=f[i]*F2(prime[j]);\n        }\n    }\n}\n\n```\n- ## 模板题：[T34163 【模板】线性筛](https://www.luogu.org/problemnew/show/T34163)\n\n``` cpp\n#include<algorithm>\n#include<iostream>\n#include<cstdlib>\n#include<cstring>\n#include<cctype>\n#include<cstdio>\n#include<vector>\n#include<string>\n#include<queue>\n#include<stack>\n#include<cmath>\n#include<map>\n#include<set>\nusing namespace std;\nconst int inf=0x7fffffff;\nconst double eps=1e-10;\nconst double pi=acos(-1.0);\n//char buf[1<<15],*S=buf,*T=buf;\n//char getch(){return S==T&&(T=(S=buf)+fread(buf,1,1<<15,stdin),S==T)?0:*S++;}\ninline int read(){\n\tint x=0,f=1;char ch;ch=getchar();\n\twhile(ch<'0'||ch>'9'){if(ch=='-') f=0;ch=getchar();}\n\twhile(ch>='0'&&ch<='9'){x=(x<<1)+(x<<3)+(ch&15);ch=getchar();}\n\tif(f)return x;else return -x;\n}\nconst int N=1e7+10;\nint Sig(int a){\n\tint ret=0;\n\tfor(int i=1;i<=a;i++)if(a%i==0)ret++;\n\treturn ret;\n}\nbool vis[N];\nint pri[N],cnt[N],power[N];\nint phi[N],mu[N],prime[N],sigma0[N],sigma1[N],inv[N];\nvoid Get_Shai(int n){\n\tphi[1]=mu[1]=sigma0[1]=sigma1[1]=inv[1]=power[1]=1;\n\tfor(long long i=2;i<=n;i++)\n    inv[i]=(n-n/i)*inv[n%i]%n,power[i]=1;\n    for(int i=2;i<=n;i++){\n        if(!vis[i]){\n            cnt[i]=1;pri[i]=i;power[i]=i;\n            prime[++prime[0]]=i;\n            phi[i]=i-1;\n            mu[i]=-1;\n            sigma0[i]=2;\n            sigma1[i]=i+1;\n        }\n        for(int j=1,v,pc;j<=prime[0]&&i*prime[j]<=n;j++){\n            v=i*prime[j];\n            vis[v]=1;\n            if(i%prime[j]==0){\n                cnt[v]=cnt[i]+1;pri[v]=pri[i];power[v]=power[i]*pri[i];\n                phi[v]   =phi[i]*prime[j];\n                sigma0[v]=sigma0[v/power[v]]*(cnt[v]+1);\n                sigma1[v]=sigma1[v/power[v]]*(power[v]*pri[v]-1)/(pri[v]-1);\n                break;\n            }\n            cnt[v]=1;pri[v]=prime[j];power[v]=prime[j];\n            phi[v]   =phi[i]*(prime[j]-1);\n            mu[v]    =-mu[i];\n            sigma0[v]=sigma0[i]*2;\n            sigma1[v]=sigma1[i]*(prime[j]+1);\n        }\n    }\n}\nint main()\n{\n\tint n=read();\n\tGet_Shai(n);\n\tfor(int i=1;i<=n;i++)printf(\"%d \",phi[i]);printf(\"\\n\");\n\tfor(int i=1;i<=n;i++)printf(\"%d \",mu[i]);printf(\"\\n\");\n\tprintf(\"%d \",prime[0]);for(int i=1;i<=prime[0];i++)printf(\"%d \",prime[i]);printf(\"\\n\");\n\tfor(int i=1;i<=n;i++)printf(\"%d \",sigma0[i]);printf(\"\\n\");\n\tfor(int i=1;i<=n;i++)printf(\"%d \",sigma1[i]);printf(\"\\n\");\n\tfor(int i=1;i<=n;i++)printf(\"%d \",inv[i]);printf(\"\\n\");\n\treturn 0;\n}\n\n```","source":"_posts/线性筛.md","raw":"---\ntitle: '线性筛'\ndate: 2018-12-30 12:31:38\ncategories:\n- 学习笔记\ntags:\n- OI\n- 数学\n- 线性筛\nmathjax: true\n---\n\n$\\ \\ \\ \\ \\ \\ \\ \\,$利用线性欧拉筛筛选常见积性函数的模板总结：\n\n<!-- more -->\n\n## - 用欧拉筛法线性筛素数\n\n$\\ \\ \\ \\ \\ \\,$我们知道，若$x$为素数的话，那么必然若有任意一个不为$1$的数$a$，$(a\\cdot x)$不是素数，打上标记。\n\n$\\ \\ \\ \\ \\ \\,$并且必然有$a<a\\cdot x$，$x<a\\cdot x$，所以我们不断枚举$a$，在之前若是没有被打上标记，那么$a$就是素数。再不断枚举之前筛出来的素数$x$，对范围$[a,n]$中的$(a\\cdot x)$打上标记。\n\n$\\ \\ \\ \\ \\ \\,$若是当前$a$已经是某一个$x$的倍数，那么我们便可不必向后枚举$x$了，因为后面的$(a\\cdot x)$一定被打过标记了，这样子可以保证每一个数最多被打过一次标记，复杂度严格$O(n)$。\n\n``` cpp\n//prime[0]为素数个数。\nbool used[N];\nlong long prime[N];\nlong long n,q;\nvoid Get_Prime(long long n){\n\tused[1]=1;\n\tfor(long long i=2;i<=n;i++){\n\t\tif(!used[i])prime[++prime[0]]=i;\n\t\tfor(int j=1;j<=prime[0]&&i*prime[j]<=n;j++){\n\t\t\tused[i*prime[j]]=1;\n\t\t\tif(i%prime[j]==0)break;\n\t\t} \n\t}\n}\n```\n\n## - 用欧拉筛法线性筛欧拉函数$\\varphi$，莫比乌斯函数$\\mu$\n\n- 筛欧拉函数$\\varphi$\n\n$\\ \\ \\ \\ \\ \\,$根据欧拉函数$\\varphi$的3条性质:\n\n$\\ \\ \\ \\ \\ \\,1$.若$x$为素数，$\\varphi(x)=x-1$;\n  \n$\\ \\ \\ \\ \\ \\,2$.若$x\\%p=0$，$\\varphi(x\\cdot p)=\\varphi(x)\\cdot p$;\n  \n$\\ \\ \\ \\ \\ \\,3$.若$x\\%p\\neq 0$，且$p$为素数，$\\varphi(x\\cdot p)=\\varphi(x)\\cdot (p-1)$;\n\n$\\ \\ \\ \\ \\ \\,$稍微改动一下线性筛素数就好了。\n\n``` cpp\nbool vis[N];\nint prim[N],phi[N];\nvoid Get_Phi(int n){\n  phi[1]=1;\n  for(int i=2;i<=n;i++){\n    if(!vis[i]){phi[i]=i-1;prim[++prim[0]]=i;}\n    for(int j=1;j<=prim[0]&&i*prim[j]<=n;j++){\n      vis[i*prim[j]]=1;\n      if(i%prim[j]==0){phi[i*prim[j]]=phi[i]*prim[j];break;}\n      phi[i*prim[j]]=phi[i]*(prim[j]-1);\n    }\n  }\n}\n```\n\n- 筛莫比乌斯函数$\\mu$\n\n$\\ \\ \\ \\ \\ \\,$根据性质，若$x$为素数，$\\mu(x)=-1$；对于任意数$a$，存在$\\mu(a\\cdot x)=-\\mu(a)$。\n\n$\\ \\ \\ \\ \\ \\,$再稍微改动一下线性筛素数就好了。\n\n``` cpp\nbool vis[N];\nint prim[N],mu[N];\nvoid Get_Mu(int n){\n  mu[1]=1;\n  for(int i=2;i<=n;i++){\n    if(!vis[i]){mu[i]=-1;prim[++prim[0]]=i;}\n    for(int j=1;j<=prim[0]&&i*prim[j]<=n;j++){\n      vis[i*prim[j]]=1;\n      if(i%prim[j]==0)break;\n      mu[i*prim[j]]=-mu[i];\n    }\n  }\n}\n```\n\n## - 对于任意积性函数$f$线性筛\n \n$\\ \\ \\ \\ \\ \\,$对于任意积性函数$f$，我们如何线性筛。\n\n- 如果$p$是素数：$f(p)=F_1(p)$\n\n- 如果$p$是素数，$i\\%p\\neq0$：$f(pi)=f(i)\\times F_2(p)$\n\n- 如果$p$是素数，$i\\%p=0$：\n  \n  我们把 $pi$ 分解成 $p^cx$ ,可以保证 $p^c$ 与 $x$互质，那么有：$f(pi)=f(p^cx)=f(x)*F_3(p,c)$\n  \n$\\ \\ \\ \\ \\ \\,$其中，函数$F_1$,$F_2$,$F_3$需要情况制定，模板如下：\n\n``` cpp\nbool vis[N];\nint pri[N],cnt[N],power[N];\nint prime[N],f[N];\nvoid Get_Shai(int n){\n\tf[1]=1;\n\tfor(long long i=1;i<=n;i++)power[i]=1;\n    for(int i=2;i<=n;i++){\n        if(!vis[i]){\n                cnt[i]=1;pri[i]=i;power[i]=i;\n                prime[++prime[0]]=i;\n                f[i]=F1(i);\n            }\n        for(int j=1,v,pc;j<=prime[0]&&i*prime[j]<=n;j++){\n            v=i*prime[j];\n            vis[v]=1;\n            if(i%prime[j]==0){\n                cnt[v]=cnt[i]+1;pri[v]=pri[i];power[v]=power[i]*pri[i];\n                f[v]=f[v/power[v]]*F3(pri[v],cnt[v]);\n                break;\n            }\n            cnt[v]=1;pri[v]=prime[j];power[v]=prime[j];\n            f[v]=f[i]*F2(prime[j]);\n        }\n    }\n}\n\n```\n- ## 模板题：[T34163 【模板】线性筛](https://www.luogu.org/problemnew/show/T34163)\n\n``` cpp\n#include<algorithm>\n#include<iostream>\n#include<cstdlib>\n#include<cstring>\n#include<cctype>\n#include<cstdio>\n#include<vector>\n#include<string>\n#include<queue>\n#include<stack>\n#include<cmath>\n#include<map>\n#include<set>\nusing namespace std;\nconst int inf=0x7fffffff;\nconst double eps=1e-10;\nconst double pi=acos(-1.0);\n//char buf[1<<15],*S=buf,*T=buf;\n//char getch(){return S==T&&(T=(S=buf)+fread(buf,1,1<<15,stdin),S==T)?0:*S++;}\ninline int read(){\n\tint x=0,f=1;char ch;ch=getchar();\n\twhile(ch<'0'||ch>'9'){if(ch=='-') f=0;ch=getchar();}\n\twhile(ch>='0'&&ch<='9'){x=(x<<1)+(x<<3)+(ch&15);ch=getchar();}\n\tif(f)return x;else return -x;\n}\nconst int N=1e7+10;\nint Sig(int a){\n\tint ret=0;\n\tfor(int i=1;i<=a;i++)if(a%i==0)ret++;\n\treturn ret;\n}\nbool vis[N];\nint pri[N],cnt[N],power[N];\nint phi[N],mu[N],prime[N],sigma0[N],sigma1[N],inv[N];\nvoid Get_Shai(int n){\n\tphi[1]=mu[1]=sigma0[1]=sigma1[1]=inv[1]=power[1]=1;\n\tfor(long long i=2;i<=n;i++)\n    inv[i]=(n-n/i)*inv[n%i]%n,power[i]=1;\n    for(int i=2;i<=n;i++){\n        if(!vis[i]){\n            cnt[i]=1;pri[i]=i;power[i]=i;\n            prime[++prime[0]]=i;\n            phi[i]=i-1;\n            mu[i]=-1;\n            sigma0[i]=2;\n            sigma1[i]=i+1;\n        }\n        for(int j=1,v,pc;j<=prime[0]&&i*prime[j]<=n;j++){\n            v=i*prime[j];\n            vis[v]=1;\n            if(i%prime[j]==0){\n                cnt[v]=cnt[i]+1;pri[v]=pri[i];power[v]=power[i]*pri[i];\n                phi[v]   =phi[i]*prime[j];\n                sigma0[v]=sigma0[v/power[v]]*(cnt[v]+1);\n                sigma1[v]=sigma1[v/power[v]]*(power[v]*pri[v]-1)/(pri[v]-1);\n                break;\n            }\n            cnt[v]=1;pri[v]=prime[j];power[v]=prime[j];\n            phi[v]   =phi[i]*(prime[j]-1);\n            mu[v]    =-mu[i];\n            sigma0[v]=sigma0[i]*2;\n            sigma1[v]=sigma1[i]*(prime[j]+1);\n        }\n    }\n}\nint main()\n{\n\tint n=read();\n\tGet_Shai(n);\n\tfor(int i=1;i<=n;i++)printf(\"%d \",phi[i]);printf(\"\\n\");\n\tfor(int i=1;i<=n;i++)printf(\"%d \",mu[i]);printf(\"\\n\");\n\tprintf(\"%d \",prime[0]);for(int i=1;i<=prime[0];i++)printf(\"%d \",prime[i]);printf(\"\\n\");\n\tfor(int i=1;i<=n;i++)printf(\"%d \",sigma0[i]);printf(\"\\n\");\n\tfor(int i=1;i<=n;i++)printf(\"%d \",sigma1[i]);printf(\"\\n\");\n\tfor(int i=1;i<=n;i++)printf(\"%d \",inv[i]);printf(\"\\n\");\n\treturn 0;\n}\n\n```","slug":"线性筛","published":1,"updated":"2022-02-14T04:14:47.289Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0i63w6j0025u4gb8s2k90aq","content":"<p>$\\ \\ \\ \\ \\ \\ \\ \\,$利用线性欧拉筛筛选常见积性函数的模板总结：</p>\n<span id=\"more\"></span>\n<h2 id=\"用欧拉筛法线性筛素数\"><a href=\"#用欧拉筛法线性筛素数\" class=\"headerlink\" title=\"- 用欧拉筛法线性筛素数\"></a>- 用欧拉筛法线性筛素数</h2><p>$\\ \\ \\ \\ \\ \\,$我们知道，若$x$为素数的话，那么必然若有任意一个不为$1$的数$a$，$(a\\cdot x)$不是素数，打上标记。</p>\n<p>$\\ \\ \\ \\ \\ \\,$并且必然有$a&lt;a\\cdot x$，$x&lt;a\\cdot x$，所以我们不断枚举$a$，在之前若是没有被打上标记，那么$a$就是素数。再不断枚举之前筛出来的素数$x$，对范围$[a,n]$中的$(a\\cdot x)$打上标记。</p>\n<p>$\\ \\ \\ \\ \\ \\,$若是当前$a$已经是某一个$x$的倍数，那么我们便可不必向后枚举$x$了，因为后面的$(a\\cdot x)$一定被打过标记了，这样子可以保证每一个数最多被打过一次标记，复杂度严格$O(n)$。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//prime[0]为素数个数。</span></span><br><span class=\"line\"><span class=\"type\">bool</span> used[N];</span><br><span class=\"line\"><span class=\"type\">long</span> <span class=\"type\">long</span> prime[N];</span><br><span class=\"line\"><span class=\"type\">long</span> <span class=\"type\">long</span> n,q;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Get_Prime</span><span class=\"params\">(<span class=\"type\">long</span> <span class=\"type\">long</span> n)</span></span>&#123;</span><br><span class=\"line\">\tused[<span class=\"number\">1</span>]=<span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">long</span> <span class=\"type\">long</span> i=<span class=\"number\">2</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(!used[i])prime[++prime[<span class=\"number\">0</span>]]=i;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;=prime[<span class=\"number\">0</span>]&amp;&amp;i*prime[j]&lt;=n;j++)&#123;</span><br><span class=\"line\">\t\t\tused[i*prime[j]]=<span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(i%prime[j]==<span class=\"number\">0</span>)<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t&#125; </span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"用欧拉筛法线性筛欧拉函数-varphi-，莫比乌斯函数-mu\"><a href=\"#用欧拉筛法线性筛欧拉函数-varphi-，莫比乌斯函数-mu\" class=\"headerlink\" title=\"- 用欧拉筛法线性筛欧拉函数$\\varphi$，莫比乌斯函数$\\mu$\"></a>- 用欧拉筛法线性筛欧拉函数$\\varphi$，莫比乌斯函数$\\mu$</h2><ul>\n<li>筛欧拉函数$\\varphi$</li>\n</ul>\n<p>$\\ \\ \\ \\ \\ \\,$根据欧拉函数$\\varphi$的3条性质:</p>\n<p>$\\ \\ \\ \\ \\ \\,1$.若$x$为素数，$\\varphi(x)=x-1$;</p>\n<p>$\\ \\ \\ \\ \\ \\,2$.若$x\\%p=0$，$\\varphi(x\\cdot p)=\\varphi(x)\\cdot p$;</p>\n<p>$\\ \\ \\ \\ \\ \\,3$.若$x\\%p\\neq 0$，且$p$为素数，$\\varphi(x\\cdot p)=\\varphi(x)\\cdot (p-1)$;</p>\n<p>$\\ \\ \\ \\ \\ \\,$稍微改动一下线性筛素数就好了。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">bool</span> vis[N];</span><br><span class=\"line\"><span class=\"type\">int</span> prim[N],phi[N];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Get_Phi</span><span class=\"params\">(<span class=\"type\">int</span> n)</span></span>&#123;</span><br><span class=\"line\">  phi[<span class=\"number\">1</span>]=<span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">2</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!vis[i])&#123;phi[i]=i<span class=\"number\">-1</span>;prim[++prim[<span class=\"number\">0</span>]]=i;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;=prim[<span class=\"number\">0</span>]&amp;&amp;i*prim[j]&lt;=n;j++)&#123;</span><br><span class=\"line\">      vis[i*prim[j]]=<span class=\"number\">1</span>;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(i%prim[j]==<span class=\"number\">0</span>)&#123;phi[i*prim[j]]=phi[i]*prim[j];<span class=\"keyword\">break</span>;&#125;</span><br><span class=\"line\">      phi[i*prim[j]]=phi[i]*(prim[j]<span class=\"number\">-1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>筛莫比乌斯函数$\\mu$</li>\n</ul>\n<p>$\\ \\ \\ \\ \\ \\,$根据性质，若$x$为素数，$\\mu(x)=-1$；对于任意数$a$，存在$\\mu(a\\cdot x)=-\\mu(a)$。</p>\n<p>$\\ \\ \\ \\ \\ \\,$再稍微改动一下线性筛素数就好了。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">bool</span> vis[N];</span><br><span class=\"line\"><span class=\"type\">int</span> prim[N],mu[N];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Get_Mu</span><span class=\"params\">(<span class=\"type\">int</span> n)</span></span>&#123;</span><br><span class=\"line\">  mu[<span class=\"number\">1</span>]=<span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">2</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!vis[i])&#123;mu[i]=<span class=\"number\">-1</span>;prim[++prim[<span class=\"number\">0</span>]]=i;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;=prim[<span class=\"number\">0</span>]&amp;&amp;i*prim[j]&lt;=n;j++)&#123;</span><br><span class=\"line\">      vis[i*prim[j]]=<span class=\"number\">1</span>;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(i%prim[j]==<span class=\"number\">0</span>)<span class=\"keyword\">break</span>;</span><br><span class=\"line\">      mu[i*prim[j]]=-mu[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"对于任意积性函数-f-线性筛\"><a href=\"#对于任意积性函数-f-线性筛\" class=\"headerlink\" title=\"- 对于任意积性函数$f$线性筛\"></a>- 对于任意积性函数$f$线性筛</h2><p>$\\ \\ \\ \\ \\ \\,$对于任意积性函数$f$，我们如何线性筛。</p>\n<ul>\n<li><p>如果$p$是素数：$f(p)=F_1(p)$</p>\n</li>\n<li><p>如果$p$是素数，$i\\%p\\neq0$：$f(pi)=f(i)\\times F_2(p)$</p>\n</li>\n<li><p>如果$p$是素数，$i\\%p=0$：</p>\n<p>我们把 $pi$ 分解成 $p^cx$ ,可以保证 $p^c$ 与 $x$互质，那么有：$f(pi)=f(p^cx)=f(x)*F_3(p,c)$</p>\n</li>\n</ul>\n<p>$\\ \\ \\ \\ \\ \\,$其中，函数$F_1$,$F_2$,$F_3$需要情况制定，模板如下：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">bool</span> vis[N];</span><br><span class=\"line\"><span class=\"type\">int</span> pri[N],cnt[N],power[N];</span><br><span class=\"line\"><span class=\"type\">int</span> prime[N],f[N];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Get_Shai</span><span class=\"params\">(<span class=\"type\">int</span> n)</span></span>&#123;</span><br><span class=\"line\">\tf[<span class=\"number\">1</span>]=<span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">long</span> <span class=\"type\">long</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)power[i]=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">2</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!vis[i])&#123;</span><br><span class=\"line\">                cnt[i]=<span class=\"number\">1</span>;pri[i]=i;power[i]=i;</span><br><span class=\"line\">                prime[++prime[<span class=\"number\">0</span>]]=i;</span><br><span class=\"line\">                f[i]=<span class=\"built_in\">F1</span>(i);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">1</span>,v,pc;j&lt;=prime[<span class=\"number\">0</span>]&amp;&amp;i*prime[j]&lt;=n;j++)&#123;</span><br><span class=\"line\">            v=i*prime[j];</span><br><span class=\"line\">            vis[v]=<span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(i%prime[j]==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                cnt[v]=cnt[i]+<span class=\"number\">1</span>;pri[v]=pri[i];power[v]=power[i]*pri[i];</span><br><span class=\"line\">                f[v]=f[v/power[v]]*<span class=\"built_in\">F3</span>(pri[v],cnt[v]);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            cnt[v]=<span class=\"number\">1</span>;pri[v]=prime[j];power[v]=prime[j];</span><br><span class=\"line\">            f[v]=f[i]*<span class=\"built_in\">F2</span>(prime[j]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<ul>\n<li><h2 id=\"模板题：T34163-【模板】线性筛\"><a href=\"#模板题：T34163-【模板】线性筛\" class=\"headerlink\" title=\"模板题：T34163 【模板】线性筛\"></a>模板题：<a href=\"https://www.luogu.org/problemnew/show/T34163\">T34163 【模板】线性筛</a></h2></li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdlib&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cctype&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;stack&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;map&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;set&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> inf=<span class=\"number\">0x7fffffff</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">double</span> eps=<span class=\"number\">1e-10</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">double</span> pi=<span class=\"built_in\">acos</span>(<span class=\"number\">-1.0</span>);</span><br><span class=\"line\"><span class=\"comment\">//char buf[1&lt;&lt;15],*S=buf,*T=buf;</span></span><br><span class=\"line\"><span class=\"comment\">//char getch()&#123;return S==T&amp;&amp;(T=(S=buf)+fread(buf,1,1&lt;&lt;15,stdin),S==T)?0:*S++;&#125;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">int</span> <span class=\"title\">read</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> x=<span class=\"number\">0</span>,f=<span class=\"number\">1</span>;<span class=\"type\">char</span> ch;ch=<span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(ch&lt;<span class=\"string\">&#x27;0&#x27;</span>||ch&gt;<span class=\"string\">&#x27;9&#x27;</span>)&#123;<span class=\"keyword\">if</span>(ch==<span class=\"string\">&#x27;-&#x27;</span>) f=<span class=\"number\">0</span>;ch=<span class=\"built_in\">getchar</span>();&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(ch&gt;=<span class=\"string\">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class=\"string\">&#x27;9&#x27;</span>)&#123;x=(x&lt;&lt;<span class=\"number\">1</span>)+(x&lt;&lt;<span class=\"number\">3</span>)+(ch&amp;<span class=\"number\">15</span>);ch=<span class=\"built_in\">getchar</span>();&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(f)<span class=\"keyword\">return</span> x;<span class=\"keyword\">else</span> <span class=\"keyword\">return</span> -x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">1e7</span>+<span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">Sig</span><span class=\"params\">(<span class=\"type\">int</span> a)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> ret=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=a;i++)<span class=\"keyword\">if</span>(a%i==<span class=\"number\">0</span>)ret++;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">bool</span> vis[N];</span><br><span class=\"line\"><span class=\"type\">int</span> pri[N],cnt[N],power[N];</span><br><span class=\"line\"><span class=\"type\">int</span> phi[N],mu[N],prime[N],sigma0[N],sigma1[N],inv[N];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Get_Shai</span><span class=\"params\">(<span class=\"type\">int</span> n)</span></span>&#123;</span><br><span class=\"line\">\tphi[<span class=\"number\">1</span>]=mu[<span class=\"number\">1</span>]=sigma0[<span class=\"number\">1</span>]=sigma1[<span class=\"number\">1</span>]=inv[<span class=\"number\">1</span>]=power[<span class=\"number\">1</span>]=<span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">long</span> <span class=\"type\">long</span> i=<span class=\"number\">2</span>;i&lt;=n;i++)</span><br><span class=\"line\">    inv[i]=(n-n/i)*inv[n%i]%n,power[i]=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">2</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!vis[i])&#123;</span><br><span class=\"line\">            cnt[i]=<span class=\"number\">1</span>;pri[i]=i;power[i]=i;</span><br><span class=\"line\">            prime[++prime[<span class=\"number\">0</span>]]=i;</span><br><span class=\"line\">            phi[i]=i<span class=\"number\">-1</span>;</span><br><span class=\"line\">            mu[i]=<span class=\"number\">-1</span>;</span><br><span class=\"line\">            sigma0[i]=<span class=\"number\">2</span>;</span><br><span class=\"line\">            sigma1[i]=i+<span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">1</span>,v,pc;j&lt;=prime[<span class=\"number\">0</span>]&amp;&amp;i*prime[j]&lt;=n;j++)&#123;</span><br><span class=\"line\">            v=i*prime[j];</span><br><span class=\"line\">            vis[v]=<span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(i%prime[j]==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                cnt[v]=cnt[i]+<span class=\"number\">1</span>;pri[v]=pri[i];power[v]=power[i]*pri[i];</span><br><span class=\"line\">                phi[v]   =phi[i]*prime[j];</span><br><span class=\"line\">                sigma0[v]=sigma0[v/power[v]]*(cnt[v]+<span class=\"number\">1</span>);</span><br><span class=\"line\">                sigma1[v]=sigma1[v/power[v]]*(power[v]*pri[v]<span class=\"number\">-1</span>)/(pri[v]<span class=\"number\">-1</span>);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            cnt[v]=<span class=\"number\">1</span>;pri[v]=prime[j];power[v]=prime[j];</span><br><span class=\"line\">            phi[v]   =phi[i]*(prime[j]<span class=\"number\">-1</span>);</span><br><span class=\"line\">            mu[v]    =-mu[i];</span><br><span class=\"line\">            sigma0[v]=sigma0[i]*<span class=\"number\">2</span>;</span><br><span class=\"line\">            sigma1[v]=sigma1[i]*(prime[j]+<span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> n=<span class=\"built_in\">read</span>();</span><br><span class=\"line\">\t<span class=\"built_in\">Get_Shai</span>(n);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d &quot;</span>,phi[i]);<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d &quot;</span>,mu[i]);<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d &quot;</span>,prime[<span class=\"number\">0</span>]);<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=prime[<span class=\"number\">0</span>];i++)<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d &quot;</span>,prime[i]);<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d &quot;</span>,sigma0[i]);<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d &quot;</span>,sigma1[i]);<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d &quot;</span>,inv[i]);<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p>$\\ \\ \\ \\ \\ \\ \\ \\,$利用线性欧拉筛筛选常见积性函数的模板总结：</p>","more":"<h2 id=\"用欧拉筛法线性筛素数\"><a href=\"#用欧拉筛法线性筛素数\" class=\"headerlink\" title=\"- 用欧拉筛法线性筛素数\"></a>- 用欧拉筛法线性筛素数</h2><p>$\\ \\ \\ \\ \\ \\,$我们知道，若$x$为素数的话，那么必然若有任意一个不为$1$的数$a$，$(a\\cdot x)$不是素数，打上标记。</p>\n<p>$\\ \\ \\ \\ \\ \\,$并且必然有$a&lt;a\\cdot x$，$x&lt;a\\cdot x$，所以我们不断枚举$a$，在之前若是没有被打上标记，那么$a$就是素数。再不断枚举之前筛出来的素数$x$，对范围$[a,n]$中的$(a\\cdot x)$打上标记。</p>\n<p>$\\ \\ \\ \\ \\ \\,$若是当前$a$已经是某一个$x$的倍数，那么我们便可不必向后枚举$x$了，因为后面的$(a\\cdot x)$一定被打过标记了，这样子可以保证每一个数最多被打过一次标记，复杂度严格$O(n)$。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//prime[0]为素数个数。</span></span><br><span class=\"line\"><span class=\"type\">bool</span> used[N];</span><br><span class=\"line\"><span class=\"type\">long</span> <span class=\"type\">long</span> prime[N];</span><br><span class=\"line\"><span class=\"type\">long</span> <span class=\"type\">long</span> n,q;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Get_Prime</span><span class=\"params\">(<span class=\"type\">long</span> <span class=\"type\">long</span> n)</span></span>&#123;</span><br><span class=\"line\">\tused[<span class=\"number\">1</span>]=<span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">long</span> <span class=\"type\">long</span> i=<span class=\"number\">2</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(!used[i])prime[++prime[<span class=\"number\">0</span>]]=i;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;=prime[<span class=\"number\">0</span>]&amp;&amp;i*prime[j]&lt;=n;j++)&#123;</span><br><span class=\"line\">\t\t\tused[i*prime[j]]=<span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(i%prime[j]==<span class=\"number\">0</span>)<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t&#125; </span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"用欧拉筛法线性筛欧拉函数-varphi-，莫比乌斯函数-mu\"><a href=\"#用欧拉筛法线性筛欧拉函数-varphi-，莫比乌斯函数-mu\" class=\"headerlink\" title=\"- 用欧拉筛法线性筛欧拉函数$\\varphi$，莫比乌斯函数$\\mu$\"></a>- 用欧拉筛法线性筛欧拉函数$\\varphi$，莫比乌斯函数$\\mu$</h2><ul>\n<li>筛欧拉函数$\\varphi$</li>\n</ul>\n<p>$\\ \\ \\ \\ \\ \\,$根据欧拉函数$\\varphi$的3条性质:</p>\n<p>$\\ \\ \\ \\ \\ \\,1$.若$x$为素数，$\\varphi(x)=x-1$;</p>\n<p>$\\ \\ \\ \\ \\ \\,2$.若$x\\%p=0$，$\\varphi(x\\cdot p)=\\varphi(x)\\cdot p$;</p>\n<p>$\\ \\ \\ \\ \\ \\,3$.若$x\\%p\\neq 0$，且$p$为素数，$\\varphi(x\\cdot p)=\\varphi(x)\\cdot (p-1)$;</p>\n<p>$\\ \\ \\ \\ \\ \\,$稍微改动一下线性筛素数就好了。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">bool</span> vis[N];</span><br><span class=\"line\"><span class=\"type\">int</span> prim[N],phi[N];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Get_Phi</span><span class=\"params\">(<span class=\"type\">int</span> n)</span></span>&#123;</span><br><span class=\"line\">  phi[<span class=\"number\">1</span>]=<span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">2</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!vis[i])&#123;phi[i]=i<span class=\"number\">-1</span>;prim[++prim[<span class=\"number\">0</span>]]=i;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;=prim[<span class=\"number\">0</span>]&amp;&amp;i*prim[j]&lt;=n;j++)&#123;</span><br><span class=\"line\">      vis[i*prim[j]]=<span class=\"number\">1</span>;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(i%prim[j]==<span class=\"number\">0</span>)&#123;phi[i*prim[j]]=phi[i]*prim[j];<span class=\"keyword\">break</span>;&#125;</span><br><span class=\"line\">      phi[i*prim[j]]=phi[i]*(prim[j]<span class=\"number\">-1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>筛莫比乌斯函数$\\mu$</li>\n</ul>\n<p>$\\ \\ \\ \\ \\ \\,$根据性质，若$x$为素数，$\\mu(x)=-1$；对于任意数$a$，存在$\\mu(a\\cdot x)=-\\mu(a)$。</p>\n<p>$\\ \\ \\ \\ \\ \\,$再稍微改动一下线性筛素数就好了。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">bool</span> vis[N];</span><br><span class=\"line\"><span class=\"type\">int</span> prim[N],mu[N];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Get_Mu</span><span class=\"params\">(<span class=\"type\">int</span> n)</span></span>&#123;</span><br><span class=\"line\">  mu[<span class=\"number\">1</span>]=<span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">2</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!vis[i])&#123;mu[i]=<span class=\"number\">-1</span>;prim[++prim[<span class=\"number\">0</span>]]=i;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;=prim[<span class=\"number\">0</span>]&amp;&amp;i*prim[j]&lt;=n;j++)&#123;</span><br><span class=\"line\">      vis[i*prim[j]]=<span class=\"number\">1</span>;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(i%prim[j]==<span class=\"number\">0</span>)<span class=\"keyword\">break</span>;</span><br><span class=\"line\">      mu[i*prim[j]]=-mu[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"对于任意积性函数-f-线性筛\"><a href=\"#对于任意积性函数-f-线性筛\" class=\"headerlink\" title=\"- 对于任意积性函数$f$线性筛\"></a>- 对于任意积性函数$f$线性筛</h2><p>$\\ \\ \\ \\ \\ \\,$对于任意积性函数$f$，我们如何线性筛。</p>\n<ul>\n<li><p>如果$p$是素数：$f(p)=F_1(p)$</p>\n</li>\n<li><p>如果$p$是素数，$i\\%p\\neq0$：$f(pi)=f(i)\\times F_2(p)$</p>\n</li>\n<li><p>如果$p$是素数，$i\\%p=0$：</p>\n<p>我们把 $pi$ 分解成 $p^cx$ ,可以保证 $p^c$ 与 $x$互质，那么有：$f(pi)=f(p^cx)=f(x)*F_3(p,c)$</p>\n</li>\n</ul>\n<p>$\\ \\ \\ \\ \\ \\,$其中，函数$F_1$,$F_2$,$F_3$需要情况制定，模板如下：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">bool</span> vis[N];</span><br><span class=\"line\"><span class=\"type\">int</span> pri[N],cnt[N],power[N];</span><br><span class=\"line\"><span class=\"type\">int</span> prime[N],f[N];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Get_Shai</span><span class=\"params\">(<span class=\"type\">int</span> n)</span></span>&#123;</span><br><span class=\"line\">\tf[<span class=\"number\">1</span>]=<span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">long</span> <span class=\"type\">long</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)power[i]=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">2</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!vis[i])&#123;</span><br><span class=\"line\">                cnt[i]=<span class=\"number\">1</span>;pri[i]=i;power[i]=i;</span><br><span class=\"line\">                prime[++prime[<span class=\"number\">0</span>]]=i;</span><br><span class=\"line\">                f[i]=<span class=\"built_in\">F1</span>(i);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">1</span>,v,pc;j&lt;=prime[<span class=\"number\">0</span>]&amp;&amp;i*prime[j]&lt;=n;j++)&#123;</span><br><span class=\"line\">            v=i*prime[j];</span><br><span class=\"line\">            vis[v]=<span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(i%prime[j]==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                cnt[v]=cnt[i]+<span class=\"number\">1</span>;pri[v]=pri[i];power[v]=power[i]*pri[i];</span><br><span class=\"line\">                f[v]=f[v/power[v]]*<span class=\"built_in\">F3</span>(pri[v],cnt[v]);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            cnt[v]=<span class=\"number\">1</span>;pri[v]=prime[j];power[v]=prime[j];</span><br><span class=\"line\">            f[v]=f[i]*<span class=\"built_in\">F2</span>(prime[j]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<ul>\n<li><h2 id=\"模板题：T34163-【模板】线性筛\"><a href=\"#模板题：T34163-【模板】线性筛\" class=\"headerlink\" title=\"模板题：T34163 【模板】线性筛\"></a>模板题：<a href=\"https://www.luogu.org/problemnew/show/T34163\">T34163 【模板】线性筛</a></h2></li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdlib&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cctype&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;stack&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;map&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;set&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> inf=<span class=\"number\">0x7fffffff</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">double</span> eps=<span class=\"number\">1e-10</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">double</span> pi=<span class=\"built_in\">acos</span>(<span class=\"number\">-1.0</span>);</span><br><span class=\"line\"><span class=\"comment\">//char buf[1&lt;&lt;15],*S=buf,*T=buf;</span></span><br><span class=\"line\"><span class=\"comment\">//char getch()&#123;return S==T&amp;&amp;(T=(S=buf)+fread(buf,1,1&lt;&lt;15,stdin),S==T)?0:*S++;&#125;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">int</span> <span class=\"title\">read</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> x=<span class=\"number\">0</span>,f=<span class=\"number\">1</span>;<span class=\"type\">char</span> ch;ch=<span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(ch&lt;<span class=\"string\">&#x27;0&#x27;</span>||ch&gt;<span class=\"string\">&#x27;9&#x27;</span>)&#123;<span class=\"keyword\">if</span>(ch==<span class=\"string\">&#x27;-&#x27;</span>) f=<span class=\"number\">0</span>;ch=<span class=\"built_in\">getchar</span>();&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(ch&gt;=<span class=\"string\">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class=\"string\">&#x27;9&#x27;</span>)&#123;x=(x&lt;&lt;<span class=\"number\">1</span>)+(x&lt;&lt;<span class=\"number\">3</span>)+(ch&amp;<span class=\"number\">15</span>);ch=<span class=\"built_in\">getchar</span>();&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(f)<span class=\"keyword\">return</span> x;<span class=\"keyword\">else</span> <span class=\"keyword\">return</span> -x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">1e7</span>+<span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">Sig</span><span class=\"params\">(<span class=\"type\">int</span> a)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> ret=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=a;i++)<span class=\"keyword\">if</span>(a%i==<span class=\"number\">0</span>)ret++;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">bool</span> vis[N];</span><br><span class=\"line\"><span class=\"type\">int</span> pri[N],cnt[N],power[N];</span><br><span class=\"line\"><span class=\"type\">int</span> phi[N],mu[N],prime[N],sigma0[N],sigma1[N],inv[N];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Get_Shai</span><span class=\"params\">(<span class=\"type\">int</span> n)</span></span>&#123;</span><br><span class=\"line\">\tphi[<span class=\"number\">1</span>]=mu[<span class=\"number\">1</span>]=sigma0[<span class=\"number\">1</span>]=sigma1[<span class=\"number\">1</span>]=inv[<span class=\"number\">1</span>]=power[<span class=\"number\">1</span>]=<span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">long</span> <span class=\"type\">long</span> i=<span class=\"number\">2</span>;i&lt;=n;i++)</span><br><span class=\"line\">    inv[i]=(n-n/i)*inv[n%i]%n,power[i]=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">2</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!vis[i])&#123;</span><br><span class=\"line\">            cnt[i]=<span class=\"number\">1</span>;pri[i]=i;power[i]=i;</span><br><span class=\"line\">            prime[++prime[<span class=\"number\">0</span>]]=i;</span><br><span class=\"line\">            phi[i]=i<span class=\"number\">-1</span>;</span><br><span class=\"line\">            mu[i]=<span class=\"number\">-1</span>;</span><br><span class=\"line\">            sigma0[i]=<span class=\"number\">2</span>;</span><br><span class=\"line\">            sigma1[i]=i+<span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">1</span>,v,pc;j&lt;=prime[<span class=\"number\">0</span>]&amp;&amp;i*prime[j]&lt;=n;j++)&#123;</span><br><span class=\"line\">            v=i*prime[j];</span><br><span class=\"line\">            vis[v]=<span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(i%prime[j]==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                cnt[v]=cnt[i]+<span class=\"number\">1</span>;pri[v]=pri[i];power[v]=power[i]*pri[i];</span><br><span class=\"line\">                phi[v]   =phi[i]*prime[j];</span><br><span class=\"line\">                sigma0[v]=sigma0[v/power[v]]*(cnt[v]+<span class=\"number\">1</span>);</span><br><span class=\"line\">                sigma1[v]=sigma1[v/power[v]]*(power[v]*pri[v]<span class=\"number\">-1</span>)/(pri[v]<span class=\"number\">-1</span>);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            cnt[v]=<span class=\"number\">1</span>;pri[v]=prime[j];power[v]=prime[j];</span><br><span class=\"line\">            phi[v]   =phi[i]*(prime[j]<span class=\"number\">-1</span>);</span><br><span class=\"line\">            mu[v]    =-mu[i];</span><br><span class=\"line\">            sigma0[v]=sigma0[i]*<span class=\"number\">2</span>;</span><br><span class=\"line\">            sigma1[v]=sigma1[i]*(prime[j]+<span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> n=<span class=\"built_in\">read</span>();</span><br><span class=\"line\">\t<span class=\"built_in\">Get_Shai</span>(n);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d &quot;</span>,phi[i]);<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d &quot;</span>,mu[i]);<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d &quot;</span>,prime[<span class=\"number\">0</span>]);<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=prime[<span class=\"number\">0</span>];i++)<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d &quot;</span>,prime[i]);<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d &quot;</span>,sigma0[i]);<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d &quot;</span>,sigma1[i]);<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d &quot;</span>,inv[i]);<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>"},{"title":"莫比乌斯反演与杜教筛","date":"2018-12-30T04:31:26.000Z","mathjax":true,"_content":"\n$\\ \\ \\ \\ \\ \\ \\ \\,$关于莫比乌斯反演，杜教筛等的杂记：\n\n<!-- more -->\n\n## 初识数论常见积性函数：欧拉函数$\\varphi$，莫比乌斯函数$\\mu$\n\n$\\ \\ \\ \\ \\ \\,$所谓积性函数，就是对于一个函数$f(x)$，若是对于任意$x_1$，$x_2$满足$f(x_1)\\times f(x_2)=f(x_1\\times x_2)$。对于任何积性函数$f(x)$，都有$f(1)=1$。\n\n- 欧拉函数$\\varphi(x)$的意义：在$[1,x]$内，与$x$互质的个数。\n  \n  $1$.若$x$为素数，$\\varphi(x)=x-1$;\n  \n  $2$.若$x\\%p=0$，$\\varphi(x\\cdot p)=\\varphi(x)\\cdot p$;\n  \n  $3$.若$x\\%p\\neq 0$，且$x$为素数，$\\varphi(x\\cdot p)=\\varphi(x)\\cdot (p-1)$;\n  \n  [【证明戳这里~~（%%%大巨佬orz）~~】](https://www.luogu.org/blog/hdxrie/dui-ou-la-han-shuo-di-li-xie)\n\n- 莫比乌斯函数$\\mu(x)$的意义：设$x$的不同质因子个数为$a$，$\\mu(x)=(-1)^{a}$；当n存在平方因子时，$\\mu(x)=0$。\n\n  $1$.若$x$有奇数个不同质因数，$\\mu(x)=-1$。\n\n  $2$.若$x$有偶数个不同质因数，$\\mu(x)=1$。\n\n  $3$.若$x$有平方因子，$\\mu(x)=0$。\n  \n\n$\\ \\ \\ \\ \\ \\,$还有一些简单的积性函数，在这里一并介绍了：\n\n$ϵ(x)=\\begin{cases}1&x=1\\\\0&x>1\\end{cases}$\n\n$id(x)=x$\n\n$id^k(x)=x^k$\n\n$\\sigma(x)=\\sum_{i|x}1$\n\n$1$\n\n\n## 数论分块\n\n$\\ \\ \\ \\ \\ \\,$很多时候，我们会遇到这样的式子:\n\n$\\sum_{i=1}^{n}f(i)\\times g\\left(\\left\\lfloor\\frac{n}{i}\\right\\rfloor\\right)$\n\n$\\ \\ \\ \\ \\ \\,$若是我们已经提前知道了$f(x)$在$x\\in [1,n]$的值了，但是需要多次计算上面形式的式子的值，每次询问复杂度是$O(n)$的，显然在询问很多的时候，没有很划算。\n\n$\\ \\ \\ \\ \\ \\,$我们枚举了很多$i$，使得很多$\\left\\lfloor\\frac{n}{i}\\right\\rfloor$都相等，所以我们可以把$\\sum_{i=1}^{n}$，分成$\\sqrt{n}\\ $块，使得每一块的$\\left\\lfloor\\frac{n}{i}\\right\\rfloor$都相等，这样我们可以通过结合律得到下面的式子，$O(n)$预处理$sum(x)=\\sum_{i=1}^{x}f(i)$，来简化询问复杂度到$O(\\sqrt{n})$：\n\n``` cpp\nint Get_ans(int n){\n  long long ans=0;\n  for(int l=1,r;l<=n;l=r+1){\n    r=n/(n/l);\n    ans+=g(n/l)*(sum[r]-sum[l-1]);\n  }\n  return ans;\n}\n```\n\n## 狄利克雷卷积\n\n  $(f*g)(n)=\\sum_{x|n}f(x)\\times g\\left(\\frac{n}{x}\\right)$\n  \n  既：\n  \n  $(f*g)(n)=\\sum_{xy=n}f(x)\\times g(y)$\n  \n  狄利克雷卷积的性质：\n  \n    **1.交换律:** $f*g=g*f$；\n    \n    **2.结合律:**  $(f*g)*h=g*(f*h)$；$(a\\times f)*g=a\\times (f*g)$；\n    \n    **3.分配律:**  $(f+g)*h=f*h+g*h$；\n    \n    **4.单位元:**  $ϵ*f=f$；其中$ϵ(x)=\\begin{cases}1&x=1\\\\0&x>1\\end{cases}$；\n    \n    **5.逆元:**  对于每个$f(1)\\neq0$的函数，都存在一个函数$g$使得$f*g=ϵ$；\n    \n    **6.两个积性函数的狄利克雷卷积是积性函数。**\n    \n### $\\ \\ \\ \\ \\ \\,$如何求一个函数的逆：\n $\\begin{aligned}ϵ&=f*g\\\\ &=\\sum_{x|n}f(x)\\times g\\left(\\frac{n}{x}\\right)\\\\ &=f(1)\\times g(n)+\\sum_{x|n,i\\neq1}f(x)\\times g\\left(\\frac{n}{x}\\right)\\\\&=[n=1]\\end{aligned}$\n$\\ \\ \\ \\ \\ \\,$所以有：\n$f(1)\\times g(n)=[n=1]-\\sum_{x|n,i\\neq1}f(x)\\times g\\left(\\frac{n}{x}\\right)$\n$g(n)=\\frac{1}{f(1)}\\left([n=1]-\\sum_{x|n,i\\neq1}f(x)\\times g\\left(\\frac{n}{x}\\right)\\right)$\n\n#### $\\ \\ \\ \\ \\ \\,$其中$\\mu$就是函数$1$的逆，也就是说$\\mu*1=ϵ$\n\n\n\n## 莫比乌斯反演\n\n$\\ \\ \\ \\ \\ \\,$莫比乌斯反演的本质就是利用性质$\\mu*1=ϵ$，改变枚举方式，降低式子的复杂度。\n\n$\\ \\ \\ \\ \\ \\,$最常见的操作是,反演式子$\\sum_{i=1}^n\\sum_{j=1}^{m}[gcd(i,j)=1]$:\n\n$\\sum_{i=1}^n\\sum_{j=1}^{m}[gcd(i,j)=1]$\n\n$\\sum_{i=1}^n\\sum_{j=1}^{m}ϵ(gcd(i,j))$\n\n$\\sum_{i=1}^n\\sum_{j=1}^{m}(\\mu*1)(gcd(i,j))$\n\n$\\sum_{i=1}^n\\sum_{j=1}^{m}\\sum_{d|gcd(i,j)}\\mu(d)\\times 1$\n\n$\\sum_{i=1}^n\\sum_{j=1}^{m}\\sum_{d=1}^{min(n,m)}\\mu(d)[d|gcd(i,j)]$\n\n$\\sum_{d=1}^{min(n,m)}\\mu(d)\\sum_{i=1}^n\\sum_{j=1}^{m}[d|gcd(i,j)]$\n\n$\\sum_{d=1}^{min(n,m)}\\mu(d)\\sum_{i=1}^{\\left\\lfloor\\frac{n}{d}\\right\\rfloor}\\sum_{j=1}^{\\left\\lfloor\\frac{m}{d}\\right\\rfloor}1$\n\n$\\sum_{d=1}^{min(n,m)}\\mu(d)\\sum_{i=1}^{\\left\\lfloor\\frac{n}{d}\\right\\rfloor}1\\sum_{j=1}^{\\left\\lfloor\\frac{m}{d}\\right\\rfloor}1$\n\n$\\sum_{d=1}^{min(n,m)}\\mu(d){\\left\\lfloor\\frac{n}{d}\\right\\rfloor}{\\left\\lfloor\\frac{m}{d}\\right\\rfloor}$\n\n\n### [莫比乌斯反演经典例题回顾](/2018/12/30/莫比乌斯反演经典例题回顾/)\n  [P2522 [HAOI2011]Problem b](https://www.luogu.org/problemnew/show/P2522)（反演+容斥）\n  \n  [P2257 YY的GCD](https://www.luogu.org/problemnew/show/P2257)（反演）\n  \n  [P3312 [SDOI2014]数表](https://www.luogu.org/problemnew/show/P3312)（反演+离线+数据结构）\n   \n  [P3704 [SDOI2017]数字表格](https://www.luogu.org/problemnew/show/P3704)（反演）\n\n  [P3327 [SDOI2015]约数个数和](https://www.luogu.org/problemnew/show/P3327)（反演，数表的简化版）\n  \n  [P3455 [POI2007]ZAP-Queries](https://www.luogu.org/problemnew/show/P3455)（反演，裸的）\n  \n  [P1829 [国家集训队]Crash的数字表格 / JZPTAB](https://www.luogu.org/problemnew/show/P1829)（反演+欧拉筛，做法新奇）\n  \n  [P3768 简单的数学题](https://www.luogu.org/problemnew/show/P3768)（反演+杜教筛）\n  \n  [P4240 毒瘤之神的考验](https://www.luogu.org/problemnew/show/P4240)（反演+奇怪的分块，基本上很结论题了）\n  \n  [P1587 [NOI2016]循环之美](https://www.luogu.org/problemnew/show/P1587)（反演+杜教筛+数学知识+奇技淫巧，难题来了）\n\n\n\n## 杜教筛\n\n[【铃悬的数学小讲堂——杜教筛】](https://lx-2003.blog.luogu.org/dujiao-sieve#)\n\n$\\ \\ \\ \\ \\ \\,$杜教筛是求积性函数的前缀和的筛法，复杂度可以达到小于线性的$O(n^{\\frac{2}{3}})$。\n\n$\\ \\ \\ \\ \\ \\,$对于一个积性函数$f$，令$S(n)=\\sum_{i=1}^nf(i)$，再新定义一个函数$g$，则有：\n\n$\\begin{aligned}&\\sum_{i=1}^n(f*g)(i)\\\\=&\\sum_{i=1}^n\\sum_{x\\times y=i}f(x)\\times g(y)\\\\=&\\sum_{y=1}^ng(y)\\sum_{x\\times y\\leq n}f(x)\\\\=&\\sum_{y=1}^ng(y)\\sum_{x=1}^{\\left\\lfloor\\frac{n}{y}\\right\\rfloor}f(x)\\\\=&\\sum_{y=1}^ng(y)S\\left(\\left\\lfloor\\frac{n}{y}\\right\\rfloor\\right)\\end{aligned}$\n\n$\\ \\ \\ \\ \\ \\,$那么就有：\n\n$\\sum_{i=1}^n(f*g)(i)=g(1)S(n)+\\sum_{y=2}^ng(y)S\\left(\\left\\lfloor\\frac{n}{y}\\right\\rfloor\\right)$\n\n$\\ \\ \\ \\ \\ \\,$既：\n\n$g(1)S(n)=\\sum_{i=1}^n(f*g)(i)-\\sum_{y=2}^ng(y)S\\left(\\left\\lfloor\\frac{n}{y}\\right\\rfloor\\right)$\n\n$S(n)=\\frac{\\sum_{i=1}^n(f*g)(i)-\\sum_{y=2}^ng(y)S\\left(\\left\\lfloor\\frac{n}{y}\\right\\rfloor\\right)}{g(1)}$\n\n$S(n)={\\sum_{i=1}^n(f*g)(i)-\\sum_{y=2}^ng(y)S\\left(\\left\\lfloor\\frac{n}{y}\\right\\rfloor\\right)}$\n\n$\\ \\ \\ \\ \\ \\,$若是函数$(f*g)$和$g$的前缀和都可以$O(1)$地算出来，那么我们计算$S(n)$的值的时候递归处理，便可以优化复杂度到$O(n^{\\frac{3}{4}})$。\n\n$\\ \\ \\ \\ \\ \\,$但若是我们先线性预处理出$S(i)\\ {i\\in[1,n^{\\frac{2}{3}}]}$的值，复杂度就可以优化到$O(n^{\\frac{2}{3}})$\n\n$\\ \\ \\ \\ \\ \\,$那么现在的问题是如何找到这个神奇的函数$g$：\n\n- 对于$\\varphi(x)$：\n  \n  $\\begin{aligned}\\varphi(x)=&\\prod_{p|x,p\\ \\rm{is\\ prime}}\\frac{p^k(p-1)}{p}\\\\=&x\\times \\prod_{p|x,p\\ \\rm{is\\ prime}}\\left(1-\\frac{1}{p}\\right)\\end{aligned}$\n  \n  $\\begin{aligned}(\\varphi*1)(x)=&\\sum_{i|x}\\varphi(i)\\times 1\\left(\\frac{x}{i}\\right)\\\\=&\\sum_{i|x}\\varphi(i)\\\\=&\\sum_{i|x}i\\times \\prod_{p|i,p\\ \\rm{is\\ prime}}\\left(1-\\frac{1}{p}\\right)\\end{aligned}$\n  \n显然$(\\varphi*1)(x)$\n\n在$x$为素数的次方情况下，$(\\varphi*1)(x)=x$\n\n，而$(\\varphi*1)(x)$\n\n又为积性函数，可以证明在定义域下$(\\varphi*1)(x)=x$\n\n，既$\\varphi*1=id$。\n  \n  **所以我们选取$g=1$,$(f*g)=id$，容易求和。**\n \n``` c\nlong long Sum_id(int x){return 1ll*x*(x+1)/2;}\nlong long Sum_1(int l,int r){return 1ll*r-l+1;}\nlong long g1=1ll;\nlong long Sum_phi(int x){\n  long long ret=Sum_id(x);\n  for(int i=2,j;i<=x;i=j+1)\n  j=x/(x/i),ret-=Sum_1(i,j)*Sum_phi(x/i);\n  return ret;\n}\n```\n  \n- 对于$\\mu(x)$：\n\n  已知$\\mu*1=ϵ$\n  \n  **所以我们选取$g=1$,$(f*g)=ϵ$，容易求和。**\n  \n``` c\nlong long Sum_e(int x){return 1ll;}\nlong long Sum_1(int l,int r){return 1ll*r-l+1;}\nlong long g1=1ll;\nlong long Sum_mu(int x){\n  long long ret=Sum_e(x);\n  for(int i=2,j;i<=x;i=j+1)\n  j=x/(x/i),ret-=Sum_1(i,j)*Sum_mu(x/i);\n  return ret;\n}\n```\n\n**注意：杜教筛套杜教筛复杂度还是$O(n^\\frac{2}{3})$，因为实际上他们是并列进行的。**\n\n### 贝尔级数\n\n  $\\ \\ \\ \\ \\ \\,$对于其他积性函数，为了找到满足条件的$g$，我们引入**贝尔级数**，需要用到生成函数的姿势，但是实际上只需要记住下面的公式就够用了：\n  \n  $\\ \\ \\ \\ \\ \\,$对于积性函数$f$，定义$f$模$p$的贝尔级数为：\n  \n  $f_p(x)=\\sum_{i=0}^{\\infty}f(p^i)x^i$\n  \n  $\\ \\ \\ \\ \\ \\,$一个完全积性函数的贝尔级数为几何级数：\n  \n  $f_p(x)=\\frac{1}{1-f(p)\\times x}$\n  \n  $\\ \\ \\ \\ \\ \\,$例如（“*”完全积性函数）:\n  \n  *$ϵ_p(x)=1$\n \n  *$1_p(x)=\\frac{1}{1-x}$\n  \n  *$id^k_p(x)=\\frac{1}{1-p^k\\cdot x}$\n  \n  $\\mu_p(x)=1-x$\n  \n  $\\sigma_p(x)=\\frac{1}{(1-x)^2}$\n  \n  $(\\sigma_1)_p(x)=\\frac{1}{1-\\sigma_1(p)x+px^2}$ ——> $\\left[(\\sigma_k)_p(x)=\\frac{1}{1-\\sigma_k(p)x+p^kx^2}\\right]$\n  \n  $\\varphi_p(x)=\\frac{1-x}{1-p\\cdot x}$\n  \n  $\\ \\ \\ \\ \\ \\,$有了这个东西，我们边可以把狄利克雷卷积化成一般卷积的形式：\n  \n  $(f*g)_p(x)=f_p(x)\\times g_p(x)$\n  \n  $\\ \\ \\ \\ \\ \\,$再带回去就可以得到我们想要的$g$和$g*f$，主观感觉非常复杂。\n\n\n### 一些比较常见的容易求的卷积\n\n  $\\mu*\\sigma=1$\n  \n  $id*id=n$\n  \n  $\\varphi*1=id$\n  \n  $\\mu*id=\\varphi$\n","source":"_posts/莫比乌斯反演与杜教筛.md","raw":"---\ntitle: '莫比乌斯反演与杜教筛'\ndate: 2018-12-30 12:31:26\ncategories:\n- 学习笔记\ntags:\n- OI\n- 莫比乌斯反演\n- 杜教筛\nmathjax: true\n---\n\n$\\ \\ \\ \\ \\ \\ \\ \\,$关于莫比乌斯反演，杜教筛等的杂记：\n\n<!-- more -->\n\n## 初识数论常见积性函数：欧拉函数$\\varphi$，莫比乌斯函数$\\mu$\n\n$\\ \\ \\ \\ \\ \\,$所谓积性函数，就是对于一个函数$f(x)$，若是对于任意$x_1$，$x_2$满足$f(x_1)\\times f(x_2)=f(x_1\\times x_2)$。对于任何积性函数$f(x)$，都有$f(1)=1$。\n\n- 欧拉函数$\\varphi(x)$的意义：在$[1,x]$内，与$x$互质的个数。\n  \n  $1$.若$x$为素数，$\\varphi(x)=x-1$;\n  \n  $2$.若$x\\%p=0$，$\\varphi(x\\cdot p)=\\varphi(x)\\cdot p$;\n  \n  $3$.若$x\\%p\\neq 0$，且$x$为素数，$\\varphi(x\\cdot p)=\\varphi(x)\\cdot (p-1)$;\n  \n  [【证明戳这里~~（%%%大巨佬orz）~~】](https://www.luogu.org/blog/hdxrie/dui-ou-la-han-shuo-di-li-xie)\n\n- 莫比乌斯函数$\\mu(x)$的意义：设$x$的不同质因子个数为$a$，$\\mu(x)=(-1)^{a}$；当n存在平方因子时，$\\mu(x)=0$。\n\n  $1$.若$x$有奇数个不同质因数，$\\mu(x)=-1$。\n\n  $2$.若$x$有偶数个不同质因数，$\\mu(x)=1$。\n\n  $3$.若$x$有平方因子，$\\mu(x)=0$。\n  \n\n$\\ \\ \\ \\ \\ \\,$还有一些简单的积性函数，在这里一并介绍了：\n\n$ϵ(x)=\\begin{cases}1&x=1\\\\0&x>1\\end{cases}$\n\n$id(x)=x$\n\n$id^k(x)=x^k$\n\n$\\sigma(x)=\\sum_{i|x}1$\n\n$1$\n\n\n## 数论分块\n\n$\\ \\ \\ \\ \\ \\,$很多时候，我们会遇到这样的式子:\n\n$\\sum_{i=1}^{n}f(i)\\times g\\left(\\left\\lfloor\\frac{n}{i}\\right\\rfloor\\right)$\n\n$\\ \\ \\ \\ \\ \\,$若是我们已经提前知道了$f(x)$在$x\\in [1,n]$的值了，但是需要多次计算上面形式的式子的值，每次询问复杂度是$O(n)$的，显然在询问很多的时候，没有很划算。\n\n$\\ \\ \\ \\ \\ \\,$我们枚举了很多$i$，使得很多$\\left\\lfloor\\frac{n}{i}\\right\\rfloor$都相等，所以我们可以把$\\sum_{i=1}^{n}$，分成$\\sqrt{n}\\ $块，使得每一块的$\\left\\lfloor\\frac{n}{i}\\right\\rfloor$都相等，这样我们可以通过结合律得到下面的式子，$O(n)$预处理$sum(x)=\\sum_{i=1}^{x}f(i)$，来简化询问复杂度到$O(\\sqrt{n})$：\n\n``` cpp\nint Get_ans(int n){\n  long long ans=0;\n  for(int l=1,r;l<=n;l=r+1){\n    r=n/(n/l);\n    ans+=g(n/l)*(sum[r]-sum[l-1]);\n  }\n  return ans;\n}\n```\n\n## 狄利克雷卷积\n\n  $(f*g)(n)=\\sum_{x|n}f(x)\\times g\\left(\\frac{n}{x}\\right)$\n  \n  既：\n  \n  $(f*g)(n)=\\sum_{xy=n}f(x)\\times g(y)$\n  \n  狄利克雷卷积的性质：\n  \n    **1.交换律:** $f*g=g*f$；\n    \n    **2.结合律:**  $(f*g)*h=g*(f*h)$；$(a\\times f)*g=a\\times (f*g)$；\n    \n    **3.分配律:**  $(f+g)*h=f*h+g*h$；\n    \n    **4.单位元:**  $ϵ*f=f$；其中$ϵ(x)=\\begin{cases}1&x=1\\\\0&x>1\\end{cases}$；\n    \n    **5.逆元:**  对于每个$f(1)\\neq0$的函数，都存在一个函数$g$使得$f*g=ϵ$；\n    \n    **6.两个积性函数的狄利克雷卷积是积性函数。**\n    \n### $\\ \\ \\ \\ \\ \\,$如何求一个函数的逆：\n $\\begin{aligned}ϵ&=f*g\\\\ &=\\sum_{x|n}f(x)\\times g\\left(\\frac{n}{x}\\right)\\\\ &=f(1)\\times g(n)+\\sum_{x|n,i\\neq1}f(x)\\times g\\left(\\frac{n}{x}\\right)\\\\&=[n=1]\\end{aligned}$\n$\\ \\ \\ \\ \\ \\,$所以有：\n$f(1)\\times g(n)=[n=1]-\\sum_{x|n,i\\neq1}f(x)\\times g\\left(\\frac{n}{x}\\right)$\n$g(n)=\\frac{1}{f(1)}\\left([n=1]-\\sum_{x|n,i\\neq1}f(x)\\times g\\left(\\frac{n}{x}\\right)\\right)$\n\n#### $\\ \\ \\ \\ \\ \\,$其中$\\mu$就是函数$1$的逆，也就是说$\\mu*1=ϵ$\n\n\n\n## 莫比乌斯反演\n\n$\\ \\ \\ \\ \\ \\,$莫比乌斯反演的本质就是利用性质$\\mu*1=ϵ$，改变枚举方式，降低式子的复杂度。\n\n$\\ \\ \\ \\ \\ \\,$最常见的操作是,反演式子$\\sum_{i=1}^n\\sum_{j=1}^{m}[gcd(i,j)=1]$:\n\n$\\sum_{i=1}^n\\sum_{j=1}^{m}[gcd(i,j)=1]$\n\n$\\sum_{i=1}^n\\sum_{j=1}^{m}ϵ(gcd(i,j))$\n\n$\\sum_{i=1}^n\\sum_{j=1}^{m}(\\mu*1)(gcd(i,j))$\n\n$\\sum_{i=1}^n\\sum_{j=1}^{m}\\sum_{d|gcd(i,j)}\\mu(d)\\times 1$\n\n$\\sum_{i=1}^n\\sum_{j=1}^{m}\\sum_{d=1}^{min(n,m)}\\mu(d)[d|gcd(i,j)]$\n\n$\\sum_{d=1}^{min(n,m)}\\mu(d)\\sum_{i=1}^n\\sum_{j=1}^{m}[d|gcd(i,j)]$\n\n$\\sum_{d=1}^{min(n,m)}\\mu(d)\\sum_{i=1}^{\\left\\lfloor\\frac{n}{d}\\right\\rfloor}\\sum_{j=1}^{\\left\\lfloor\\frac{m}{d}\\right\\rfloor}1$\n\n$\\sum_{d=1}^{min(n,m)}\\mu(d)\\sum_{i=1}^{\\left\\lfloor\\frac{n}{d}\\right\\rfloor}1\\sum_{j=1}^{\\left\\lfloor\\frac{m}{d}\\right\\rfloor}1$\n\n$\\sum_{d=1}^{min(n,m)}\\mu(d){\\left\\lfloor\\frac{n}{d}\\right\\rfloor}{\\left\\lfloor\\frac{m}{d}\\right\\rfloor}$\n\n\n### [莫比乌斯反演经典例题回顾](/2018/12/30/莫比乌斯反演经典例题回顾/)\n  [P2522 [HAOI2011]Problem b](https://www.luogu.org/problemnew/show/P2522)（反演+容斥）\n  \n  [P2257 YY的GCD](https://www.luogu.org/problemnew/show/P2257)（反演）\n  \n  [P3312 [SDOI2014]数表](https://www.luogu.org/problemnew/show/P3312)（反演+离线+数据结构）\n   \n  [P3704 [SDOI2017]数字表格](https://www.luogu.org/problemnew/show/P3704)（反演）\n\n  [P3327 [SDOI2015]约数个数和](https://www.luogu.org/problemnew/show/P3327)（反演，数表的简化版）\n  \n  [P3455 [POI2007]ZAP-Queries](https://www.luogu.org/problemnew/show/P3455)（反演，裸的）\n  \n  [P1829 [国家集训队]Crash的数字表格 / JZPTAB](https://www.luogu.org/problemnew/show/P1829)（反演+欧拉筛，做法新奇）\n  \n  [P3768 简单的数学题](https://www.luogu.org/problemnew/show/P3768)（反演+杜教筛）\n  \n  [P4240 毒瘤之神的考验](https://www.luogu.org/problemnew/show/P4240)（反演+奇怪的分块，基本上很结论题了）\n  \n  [P1587 [NOI2016]循环之美](https://www.luogu.org/problemnew/show/P1587)（反演+杜教筛+数学知识+奇技淫巧，难题来了）\n\n\n\n## 杜教筛\n\n[【铃悬的数学小讲堂——杜教筛】](https://lx-2003.blog.luogu.org/dujiao-sieve#)\n\n$\\ \\ \\ \\ \\ \\,$杜教筛是求积性函数的前缀和的筛法，复杂度可以达到小于线性的$O(n^{\\frac{2}{3}})$。\n\n$\\ \\ \\ \\ \\ \\,$对于一个积性函数$f$，令$S(n)=\\sum_{i=1}^nf(i)$，再新定义一个函数$g$，则有：\n\n$\\begin{aligned}&\\sum_{i=1}^n(f*g)(i)\\\\=&\\sum_{i=1}^n\\sum_{x\\times y=i}f(x)\\times g(y)\\\\=&\\sum_{y=1}^ng(y)\\sum_{x\\times y\\leq n}f(x)\\\\=&\\sum_{y=1}^ng(y)\\sum_{x=1}^{\\left\\lfloor\\frac{n}{y}\\right\\rfloor}f(x)\\\\=&\\sum_{y=1}^ng(y)S\\left(\\left\\lfloor\\frac{n}{y}\\right\\rfloor\\right)\\end{aligned}$\n\n$\\ \\ \\ \\ \\ \\,$那么就有：\n\n$\\sum_{i=1}^n(f*g)(i)=g(1)S(n)+\\sum_{y=2}^ng(y)S\\left(\\left\\lfloor\\frac{n}{y}\\right\\rfloor\\right)$\n\n$\\ \\ \\ \\ \\ \\,$既：\n\n$g(1)S(n)=\\sum_{i=1}^n(f*g)(i)-\\sum_{y=2}^ng(y)S\\left(\\left\\lfloor\\frac{n}{y}\\right\\rfloor\\right)$\n\n$S(n)=\\frac{\\sum_{i=1}^n(f*g)(i)-\\sum_{y=2}^ng(y)S\\left(\\left\\lfloor\\frac{n}{y}\\right\\rfloor\\right)}{g(1)}$\n\n$S(n)={\\sum_{i=1}^n(f*g)(i)-\\sum_{y=2}^ng(y)S\\left(\\left\\lfloor\\frac{n}{y}\\right\\rfloor\\right)}$\n\n$\\ \\ \\ \\ \\ \\,$若是函数$(f*g)$和$g$的前缀和都可以$O(1)$地算出来，那么我们计算$S(n)$的值的时候递归处理，便可以优化复杂度到$O(n^{\\frac{3}{4}})$。\n\n$\\ \\ \\ \\ \\ \\,$但若是我们先线性预处理出$S(i)\\ {i\\in[1,n^{\\frac{2}{3}}]}$的值，复杂度就可以优化到$O(n^{\\frac{2}{3}})$\n\n$\\ \\ \\ \\ \\ \\,$那么现在的问题是如何找到这个神奇的函数$g$：\n\n- 对于$\\varphi(x)$：\n  \n  $\\begin{aligned}\\varphi(x)=&\\prod_{p|x,p\\ \\rm{is\\ prime}}\\frac{p^k(p-1)}{p}\\\\=&x\\times \\prod_{p|x,p\\ \\rm{is\\ prime}}\\left(1-\\frac{1}{p}\\right)\\end{aligned}$\n  \n  $\\begin{aligned}(\\varphi*1)(x)=&\\sum_{i|x}\\varphi(i)\\times 1\\left(\\frac{x}{i}\\right)\\\\=&\\sum_{i|x}\\varphi(i)\\\\=&\\sum_{i|x}i\\times \\prod_{p|i,p\\ \\rm{is\\ prime}}\\left(1-\\frac{1}{p}\\right)\\end{aligned}$\n  \n显然$(\\varphi*1)(x)$\n\n在$x$为素数的次方情况下，$(\\varphi*1)(x)=x$\n\n，而$(\\varphi*1)(x)$\n\n又为积性函数，可以证明在定义域下$(\\varphi*1)(x)=x$\n\n，既$\\varphi*1=id$。\n  \n  **所以我们选取$g=1$,$(f*g)=id$，容易求和。**\n \n``` c\nlong long Sum_id(int x){return 1ll*x*(x+1)/2;}\nlong long Sum_1(int l,int r){return 1ll*r-l+1;}\nlong long g1=1ll;\nlong long Sum_phi(int x){\n  long long ret=Sum_id(x);\n  for(int i=2,j;i<=x;i=j+1)\n  j=x/(x/i),ret-=Sum_1(i,j)*Sum_phi(x/i);\n  return ret;\n}\n```\n  \n- 对于$\\mu(x)$：\n\n  已知$\\mu*1=ϵ$\n  \n  **所以我们选取$g=1$,$(f*g)=ϵ$，容易求和。**\n  \n``` c\nlong long Sum_e(int x){return 1ll;}\nlong long Sum_1(int l,int r){return 1ll*r-l+1;}\nlong long g1=1ll;\nlong long Sum_mu(int x){\n  long long ret=Sum_e(x);\n  for(int i=2,j;i<=x;i=j+1)\n  j=x/(x/i),ret-=Sum_1(i,j)*Sum_mu(x/i);\n  return ret;\n}\n```\n\n**注意：杜教筛套杜教筛复杂度还是$O(n^\\frac{2}{3})$，因为实际上他们是并列进行的。**\n\n### 贝尔级数\n\n  $\\ \\ \\ \\ \\ \\,$对于其他积性函数，为了找到满足条件的$g$，我们引入**贝尔级数**，需要用到生成函数的姿势，但是实际上只需要记住下面的公式就够用了：\n  \n  $\\ \\ \\ \\ \\ \\,$对于积性函数$f$，定义$f$模$p$的贝尔级数为：\n  \n  $f_p(x)=\\sum_{i=0}^{\\infty}f(p^i)x^i$\n  \n  $\\ \\ \\ \\ \\ \\,$一个完全积性函数的贝尔级数为几何级数：\n  \n  $f_p(x)=\\frac{1}{1-f(p)\\times x}$\n  \n  $\\ \\ \\ \\ \\ \\,$例如（“*”完全积性函数）:\n  \n  *$ϵ_p(x)=1$\n \n  *$1_p(x)=\\frac{1}{1-x}$\n  \n  *$id^k_p(x)=\\frac{1}{1-p^k\\cdot x}$\n  \n  $\\mu_p(x)=1-x$\n  \n  $\\sigma_p(x)=\\frac{1}{(1-x)^2}$\n  \n  $(\\sigma_1)_p(x)=\\frac{1}{1-\\sigma_1(p)x+px^2}$ ——> $\\left[(\\sigma_k)_p(x)=\\frac{1}{1-\\sigma_k(p)x+p^kx^2}\\right]$\n  \n  $\\varphi_p(x)=\\frac{1-x}{1-p\\cdot x}$\n  \n  $\\ \\ \\ \\ \\ \\,$有了这个东西，我们边可以把狄利克雷卷积化成一般卷积的形式：\n  \n  $(f*g)_p(x)=f_p(x)\\times g_p(x)$\n  \n  $\\ \\ \\ \\ \\ \\,$再带回去就可以得到我们想要的$g$和$g*f$，主观感觉非常复杂。\n\n\n### 一些比较常见的容易求的卷积\n\n  $\\mu*\\sigma=1$\n  \n  $id*id=n$\n  \n  $\\varphi*1=id$\n  \n  $\\mu*id=\\varphi$\n","slug":"莫比乌斯反演与杜教筛","published":1,"updated":"2022-02-14T05:35:00.769Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0i63w6k0029u4gbbxyfbdhf","content":"<p>$\\ \\ \\ \\ \\ \\ \\ \\,$关于莫比乌斯反演，杜教筛等的杂记：</p>\n<span id=\"more\"></span>\n<h2 id=\"初识数论常见积性函数：欧拉函数-varphi-，莫比乌斯函数-mu\"><a href=\"#初识数论常见积性函数：欧拉函数-varphi-，莫比乌斯函数-mu\" class=\"headerlink\" title=\"初识数论常见积性函数：欧拉函数$\\varphi$，莫比乌斯函数$\\mu$\"></a>初识数论常见积性函数：欧拉函数$\\varphi$，莫比乌斯函数$\\mu$</h2><p>$\\ \\ \\ \\ \\ \\,$所谓积性函数，就是对于一个函数$f(x)$，若是对于任意$x_1$，$x_2$满足$f(x_1)\\times f(x_2)=f(x_1\\times x_2)$。对于任何积性函数$f(x)$，都有$f(1)=1$。</p>\n<ul>\n<li><p>欧拉函数$\\varphi(x)$的意义：在$[1,x]$内，与$x$互质的个数。</p>\n<p>$1$.若$x$为素数，$\\varphi(x)=x-1$;</p>\n<p>$2$.若$x\\%p=0$，$\\varphi(x\\cdot p)=\\varphi(x)\\cdot p$;</p>\n<p>$3$.若$x\\%p\\neq 0$，且$x$为素数，$\\varphi(x\\cdot p)=\\varphi(x)\\cdot (p-1)$;</p>\n<p><a href=\"https://www.luogu.org/blog/hdxrie/dui-ou-la-han-shuo-di-li-xie\">【证明戳这里<del>（%%%大巨佬orz）</del>】</a></p>\n</li>\n<li><p>莫比乌斯函数$\\mu(x)$的意义：设$x$的不同质因子个数为$a$，$\\mu(x)=(-1)^{a}$；当n存在平方因子时，$\\mu(x)=0$。</p>\n<p>$1$.若$x$有奇数个不同质因数，$\\mu(x)=-1$。</p>\n<p>$2$.若$x$有偶数个不同质因数，$\\mu(x)=1$。</p>\n<p>$3$.若$x$有平方因子，$\\mu(x)=0$。</p>\n</li>\n</ul>\n<p>$\\ \\ \\ \\ \\ \\,$还有一些简单的积性函数，在这里一并介绍了：</p>\n<p>$ϵ(x)=\\begin{cases}1&amp;x=1\\\\0&amp;x&gt;1\\end{cases}$</p>\n<p>$id(x)=x$</p>\n<p>$id^k(x)=x^k$</p>\n<p>$\\sigma(x)=\\sum_{i|x}1$</p>\n<p>$1$</p>\n<h2 id=\"数论分块\"><a href=\"#数论分块\" class=\"headerlink\" title=\"数论分块\"></a>数论分块</h2><p>$\\ \\ \\ \\ \\ \\,$很多时候，我们会遇到这样的式子:</p>\n<p>$\\sum_{i=1}^{n}f(i)\\times g\\left(\\left\\lfloor\\frac{n}{i}\\right\\rfloor\\right)$</p>\n<p>$\\ \\ \\ \\ \\ \\,$若是我们已经提前知道了$f(x)$在$x\\in [1,n]$的值了，但是需要多次计算上面形式的式子的值，每次询问复杂度是$O(n)$的，显然在询问很多的时候，没有很划算。</p>\n<p>$\\ \\ \\ \\ \\ \\,$我们枚举了很多$i$，使得很多$\\left\\lfloor\\frac{n}{i}\\right\\rfloor$都相等，所以我们可以把$\\sum_{i=1}^{n}$，分成$\\sqrt{n}\\ $块，使得每一块的$\\left\\lfloor\\frac{n}{i}\\right\\rfloor$都相等，这样我们可以通过结合律得到下面的式子，$O(n)$预处理$sum(x)=\\sum_{i=1}^{x}f(i)$，来简化询问复杂度到$O(\\sqrt{n})$：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">Get_ans</span><span class=\"params\">(<span class=\"type\">int</span> n)</span></span>&#123;</span><br><span class=\"line\">  <span class=\"type\">long</span> <span class=\"type\">long</span> ans=<span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> l=<span class=\"number\">1</span>,r;l&lt;=n;l=r+<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">    r=n/(n/l);</span><br><span class=\"line\">    ans+=<span class=\"built_in\">g</span>(n/l)*(sum[r]-sum[l<span class=\"number\">-1</span>]);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"狄利克雷卷积\"><a href=\"#狄利克雷卷积\" class=\"headerlink\" title=\"狄利克雷卷积\"></a>狄利克雷卷积</h2><p>  $(f*g)(n)=\\sum_{x|n}f(x)\\times g\\left(\\frac{n}{x}\\right)$</p>\n<p>  既：</p>\n<p>  $(f*g)(n)=\\sum_{xy=n}f(x)\\times g(y)$</p>\n<p>  狄利克雷卷积的性质：</p>\n<pre><code>**1.交换律:** $f*g=g*f$；\n\n**2.结合律:**  $(f*g)*h=g*(f*h)$；$(a\\times f)*g=a\\times (f*g)$；\n\n**3.分配律:**  $(f+g)*h=f*h+g*h$；\n\n**4.单位元:**  $ϵ*f=f$；其中$ϵ(x)=\\begin&#123;cases&#125;1&amp;x=1\\\\0&amp;x&gt;1\\end&#123;cases&#125;$；\n\n**5.逆元:**  对于每个$f(1)\\neq0$的函数，都存在一个函数$g$使得$f*g=ϵ$；\n\n**6.两个积性函数的狄利克雷卷积是积性函数。**\n</code></pre><h3 id=\"如何求一个函数的逆：\"><a href=\"#如何求一个函数的逆：\" class=\"headerlink\" title=\"$\\ \\ \\ \\ \\ \\,$如何求一个函数的逆：\"></a>$\\ \\ \\ \\ \\ \\,$如何求一个函数的逆：</h3><p> $\\begin{aligned}ϵ&amp;=f*g\\\\ &amp;=\\sum_{x|n}f(x)\\times g\\left(\\frac{n}{x}\\right)\\\\ &amp;=f(1)\\times g(n)+\\sum_{x|n,i\\neq1}f(x)\\times g\\left(\\frac{n}{x}\\right)\\\\&amp;=[n=1]\\end{aligned}$<br>$\\ \\ \\ \\ \\ \\,$所以有：<br>$f(1)\\times g(n)=[n=1]-\\sum_{x|n,i\\neq1}f(x)\\times g\\left(\\frac{n}{x}\\right)$<br>$g(n)=\\frac{1}{f(1)}\\left([n=1]-\\sum_{x|n,i\\neq1}f(x)\\times g\\left(\\frac{n}{x}\\right)\\right)$</p>\n<h4 id=\"其中-mu-就是函数-1-的逆，也就是说-mu-1-ϵ\"><a href=\"#其中-mu-就是函数-1-的逆，也就是说-mu-1-ϵ\" class=\"headerlink\" title=\"$\\ \\ \\ \\ \\ \\,$其中$\\mu$就是函数$1$的逆，也就是说$\\mu*1=ϵ$\"></a>$\\ \\ \\ \\ \\ \\,$其中$\\mu$就是函数$1$的逆，也就是说$\\mu*1=ϵ$</h4><h2 id=\"莫比乌斯反演\"><a href=\"#莫比乌斯反演\" class=\"headerlink\" title=\"莫比乌斯反演\"></a>莫比乌斯反演</h2><p>$\\ \\ \\ \\ \\ \\,$莫比乌斯反演的本质就是利用性质$\\mu*1=ϵ$，改变枚举方式，降低式子的复杂度。</p>\n<p>$\\ \\ \\ \\ \\ \\,$最常见的操作是,反演式子$\\sum_{i=1}^n\\sum_{j=1}^{m}[gcd(i,j)=1]$:</p>\n<p>$\\sum_{i=1}^n\\sum_{j=1}^{m}[gcd(i,j)=1]$</p>\n<p>$\\sum_{i=1}^n\\sum_{j=1}^{m}ϵ(gcd(i,j))$</p>\n<p>$\\sum_{i=1}^n\\sum_{j=1}^{m}(\\mu*1)(gcd(i,j))$</p>\n<p>$\\sum_{i=1}^n\\sum_{j=1}^{m}\\sum_{d|gcd(i,j)}\\mu(d)\\times 1$</p>\n<p>$\\sum_{i=1}^n\\sum_{j=1}^{m}\\sum_{d=1}^{min(n,m)}\\mu(d)[d|gcd(i,j)]$</p>\n<p>$\\sum_{d=1}^{min(n,m)}\\mu(d)\\sum_{i=1}^n\\sum_{j=1}^{m}[d|gcd(i,j)]$</p>\n<p>$\\sum_{d=1}^{min(n,m)}\\mu(d)\\sum_{i=1}^{\\left\\lfloor\\frac{n}{d}\\right\\rfloor}\\sum_{j=1}^{\\left\\lfloor\\frac{m}{d}\\right\\rfloor}1$</p>\n<p>$\\sum_{d=1}^{min(n,m)}\\mu(d)\\sum_{i=1}^{\\left\\lfloor\\frac{n}{d}\\right\\rfloor}1\\sum_{j=1}^{\\left\\lfloor\\frac{m}{d}\\right\\rfloor}1$</p>\n<p>$\\sum_{d=1}^{min(n,m)}\\mu(d){\\left\\lfloor\\frac{n}{d}\\right\\rfloor}{\\left\\lfloor\\frac{m}{d}\\right\\rfloor}$</p>\n<h3 id=\"莫比乌斯反演经典例题回顾\"><a href=\"#莫比乌斯反演经典例题回顾\" class=\"headerlink\" title=\"莫比乌斯反演经典例题回顾\"></a><a href=\"/2018/12/30/莫比乌斯反演经典例题回顾/\">莫比乌斯反演经典例题回顾</a></h3><p>  <a href=\"https://www.luogu.org/problemnew/show/P2522\">P2522 [HAOI2011]Problem b</a>（反演+容斥）</p>\n<p>  <a href=\"https://www.luogu.org/problemnew/show/P2257\">P2257 YY的GCD</a>（反演）</p>\n<p>  <a href=\"https://www.luogu.org/problemnew/show/P3312\">P3312 [SDOI2014]数表</a>（反演+离线+数据结构）</p>\n<p>  <a href=\"https://www.luogu.org/problemnew/show/P3704\">P3704 [SDOI2017]数字表格</a>（反演）</p>\n<p>  <a href=\"https://www.luogu.org/problemnew/show/P3327\">P3327 [SDOI2015]约数个数和</a>（反演，数表的简化版）</p>\n<p>  <a href=\"https://www.luogu.org/problemnew/show/P3455\">P3455 [POI2007]ZAP-Queries</a>（反演，裸的）</p>\n<p>  <a href=\"https://www.luogu.org/problemnew/show/P1829\">P1829 [国家集训队]Crash的数字表格 / JZPTAB</a>（反演+欧拉筛，做法新奇）</p>\n<p>  <a href=\"https://www.luogu.org/problemnew/show/P3768\">P3768 简单的数学题</a>（反演+杜教筛）</p>\n<p>  <a href=\"https://www.luogu.org/problemnew/show/P4240\">P4240 毒瘤之神的考验</a>（反演+奇怪的分块，基本上很结论题了）</p>\n<p>  <a href=\"https://www.luogu.org/problemnew/show/P1587\">P1587 [NOI2016]循环之美</a>（反演+杜教筛+数学知识+奇技淫巧，难题来了）</p>\n<h2 id=\"杜教筛\"><a href=\"#杜教筛\" class=\"headerlink\" title=\"杜教筛\"></a>杜教筛</h2><p><a href=\"https://lx-2003.blog.luogu.org/dujiao-sieve#\">【铃悬的数学小讲堂——杜教筛】</a></p>\n<p>$\\ \\ \\ \\ \\ \\,$杜教筛是求积性函数的前缀和的筛法，复杂度可以达到小于线性的$O(n^{\\frac{2}{3}})$。</p>\n<p>$\\ \\ \\ \\ \\ \\,$对于一个积性函数$f$，令$S(n)=\\sum_{i=1}^nf(i)$，再新定义一个函数$g$，则有：</p>\n<p>$\\begin{aligned}&amp;\\sum_{i=1}^n(f*g)(i)\\\\=&amp;\\sum_{i=1}^n\\sum_{x\\times y=i}f(x)\\times g(y)\\\\=&amp;\\sum_{y=1}^ng(y)\\sum_{x\\times y\\leq n}f(x)\\\\=&amp;\\sum_{y=1}^ng(y)\\sum_{x=1}^{\\left\\lfloor\\frac{n}{y}\\right\\rfloor}f(x)\\\\=&amp;\\sum_{y=1}^ng(y)S\\left(\\left\\lfloor\\frac{n}{y}\\right\\rfloor\\right)\\end{aligned}$</p>\n<p>$\\ \\ \\ \\ \\ \\,$那么就有：</p>\n<p>$\\sum_{i=1}^n(f*g)(i)=g(1)S(n)+\\sum_{y=2}^ng(y)S\\left(\\left\\lfloor\\frac{n}{y}\\right\\rfloor\\right)$</p>\n<p>$\\ \\ \\ \\ \\ \\,$既：</p>\n<p>$g(1)S(n)=\\sum_{i=1}^n(f*g)(i)-\\sum_{y=2}^ng(y)S\\left(\\left\\lfloor\\frac{n}{y}\\right\\rfloor\\right)$</p>\n<p>$S(n)=\\frac{\\sum_{i=1}^n(f*g)(i)-\\sum_{y=2}^ng(y)S\\left(\\left\\lfloor\\frac{n}{y}\\right\\rfloor\\right)}{g(1)}$</p>\n<p>$S(n)={\\sum_{i=1}^n(f*g)(i)-\\sum_{y=2}^ng(y)S\\left(\\left\\lfloor\\frac{n}{y}\\right\\rfloor\\right)}$</p>\n<p>$\\ \\ \\ \\ \\ \\,$若是函数$(f*g)$和$g$的前缀和都可以$O(1)$地算出来，那么我们计算$S(n)$的值的时候递归处理，便可以优化复杂度到$O(n^{\\frac{3}{4}})$。</p>\n<p>$\\ \\ \\ \\ \\ \\,$但若是我们先线性预处理出$S(i)\\ {i\\in[1,n^{\\frac{2}{3}}]}$的值，复杂度就可以优化到$O(n^{\\frac{2}{3}})$</p>\n<p>$\\ \\ \\ \\ \\ \\,$那么现在的问题是如何找到这个神奇的函数$g$：</p>\n<ul>\n<li><p>对于$\\varphi(x)$：</p>\n<p>$\\begin{aligned}\\varphi(x)=&amp;\\prod_{p|x,p\\ \\rm{is\\ prime}}\\frac{p^k(p-1)}{p}\\\\=&amp;x\\times \\prod_{p|x,p\\ \\rm{is\\ prime}}\\left(1-\\frac{1}{p}\\right)\\end{aligned}$</p>\n<p>$\\begin{aligned}(\\varphi*1)(x)=&amp;\\sum_{i|x}\\varphi(i)\\times 1\\left(\\frac{x}{i}\\right)\\\\=&amp;\\sum_{i|x}\\varphi(i)\\\\=&amp;\\sum_{i|x}i\\times \\prod_{p|i,p\\ \\rm{is\\ prime}}\\left(1-\\frac{1}{p}\\right)\\end{aligned}$</p>\n</li>\n</ul>\n<p>显然$(\\varphi*1)(x)$</p>\n<p>在$x$为素数的次方情况下，$(\\varphi*1)(x)=x$</p>\n<p>，而$(\\varphi*1)(x)$</p>\n<p>又为积性函数，可以证明在定义域下$(\\varphi*1)(x)=x$</p>\n<p>，既$\\varphi*1=id$。</p>\n<p>  <strong>所以我们选取$g=1$,$(f*g)=id$，容易求和。</strong></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"title function_\">Sum_id</span><span class=\"params\">(<span class=\"type\">int</span> x)</span>&#123;<span class=\"keyword\">return</span> <span class=\"number\">1ll</span>*x*(x+<span class=\"number\">1</span>)/<span class=\"number\">2</span>;&#125;</span><br><span class=\"line\"><span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"title function_\">Sum_1</span><span class=\"params\">(<span class=\"type\">int</span> l,<span class=\"type\">int</span> r)</span>&#123;<span class=\"keyword\">return</span> <span class=\"number\">1ll</span>*r-l+<span class=\"number\">1</span>;&#125;</span><br><span class=\"line\"><span class=\"type\">long</span> <span class=\"type\">long</span> g1=<span class=\"number\">1ll</span>;</span><br><span class=\"line\"><span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"title function_\">Sum_phi</span><span class=\"params\">(<span class=\"type\">int</span> x)</span>&#123;</span><br><span class=\"line\">  <span class=\"type\">long</span> <span class=\"type\">long</span> ret=Sum_id(x);</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">2</span>,j;i&lt;=x;i=j+<span class=\"number\">1</span>)</span><br><span class=\"line\">  j=x/(x/i),ret-=Sum_1(i,j)*Sum_phi(x/i);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>对于$\\mu(x)$：</p>\n<p>已知$\\mu*1=ϵ$</p>\n<p><strong>所以我们选取$g=1$,$(f*g)=ϵ$，容易求和。</strong></p>\n</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"title function_\">Sum_e</span><span class=\"params\">(<span class=\"type\">int</span> x)</span>&#123;<span class=\"keyword\">return</span> <span class=\"number\">1ll</span>;&#125;</span><br><span class=\"line\"><span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"title function_\">Sum_1</span><span class=\"params\">(<span class=\"type\">int</span> l,<span class=\"type\">int</span> r)</span>&#123;<span class=\"keyword\">return</span> <span class=\"number\">1ll</span>*r-l+<span class=\"number\">1</span>;&#125;</span><br><span class=\"line\"><span class=\"type\">long</span> <span class=\"type\">long</span> g1=<span class=\"number\">1ll</span>;</span><br><span class=\"line\"><span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"title function_\">Sum_mu</span><span class=\"params\">(<span class=\"type\">int</span> x)</span>&#123;</span><br><span class=\"line\">  <span class=\"type\">long</span> <span class=\"type\">long</span> ret=Sum_e(x);</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">2</span>,j;i&lt;=x;i=j+<span class=\"number\">1</span>)</span><br><span class=\"line\">  j=x/(x/i),ret-=Sum_1(i,j)*Sum_mu(x/i);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>注意：杜教筛套杜教筛复杂度还是$O(n^\\frac{2}{3})$，因为实际上他们是并列进行的。</strong></p>\n<h3 id=\"贝尔级数\"><a href=\"#贝尔级数\" class=\"headerlink\" title=\"贝尔级数\"></a>贝尔级数</h3><p>  $\\ \\ \\ \\ \\ \\,$对于其他积性函数，为了找到满足条件的$g$，我们引入<strong>贝尔级数</strong>，需要用到生成函数的姿势，但是实际上只需要记住下面的公式就够用了：</p>\n<p>  $\\ \\ \\ \\ \\ \\,$对于积性函数$f$，定义$f$模$p$的贝尔级数为：</p>\n<p>  $f_p(x)=\\sum_{i=0}^{\\infty}f(p^i)x^i$</p>\n<p>  $\\ \\ \\ \\ \\ \\,$一个完全积性函数的贝尔级数为几何级数：</p>\n<p>  $f_p(x)=\\frac{1}{1-f(p)\\times x}$</p>\n<p>  $\\ \\ \\ \\ \\ \\,$例如（“*”完全积性函数）:</p>\n<p>  *$ϵ_p(x)=1$</p>\n<p>  *$1_p(x)=\\frac{1}{1-x}$</p>\n<p>  *$id^k_p(x)=\\frac{1}{1-p^k\\cdot x}$</p>\n<p>  $\\mu_p(x)=1-x$</p>\n<p>  $\\sigma_p(x)=\\frac{1}{(1-x)^2}$</p>\n<p>  $(\\sigma_1)_p(x)=\\frac{1}{1-\\sigma_1(p)x+px^2}$ ——&gt; $\\left[(\\sigma_k)_p(x)=\\frac{1}{1-\\sigma_k(p)x+p^kx^2}\\right]$</p>\n<p>  $\\varphi_p(x)=\\frac{1-x}{1-p\\cdot x}$</p>\n<p>  $\\ \\ \\ \\ \\ \\,$有了这个东西，我们边可以把狄利克雷卷积化成一般卷积的形式：</p>\n<p>  $(f*g)_p(x)=f_p(x)\\times g_p(x)$</p>\n<p>  $\\ \\ \\ \\ \\ \\,$再带回去就可以得到我们想要的$g$和$g*f$，主观感觉非常复杂。</p>\n<h3 id=\"一些比较常见的容易求的卷积\"><a href=\"#一些比较常见的容易求的卷积\" class=\"headerlink\" title=\"一些比较常见的容易求的卷积\"></a>一些比较常见的容易求的卷积</h3><p>  $\\mu*\\sigma=1$</p>\n<p>  $id*id=n$</p>\n<p>  $\\varphi*1=id$</p>\n<p>  $\\mu*id=\\varphi$</p>\n","site":{"data":{}},"excerpt":"<p>$\\ \\ \\ \\ \\ \\ \\ \\,$关于莫比乌斯反演，杜教筛等的杂记：</p>","more":"<h2 id=\"初识数论常见积性函数：欧拉函数-varphi-，莫比乌斯函数-mu\"><a href=\"#初识数论常见积性函数：欧拉函数-varphi-，莫比乌斯函数-mu\" class=\"headerlink\" title=\"初识数论常见积性函数：欧拉函数$\\varphi$，莫比乌斯函数$\\mu$\"></a>初识数论常见积性函数：欧拉函数$\\varphi$，莫比乌斯函数$\\mu$</h2><p>$\\ \\ \\ \\ \\ \\,$所谓积性函数，就是对于一个函数$f(x)$，若是对于任意$x_1$，$x_2$满足$f(x_1)\\times f(x_2)=f(x_1\\times x_2)$。对于任何积性函数$f(x)$，都有$f(1)=1$。</p>\n<ul>\n<li><p>欧拉函数$\\varphi(x)$的意义：在$[1,x]$内，与$x$互质的个数。</p>\n<p>$1$.若$x$为素数，$\\varphi(x)=x-1$;</p>\n<p>$2$.若$x\\%p=0$，$\\varphi(x\\cdot p)=\\varphi(x)\\cdot p$;</p>\n<p>$3$.若$x\\%p\\neq 0$，且$x$为素数，$\\varphi(x\\cdot p)=\\varphi(x)\\cdot (p-1)$;</p>\n<p><a href=\"https://www.luogu.org/blog/hdxrie/dui-ou-la-han-shuo-di-li-xie\">【证明戳这里<del>（%%%大巨佬orz）</del>】</a></p>\n</li>\n<li><p>莫比乌斯函数$\\mu(x)$的意义：设$x$的不同质因子个数为$a$，$\\mu(x)=(-1)^{a}$；当n存在平方因子时，$\\mu(x)=0$。</p>\n<p>$1$.若$x$有奇数个不同质因数，$\\mu(x)=-1$。</p>\n<p>$2$.若$x$有偶数个不同质因数，$\\mu(x)=1$。</p>\n<p>$3$.若$x$有平方因子，$\\mu(x)=0$。</p>\n</li>\n</ul>\n<p>$\\ \\ \\ \\ \\ \\,$还有一些简单的积性函数，在这里一并介绍了：</p>\n<p>$ϵ(x)=\\begin{cases}1&amp;x=1\\\\0&amp;x&gt;1\\end{cases}$</p>\n<p>$id(x)=x$</p>\n<p>$id^k(x)=x^k$</p>\n<p>$\\sigma(x)=\\sum_{i|x}1$</p>\n<p>$1$</p>\n<h2 id=\"数论分块\"><a href=\"#数论分块\" class=\"headerlink\" title=\"数论分块\"></a>数论分块</h2><p>$\\ \\ \\ \\ \\ \\,$很多时候，我们会遇到这样的式子:</p>\n<p>$\\sum_{i=1}^{n}f(i)\\times g\\left(\\left\\lfloor\\frac{n}{i}\\right\\rfloor\\right)$</p>\n<p>$\\ \\ \\ \\ \\ \\,$若是我们已经提前知道了$f(x)$在$x\\in [1,n]$的值了，但是需要多次计算上面形式的式子的值，每次询问复杂度是$O(n)$的，显然在询问很多的时候，没有很划算。</p>\n<p>$\\ \\ \\ \\ \\ \\,$我们枚举了很多$i$，使得很多$\\left\\lfloor\\frac{n}{i}\\right\\rfloor$都相等，所以我们可以把$\\sum_{i=1}^{n}$，分成$\\sqrt{n}\\ $块，使得每一块的$\\left\\lfloor\\frac{n}{i}\\right\\rfloor$都相等，这样我们可以通过结合律得到下面的式子，$O(n)$预处理$sum(x)=\\sum_{i=1}^{x}f(i)$，来简化询问复杂度到$O(\\sqrt{n})$：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">Get_ans</span><span class=\"params\">(<span class=\"type\">int</span> n)</span></span>&#123;</span><br><span class=\"line\">  <span class=\"type\">long</span> <span class=\"type\">long</span> ans=<span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> l=<span class=\"number\">1</span>,r;l&lt;=n;l=r+<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">    r=n/(n/l);</span><br><span class=\"line\">    ans+=<span class=\"built_in\">g</span>(n/l)*(sum[r]-sum[l<span class=\"number\">-1</span>]);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"狄利克雷卷积\"><a href=\"#狄利克雷卷积\" class=\"headerlink\" title=\"狄利克雷卷积\"></a>狄利克雷卷积</h2><p>  $(f*g)(n)=\\sum_{x|n}f(x)\\times g\\left(\\frac{n}{x}\\right)$</p>\n<p>  既：</p>\n<p>  $(f*g)(n)=\\sum_{xy=n}f(x)\\times g(y)$</p>\n<p>  狄利克雷卷积的性质：</p>\n<pre><code>**1.交换律:** $f*g=g*f$；\n\n**2.结合律:**  $(f*g)*h=g*(f*h)$；$(a\\times f)*g=a\\times (f*g)$；\n\n**3.分配律:**  $(f+g)*h=f*h+g*h$；\n\n**4.单位元:**  $ϵ*f=f$；其中$ϵ(x)=\\begin&#123;cases&#125;1&amp;x=1\\\\0&amp;x&gt;1\\end&#123;cases&#125;$；\n\n**5.逆元:**  对于每个$f(1)\\neq0$的函数，都存在一个函数$g$使得$f*g=ϵ$；\n\n**6.两个积性函数的狄利克雷卷积是积性函数。**\n</code></pre><h3 id=\"如何求一个函数的逆：\"><a href=\"#如何求一个函数的逆：\" class=\"headerlink\" title=\"$\\ \\ \\ \\ \\ \\,$如何求一个函数的逆：\"></a>$\\ \\ \\ \\ \\ \\,$如何求一个函数的逆：</h3><p> $\\begin{aligned}ϵ&amp;=f*g\\\\ &amp;=\\sum_{x|n}f(x)\\times g\\left(\\frac{n}{x}\\right)\\\\ &amp;=f(1)\\times g(n)+\\sum_{x|n,i\\neq1}f(x)\\times g\\left(\\frac{n}{x}\\right)\\\\&amp;=[n=1]\\end{aligned}$<br>$\\ \\ \\ \\ \\ \\,$所以有：<br>$f(1)\\times g(n)=[n=1]-\\sum_{x|n,i\\neq1}f(x)\\times g\\left(\\frac{n}{x}\\right)$<br>$g(n)=\\frac{1}{f(1)}\\left([n=1]-\\sum_{x|n,i\\neq1}f(x)\\times g\\left(\\frac{n}{x}\\right)\\right)$</p>\n<h4 id=\"其中-mu-就是函数-1-的逆，也就是说-mu-1-ϵ\"><a href=\"#其中-mu-就是函数-1-的逆，也就是说-mu-1-ϵ\" class=\"headerlink\" title=\"$\\ \\ \\ \\ \\ \\,$其中$\\mu$就是函数$1$的逆，也就是说$\\mu*1=ϵ$\"></a>$\\ \\ \\ \\ \\ \\,$其中$\\mu$就是函数$1$的逆，也就是说$\\mu*1=ϵ$</h4><h2 id=\"莫比乌斯反演\"><a href=\"#莫比乌斯反演\" class=\"headerlink\" title=\"莫比乌斯反演\"></a>莫比乌斯反演</h2><p>$\\ \\ \\ \\ \\ \\,$莫比乌斯反演的本质就是利用性质$\\mu*1=ϵ$，改变枚举方式，降低式子的复杂度。</p>\n<p>$\\ \\ \\ \\ \\ \\,$最常见的操作是,反演式子$\\sum_{i=1}^n\\sum_{j=1}^{m}[gcd(i,j)=1]$:</p>\n<p>$\\sum_{i=1}^n\\sum_{j=1}^{m}[gcd(i,j)=1]$</p>\n<p>$\\sum_{i=1}^n\\sum_{j=1}^{m}ϵ(gcd(i,j))$</p>\n<p>$\\sum_{i=1}^n\\sum_{j=1}^{m}(\\mu*1)(gcd(i,j))$</p>\n<p>$\\sum_{i=1}^n\\sum_{j=1}^{m}\\sum_{d|gcd(i,j)}\\mu(d)\\times 1$</p>\n<p>$\\sum_{i=1}^n\\sum_{j=1}^{m}\\sum_{d=1}^{min(n,m)}\\mu(d)[d|gcd(i,j)]$</p>\n<p>$\\sum_{d=1}^{min(n,m)}\\mu(d)\\sum_{i=1}^n\\sum_{j=1}^{m}[d|gcd(i,j)]$</p>\n<p>$\\sum_{d=1}^{min(n,m)}\\mu(d)\\sum_{i=1}^{\\left\\lfloor\\frac{n}{d}\\right\\rfloor}\\sum_{j=1}^{\\left\\lfloor\\frac{m}{d}\\right\\rfloor}1$</p>\n<p>$\\sum_{d=1}^{min(n,m)}\\mu(d)\\sum_{i=1}^{\\left\\lfloor\\frac{n}{d}\\right\\rfloor}1\\sum_{j=1}^{\\left\\lfloor\\frac{m}{d}\\right\\rfloor}1$</p>\n<p>$\\sum_{d=1}^{min(n,m)}\\mu(d){\\left\\lfloor\\frac{n}{d}\\right\\rfloor}{\\left\\lfloor\\frac{m}{d}\\right\\rfloor}$</p>\n<h3 id=\"莫比乌斯反演经典例题回顾\"><a href=\"#莫比乌斯反演经典例题回顾\" class=\"headerlink\" title=\"莫比乌斯反演经典例题回顾\"></a><a href=\"/2018/12/30/莫比乌斯反演经典例题回顾/\">莫比乌斯反演经典例题回顾</a></h3><p>  <a href=\"https://www.luogu.org/problemnew/show/P2522\">P2522 [HAOI2011]Problem b</a>（反演+容斥）</p>\n<p>  <a href=\"https://www.luogu.org/problemnew/show/P2257\">P2257 YY的GCD</a>（反演）</p>\n<p>  <a href=\"https://www.luogu.org/problemnew/show/P3312\">P3312 [SDOI2014]数表</a>（反演+离线+数据结构）</p>\n<p>  <a href=\"https://www.luogu.org/problemnew/show/P3704\">P3704 [SDOI2017]数字表格</a>（反演）</p>\n<p>  <a href=\"https://www.luogu.org/problemnew/show/P3327\">P3327 [SDOI2015]约数个数和</a>（反演，数表的简化版）</p>\n<p>  <a href=\"https://www.luogu.org/problemnew/show/P3455\">P3455 [POI2007]ZAP-Queries</a>（反演，裸的）</p>\n<p>  <a href=\"https://www.luogu.org/problemnew/show/P1829\">P1829 [国家集训队]Crash的数字表格 / JZPTAB</a>（反演+欧拉筛，做法新奇）</p>\n<p>  <a href=\"https://www.luogu.org/problemnew/show/P3768\">P3768 简单的数学题</a>（反演+杜教筛）</p>\n<p>  <a href=\"https://www.luogu.org/problemnew/show/P4240\">P4240 毒瘤之神的考验</a>（反演+奇怪的分块，基本上很结论题了）</p>\n<p>  <a href=\"https://www.luogu.org/problemnew/show/P1587\">P1587 [NOI2016]循环之美</a>（反演+杜教筛+数学知识+奇技淫巧，难题来了）</p>\n<h2 id=\"杜教筛\"><a href=\"#杜教筛\" class=\"headerlink\" title=\"杜教筛\"></a>杜教筛</h2><p><a href=\"https://lx-2003.blog.luogu.org/dujiao-sieve#\">【铃悬的数学小讲堂——杜教筛】</a></p>\n<p>$\\ \\ \\ \\ \\ \\,$杜教筛是求积性函数的前缀和的筛法，复杂度可以达到小于线性的$O(n^{\\frac{2}{3}})$。</p>\n<p>$\\ \\ \\ \\ \\ \\,$对于一个积性函数$f$，令$S(n)=\\sum_{i=1}^nf(i)$，再新定义一个函数$g$，则有：</p>\n<p>$\\begin{aligned}&amp;\\sum_{i=1}^n(f*g)(i)\\\\=&amp;\\sum_{i=1}^n\\sum_{x\\times y=i}f(x)\\times g(y)\\\\=&amp;\\sum_{y=1}^ng(y)\\sum_{x\\times y\\leq n}f(x)\\\\=&amp;\\sum_{y=1}^ng(y)\\sum_{x=1}^{\\left\\lfloor\\frac{n}{y}\\right\\rfloor}f(x)\\\\=&amp;\\sum_{y=1}^ng(y)S\\left(\\left\\lfloor\\frac{n}{y}\\right\\rfloor\\right)\\end{aligned}$</p>\n<p>$\\ \\ \\ \\ \\ \\,$那么就有：</p>\n<p>$\\sum_{i=1}^n(f*g)(i)=g(1)S(n)+\\sum_{y=2}^ng(y)S\\left(\\left\\lfloor\\frac{n}{y}\\right\\rfloor\\right)$</p>\n<p>$\\ \\ \\ \\ \\ \\,$既：</p>\n<p>$g(1)S(n)=\\sum_{i=1}^n(f*g)(i)-\\sum_{y=2}^ng(y)S\\left(\\left\\lfloor\\frac{n}{y}\\right\\rfloor\\right)$</p>\n<p>$S(n)=\\frac{\\sum_{i=1}^n(f*g)(i)-\\sum_{y=2}^ng(y)S\\left(\\left\\lfloor\\frac{n}{y}\\right\\rfloor\\right)}{g(1)}$</p>\n<p>$S(n)={\\sum_{i=1}^n(f*g)(i)-\\sum_{y=2}^ng(y)S\\left(\\left\\lfloor\\frac{n}{y}\\right\\rfloor\\right)}$</p>\n<p>$\\ \\ \\ \\ \\ \\,$若是函数$(f*g)$和$g$的前缀和都可以$O(1)$地算出来，那么我们计算$S(n)$的值的时候递归处理，便可以优化复杂度到$O(n^{\\frac{3}{4}})$。</p>\n<p>$\\ \\ \\ \\ \\ \\,$但若是我们先线性预处理出$S(i)\\ {i\\in[1,n^{\\frac{2}{3}}]}$的值，复杂度就可以优化到$O(n^{\\frac{2}{3}})$</p>\n<p>$\\ \\ \\ \\ \\ \\,$那么现在的问题是如何找到这个神奇的函数$g$：</p>\n<ul>\n<li><p>对于$\\varphi(x)$：</p>\n<p>$\\begin{aligned}\\varphi(x)=&amp;\\prod_{p|x,p\\ \\rm{is\\ prime}}\\frac{p^k(p-1)}{p}\\\\=&amp;x\\times \\prod_{p|x,p\\ \\rm{is\\ prime}}\\left(1-\\frac{1}{p}\\right)\\end{aligned}$</p>\n<p>$\\begin{aligned}(\\varphi*1)(x)=&amp;\\sum_{i|x}\\varphi(i)\\times 1\\left(\\frac{x}{i}\\right)\\\\=&amp;\\sum_{i|x}\\varphi(i)\\\\=&amp;\\sum_{i|x}i\\times \\prod_{p|i,p\\ \\rm{is\\ prime}}\\left(1-\\frac{1}{p}\\right)\\end{aligned}$</p>\n</li>\n</ul>\n<p>显然$(\\varphi*1)(x)$</p>\n<p>在$x$为素数的次方情况下，$(\\varphi*1)(x)=x$</p>\n<p>，而$(\\varphi*1)(x)$</p>\n<p>又为积性函数，可以证明在定义域下$(\\varphi*1)(x)=x$</p>\n<p>，既$\\varphi*1=id$。</p>\n<p>  <strong>所以我们选取$g=1$,$(f*g)=id$，容易求和。</strong></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"title function_\">Sum_id</span><span class=\"params\">(<span class=\"type\">int</span> x)</span>&#123;<span class=\"keyword\">return</span> <span class=\"number\">1ll</span>*x*(x+<span class=\"number\">1</span>)/<span class=\"number\">2</span>;&#125;</span><br><span class=\"line\"><span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"title function_\">Sum_1</span><span class=\"params\">(<span class=\"type\">int</span> l,<span class=\"type\">int</span> r)</span>&#123;<span class=\"keyword\">return</span> <span class=\"number\">1ll</span>*r-l+<span class=\"number\">1</span>;&#125;</span><br><span class=\"line\"><span class=\"type\">long</span> <span class=\"type\">long</span> g1=<span class=\"number\">1ll</span>;</span><br><span class=\"line\"><span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"title function_\">Sum_phi</span><span class=\"params\">(<span class=\"type\">int</span> x)</span>&#123;</span><br><span class=\"line\">  <span class=\"type\">long</span> <span class=\"type\">long</span> ret=Sum_id(x);</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">2</span>,j;i&lt;=x;i=j+<span class=\"number\">1</span>)</span><br><span class=\"line\">  j=x/(x/i),ret-=Sum_1(i,j)*Sum_phi(x/i);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>对于$\\mu(x)$：</p>\n<p>已知$\\mu*1=ϵ$</p>\n<p><strong>所以我们选取$g=1$,$(f*g)=ϵ$，容易求和。</strong></p>\n</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"title function_\">Sum_e</span><span class=\"params\">(<span class=\"type\">int</span> x)</span>&#123;<span class=\"keyword\">return</span> <span class=\"number\">1ll</span>;&#125;</span><br><span class=\"line\"><span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"title function_\">Sum_1</span><span class=\"params\">(<span class=\"type\">int</span> l,<span class=\"type\">int</span> r)</span>&#123;<span class=\"keyword\">return</span> <span class=\"number\">1ll</span>*r-l+<span class=\"number\">1</span>;&#125;</span><br><span class=\"line\"><span class=\"type\">long</span> <span class=\"type\">long</span> g1=<span class=\"number\">1ll</span>;</span><br><span class=\"line\"><span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"title function_\">Sum_mu</span><span class=\"params\">(<span class=\"type\">int</span> x)</span>&#123;</span><br><span class=\"line\">  <span class=\"type\">long</span> <span class=\"type\">long</span> ret=Sum_e(x);</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">2</span>,j;i&lt;=x;i=j+<span class=\"number\">1</span>)</span><br><span class=\"line\">  j=x/(x/i),ret-=Sum_1(i,j)*Sum_mu(x/i);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>注意：杜教筛套杜教筛复杂度还是$O(n^\\frac{2}{3})$，因为实际上他们是并列进行的。</strong></p>\n<h3 id=\"贝尔级数\"><a href=\"#贝尔级数\" class=\"headerlink\" title=\"贝尔级数\"></a>贝尔级数</h3><p>  $\\ \\ \\ \\ \\ \\,$对于其他积性函数，为了找到满足条件的$g$，我们引入<strong>贝尔级数</strong>，需要用到生成函数的姿势，但是实际上只需要记住下面的公式就够用了：</p>\n<p>  $\\ \\ \\ \\ \\ \\,$对于积性函数$f$，定义$f$模$p$的贝尔级数为：</p>\n<p>  $f_p(x)=\\sum_{i=0}^{\\infty}f(p^i)x^i$</p>\n<p>  $\\ \\ \\ \\ \\ \\,$一个完全积性函数的贝尔级数为几何级数：</p>\n<p>  $f_p(x)=\\frac{1}{1-f(p)\\times x}$</p>\n<p>  $\\ \\ \\ \\ \\ \\,$例如（“*”完全积性函数）:</p>\n<p>  *$ϵ_p(x)=1$</p>\n<p>  *$1_p(x)=\\frac{1}{1-x}$</p>\n<p>  *$id^k_p(x)=\\frac{1}{1-p^k\\cdot x}$</p>\n<p>  $\\mu_p(x)=1-x$</p>\n<p>  $\\sigma_p(x)=\\frac{1}{(1-x)^2}$</p>\n<p>  $(\\sigma_1)_p(x)=\\frac{1}{1-\\sigma_1(p)x+px^2}$ ——&gt; $\\left[(\\sigma_k)_p(x)=\\frac{1}{1-\\sigma_k(p)x+p^kx^2}\\right]$</p>\n<p>  $\\varphi_p(x)=\\frac{1-x}{1-p\\cdot x}$</p>\n<p>  $\\ \\ \\ \\ \\ \\,$有了这个东西，我们边可以把狄利克雷卷积化成一般卷积的形式：</p>\n<p>  $(f*g)_p(x)=f_p(x)\\times g_p(x)$</p>\n<p>  $\\ \\ \\ \\ \\ \\,$再带回去就可以得到我们想要的$g$和$g*f$，主观感觉非常复杂。</p>\n<h3 id=\"一些比较常见的容易求的卷积\"><a href=\"#一些比较常见的容易求的卷积\" class=\"headerlink\" title=\"一些比较常见的容易求的卷积\"></a>一些比较常见的容易求的卷积</h3><p>  $\\mu*\\sigma=1$</p>\n<p>  $id*id=n$</p>\n<p>  $\\varphi*1=id$</p>\n<p>  $\\mu*id=\\varphi$</p>"},{"title":"超低能解读群论","date":"2018-12-30T04:31:10.000Z","mathjax":true,"_content":"\n葱花的超低能解读群论 QUQ ，弱哭了1551\n\n前排鸣谢：\n（~~PY关系~~）指导：@[Psyduck](http://psyduck.wang/)  （~~日常%~~）大jiu~佬：@[hdxrie](https://www.luogu.org/blog/hdxrie/)\n\n推荐视频：[嘿嘿嘿](http://www.bilibili.com/video/av11339177/?share_source=qq&ts=1535624691&share_medium=iphone&bbid=182b868b7e157f70a15090b987621a32)\n\n<!-- more -->\n\n## **一、群的定义** \n群是***一些定义的映射*** 对于***指定的有限集合*** 的集合；\n\n其中群必须满足以下性质：\n\n- 封闭性：集合内元素间的映射不会超过*指定的有限集合*；\n\n- 结合律：集合内元素间的映射满足结合律；\n\n- 单位元：集合内存在一个基底元素，使得集合内所有的元素都可以用基底元素表示；\n\n- 逆元：集合内必定存在成对的元素，使得经过*一些定义的映射*成为基地元素。\n\n更严格地讲，群的定义为：\n![](https://img-blog.csdnimg.cn/img_convert/e98cda276781b6aaf9485173901ef297.png)\n\n注意群是***映射的集合*** 不是 ***一些定义的映射*** +***指定的有限集合*** 。\n\n一个简单的例子：\n\n实数的加法就是一个群（实数加法群）\n\n- *一些定义的映射*： +，-（加一个负数）；\n\n- *指定的有限集合*： 全体实数；\n\n- 封闭性：一个实数加上一个实数还是一个实数；\n\n- 结合律：a,b,c为实数，则：$(a+b)+c=a+(b+c)$\n\n- 单位元：0；\n\n- 逆元：a为实数，那么a与-a互为彼此的逆元，即：$a+(-a)=0$\n\n然后举一个复杂一点点的例子，以后我们也会用到这个举例：\n\n对于以下集合：（多种正方形）\n![](https://img-blog.csdnimg.cn/img_convert/1873425fe9facf08696a51a4b12d0086.png)\n\n我们定义8种映射关系：\n![](https://img-blog.csdnimg.cn/img_convert/fa3432467ea0b19499f222d32fcf7dd5.png)\n\n易证得，这***8种映射关系*** 对于这个***正方形集合*** 满足：\n\n**封闭性**，**结合律**，**单位元**(1号正方形)，**逆元**(2与4,5与5等)；\n\n所以这个映射的集合为群。\n\n具体证明不再赘述。\n\n## **二、群的模型与置换群** \n\n对于第一部分下面这个集合：\n\n![](https://img-blog.csdnimg.cn/img_convert/73b2ac8cec75893b6252939533222d1a.png)\n\n我们可以发现：\n\n### **这个群的模型满足一个基本的有向图模型** \n\n我们不妨把它建立出来观察一下它的性质：\n\n**（边是映射，点是集合内元素，左上角是映射的类型在图上的颜色）**\n\n![](https://img-blog.csdnimg.cn/img_convert/1f0509162141be39d5e59534a5e6db78.png)\n\n看起来很美好，对不对(~~彩虹！！~~)？\n\n有点乱？我们可以分开看看：\n\n**1. 不变**\n\n![](https://img-blog.csdnimg.cn/img_convert/7ae575a36a72234063a4532149b9ebdf.png)\n\n**2. 旋转90°**\n\n![](https://img-blog.csdnimg.cn/img_convert/5cc866a84d940e71fee5b933b3c7e912.png)\n\n**3. 旋转180°**\n\n![](https://img-blog.csdnimg.cn/img_convert/91106336127712d5e0ecad51847f805f.png)\n\n**4. 旋转270° **\n\n![](https://img-blog.csdnimg.cn/img_convert/b3af25f76db1a4f3a6a7db90885cbfb1.png)\n\n**5. 水平翻转**\n\n![](https://img-blog.csdnimg.cn/img_convert/7c479a79ba497450cd0034ac7afe4715.png)\n\n**6. 竖直翻转**\n\n![](https://img-blog.csdnimg.cn/img_convert/7ef47ae9ba232a0472d224fe296a74e6.png)\n\n**7. 45°翻转**\n\n![](https://img-blog.csdnimg.cn/img_convert/145c031c3930a00bd99bb70fadc4ecd0.png)\n\n**8. -45°翻转**\n\n![](https://img-blog.csdnimg.cn/img_convert/e7685a19bef91fa399e9f50d50f1d298.png)\n\n### **充分满足对称性的美好 (~~彩虹！！~~)**\n\n我们可以很轻松观察出这个映射集合的**封闭性**。\n\n**结合律**也可以被轻松观察出来看出来，就不举例子了：\n\n**逆元**就更显而易见了，除了2和4互为逆元，其他的映射都为自己的逆元：\n\n![](https://img-blog.csdnimg.cn/img_convert/96392aa07fdd7171f129920894470175.png)\n\n下面我们带入一个新的概念：**置换**和**置换群**\n\n~~直接上学长的ppt(%%%)~~\n\n![](https://img-blog.csdnimg.cn/img_convert/396b8ac9b47b0dfe9b35c93dbf9d21eb.png)\n\n![](https://img-blog.csdnimg.cn/img_convert/e04d2e4faade98c809589aab26b8998e.png)\n\n简单点说，上面我们举例的群，它的八种映射方式，就是**置换**；\n\n而8种置换组成的群，就是**置换群**；\n\n我们举一个例子……hummmm……就比如：\n\n**5. 水平翻转**\n\n![](https://img-blog.csdnimg.cn/img_convert/7c479a79ba497450cd0034ac7afe4715.png)\n\n它的置换写法就是：\n\n$\\binom{1\\ 2\\ 3\\ 4\\ 5\\ 6\\ 7\\ 8}{5\\ 8\\ 6\\ 7\\ 1\\ 3\\ 4\\ 2}$\n\n这不就是模型中有向图的**边**吗？\n\n很简单？对吧？\n\n那么现在，我们可以进入重点咯？\n\n## **三、Burnside引理 和 Pólya定理**\n\n先直接甩Burnside引理的定义：~~(还是学长的pptOrz)~~\n\n![](https://img-blog.csdnimg.cn/img_convert/eab2ef3a46051c8c125cbfa4cdddab4c.png)\n\n看上去挺复杂的？我们慢慢来吧。\n\n先引入一个简单的概念：**循环**\n\n![](https://img-blog.csdnimg.cn/img_convert/918488795cc1fefdf0e1fdd0e9348324.png)\n\n下面我们直接举个例子：**置换的循环分解**\n\n上一节末尾的例子：\n\n**5. 水平翻转**\n\n![](https://img-blog.csdnimg.cn/img_convert/7c479a79ba497450cd0034ac7afe4715.png)\n\n它的置换写法是：\n\n$\\binom{1\\ 2\\ 3\\ 4\\ 5\\ 6\\ 7\\ 8}{5\\ 8\\ 6\\ 7\\ 1\\ 3\\ 4\\ 2}$\n\n解出来的循环就是：$(1\\ 5)(2\\ 8)(3\\ 6)(4\\ 7)$\n\n放回模型看看呢？我们可以发现：\n\n置换的循环分解就是**模型中有向图的强连通分量**\n\n不如我们再放两个例子呢？\n\n**4. 旋转270°**\n\n![](https://img-blog.csdnimg.cn/img_convert/b3af25f76db1a4f3a6a7db90885cbfb1.png)\n\n它的置换写法就是：\n\n$\\binom{1\\ 2\\ 3\\ 4\\ 5\\ 6\\ 7\\ 8}{4\\ 1\\ 2\\ 3\\ 8\\ 7\\ 5\\ 6}$\n\n分解出来的循环就是：$(1\\ 4\\ 3\\ 2)(5\\ 8\\ 6\\ 7)$\n\n**1. 不变**\n\n![](https://img-blog.csdnimg.cn/img_convert/7ae575a36a72234063a4532149b9ebdf.png)\n\n它的置换写法就是：\n\n$\\binom{1\\ 2\\ 3\\ 4\\ 5\\ 6\\ 7\\ 8}{1\\ 2\\ 3\\ 4\\ 5\\ 6\\ 7\\ 8}$\n\n分解出来的循环就是：$(1)(2)(3)(4)(5)(6)(7)(8)$\n\n看样子我们的想法没有问题；\n\n那么，现在我们重新给出Burnside引理的内容：\n\n**设置大小为$|G|$，由$g$组成的群$G$，作用于有限集合$X$上面，那么$X$在$G$内映射的作用下，$X$的变换结果有这么多种：**\n\n$\\frac {\\sum_{g\\in G}^{} {X(g)}} {|G|}$\n\n**其中$X(g)$为映射$g$对与集合$X$的操作结果**\n\n现在，是不是清楚很多了呢(雾)？\n\n不过我们发现，这个方法的复杂度特别高，不仅要枚举每一个映射，还要对每种映射枚举一次每个置换，所以引入Pólya定理：\n\n先甩定义：\n\n![](https://img-blog.csdnimg.cn/img_convert/0abd64840b78465cc85c5be09b20ef9a.png)\n\n即：\n\n**设置大小为$|G|$，由$g$组成的群$G$，作用于$k$组合成的有限集合$X$上面，那么$X$在$G$内映射的作用下，$X$的变换结果种类有这么多：**\n\n$\\frac {\\sum_{g\\in G}^{} {k^{m(g)}}} {|G|}$\n\n**其中$m(g)$为映射$g$对与集合$X$的操作结果**\n\n**也就是把$X(g)$优化成了$k^{m(g)}$ ，减少了枚举操作。**\n\n其中$m(g)$可以$O(n)$求，这个很简单，就是求一个有向图的强连通分量，就不举例子了。\n\n## **四、例题 [Poj1286 Necklace of Beads](http://poj.org/problem?id=1286)**\n\n### **Necklace of Beads** \n\nTime Limit: 1000MS\tMemory Limit: 10000K\n    \n**Description**\n\nBeads of red, blue or green colors are connected together into a circular necklace of n beads ( n < 24 ). If the repetitions that are produced by rotation around the center of the circular necklace or reflection to the axis of symmetry are all neglected, how many different forms of the necklace are there? \n\n![](https://img-blog.csdnimg.cn/img_convert/439aa0fd6365704a3b375bca89554514.png)\n\n**Input**\n\nThe input has several lines, and each line contains the input data n. \n-1 denotes the end of the input file. \nOutput\nThe output should contain the output data: Number of different forms, in each line correspondent to the input data.\n\n**Sample Input**\n\n4\n\n5\n\n\n-1\n\n**Sample Output**\n\n21\n\n39\n\n\n**题目大意：对于指定n，求得到红，绿，蓝三种颜色珠子串成的长度为n的项链有多少种(首尾相接)**\n\n我们先来看一下这个群的映射方式：\n\n**旋转，翻转。**\n\n我们之前举的例子呢，刚好和$n=4$的情况差不多，建议各位读者巨佬可以自己画一下其他情况的草图仔细观察一下，我们可以发现具体群内的映射有如下规律：\n\n**旋转一共有$n$个角度**，顺时针旋转$i$格的置换中，每个循环的长度为$\\frac{n}{gcd(i,n)}$，个数为$gcd(i,n)$；\n\n**旋转共有$n$个对称轴**，所以当$n$为奇数时，每一个对称轴都有$\\left\\lceil\\frac{n}{2}\\right\\rceil$个循环；当$n$为偶数时，有一半的对称轴有$\\frac{n}{2}$个循环，一半有$\\frac{n}{2}+1$个；\n\n利用Pólya定理，我们可以得到答案应该为如下公式：\n\n当$n$为奇数：\n\n$ans(n)=\\frac{\\sum_{i=1}^{n}3^{gcd(i,n)}+n\\times 3^{\\lceil\\frac{n}{2}\\rceil}}{n+n}$\n\n当$n$为偶数：\n\n$ans(n)=\\frac{\\sum_{i=1}^{n}3^{gcd(i,n)}+\\frac{n}{2}\\times 3^{\\frac{n}{2}}+\\frac{n}{2}\\times 3^{\\frac{n}{2}+1}}{n+n}$\n\n那么代码实现就非常简单了：\n\n``` cpp\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#include<cstdlib>\n#include<cstring>\n#include<string>\n#include<queue>\n#include<map>\n#include<set>\n#include<stack>\n#include<cmath>\n#include<cctype>\nusing namespace std;\nlong long power(long long a,long long b){\n\tlong long ans=1ll;\n\twhile(b){if(b&1ll)ans*=a;a*=a;b>>=1;}\n\treturn ans;\n}\nlong long gcd(long long a,long long b){return b?gcd(b,a%b):a;}\nlong long n,g,ans;\nint main()\n{\n  while(scanf(\"%lld\",&n)==1&&n!=-1){\n    if(n==0){printf(\"0\\n\");continue;}\n    ans=0;\n    for(int i=1;i<=n;++i)g=gcd(n,i),ans+=power(3,g);\n    if(n&1)ans+=n*power(3,(n+1)>>1);\n    else ans+=(n>>1)*power(3,(n+2)>>1),ans+=(n>>1)*power(3,n>>1);\n    ans=ans/(n<<1);\n    printf(\"%lld\\n\",ans);\n  }\n  return 0;\n}\n```\n\n##### 感谢水本大jiu~蒻的博客QUQ，1551~","source":"_posts/超低能解读群论.md","raw":"---\ntitle: '超低能解读群论'\ndate: 2018-12-30 12:31:10\ncategories:\n- 学习笔记\ntags:\n- OI\n- 数学\n- 群论\nmathjax: true\n---\n\n葱花的超低能解读群论 QUQ ，弱哭了1551\n\n前排鸣谢：\n（~~PY关系~~）指导：@[Psyduck](http://psyduck.wang/)  （~~日常%~~）大jiu~佬：@[hdxrie](https://www.luogu.org/blog/hdxrie/)\n\n推荐视频：[嘿嘿嘿](http://www.bilibili.com/video/av11339177/?share_source=qq&ts=1535624691&share_medium=iphone&bbid=182b868b7e157f70a15090b987621a32)\n\n<!-- more -->\n\n## **一、群的定义** \n群是***一些定义的映射*** 对于***指定的有限集合*** 的集合；\n\n其中群必须满足以下性质：\n\n- 封闭性：集合内元素间的映射不会超过*指定的有限集合*；\n\n- 结合律：集合内元素间的映射满足结合律；\n\n- 单位元：集合内存在一个基底元素，使得集合内所有的元素都可以用基底元素表示；\n\n- 逆元：集合内必定存在成对的元素，使得经过*一些定义的映射*成为基地元素。\n\n更严格地讲，群的定义为：\n![](https://img-blog.csdnimg.cn/img_convert/e98cda276781b6aaf9485173901ef297.png)\n\n注意群是***映射的集合*** 不是 ***一些定义的映射*** +***指定的有限集合*** 。\n\n一个简单的例子：\n\n实数的加法就是一个群（实数加法群）\n\n- *一些定义的映射*： +，-（加一个负数）；\n\n- *指定的有限集合*： 全体实数；\n\n- 封闭性：一个实数加上一个实数还是一个实数；\n\n- 结合律：a,b,c为实数，则：$(a+b)+c=a+(b+c)$\n\n- 单位元：0；\n\n- 逆元：a为实数，那么a与-a互为彼此的逆元，即：$a+(-a)=0$\n\n然后举一个复杂一点点的例子，以后我们也会用到这个举例：\n\n对于以下集合：（多种正方形）\n![](https://img-blog.csdnimg.cn/img_convert/1873425fe9facf08696a51a4b12d0086.png)\n\n我们定义8种映射关系：\n![](https://img-blog.csdnimg.cn/img_convert/fa3432467ea0b19499f222d32fcf7dd5.png)\n\n易证得，这***8种映射关系*** 对于这个***正方形集合*** 满足：\n\n**封闭性**，**结合律**，**单位元**(1号正方形)，**逆元**(2与4,5与5等)；\n\n所以这个映射的集合为群。\n\n具体证明不再赘述。\n\n## **二、群的模型与置换群** \n\n对于第一部分下面这个集合：\n\n![](https://img-blog.csdnimg.cn/img_convert/73b2ac8cec75893b6252939533222d1a.png)\n\n我们可以发现：\n\n### **这个群的模型满足一个基本的有向图模型** \n\n我们不妨把它建立出来观察一下它的性质：\n\n**（边是映射，点是集合内元素，左上角是映射的类型在图上的颜色）**\n\n![](https://img-blog.csdnimg.cn/img_convert/1f0509162141be39d5e59534a5e6db78.png)\n\n看起来很美好，对不对(~~彩虹！！~~)？\n\n有点乱？我们可以分开看看：\n\n**1. 不变**\n\n![](https://img-blog.csdnimg.cn/img_convert/7ae575a36a72234063a4532149b9ebdf.png)\n\n**2. 旋转90°**\n\n![](https://img-blog.csdnimg.cn/img_convert/5cc866a84d940e71fee5b933b3c7e912.png)\n\n**3. 旋转180°**\n\n![](https://img-blog.csdnimg.cn/img_convert/91106336127712d5e0ecad51847f805f.png)\n\n**4. 旋转270° **\n\n![](https://img-blog.csdnimg.cn/img_convert/b3af25f76db1a4f3a6a7db90885cbfb1.png)\n\n**5. 水平翻转**\n\n![](https://img-blog.csdnimg.cn/img_convert/7c479a79ba497450cd0034ac7afe4715.png)\n\n**6. 竖直翻转**\n\n![](https://img-blog.csdnimg.cn/img_convert/7ef47ae9ba232a0472d224fe296a74e6.png)\n\n**7. 45°翻转**\n\n![](https://img-blog.csdnimg.cn/img_convert/145c031c3930a00bd99bb70fadc4ecd0.png)\n\n**8. -45°翻转**\n\n![](https://img-blog.csdnimg.cn/img_convert/e7685a19bef91fa399e9f50d50f1d298.png)\n\n### **充分满足对称性的美好 (~~彩虹！！~~)**\n\n我们可以很轻松观察出这个映射集合的**封闭性**。\n\n**结合律**也可以被轻松观察出来看出来，就不举例子了：\n\n**逆元**就更显而易见了，除了2和4互为逆元，其他的映射都为自己的逆元：\n\n![](https://img-blog.csdnimg.cn/img_convert/96392aa07fdd7171f129920894470175.png)\n\n下面我们带入一个新的概念：**置换**和**置换群**\n\n~~直接上学长的ppt(%%%)~~\n\n![](https://img-blog.csdnimg.cn/img_convert/396b8ac9b47b0dfe9b35c93dbf9d21eb.png)\n\n![](https://img-blog.csdnimg.cn/img_convert/e04d2e4faade98c809589aab26b8998e.png)\n\n简单点说，上面我们举例的群，它的八种映射方式，就是**置换**；\n\n而8种置换组成的群，就是**置换群**；\n\n我们举一个例子……hummmm……就比如：\n\n**5. 水平翻转**\n\n![](https://img-blog.csdnimg.cn/img_convert/7c479a79ba497450cd0034ac7afe4715.png)\n\n它的置换写法就是：\n\n$\\binom{1\\ 2\\ 3\\ 4\\ 5\\ 6\\ 7\\ 8}{5\\ 8\\ 6\\ 7\\ 1\\ 3\\ 4\\ 2}$\n\n这不就是模型中有向图的**边**吗？\n\n很简单？对吧？\n\n那么现在，我们可以进入重点咯？\n\n## **三、Burnside引理 和 Pólya定理**\n\n先直接甩Burnside引理的定义：~~(还是学长的pptOrz)~~\n\n![](https://img-blog.csdnimg.cn/img_convert/eab2ef3a46051c8c125cbfa4cdddab4c.png)\n\n看上去挺复杂的？我们慢慢来吧。\n\n先引入一个简单的概念：**循环**\n\n![](https://img-blog.csdnimg.cn/img_convert/918488795cc1fefdf0e1fdd0e9348324.png)\n\n下面我们直接举个例子：**置换的循环分解**\n\n上一节末尾的例子：\n\n**5. 水平翻转**\n\n![](https://img-blog.csdnimg.cn/img_convert/7c479a79ba497450cd0034ac7afe4715.png)\n\n它的置换写法是：\n\n$\\binom{1\\ 2\\ 3\\ 4\\ 5\\ 6\\ 7\\ 8}{5\\ 8\\ 6\\ 7\\ 1\\ 3\\ 4\\ 2}$\n\n解出来的循环就是：$(1\\ 5)(2\\ 8)(3\\ 6)(4\\ 7)$\n\n放回模型看看呢？我们可以发现：\n\n置换的循环分解就是**模型中有向图的强连通分量**\n\n不如我们再放两个例子呢？\n\n**4. 旋转270°**\n\n![](https://img-blog.csdnimg.cn/img_convert/b3af25f76db1a4f3a6a7db90885cbfb1.png)\n\n它的置换写法就是：\n\n$\\binom{1\\ 2\\ 3\\ 4\\ 5\\ 6\\ 7\\ 8}{4\\ 1\\ 2\\ 3\\ 8\\ 7\\ 5\\ 6}$\n\n分解出来的循环就是：$(1\\ 4\\ 3\\ 2)(5\\ 8\\ 6\\ 7)$\n\n**1. 不变**\n\n![](https://img-blog.csdnimg.cn/img_convert/7ae575a36a72234063a4532149b9ebdf.png)\n\n它的置换写法就是：\n\n$\\binom{1\\ 2\\ 3\\ 4\\ 5\\ 6\\ 7\\ 8}{1\\ 2\\ 3\\ 4\\ 5\\ 6\\ 7\\ 8}$\n\n分解出来的循环就是：$(1)(2)(3)(4)(5)(6)(7)(8)$\n\n看样子我们的想法没有问题；\n\n那么，现在我们重新给出Burnside引理的内容：\n\n**设置大小为$|G|$，由$g$组成的群$G$，作用于有限集合$X$上面，那么$X$在$G$内映射的作用下，$X$的变换结果有这么多种：**\n\n$\\frac {\\sum_{g\\in G}^{} {X(g)}} {|G|}$\n\n**其中$X(g)$为映射$g$对与集合$X$的操作结果**\n\n现在，是不是清楚很多了呢(雾)？\n\n不过我们发现，这个方法的复杂度特别高，不仅要枚举每一个映射，还要对每种映射枚举一次每个置换，所以引入Pólya定理：\n\n先甩定义：\n\n![](https://img-blog.csdnimg.cn/img_convert/0abd64840b78465cc85c5be09b20ef9a.png)\n\n即：\n\n**设置大小为$|G|$，由$g$组成的群$G$，作用于$k$组合成的有限集合$X$上面，那么$X$在$G$内映射的作用下，$X$的变换结果种类有这么多：**\n\n$\\frac {\\sum_{g\\in G}^{} {k^{m(g)}}} {|G|}$\n\n**其中$m(g)$为映射$g$对与集合$X$的操作结果**\n\n**也就是把$X(g)$优化成了$k^{m(g)}$ ，减少了枚举操作。**\n\n其中$m(g)$可以$O(n)$求，这个很简单，就是求一个有向图的强连通分量，就不举例子了。\n\n## **四、例题 [Poj1286 Necklace of Beads](http://poj.org/problem?id=1286)**\n\n### **Necklace of Beads** \n\nTime Limit: 1000MS\tMemory Limit: 10000K\n    \n**Description**\n\nBeads of red, blue or green colors are connected together into a circular necklace of n beads ( n < 24 ). If the repetitions that are produced by rotation around the center of the circular necklace or reflection to the axis of symmetry are all neglected, how many different forms of the necklace are there? \n\n![](https://img-blog.csdnimg.cn/img_convert/439aa0fd6365704a3b375bca89554514.png)\n\n**Input**\n\nThe input has several lines, and each line contains the input data n. \n-1 denotes the end of the input file. \nOutput\nThe output should contain the output data: Number of different forms, in each line correspondent to the input data.\n\n**Sample Input**\n\n4\n\n5\n\n\n-1\n\n**Sample Output**\n\n21\n\n39\n\n\n**题目大意：对于指定n，求得到红，绿，蓝三种颜色珠子串成的长度为n的项链有多少种(首尾相接)**\n\n我们先来看一下这个群的映射方式：\n\n**旋转，翻转。**\n\n我们之前举的例子呢，刚好和$n=4$的情况差不多，建议各位读者巨佬可以自己画一下其他情况的草图仔细观察一下，我们可以发现具体群内的映射有如下规律：\n\n**旋转一共有$n$个角度**，顺时针旋转$i$格的置换中，每个循环的长度为$\\frac{n}{gcd(i,n)}$，个数为$gcd(i,n)$；\n\n**旋转共有$n$个对称轴**，所以当$n$为奇数时，每一个对称轴都有$\\left\\lceil\\frac{n}{2}\\right\\rceil$个循环；当$n$为偶数时，有一半的对称轴有$\\frac{n}{2}$个循环，一半有$\\frac{n}{2}+1$个；\n\n利用Pólya定理，我们可以得到答案应该为如下公式：\n\n当$n$为奇数：\n\n$ans(n)=\\frac{\\sum_{i=1}^{n}3^{gcd(i,n)}+n\\times 3^{\\lceil\\frac{n}{2}\\rceil}}{n+n}$\n\n当$n$为偶数：\n\n$ans(n)=\\frac{\\sum_{i=1}^{n}3^{gcd(i,n)}+\\frac{n}{2}\\times 3^{\\frac{n}{2}}+\\frac{n}{2}\\times 3^{\\frac{n}{2}+1}}{n+n}$\n\n那么代码实现就非常简单了：\n\n``` cpp\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#include<cstdlib>\n#include<cstring>\n#include<string>\n#include<queue>\n#include<map>\n#include<set>\n#include<stack>\n#include<cmath>\n#include<cctype>\nusing namespace std;\nlong long power(long long a,long long b){\n\tlong long ans=1ll;\n\twhile(b){if(b&1ll)ans*=a;a*=a;b>>=1;}\n\treturn ans;\n}\nlong long gcd(long long a,long long b){return b?gcd(b,a%b):a;}\nlong long n,g,ans;\nint main()\n{\n  while(scanf(\"%lld\",&n)==1&&n!=-1){\n    if(n==0){printf(\"0\\n\");continue;}\n    ans=0;\n    for(int i=1;i<=n;++i)g=gcd(n,i),ans+=power(3,g);\n    if(n&1)ans+=n*power(3,(n+1)>>1);\n    else ans+=(n>>1)*power(3,(n+2)>>1),ans+=(n>>1)*power(3,n>>1);\n    ans=ans/(n<<1);\n    printf(\"%lld\\n\",ans);\n  }\n  return 0;\n}\n```\n\n##### 感谢水本大jiu~蒻的博客QUQ，1551~","slug":"超低能解读群论","published":1,"updated":"2022-02-14T03:58:52.208Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0i63w6l002cu4gbd8vc4l6m","content":"<p>葱花的超低能解读群论 QUQ ，弱哭了1551</p>\n<p>前排鸣谢：<br>（<del>PY关系</del>）指导：@<a href=\"http://psyduck.wang/\">Psyduck</a>  （<del>日常%</del>）大jiu~佬：@<a href=\"https://www.luogu.org/blog/hdxrie/\">hdxrie</a></p>\n<p>推荐视频：<a href=\"http://www.bilibili.com/video/av11339177/?share_source=qq&amp;ts=1535624691&amp;share_medium=iphone&amp;bbid=182b868b7e157f70a15090b987621a32\">嘿嘿嘿</a></p>\n<span id=\"more\"></span>\n<h2 id=\"一、群的定义\"><a href=\"#一、群的定义\" class=\"headerlink\" title=\"一、群的定义\"></a><strong>一、群的定义</strong></h2><p>群是<strong><em>一些定义的映射</em></strong> 对于<strong><em>指定的有限集合</em></strong> 的集合；</p>\n<p>其中群必须满足以下性质：</p>\n<ul>\n<li><p>封闭性：集合内元素间的映射不会超过<em>指定的有限集合</em>；</p>\n</li>\n<li><p>结合律：集合内元素间的映射满足结合律；</p>\n</li>\n<li><p>单位元：集合内存在一个基底元素，使得集合内所有的元素都可以用基底元素表示；</p>\n</li>\n<li><p>逆元：集合内必定存在成对的元素，使得经过<em>一些定义的映射</em>成为基地元素。</p>\n</li>\n</ul>\n<p>更严格地讲，群的定义为：<br><img src=\"https://img-blog.csdnimg.cn/img_convert/e98cda276781b6aaf9485173901ef297.png\" alt=\"\"></p>\n<p>注意群是<strong><em>映射的集合</em></strong> 不是 <strong><em>一些定义的映射</em></strong> +<strong><em>指定的有限集合</em></strong> 。</p>\n<p>一个简单的例子：</p>\n<p>实数的加法就是一个群（实数加法群）</p>\n<ul>\n<li><p><em>一些定义的映射</em>： +，-（加一个负数）；</p>\n</li>\n<li><p><em>指定的有限集合</em>： 全体实数；</p>\n</li>\n<li><p>封闭性：一个实数加上一个实数还是一个实数；</p>\n</li>\n<li><p>结合律：a,b,c为实数，则：$(a+b)+c=a+(b+c)$</p>\n</li>\n<li><p>单位元：0；</p>\n</li>\n<li><p>逆元：a为实数，那么a与-a互为彼此的逆元，即：$a+(-a)=0$</p>\n</li>\n</ul>\n<p>然后举一个复杂一点点的例子，以后我们也会用到这个举例：</p>\n<p>对于以下集合：（多种正方形）<br><img src=\"https://img-blog.csdnimg.cn/img_convert/1873425fe9facf08696a51a4b12d0086.png\" alt=\"\"></p>\n<p>我们定义8种映射关系：<br><img src=\"https://img-blog.csdnimg.cn/img_convert/fa3432467ea0b19499f222d32fcf7dd5.png\" alt=\"\"></p>\n<p>易证得，这<strong><em>8种映射关系</em></strong> 对于这个<strong><em>正方形集合</em></strong> 满足：</p>\n<p><strong>封闭性</strong>，<strong>结合律</strong>，<strong>单位元</strong>(1号正方形)，<strong>逆元</strong>(2与4,5与5等)；</p>\n<p>所以这个映射的集合为群。</p>\n<p>具体证明不再赘述。</p>\n<h2 id=\"二、群的模型与置换群\"><a href=\"#二、群的模型与置换群\" class=\"headerlink\" title=\"二、群的模型与置换群\"></a><strong>二、群的模型与置换群</strong></h2><p>对于第一部分下面这个集合：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/73b2ac8cec75893b6252939533222d1a.png\" alt=\"\"></p>\n<p>我们可以发现：</p>\n<h3 id=\"这个群的模型满足一个基本的有向图模型\"><a href=\"#这个群的模型满足一个基本的有向图模型\" class=\"headerlink\" title=\"这个群的模型满足一个基本的有向图模型\"></a><strong>这个群的模型满足一个基本的有向图模型</strong></h3><p>我们不妨把它建立出来观察一下它的性质：</p>\n<p><strong>（边是映射，点是集合内元素，左上角是映射的类型在图上的颜色）</strong></p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/1f0509162141be39d5e59534a5e6db78.png\" alt=\"\"></p>\n<p>看起来很美好，对不对(<del>彩虹！！</del>)？</p>\n<p>有点乱？我们可以分开看看：</p>\n<p><strong>1. 不变</strong></p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/7ae575a36a72234063a4532149b9ebdf.png\" alt=\"\"></p>\n<p><strong>2. 旋转90°</strong></p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/5cc866a84d940e71fee5b933b3c7e912.png\" alt=\"\"></p>\n<p><strong>3. 旋转180°</strong></p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/91106336127712d5e0ecad51847f805f.png\" alt=\"\"></p>\n<p><strong>4. 旋转270° </strong></p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/b3af25f76db1a4f3a6a7db90885cbfb1.png\" alt=\"\"></p>\n<p><strong>5. 水平翻转</strong></p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/7c479a79ba497450cd0034ac7afe4715.png\" alt=\"\"></p>\n<p><strong>6. 竖直翻转</strong></p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/7ef47ae9ba232a0472d224fe296a74e6.png\" alt=\"\"></p>\n<p><strong>7. 45°翻转</strong></p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/145c031c3930a00bd99bb70fadc4ecd0.png\" alt=\"\"></p>\n<p><strong>8. -45°翻转</strong></p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/e7685a19bef91fa399e9f50d50f1d298.png\" alt=\"\"></p>\n<h3 id=\"充分满足对称性的美好-彩虹！！\"><a href=\"#充分满足对称性的美好-彩虹！！\" class=\"headerlink\" title=\"充分满足对称性的美好 (彩虹！！)\"></a><strong>充分满足对称性的美好 (<del>彩虹！！</del>)</strong></h3><p>我们可以很轻松观察出这个映射集合的<strong>封闭性</strong>。</p>\n<p><strong>结合律</strong>也可以被轻松观察出来看出来，就不举例子了：</p>\n<p><strong>逆元</strong>就更显而易见了，除了2和4互为逆元，其他的映射都为自己的逆元：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/96392aa07fdd7171f129920894470175.png\" alt=\"\"></p>\n<p>下面我们带入一个新的概念：<strong>置换</strong>和<strong>置换群</strong></p>\n<p><del>直接上学长的ppt(%%%)</del></p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/396b8ac9b47b0dfe9b35c93dbf9d21eb.png\" alt=\"\"></p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/e04d2e4faade98c809589aab26b8998e.png\" alt=\"\"></p>\n<p>简单点说，上面我们举例的群，它的八种映射方式，就是<strong>置换</strong>；</p>\n<p>而8种置换组成的群，就是<strong>置换群</strong>；</p>\n<p>我们举一个例子……hummmm……就比如：</p>\n<p><strong>5. 水平翻转</strong></p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/7c479a79ba497450cd0034ac7afe4715.png\" alt=\"\"></p>\n<p>它的置换写法就是：</p>\n<p>$\\binom{1\\ 2\\ 3\\ 4\\ 5\\ 6\\ 7\\ 8}{5\\ 8\\ 6\\ 7\\ 1\\ 3\\ 4\\ 2}$</p>\n<p>这不就是模型中有向图的<strong>边</strong>吗？</p>\n<p>很简单？对吧？</p>\n<p>那么现在，我们可以进入重点咯？</p>\n<h2 id=\"三、Burnside引理-和-Polya定理\"><a href=\"#三、Burnside引理-和-Polya定理\" class=\"headerlink\" title=\"三、Burnside引理 和 Pólya定理\"></a><strong>三、Burnside引理 和 Pólya定理</strong></h2><p>先直接甩Burnside引理的定义：<del>(还是学长的pptOrz)</del></p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/eab2ef3a46051c8c125cbfa4cdddab4c.png\" alt=\"\"></p>\n<p>看上去挺复杂的？我们慢慢来吧。</p>\n<p>先引入一个简单的概念：<strong>循环</strong></p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/918488795cc1fefdf0e1fdd0e9348324.png\" alt=\"\"></p>\n<p>下面我们直接举个例子：<strong>置换的循环分解</strong></p>\n<p>上一节末尾的例子：</p>\n<p><strong>5. 水平翻转</strong></p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/7c479a79ba497450cd0034ac7afe4715.png\" alt=\"\"></p>\n<p>它的置换写法是：</p>\n<p>$\\binom{1\\ 2\\ 3\\ 4\\ 5\\ 6\\ 7\\ 8}{5\\ 8\\ 6\\ 7\\ 1\\ 3\\ 4\\ 2}$</p>\n<p>解出来的循环就是：$(1\\ 5)(2\\ 8)(3\\ 6)(4\\ 7)$</p>\n<p>放回模型看看呢？我们可以发现：</p>\n<p>置换的循环分解就是<strong>模型中有向图的强连通分量</strong></p>\n<p>不如我们再放两个例子呢？</p>\n<p><strong>4. 旋转270°</strong></p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/b3af25f76db1a4f3a6a7db90885cbfb1.png\" alt=\"\"></p>\n<p>它的置换写法就是：</p>\n<p>$\\binom{1\\ 2\\ 3\\ 4\\ 5\\ 6\\ 7\\ 8}{4\\ 1\\ 2\\ 3\\ 8\\ 7\\ 5\\ 6}$</p>\n<p>分解出来的循环就是：$(1\\ 4\\ 3\\ 2)(5\\ 8\\ 6\\ 7)$</p>\n<p><strong>1. 不变</strong></p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/7ae575a36a72234063a4532149b9ebdf.png\" alt=\"\"></p>\n<p>它的置换写法就是：</p>\n<p>$\\binom{1\\ 2\\ 3\\ 4\\ 5\\ 6\\ 7\\ 8}{1\\ 2\\ 3\\ 4\\ 5\\ 6\\ 7\\ 8}$</p>\n<p>分解出来的循环就是：$(1)(2)(3)(4)(5)(6)(7)(8)$</p>\n<p>看样子我们的想法没有问题；</p>\n<p>那么，现在我们重新给出Burnside引理的内容：</p>\n<p><strong>设置大小为$|G|$，由$g$组成的群$G$，作用于有限集合$X$上面，那么$X$在$G$内映射的作用下，$X$的变换结果有这么多种：</strong></p>\n<p>$\\frac {\\sum_{g\\in G}^{} {X(g)}} {|G|}$</p>\n<p><strong>其中$X(g)$为映射$g$对与集合$X$的操作结果</strong></p>\n<p>现在，是不是清楚很多了呢(雾)？</p>\n<p>不过我们发现，这个方法的复杂度特别高，不仅要枚举每一个映射，还要对每种映射枚举一次每个置换，所以引入Pólya定理：</p>\n<p>先甩定义：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/0abd64840b78465cc85c5be09b20ef9a.png\" alt=\"\"></p>\n<p>即：</p>\n<p><strong>设置大小为$|G|$，由$g$组成的群$G$，作用于$k$组合成的有限集合$X$上面，那么$X$在$G$内映射的作用下，$X$的变换结果种类有这么多：</strong></p>\n<p>$\\frac {\\sum_{g\\in G}^{} {k^{m(g)}}} {|G|}$</p>\n<p><strong>其中$m(g)$为映射$g$对与集合$X$的操作结果</strong></p>\n<p><strong>也就是把$X(g)$优化成了$k^{m(g)}$ ，减少了枚举操作。</strong></p>\n<p>其中$m(g)$可以$O(n)$求，这个很简单，就是求一个有向图的强连通分量，就不举例子了。</p>\n<h2 id=\"四、例题-Poj1286-Necklace-of-Beads\"><a href=\"#四、例题-Poj1286-Necklace-of-Beads\" class=\"headerlink\" title=\"四、例题 Poj1286 Necklace of Beads\"></a><strong>四、例题 <a href=\"http://poj.org/problem?id=1286\">Poj1286 Necklace of Beads</a></strong></h2><h3 id=\"Necklace-of-Beads\"><a href=\"#Necklace-of-Beads\" class=\"headerlink\" title=\"Necklace of Beads\"></a><strong>Necklace of Beads</strong></h3><p>Time Limit: 1000MS    Memory Limit: 10000K</p>\n<p><strong>Description</strong></p>\n<p>Beads of red, blue or green colors are connected together into a circular necklace of n beads ( n &lt; 24 ). If the repetitions that are produced by rotation around the center of the circular necklace or reflection to the axis of symmetry are all neglected, how many different forms of the necklace are there? </p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/439aa0fd6365704a3b375bca89554514.png\" alt=\"\"></p>\n<p><strong>Input</strong></p>\n<p>The input has several lines, and each line contains the input data n.<br>-1 denotes the end of the input file.<br>Output<br>The output should contain the output data: Number of different forms, in each line correspondent to the input data.</p>\n<p><strong>Sample Input</strong></p>\n<p>4</p>\n<p>5</p>\n<p>-1</p>\n<p><strong>Sample Output</strong></p>\n<p>21</p>\n<p>39</p>\n<p><strong>题目大意：对于指定n，求得到红，绿，蓝三种颜色珠子串成的长度为n的项链有多少种(首尾相接)</strong></p>\n<p>我们先来看一下这个群的映射方式：</p>\n<p><strong>旋转，翻转。</strong></p>\n<p>我们之前举的例子呢，刚好和$n=4$的情况差不多，建议各位读者巨佬可以自己画一下其他情况的草图仔细观察一下，我们可以发现具体群内的映射有如下规律：</p>\n<p><strong>旋转一共有$n$个角度</strong>，顺时针旋转$i$格的置换中，每个循环的长度为$\\frac{n}{gcd(i,n)}$，个数为$gcd(i,n)$；</p>\n<p><strong>旋转共有$n$个对称轴</strong>，所以当$n$为奇数时，每一个对称轴都有$\\left\\lceil\\frac{n}{2}\\right\\rceil$个循环；当$n$为偶数时，有一半的对称轴有$\\frac{n}{2}$个循环，一半有$\\frac{n}{2}+1$个；</p>\n<p>利用Pólya定理，我们可以得到答案应该为如下公式：</p>\n<p>当$n$为奇数：</p>\n<p>$ans(n)=\\frac{\\sum_{i=1}^{n}3^{gcd(i,n)}+n\\times 3^{\\lceil\\frac{n}{2}\\rceil}}{n+n}$</p>\n<p>当$n$为偶数：</p>\n<p>$ans(n)=\\frac{\\sum_{i=1}^{n}3^{gcd(i,n)}+\\frac{n}{2}\\times 3^{\\frac{n}{2}}+\\frac{n}{2}\\times 3^{\\frac{n}{2}+1}}{n+n}$</p>\n<p>那么代码实现就非常简单了：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdlib&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;map&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;set&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;stack&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cctype&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"title\">power</span><span class=\"params\">(<span class=\"type\">long</span> <span class=\"type\">long</span> a,<span class=\"type\">long</span> <span class=\"type\">long</span> b)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">long</span> <span class=\"type\">long</span> ans=<span class=\"number\">1ll</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(b)&#123;<span class=\"keyword\">if</span>(b&amp;<span class=\"number\">1ll</span>)ans*=a;a*=a;b&gt;&gt;=<span class=\"number\">1</span>;&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"title\">gcd</span><span class=\"params\">(<span class=\"type\">long</span> <span class=\"type\">long</span> a,<span class=\"type\">long</span> <span class=\"type\">long</span> b)</span></span>&#123;<span class=\"keyword\">return</span> b?<span class=\"built_in\">gcd</span>(b,a%b):a;&#125;</span><br><span class=\"line\"><span class=\"type\">long</span> <span class=\"type\">long</span> n,g,ans;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%lld&quot;</span>,&amp;n)==<span class=\"number\">1</span>&amp;&amp;n!=<span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(n==<span class=\"number\">0</span>)&#123;<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;0\\n&quot;</span>);<span class=\"keyword\">continue</span>;&#125;</span><br><span class=\"line\">    ans=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i)g=<span class=\"built_in\">gcd</span>(n,i),ans+=<span class=\"built_in\">power</span>(<span class=\"number\">3</span>,g);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(n&amp;<span class=\"number\">1</span>)ans+=n*<span class=\"built_in\">power</span>(<span class=\"number\">3</span>,(n+<span class=\"number\">1</span>)&gt;&gt;<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">else</span> ans+=(n&gt;&gt;<span class=\"number\">1</span>)*<span class=\"built_in\">power</span>(<span class=\"number\">3</span>,(n+<span class=\"number\">2</span>)&gt;&gt;<span class=\"number\">1</span>),ans+=(n&gt;&gt;<span class=\"number\">1</span>)*<span class=\"built_in\">power</span>(<span class=\"number\">3</span>,n&gt;&gt;<span class=\"number\">1</span>);</span><br><span class=\"line\">    ans=ans/(n&lt;&lt;<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%lld\\n&quot;</span>,ans);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"感谢水本大jiu-蒻的博客QUQ，1551\"><a href=\"#感谢水本大jiu-蒻的博客QUQ，1551\" class=\"headerlink\" title=\"感谢水本大jiu~蒻的博客QUQ，1551~\"></a>感谢水本大jiu~蒻的博客QUQ，1551~</h5>","site":{"data":{}},"excerpt":"<p>葱花的超低能解读群论 QUQ ，弱哭了1551</p>\n<p>前排鸣谢：<br>（<del>PY关系</del>）指导：@<a href=\"http://psyduck.wang/\">Psyduck</a>  （<del>日常%</del>）大jiu~佬：@<a href=\"https://www.luogu.org/blog/hdxrie/\">hdxrie</a></p>\n<p>推荐视频：<a href=\"http://www.bilibili.com/video/av11339177/?share_source=qq&amp;ts=1535624691&amp;share_medium=iphone&amp;bbid=182b868b7e157f70a15090b987621a32\">嘿嘿嘿</a></p>","more":"<h2 id=\"一、群的定义\"><a href=\"#一、群的定义\" class=\"headerlink\" title=\"一、群的定义\"></a><strong>一、群的定义</strong></h2><p>群是<strong><em>一些定义的映射</em></strong> 对于<strong><em>指定的有限集合</em></strong> 的集合；</p>\n<p>其中群必须满足以下性质：</p>\n<ul>\n<li><p>封闭性：集合内元素间的映射不会超过<em>指定的有限集合</em>；</p>\n</li>\n<li><p>结合律：集合内元素间的映射满足结合律；</p>\n</li>\n<li><p>单位元：集合内存在一个基底元素，使得集合内所有的元素都可以用基底元素表示；</p>\n</li>\n<li><p>逆元：集合内必定存在成对的元素，使得经过<em>一些定义的映射</em>成为基地元素。</p>\n</li>\n</ul>\n<p>更严格地讲，群的定义为：<br><img src=\"https://img-blog.csdnimg.cn/img_convert/e98cda276781b6aaf9485173901ef297.png\" alt=\"\"></p>\n<p>注意群是<strong><em>映射的集合</em></strong> 不是 <strong><em>一些定义的映射</em></strong> +<strong><em>指定的有限集合</em></strong> 。</p>\n<p>一个简单的例子：</p>\n<p>实数的加法就是一个群（实数加法群）</p>\n<ul>\n<li><p><em>一些定义的映射</em>： +，-（加一个负数）；</p>\n</li>\n<li><p><em>指定的有限集合</em>： 全体实数；</p>\n</li>\n<li><p>封闭性：一个实数加上一个实数还是一个实数；</p>\n</li>\n<li><p>结合律：a,b,c为实数，则：$(a+b)+c=a+(b+c)$</p>\n</li>\n<li><p>单位元：0；</p>\n</li>\n<li><p>逆元：a为实数，那么a与-a互为彼此的逆元，即：$a+(-a)=0$</p>\n</li>\n</ul>\n<p>然后举一个复杂一点点的例子，以后我们也会用到这个举例：</p>\n<p>对于以下集合：（多种正方形）<br><img src=\"https://img-blog.csdnimg.cn/img_convert/1873425fe9facf08696a51a4b12d0086.png\" alt=\"\"></p>\n<p>我们定义8种映射关系：<br><img src=\"https://img-blog.csdnimg.cn/img_convert/fa3432467ea0b19499f222d32fcf7dd5.png\" alt=\"\"></p>\n<p>易证得，这<strong><em>8种映射关系</em></strong> 对于这个<strong><em>正方形集合</em></strong> 满足：</p>\n<p><strong>封闭性</strong>，<strong>结合律</strong>，<strong>单位元</strong>(1号正方形)，<strong>逆元</strong>(2与4,5与5等)；</p>\n<p>所以这个映射的集合为群。</p>\n<p>具体证明不再赘述。</p>\n<h2 id=\"二、群的模型与置换群\"><a href=\"#二、群的模型与置换群\" class=\"headerlink\" title=\"二、群的模型与置换群\"></a><strong>二、群的模型与置换群</strong></h2><p>对于第一部分下面这个集合：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/73b2ac8cec75893b6252939533222d1a.png\" alt=\"\"></p>\n<p>我们可以发现：</p>\n<h3 id=\"这个群的模型满足一个基本的有向图模型\"><a href=\"#这个群的模型满足一个基本的有向图模型\" class=\"headerlink\" title=\"这个群的模型满足一个基本的有向图模型\"></a><strong>这个群的模型满足一个基本的有向图模型</strong></h3><p>我们不妨把它建立出来观察一下它的性质：</p>\n<p><strong>（边是映射，点是集合内元素，左上角是映射的类型在图上的颜色）</strong></p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/1f0509162141be39d5e59534a5e6db78.png\" alt=\"\"></p>\n<p>看起来很美好，对不对(<del>彩虹！！</del>)？</p>\n<p>有点乱？我们可以分开看看：</p>\n<p><strong>1. 不变</strong></p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/7ae575a36a72234063a4532149b9ebdf.png\" alt=\"\"></p>\n<p><strong>2. 旋转90°</strong></p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/5cc866a84d940e71fee5b933b3c7e912.png\" alt=\"\"></p>\n<p><strong>3. 旋转180°</strong></p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/91106336127712d5e0ecad51847f805f.png\" alt=\"\"></p>\n<p><strong>4. 旋转270° </strong></p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/b3af25f76db1a4f3a6a7db90885cbfb1.png\" alt=\"\"></p>\n<p><strong>5. 水平翻转</strong></p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/7c479a79ba497450cd0034ac7afe4715.png\" alt=\"\"></p>\n<p><strong>6. 竖直翻转</strong></p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/7ef47ae9ba232a0472d224fe296a74e6.png\" alt=\"\"></p>\n<p><strong>7. 45°翻转</strong></p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/145c031c3930a00bd99bb70fadc4ecd0.png\" alt=\"\"></p>\n<p><strong>8. -45°翻转</strong></p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/e7685a19bef91fa399e9f50d50f1d298.png\" alt=\"\"></p>\n<h3 id=\"充分满足对称性的美好-彩虹！！\"><a href=\"#充分满足对称性的美好-彩虹！！\" class=\"headerlink\" title=\"充分满足对称性的美好 (彩虹！！)\"></a><strong>充分满足对称性的美好 (<del>彩虹！！</del>)</strong></h3><p>我们可以很轻松观察出这个映射集合的<strong>封闭性</strong>。</p>\n<p><strong>结合律</strong>也可以被轻松观察出来看出来，就不举例子了：</p>\n<p><strong>逆元</strong>就更显而易见了，除了2和4互为逆元，其他的映射都为自己的逆元：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/96392aa07fdd7171f129920894470175.png\" alt=\"\"></p>\n<p>下面我们带入一个新的概念：<strong>置换</strong>和<strong>置换群</strong></p>\n<p><del>直接上学长的ppt(%%%)</del></p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/396b8ac9b47b0dfe9b35c93dbf9d21eb.png\" alt=\"\"></p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/e04d2e4faade98c809589aab26b8998e.png\" alt=\"\"></p>\n<p>简单点说，上面我们举例的群，它的八种映射方式，就是<strong>置换</strong>；</p>\n<p>而8种置换组成的群，就是<strong>置换群</strong>；</p>\n<p>我们举一个例子……hummmm……就比如：</p>\n<p><strong>5. 水平翻转</strong></p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/7c479a79ba497450cd0034ac7afe4715.png\" alt=\"\"></p>\n<p>它的置换写法就是：</p>\n<p>$\\binom{1\\ 2\\ 3\\ 4\\ 5\\ 6\\ 7\\ 8}{5\\ 8\\ 6\\ 7\\ 1\\ 3\\ 4\\ 2}$</p>\n<p>这不就是模型中有向图的<strong>边</strong>吗？</p>\n<p>很简单？对吧？</p>\n<p>那么现在，我们可以进入重点咯？</p>\n<h2 id=\"三、Burnside引理-和-Polya定理\"><a href=\"#三、Burnside引理-和-Polya定理\" class=\"headerlink\" title=\"三、Burnside引理 和 Pólya定理\"></a><strong>三、Burnside引理 和 Pólya定理</strong></h2><p>先直接甩Burnside引理的定义：<del>(还是学长的pptOrz)</del></p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/eab2ef3a46051c8c125cbfa4cdddab4c.png\" alt=\"\"></p>\n<p>看上去挺复杂的？我们慢慢来吧。</p>\n<p>先引入一个简单的概念：<strong>循环</strong></p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/918488795cc1fefdf0e1fdd0e9348324.png\" alt=\"\"></p>\n<p>下面我们直接举个例子：<strong>置换的循环分解</strong></p>\n<p>上一节末尾的例子：</p>\n<p><strong>5. 水平翻转</strong></p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/7c479a79ba497450cd0034ac7afe4715.png\" alt=\"\"></p>\n<p>它的置换写法是：</p>\n<p>$\\binom{1\\ 2\\ 3\\ 4\\ 5\\ 6\\ 7\\ 8}{5\\ 8\\ 6\\ 7\\ 1\\ 3\\ 4\\ 2}$</p>\n<p>解出来的循环就是：$(1\\ 5)(2\\ 8)(3\\ 6)(4\\ 7)$</p>\n<p>放回模型看看呢？我们可以发现：</p>\n<p>置换的循环分解就是<strong>模型中有向图的强连通分量</strong></p>\n<p>不如我们再放两个例子呢？</p>\n<p><strong>4. 旋转270°</strong></p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/b3af25f76db1a4f3a6a7db90885cbfb1.png\" alt=\"\"></p>\n<p>它的置换写法就是：</p>\n<p>$\\binom{1\\ 2\\ 3\\ 4\\ 5\\ 6\\ 7\\ 8}{4\\ 1\\ 2\\ 3\\ 8\\ 7\\ 5\\ 6}$</p>\n<p>分解出来的循环就是：$(1\\ 4\\ 3\\ 2)(5\\ 8\\ 6\\ 7)$</p>\n<p><strong>1. 不变</strong></p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/7ae575a36a72234063a4532149b9ebdf.png\" alt=\"\"></p>\n<p>它的置换写法就是：</p>\n<p>$\\binom{1\\ 2\\ 3\\ 4\\ 5\\ 6\\ 7\\ 8}{1\\ 2\\ 3\\ 4\\ 5\\ 6\\ 7\\ 8}$</p>\n<p>分解出来的循环就是：$(1)(2)(3)(4)(5)(6)(7)(8)$</p>\n<p>看样子我们的想法没有问题；</p>\n<p>那么，现在我们重新给出Burnside引理的内容：</p>\n<p><strong>设置大小为$|G|$，由$g$组成的群$G$，作用于有限集合$X$上面，那么$X$在$G$内映射的作用下，$X$的变换结果有这么多种：</strong></p>\n<p>$\\frac {\\sum_{g\\in G}^{} {X(g)}} {|G|}$</p>\n<p><strong>其中$X(g)$为映射$g$对与集合$X$的操作结果</strong></p>\n<p>现在，是不是清楚很多了呢(雾)？</p>\n<p>不过我们发现，这个方法的复杂度特别高，不仅要枚举每一个映射，还要对每种映射枚举一次每个置换，所以引入Pólya定理：</p>\n<p>先甩定义：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/0abd64840b78465cc85c5be09b20ef9a.png\" alt=\"\"></p>\n<p>即：</p>\n<p><strong>设置大小为$|G|$，由$g$组成的群$G$，作用于$k$组合成的有限集合$X$上面，那么$X$在$G$内映射的作用下，$X$的变换结果种类有这么多：</strong></p>\n<p>$\\frac {\\sum_{g\\in G}^{} {k^{m(g)}}} {|G|}$</p>\n<p><strong>其中$m(g)$为映射$g$对与集合$X$的操作结果</strong></p>\n<p><strong>也就是把$X(g)$优化成了$k^{m(g)}$ ，减少了枚举操作。</strong></p>\n<p>其中$m(g)$可以$O(n)$求，这个很简单，就是求一个有向图的强连通分量，就不举例子了。</p>\n<h2 id=\"四、例题-Poj1286-Necklace-of-Beads\"><a href=\"#四、例题-Poj1286-Necklace-of-Beads\" class=\"headerlink\" title=\"四、例题 Poj1286 Necklace of Beads\"></a><strong>四、例题 <a href=\"http://poj.org/problem?id=1286\">Poj1286 Necklace of Beads</a></strong></h2><h3 id=\"Necklace-of-Beads\"><a href=\"#Necklace-of-Beads\" class=\"headerlink\" title=\"Necklace of Beads\"></a><strong>Necklace of Beads</strong></h3><p>Time Limit: 1000MS    Memory Limit: 10000K</p>\n<p><strong>Description</strong></p>\n<p>Beads of red, blue or green colors are connected together into a circular necklace of n beads ( n &lt; 24 ). If the repetitions that are produced by rotation around the center of the circular necklace or reflection to the axis of symmetry are all neglected, how many different forms of the necklace are there? </p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/439aa0fd6365704a3b375bca89554514.png\" alt=\"\"></p>\n<p><strong>Input</strong></p>\n<p>The input has several lines, and each line contains the input data n.<br>-1 denotes the end of the input file.<br>Output<br>The output should contain the output data: Number of different forms, in each line correspondent to the input data.</p>\n<p><strong>Sample Input</strong></p>\n<p>4</p>\n<p>5</p>\n<p>-1</p>\n<p><strong>Sample Output</strong></p>\n<p>21</p>\n<p>39</p>\n<p><strong>题目大意：对于指定n，求得到红，绿，蓝三种颜色珠子串成的长度为n的项链有多少种(首尾相接)</strong></p>\n<p>我们先来看一下这个群的映射方式：</p>\n<p><strong>旋转，翻转。</strong></p>\n<p>我们之前举的例子呢，刚好和$n=4$的情况差不多，建议各位读者巨佬可以自己画一下其他情况的草图仔细观察一下，我们可以发现具体群内的映射有如下规律：</p>\n<p><strong>旋转一共有$n$个角度</strong>，顺时针旋转$i$格的置换中，每个循环的长度为$\\frac{n}{gcd(i,n)}$，个数为$gcd(i,n)$；</p>\n<p><strong>旋转共有$n$个对称轴</strong>，所以当$n$为奇数时，每一个对称轴都有$\\left\\lceil\\frac{n}{2}\\right\\rceil$个循环；当$n$为偶数时，有一半的对称轴有$\\frac{n}{2}$个循环，一半有$\\frac{n}{2}+1$个；</p>\n<p>利用Pólya定理，我们可以得到答案应该为如下公式：</p>\n<p>当$n$为奇数：</p>\n<p>$ans(n)=\\frac{\\sum_{i=1}^{n}3^{gcd(i,n)}+n\\times 3^{\\lceil\\frac{n}{2}\\rceil}}{n+n}$</p>\n<p>当$n$为偶数：</p>\n<p>$ans(n)=\\frac{\\sum_{i=1}^{n}3^{gcd(i,n)}+\\frac{n}{2}\\times 3^{\\frac{n}{2}}+\\frac{n}{2}\\times 3^{\\frac{n}{2}+1}}{n+n}$</p>\n<p>那么代码实现就非常简单了：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdlib&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;map&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;set&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;stack&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cctype&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"title\">power</span><span class=\"params\">(<span class=\"type\">long</span> <span class=\"type\">long</span> a,<span class=\"type\">long</span> <span class=\"type\">long</span> b)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">long</span> <span class=\"type\">long</span> ans=<span class=\"number\">1ll</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(b)&#123;<span class=\"keyword\">if</span>(b&amp;<span class=\"number\">1ll</span>)ans*=a;a*=a;b&gt;&gt;=<span class=\"number\">1</span>;&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"title\">gcd</span><span class=\"params\">(<span class=\"type\">long</span> <span class=\"type\">long</span> a,<span class=\"type\">long</span> <span class=\"type\">long</span> b)</span></span>&#123;<span class=\"keyword\">return</span> b?<span class=\"built_in\">gcd</span>(b,a%b):a;&#125;</span><br><span class=\"line\"><span class=\"type\">long</span> <span class=\"type\">long</span> n,g,ans;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%lld&quot;</span>,&amp;n)==<span class=\"number\">1</span>&amp;&amp;n!=<span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(n==<span class=\"number\">0</span>)&#123;<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;0\\n&quot;</span>);<span class=\"keyword\">continue</span>;&#125;</span><br><span class=\"line\">    ans=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i)g=<span class=\"built_in\">gcd</span>(n,i),ans+=<span class=\"built_in\">power</span>(<span class=\"number\">3</span>,g);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(n&amp;<span class=\"number\">1</span>)ans+=n*<span class=\"built_in\">power</span>(<span class=\"number\">3</span>,(n+<span class=\"number\">1</span>)&gt;&gt;<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">else</span> ans+=(n&gt;&gt;<span class=\"number\">1</span>)*<span class=\"built_in\">power</span>(<span class=\"number\">3</span>,(n+<span class=\"number\">2</span>)&gt;&gt;<span class=\"number\">1</span>),ans+=(n&gt;&gt;<span class=\"number\">1</span>)*<span class=\"built_in\">power</span>(<span class=\"number\">3</span>,n&gt;&gt;<span class=\"number\">1</span>);</span><br><span class=\"line\">    ans=ans/(n&lt;&lt;<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%lld\\n&quot;</span>,ans);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"感谢水本大jiu-蒻的博客QUQ，1551\"><a href=\"#感谢水本大jiu-蒻的博客QUQ，1551\" class=\"headerlink\" title=\"感谢水本大jiu~蒻的博客QUQ，1551~\"></a>感谢水本大jiu~蒻的博客QUQ，1551~</h5>"},{"title":"轻量字符串算法——KMP（AC自动机模板）和Manachar","date":"2018-12-29T06:28:15.000Z","mathjax":true,"_content":"\n$\\ \\ \\ \\ \\ \\ \\ \\,$一些简单字符串相关算法的复习笔记：\n\n<!-- more -->\n\n## KMP\n\n$\\ \\ \\ \\ \\ \\ \\,$kmp是用来处理字符串匹配的常见简单算法，网上可以找到很多讲解，这里就不细讲了，一笔带过。\n\n$\\ \\ \\ \\ \\ \\ \\,$我们知道，暴力匹配两个字符串的复杂度是$O(n^2)$的，很多时候我们都不能接受这个复杂度，考虑如何减小复杂度，我们发现在暴力匹配的过程中，会重复匹配很多地方，所以我们从这里下手，进行优化。\n\n$\\ \\ \\ \\ \\ \\ \\,$引入kmp算法最核心的东西—— $ next$ 数组：\n\n$\\ \\ \\ \\ \\ \\ \\,$代表当前字符之前的字符串中，有多大长度的相同前缀。例如如果 $next [j] = k$，代表位置 $j$ 之前的字符串中有最大长度为 $k $ 的相同前缀。\n\n$\\ \\ \\ \\ \\ \\ \\,$意味着在某个字符失配时，告诉你下一步匹配中，模式串应该跳到哪个位置（$next [j]$ ）。如果 $next [j]$ 等于$-1$，则跳到模式串的开头字符，若 $next [j] = k$ 且 $k > 0$，代表下次匹配跳到 $j$ 之前的某个字符，而不是跳到开头，跳过了 $k$ 个曾经匹配过的字符。\n\n$\\ \\ \\ \\ \\ \\ \\,$为什么这 $k$ 个字符就这样逃过了？我们可以这样感性地理解：\n\n$\\ \\ \\ \\ \\ \\ \\,$若是在 $j$ 这个位置失配，那么说明在这个位置之前，模式串和文本串是可以匹配的，也就是一样的，那么我们要是可以预处理下次跳到的地方就好了，这个就是我们预处理的结果：$ next$ 数组。\n\n$\\ \\ \\ \\ \\ \\ \\,$这样我们的匹配复杂度就降为$O(n)$：\n\n$\\ \\ \\ \\ \\ \\ \\,$假设现在文本串$S$匹配到 $i$ 位置，模式串$P$匹配到 $j$ 位置\n\n- 如果$j = -1$，或者当前字符匹配成功（即$S[i] = P[j]$），$i$，$j$都加一，继续匹配下一个字符；\n\n- 如果$j \\neq -1$，且当前字符匹配失败（即$S[i] \\neq P[j]$），则令 $i$ 不变，$j = next[j]$。此举意味着失配时，模式串P相对于文本串S向右移动了$j - next [j]$ 位。\n\n``` cpp\nwhile(i<slen&&j<plen){\n  if(j==-1||s[i]==p[j])i++,j++;\n  else j=Next[j];\n  if(j==plen)j=Next[j];//到这里就匹配到了一个模式串了。\n}\n\n```\n\n$\\ \\ \\ \\ \\ \\ \\,$那么我们如何快速地求出$ next$ 数组？\n\n$\\ \\ \\ \\ \\ \\ \\,$这个过程相当于自己与自己匹配，假设现在对于字符串$p$，已经处理到了 $k$ 位置，和自己匹配到了 $j$ 位置（显然$k>j$）：\n\n- 如果$j>0$，并且$p[k]\\neq p[j]$，那么就是和自己失配了，$j = next[j]$；\n\n- 如果$p[k]= p[j]$，那么就是是适配了，$k$，$j$都加一，同时如果下次匹配的时候在 $k+1$ 处失配了，那么我们就跳过枚举前面 $k$ 个元素，直接匹配 $j+1$，所以 $next[k+1]=j+1$。\n\n``` cpp\nint j=0;next[0]=-1;\nfor(int k=1;k<n;k++){\n  while(j>0&&(p[k]!=p[j])) j=next[j];\n  j+=(p[k]==p[j]);next[k+1]=j;\n}\n```\n$\\ \\ \\ \\ \\ \\ \\,$复杂度$O(n)$。\n\n$\\ \\ \\ \\ \\ \\ \\,$单字符串匹配的话，就是模板题不说了，kmp最重要的，还是对$ next$ 数组的运用。~~（多字符串匹配我还是信仰Sam，XD）~~，还是贴一个AC自动机的模板XD：\n\n``` cpp\nstruct AC_Automata{\n\tint son[26][N],fail[N],appear[N];\n\tint size;\n\tvoid Get_trie(char s[],int id){\n\t\tint len=strlen(s),now=0;\n\t\tfor(int i=0;i<len;i++){\n\t\t\tif(!son[s[i]-'a'][now])son[s[i]-'a'][now]=++size;\n\t\t\tnow=son[s[i]-'a'][now]; \n\t\t}\n\t\tappear[now]=id;\n\t}\n\tvoid Get_fail(){\n\t\tqueue<int> Q;\n\t\tfor(int i=0;i<26;i++)if(son[i][0]!=0)\n\t\tfail[son[i][0]]=0,Q.push(son[i][0]);\n\t\twhile(!Q.empty()){\n\t\t\tint u=Q.front();Q.pop();\n\t\t\tfor(int i=0;i<26;i++)\n\t\t\tif(son[i][u])fail[son[i][u]]=son[i][fail[u]],Q.push(son[i][u]);\n\t\t\telse son[i][u]=son[i][fail[u]];\n\t\t}\n\t}\n\tint query(char s[]){\n\t\tint len=strlen(s),now=0;\n    for(int i=0;i<len;i++){\n      now=son[s[i]-'a'][now];\n      for(int t=now;t;t=fail[t])\n\t\t\t//something about appear[t];\n    }\n\t}\n};\n```\n\n### [P3193 [HNOI2008]GT考试](https://www.luogu.org/problemnew/show/P3193)\n\n$\\ \\ \\ \\ \\ \\ \\,$很明显的，我们会得到一个DP方程式：\n\n$\\ \\ \\ \\ \\ \\ \\,$我们令$f(i,j)$表示我们$X$已经处理到了$i$，其中出现了长度为$j$的连续不吉利数字。\n\n$\\ \\ \\ \\ \\ \\ \\,$答案显然就是$\\sum_{i=0}^{m-1}f(n,i)$，现在考虑如何转移。\n\n$\\ \\ \\ \\ \\ \\ \\,$令$g(i,j)$表示，在长度为$j$的连续不吉利数字后，跟上数字$j$后，不吉利数字的长度。\n\n$\\ \\ \\ \\ \\ \\ \\,$那么就有：\n\n$f(i,j)=\\sum_{b=0}^{9} f(i,a)[j=g(a,b)]$\n\n$\\ \\ \\ \\ \\ \\ \\,$其中$g(a,b)$就可以用kmp的$ next$ 数组找到：\n\n``` cpp\nint g(int j,int k){\n  while(j!=-1&&a[j]!=k)j=next[j];\n  return j+1;\n}\n```\n\n$\\ \\ \\ \\ \\ \\ \\,$我们可以花$O(10\\cdot m^2)$的时间把$g$预处理出来，如何$O(nm)$来dp，但是$n$特别大，于是我们用矩阵来优化，完整代码如下：\n\n``` cpp\n#include<algorithm>\n#include<iostream>\n#include<cstdlib>\n#include<cstring>\n#include<cctype>\n#include<cstdio>\n#include<vector>\n#include<string>\n#include<queue>\n#include<stack>\n#include<cmath>\n#include<map>\n#include<set>\nusing namespace std;\nconst int inf=0x7fffffff;\nconst double eps=1e-10;\nconst double pi=acos(-1.0);\n//char buf[1<<15],*S=buf,*T=buf;\n//char getch(){return S==T&&(T=(S=buf)+fread(buf,1,1<<15,stdin),S==T)?0:*S++;}\ninline int read(){\n  int x=0,f=1;char ch;ch=getchar();\n  while(ch<'0'||ch>'9'){if(ch=='-') f=0;ch=getchar();}\n  while(ch>='0'&&ch<='9'){x=(x<<1)+(x<<3)+(ch&15);ch=getchar();}\n  if(f)return x;else return -x;\n}\nconst int N=30;\nint n,m,mod;\nchar s[N];\nint a[N];\nint f[N][N],ans;\nstruct Matrix{int n,m;int a[N][N];}A,B;\ninline Matrix operator *(const Matrix &a,const Matrix &b){\n  Matrix ret;\n  ret.n=a.n;ret.m=b.m;\n  for(int i=0;i<=a.n;i++)\n  for(int j=0;j<=b.m;j++){\n    ret.a[i][j]=0;\n    for(int k=0;k<=a.m;k++)\n    ret.a[i][j]=(ret.a[i][j]+a.a[i][k]*b.a[k][j]%mod)%mod;\n  }\n  return ret;\n}\nint next[N];\nint g(int j,int k){\n  while(j!=-1&&a[j+1]!=k)j=next[j];\n  return j+1;\n}\nint main()\n{\n  n=read();m=read();mod=read();\n  scanf(\"%s\",s+1);\n  for(int i=1;i<=m;i++)a[i]=s[i]-'0';\n  next[0]=-1;\n  for(int j=-1,i=1;i<=m;next[i++]=++j)\n  while(j!=-1&&a[i]!=a[j+1])j=next[j];\n  A.n=0;A.m=m-1;\n  B.m=B.n=m-1;\n  A.a[0][0]=1;\n  for(int i=0;i<m;i++)\n  for(int j=0;j<=9;j++)\n  B.a[i][g(i,j)]++;\n  for(;n;n>>=1,B=B*B)if(n&1)A=A*B;\n  for(int i=0;i<m;i++) ans=(ans+A.a[0][i])%mod;\n  printf(\"%d\\n\",ans);\n  return 0;\n}\n\n```\n\n\n## Manachar\n\n$\\ \\ \\ \\ \\ \\ \\,$manachar算法特别单一，就是求回文串用的，题一般也特别裸，比较套路。\n\n$\\ \\ \\ \\ \\ \\ \\,$首先，我们知道的，回文串分奇偶，但是如果我们在这个串中每一个字符之间都插入一个特殊字符，那么偶回文串就变成奇回文串了，这样我们就可以只处理奇回文串就行了。\n\n$\\ \\ \\ \\ \\ \\ \\,$然后就是$RL$数组，表示以这个字符为中点，回文串的最大半径是多少，manachar算法就是$O(n)$求$RL$数组的算法。下面直接将做法，不讲原理了：\n\n$\\ \\ \\ \\ \\ \\ \\,$记我们已经处理的回文串已经处理到的最右端为$MR$，他的对称轴为$pos$，现在要处理的位置为$i$，显然$pos<i$。\n\n$\\ \\ \\ \\ \\ \\ \\,$如果$MR>i$，那么我们可以确定，已$i$为中点，回文串的最大半径至少是${\\rm min}(RL[2\\cdot pos-i],MR-i)$。\n\n$\\ \\ \\ \\ \\ \\ \\,$剩下的就是暴力扩展，记得到时候更新一下$MR$和$pos$，模板如下：\n\n\n``` cpp\nint RL[N<<1];\nvoid Manacher(char *s,int n){\n  int MR=0,pos=0;\n  memset(RL,0,sizeof(RL));\n  for(int i=0;i<n;i++){\n\tif(MR>i)RL[i]=min(RL[2*pos-i],MR-i);\n\telse RL[i]=1;\n    while(s[i+RL[i]]==s[i-RL[i]])RL[i]++;\n    if(i+RL[i]>MR)MR=i+RL[i],pos=i;\n  }\n}\nvoid insert(char *s,int len){\n  len=strlen(s);P[0]='$';\n  for(int i=1;i<=len*2+1;i+=2) P[i]='#';\n  for(int i=0;i<len;i++) P[i*2+2]=s[i];\n}\n```\n\n### [P4555 [国家集训队]最长双回文串](https://www.luogu.org/problemnew/show/P4555)\n\n$\\ \\ \\ \\ \\ \\ \\,$在我们求好$RL$后，很明显的有一个dp，我们把对称轴上的信息移动到起始点和终点：\n\n``` cpp\nfor(int i=0;i<n;i++){\n  L[i+RL[i]-1]=max(L[i+RL[i]-1],RL[i]-1);\n  R[i-RL[i]+1]=max(R[i-RL[i]+1],RL[i]-1);\n}\n```\n\n$\\ \\ \\ \\ \\ \\ \\,$那么，显然的，答案等于：\n${\\rm Max}_{i=0}^{n-1}L_i+R_i[L_i\\neq0,R_i\\neq0]$\n\n$\\ \\ \\ \\ \\ \\ \\,$代码如下：\n``` cpp\n#include<algorithm>\n#include<iostream>\n#include<cstdlib>\n#include<cstring>\n#include<cctype>\n#include<cstdio>\n#include<vector>\n#include<string>\n#include<queue>\n#include<stack>\n#include<cmath>\n#include<map>\n#include<set>\nusing namespace std;\nconst int inf=0x7fffffff;\nconst double eps=1e-10;\nconst double pi=acos(-1.0);\n//char buf[1<<15],*S=buf,*T=buf;\n//char getch(){return S==T&&(T=(S=buf)+fread(buf,1,1<<15,stdin),S==T)?0:*S++;}\ninline int read(){\n  int x=0,f=1;char ch;ch=getchar();\n  while(ch<'0'||ch>'9'){if(ch=='-') f=0;ch=getchar();}\n  while(ch>='0'&&ch<='9'){x=(x<<1)+(x<<3)+(ch&15);ch=getchar();}\n  if(f)return x;else return -x;\n}\nconst int N=1e5+10;\nint RL[N<<1],n;\nchar s[N],P[N<<1];\nint L[N<<1],R[N<<1];\nvoid Manacher(char *s,int n){\n  int MR=0,pos=0;\n  for(int i=0;i<n;i++){\n    if(MR>i)RL[i]=min(RL[2*pos-i],MR-i);\n    else RL[i]=1;\n    while(s[i+RL[i]]==s[i-RL[i]])RL[i]++;\n    if(i+RL[i]>MR)MR=i+RL[i],pos=i;\n    L[i+RL[i]-1]=max(L[i+RL[i]-1],RL[i]-1);\n  \tR[i-RL[i]+1]=max(R[i-RL[i]+1],RL[i]-1);\n  }\n}\nvoid insert(char *s,int len){\n  len=strlen(s);P[0]='$';\n  for(int i=1;i<=len*2+1;i+=2) P[i]='#';\n  for(int i=0;i<len;i++) P[i*2+2]=s[i];\n}\nint main()\n{\n  scanf(\"%s\",s);n=strlen(s);\n  insert(s,n);\n  Manacher(P,n*2+2);\n  for(int i=1;i<=n*2+1;i+=2)R[i]=max(R[i],R[i-2]-2);\n  for(int i=n*2+1;i>=1;i-=2)L[i]=max(L[i],L[i+2]-2);\n  int ans=0;\n  for(int i=1;i<=2*n+1;i+=2)\n  if(R[i]&&L[i])ans=max(ans,L[i]+R[i]);\n  printf(\"%d\\n\",ans);\n  return 0;\n}\n\n```\n","source":"_posts/轻量字符串算法-KMP-AC自动机模板-和Manachar.md","raw":"---\ntitle: '轻量字符串算法——KMP（AC自动机模板）和Manachar'\ndate: 2018-12-29 14:28:15\ncategories:\n- 学习笔记\ntags:\n- OI\n- 字符串\n- 数据结构\n- KMP\n- AC自动机\n- Manachar\nmathjax: true\n---\n\n$\\ \\ \\ \\ \\ \\ \\ \\,$一些简单字符串相关算法的复习笔记：\n\n<!-- more -->\n\n## KMP\n\n$\\ \\ \\ \\ \\ \\ \\,$kmp是用来处理字符串匹配的常见简单算法，网上可以找到很多讲解，这里就不细讲了，一笔带过。\n\n$\\ \\ \\ \\ \\ \\ \\,$我们知道，暴力匹配两个字符串的复杂度是$O(n^2)$的，很多时候我们都不能接受这个复杂度，考虑如何减小复杂度，我们发现在暴力匹配的过程中，会重复匹配很多地方，所以我们从这里下手，进行优化。\n\n$\\ \\ \\ \\ \\ \\ \\,$引入kmp算法最核心的东西—— $ next$ 数组：\n\n$\\ \\ \\ \\ \\ \\ \\,$代表当前字符之前的字符串中，有多大长度的相同前缀。例如如果 $next [j] = k$，代表位置 $j$ 之前的字符串中有最大长度为 $k $ 的相同前缀。\n\n$\\ \\ \\ \\ \\ \\ \\,$意味着在某个字符失配时，告诉你下一步匹配中，模式串应该跳到哪个位置（$next [j]$ ）。如果 $next [j]$ 等于$-1$，则跳到模式串的开头字符，若 $next [j] = k$ 且 $k > 0$，代表下次匹配跳到 $j$ 之前的某个字符，而不是跳到开头，跳过了 $k$ 个曾经匹配过的字符。\n\n$\\ \\ \\ \\ \\ \\ \\,$为什么这 $k$ 个字符就这样逃过了？我们可以这样感性地理解：\n\n$\\ \\ \\ \\ \\ \\ \\,$若是在 $j$ 这个位置失配，那么说明在这个位置之前，模式串和文本串是可以匹配的，也就是一样的，那么我们要是可以预处理下次跳到的地方就好了，这个就是我们预处理的结果：$ next$ 数组。\n\n$\\ \\ \\ \\ \\ \\ \\,$这样我们的匹配复杂度就降为$O(n)$：\n\n$\\ \\ \\ \\ \\ \\ \\,$假设现在文本串$S$匹配到 $i$ 位置，模式串$P$匹配到 $j$ 位置\n\n- 如果$j = -1$，或者当前字符匹配成功（即$S[i] = P[j]$），$i$，$j$都加一，继续匹配下一个字符；\n\n- 如果$j \\neq -1$，且当前字符匹配失败（即$S[i] \\neq P[j]$），则令 $i$ 不变，$j = next[j]$。此举意味着失配时，模式串P相对于文本串S向右移动了$j - next [j]$ 位。\n\n``` cpp\nwhile(i<slen&&j<plen){\n  if(j==-1||s[i]==p[j])i++,j++;\n  else j=Next[j];\n  if(j==plen)j=Next[j];//到这里就匹配到了一个模式串了。\n}\n\n```\n\n$\\ \\ \\ \\ \\ \\ \\,$那么我们如何快速地求出$ next$ 数组？\n\n$\\ \\ \\ \\ \\ \\ \\,$这个过程相当于自己与自己匹配，假设现在对于字符串$p$，已经处理到了 $k$ 位置，和自己匹配到了 $j$ 位置（显然$k>j$）：\n\n- 如果$j>0$，并且$p[k]\\neq p[j]$，那么就是和自己失配了，$j = next[j]$；\n\n- 如果$p[k]= p[j]$，那么就是是适配了，$k$，$j$都加一，同时如果下次匹配的时候在 $k+1$ 处失配了，那么我们就跳过枚举前面 $k$ 个元素，直接匹配 $j+1$，所以 $next[k+1]=j+1$。\n\n``` cpp\nint j=0;next[0]=-1;\nfor(int k=1;k<n;k++){\n  while(j>0&&(p[k]!=p[j])) j=next[j];\n  j+=(p[k]==p[j]);next[k+1]=j;\n}\n```\n$\\ \\ \\ \\ \\ \\ \\,$复杂度$O(n)$。\n\n$\\ \\ \\ \\ \\ \\ \\,$单字符串匹配的话，就是模板题不说了，kmp最重要的，还是对$ next$ 数组的运用。~~（多字符串匹配我还是信仰Sam，XD）~~，还是贴一个AC自动机的模板XD：\n\n``` cpp\nstruct AC_Automata{\n\tint son[26][N],fail[N],appear[N];\n\tint size;\n\tvoid Get_trie(char s[],int id){\n\t\tint len=strlen(s),now=0;\n\t\tfor(int i=0;i<len;i++){\n\t\t\tif(!son[s[i]-'a'][now])son[s[i]-'a'][now]=++size;\n\t\t\tnow=son[s[i]-'a'][now]; \n\t\t}\n\t\tappear[now]=id;\n\t}\n\tvoid Get_fail(){\n\t\tqueue<int> Q;\n\t\tfor(int i=0;i<26;i++)if(son[i][0]!=0)\n\t\tfail[son[i][0]]=0,Q.push(son[i][0]);\n\t\twhile(!Q.empty()){\n\t\t\tint u=Q.front();Q.pop();\n\t\t\tfor(int i=0;i<26;i++)\n\t\t\tif(son[i][u])fail[son[i][u]]=son[i][fail[u]],Q.push(son[i][u]);\n\t\t\telse son[i][u]=son[i][fail[u]];\n\t\t}\n\t}\n\tint query(char s[]){\n\t\tint len=strlen(s),now=0;\n    for(int i=0;i<len;i++){\n      now=son[s[i]-'a'][now];\n      for(int t=now;t;t=fail[t])\n\t\t\t//something about appear[t];\n    }\n\t}\n};\n```\n\n### [P3193 [HNOI2008]GT考试](https://www.luogu.org/problemnew/show/P3193)\n\n$\\ \\ \\ \\ \\ \\ \\,$很明显的，我们会得到一个DP方程式：\n\n$\\ \\ \\ \\ \\ \\ \\,$我们令$f(i,j)$表示我们$X$已经处理到了$i$，其中出现了长度为$j$的连续不吉利数字。\n\n$\\ \\ \\ \\ \\ \\ \\,$答案显然就是$\\sum_{i=0}^{m-1}f(n,i)$，现在考虑如何转移。\n\n$\\ \\ \\ \\ \\ \\ \\,$令$g(i,j)$表示，在长度为$j$的连续不吉利数字后，跟上数字$j$后，不吉利数字的长度。\n\n$\\ \\ \\ \\ \\ \\ \\,$那么就有：\n\n$f(i,j)=\\sum_{b=0}^{9} f(i,a)[j=g(a,b)]$\n\n$\\ \\ \\ \\ \\ \\ \\,$其中$g(a,b)$就可以用kmp的$ next$ 数组找到：\n\n``` cpp\nint g(int j,int k){\n  while(j!=-1&&a[j]!=k)j=next[j];\n  return j+1;\n}\n```\n\n$\\ \\ \\ \\ \\ \\ \\,$我们可以花$O(10\\cdot m^2)$的时间把$g$预处理出来，如何$O(nm)$来dp，但是$n$特别大，于是我们用矩阵来优化，完整代码如下：\n\n``` cpp\n#include<algorithm>\n#include<iostream>\n#include<cstdlib>\n#include<cstring>\n#include<cctype>\n#include<cstdio>\n#include<vector>\n#include<string>\n#include<queue>\n#include<stack>\n#include<cmath>\n#include<map>\n#include<set>\nusing namespace std;\nconst int inf=0x7fffffff;\nconst double eps=1e-10;\nconst double pi=acos(-1.0);\n//char buf[1<<15],*S=buf,*T=buf;\n//char getch(){return S==T&&(T=(S=buf)+fread(buf,1,1<<15,stdin),S==T)?0:*S++;}\ninline int read(){\n  int x=0,f=1;char ch;ch=getchar();\n  while(ch<'0'||ch>'9'){if(ch=='-') f=0;ch=getchar();}\n  while(ch>='0'&&ch<='9'){x=(x<<1)+(x<<3)+(ch&15);ch=getchar();}\n  if(f)return x;else return -x;\n}\nconst int N=30;\nint n,m,mod;\nchar s[N];\nint a[N];\nint f[N][N],ans;\nstruct Matrix{int n,m;int a[N][N];}A,B;\ninline Matrix operator *(const Matrix &a,const Matrix &b){\n  Matrix ret;\n  ret.n=a.n;ret.m=b.m;\n  for(int i=0;i<=a.n;i++)\n  for(int j=0;j<=b.m;j++){\n    ret.a[i][j]=0;\n    for(int k=0;k<=a.m;k++)\n    ret.a[i][j]=(ret.a[i][j]+a.a[i][k]*b.a[k][j]%mod)%mod;\n  }\n  return ret;\n}\nint next[N];\nint g(int j,int k){\n  while(j!=-1&&a[j+1]!=k)j=next[j];\n  return j+1;\n}\nint main()\n{\n  n=read();m=read();mod=read();\n  scanf(\"%s\",s+1);\n  for(int i=1;i<=m;i++)a[i]=s[i]-'0';\n  next[0]=-1;\n  for(int j=-1,i=1;i<=m;next[i++]=++j)\n  while(j!=-1&&a[i]!=a[j+1])j=next[j];\n  A.n=0;A.m=m-1;\n  B.m=B.n=m-1;\n  A.a[0][0]=1;\n  for(int i=0;i<m;i++)\n  for(int j=0;j<=9;j++)\n  B.a[i][g(i,j)]++;\n  for(;n;n>>=1,B=B*B)if(n&1)A=A*B;\n  for(int i=0;i<m;i++) ans=(ans+A.a[0][i])%mod;\n  printf(\"%d\\n\",ans);\n  return 0;\n}\n\n```\n\n\n## Manachar\n\n$\\ \\ \\ \\ \\ \\ \\,$manachar算法特别单一，就是求回文串用的，题一般也特别裸，比较套路。\n\n$\\ \\ \\ \\ \\ \\ \\,$首先，我们知道的，回文串分奇偶，但是如果我们在这个串中每一个字符之间都插入一个特殊字符，那么偶回文串就变成奇回文串了，这样我们就可以只处理奇回文串就行了。\n\n$\\ \\ \\ \\ \\ \\ \\,$然后就是$RL$数组，表示以这个字符为中点，回文串的最大半径是多少，manachar算法就是$O(n)$求$RL$数组的算法。下面直接将做法，不讲原理了：\n\n$\\ \\ \\ \\ \\ \\ \\,$记我们已经处理的回文串已经处理到的最右端为$MR$，他的对称轴为$pos$，现在要处理的位置为$i$，显然$pos<i$。\n\n$\\ \\ \\ \\ \\ \\ \\,$如果$MR>i$，那么我们可以确定，已$i$为中点，回文串的最大半径至少是${\\rm min}(RL[2\\cdot pos-i],MR-i)$。\n\n$\\ \\ \\ \\ \\ \\ \\,$剩下的就是暴力扩展，记得到时候更新一下$MR$和$pos$，模板如下：\n\n\n``` cpp\nint RL[N<<1];\nvoid Manacher(char *s,int n){\n  int MR=0,pos=0;\n  memset(RL,0,sizeof(RL));\n  for(int i=0;i<n;i++){\n\tif(MR>i)RL[i]=min(RL[2*pos-i],MR-i);\n\telse RL[i]=1;\n    while(s[i+RL[i]]==s[i-RL[i]])RL[i]++;\n    if(i+RL[i]>MR)MR=i+RL[i],pos=i;\n  }\n}\nvoid insert(char *s,int len){\n  len=strlen(s);P[0]='$';\n  for(int i=1;i<=len*2+1;i+=2) P[i]='#';\n  for(int i=0;i<len;i++) P[i*2+2]=s[i];\n}\n```\n\n### [P4555 [国家集训队]最长双回文串](https://www.luogu.org/problemnew/show/P4555)\n\n$\\ \\ \\ \\ \\ \\ \\,$在我们求好$RL$后，很明显的有一个dp，我们把对称轴上的信息移动到起始点和终点：\n\n``` cpp\nfor(int i=0;i<n;i++){\n  L[i+RL[i]-1]=max(L[i+RL[i]-1],RL[i]-1);\n  R[i-RL[i]+1]=max(R[i-RL[i]+1],RL[i]-1);\n}\n```\n\n$\\ \\ \\ \\ \\ \\ \\,$那么，显然的，答案等于：\n${\\rm Max}_{i=0}^{n-1}L_i+R_i[L_i\\neq0,R_i\\neq0]$\n\n$\\ \\ \\ \\ \\ \\ \\,$代码如下：\n``` cpp\n#include<algorithm>\n#include<iostream>\n#include<cstdlib>\n#include<cstring>\n#include<cctype>\n#include<cstdio>\n#include<vector>\n#include<string>\n#include<queue>\n#include<stack>\n#include<cmath>\n#include<map>\n#include<set>\nusing namespace std;\nconst int inf=0x7fffffff;\nconst double eps=1e-10;\nconst double pi=acos(-1.0);\n//char buf[1<<15],*S=buf,*T=buf;\n//char getch(){return S==T&&(T=(S=buf)+fread(buf,1,1<<15,stdin),S==T)?0:*S++;}\ninline int read(){\n  int x=0,f=1;char ch;ch=getchar();\n  while(ch<'0'||ch>'9'){if(ch=='-') f=0;ch=getchar();}\n  while(ch>='0'&&ch<='9'){x=(x<<1)+(x<<3)+(ch&15);ch=getchar();}\n  if(f)return x;else return -x;\n}\nconst int N=1e5+10;\nint RL[N<<1],n;\nchar s[N],P[N<<1];\nint L[N<<1],R[N<<1];\nvoid Manacher(char *s,int n){\n  int MR=0,pos=0;\n  for(int i=0;i<n;i++){\n    if(MR>i)RL[i]=min(RL[2*pos-i],MR-i);\n    else RL[i]=1;\n    while(s[i+RL[i]]==s[i-RL[i]])RL[i]++;\n    if(i+RL[i]>MR)MR=i+RL[i],pos=i;\n    L[i+RL[i]-1]=max(L[i+RL[i]-1],RL[i]-1);\n  \tR[i-RL[i]+1]=max(R[i-RL[i]+1],RL[i]-1);\n  }\n}\nvoid insert(char *s,int len){\n  len=strlen(s);P[0]='$';\n  for(int i=1;i<=len*2+1;i+=2) P[i]='#';\n  for(int i=0;i<len;i++) P[i*2+2]=s[i];\n}\nint main()\n{\n  scanf(\"%s\",s);n=strlen(s);\n  insert(s,n);\n  Manacher(P,n*2+2);\n  for(int i=1;i<=n*2+1;i+=2)R[i]=max(R[i],R[i-2]-2);\n  for(int i=n*2+1;i>=1;i-=2)L[i]=max(L[i],L[i+2]-2);\n  int ans=0;\n  for(int i=1;i<=2*n+1;i+=2)\n  if(R[i]&&L[i])ans=max(ans,L[i]+R[i]);\n  printf(\"%d\\n\",ans);\n  return 0;\n}\n\n```\n","slug":"轻量字符串算法-KMP-AC自动机模板-和Manachar","published":1,"updated":"2022-02-13T13:46:00.319Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0i63w6m002gu4gb3p2mhk5u","content":"<p>$\\ \\ \\ \\ \\ \\ \\ \\,$一些简单字符串相关算法的复习笔记：</p>\n<span id=\"more\"></span>\n<h2 id=\"KMP\"><a href=\"#KMP\" class=\"headerlink\" title=\"KMP\"></a>KMP</h2><p>$\\ \\ \\ \\ \\ \\ \\,$kmp是用来处理字符串匹配的常见简单算法，网上可以找到很多讲解，这里就不细讲了，一笔带过。</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$我们知道，暴力匹配两个字符串的复杂度是$O(n^2)$的，很多时候我们都不能接受这个复杂度，考虑如何减小复杂度，我们发现在暴力匹配的过程中，会重复匹配很多地方，所以我们从这里下手，进行优化。</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$引入kmp算法最核心的东西—— $ next$ 数组：</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$代表当前字符之前的字符串中，有多大长度的相同前缀。例如如果 $next [j] = k$，代表位置 $j$ 之前的字符串中有最大长度为 $k $ 的相同前缀。</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$意味着在某个字符失配时，告诉你下一步匹配中，模式串应该跳到哪个位置（$next [j]$ ）。如果 $next [j]$ 等于$-1$，则跳到模式串的开头字符，若 $next [j] = k$ 且 $k &gt; 0$，代表下次匹配跳到 $j$ 之前的某个字符，而不是跳到开头，跳过了 $k$ 个曾经匹配过的字符。</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$为什么这 $k$ 个字符就这样逃过了？我们可以这样感性地理解：</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$若是在 $j$ 这个位置失配，那么说明在这个位置之前，模式串和文本串是可以匹配的，也就是一样的，那么我们要是可以预处理下次跳到的地方就好了，这个就是我们预处理的结果：$ next$ 数组。</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$这样我们的匹配复杂度就降为$O(n)$：</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$假设现在文本串$S$匹配到 $i$ 位置，模式串$P$匹配到 $j$ 位置</p>\n<ul>\n<li><p>如果$j = -1$，或者当前字符匹配成功（即$S[i] = P[j]$），$i$，$j$都加一，继续匹配下一个字符；</p>\n</li>\n<li><p>如果$j \\neq -1$，且当前字符匹配失败（即$S[i] \\neq P[j]$），则令 $i$ 不变，$j = next[j]$。此举意味着失配时，模式串P相对于文本串S向右移动了$j - next [j]$ 位。</p>\n</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span>(i&lt;slen&amp;&amp;j&lt;plen)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(j==<span class=\"number\">-1</span>||s[i]==p[j])i++,j++;</span><br><span class=\"line\">  <span class=\"keyword\">else</span> j=Next[j];</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(j==plen)j=Next[j];<span class=\"comment\">//到这里就匹配到了一个模式串了。</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>$\\ \\ \\ \\ \\ \\ \\,$那么我们如何快速地求出$ next$ 数组？</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$这个过程相当于自己与自己匹配，假设现在对于字符串$p$，已经处理到了 $k$ 位置，和自己匹配到了 $j$ 位置（显然$k&gt;j$）：</p>\n<ul>\n<li><p>如果$j&gt;0$，并且$p[k]\\neq p[j]$，那么就是和自己失配了，$j = next[j]$；</p>\n</li>\n<li><p>如果$p[k]= p[j]$，那么就是是适配了，$k$，$j$都加一，同时如果下次匹配的时候在 $k+1$ 处失配了，那么我们就跳过枚举前面 $k$ 个元素，直接匹配 $j+1$，所以 $next[k+1]=j+1$。</p>\n</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> j=<span class=\"number\">0</span>;next[<span class=\"number\">0</span>]=<span class=\"number\">-1</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"type\">int</span> k=<span class=\"number\">1</span>;k&lt;n;k++)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(j&gt;<span class=\"number\">0</span>&amp;&amp;(p[k]!=p[j])) j=next[j];</span><br><span class=\"line\">  j+=(p[k]==p[j]);next[k+<span class=\"number\">1</span>]=j;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>$\\ \\ \\ \\ \\ \\ \\,$复杂度$O(n)$。</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$单字符串匹配的话，就是模板题不说了，kmp最重要的，还是对$ next$ 数组的运用。<del>（多字符串匹配我还是信仰Sam，XD）</del>，还是贴一个AC自动机的模板XD：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">AC_Automata</span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> son[<span class=\"number\">26</span>][N],fail[N],appear[N];</span><br><span class=\"line\">\t<span class=\"type\">int</span> size;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Get_trie</span><span class=\"params\">(<span class=\"type\">char</span> s[],<span class=\"type\">int</span> id)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> len=<span class=\"built_in\">strlen</span>(s),now=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;len;i++)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(!son[s[i]-<span class=\"string\">&#x27;a&#x27;</span>][now])son[s[i]-<span class=\"string\">&#x27;a&#x27;</span>][now]=++size;</span><br><span class=\"line\">\t\t\tnow=son[s[i]-<span class=\"string\">&#x27;a&#x27;</span>][now]; </span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tappear[now]=id;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Get_fail</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t\tqueue&lt;<span class=\"type\">int</span>&gt; Q;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">26</span>;i++)<span class=\"keyword\">if</span>(son[i][<span class=\"number\">0</span>]!=<span class=\"number\">0</span>)</span><br><span class=\"line\">\t\tfail[son[i][<span class=\"number\">0</span>]]=<span class=\"number\">0</span>,Q.<span class=\"built_in\">push</span>(son[i][<span class=\"number\">0</span>]);</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(!Q.<span class=\"built_in\">empty</span>())&#123;</span><br><span class=\"line\">\t\t\t<span class=\"type\">int</span> u=Q.<span class=\"built_in\">front</span>();Q.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">26</span>;i++)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(son[i][u])fail[son[i][u]]=son[i][fail[u]],Q.<span class=\"built_in\">push</span>(son[i][u]);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span> son[i][u]=son[i][fail[u]];</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">query</span><span class=\"params\">(<span class=\"type\">char</span> s[])</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> len=<span class=\"built_in\">strlen</span>(s),now=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;len;i++)&#123;</span><br><span class=\"line\">      now=son[s[i]-<span class=\"string\">&#x27;a&#x27;</span>][now];</span><br><span class=\"line\">      <span class=\"keyword\">for</span>(<span class=\"type\">int</span> t=now;t;t=fail[t])</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//something about appear[t];</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"P3193-HNOI2008-GT考试\"><a href=\"#P3193-HNOI2008-GT考试\" class=\"headerlink\" title=\"P3193 [HNOI2008]GT考试\"></a><a href=\"https://www.luogu.org/problemnew/show/P3193\">P3193 [HNOI2008]GT考试</a></h3><p>$\\ \\ \\ \\ \\ \\ \\,$很明显的，我们会得到一个DP方程式：</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$我们令$f(i,j)$表示我们$X$已经处理到了$i$，其中出现了长度为$j$的连续不吉利数字。</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$答案显然就是$\\sum_{i=0}^{m-1}f(n,i)$，现在考虑如何转移。</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$令$g(i,j)$表示，在长度为$j$的连续不吉利数字后，跟上数字$j$后，不吉利数字的长度。</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$那么就有：</p>\n<p>$f(i,j)=\\sum_{b=0}^{9} f(i,a)[j=g(a,b)]$</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$其中$g(a,b)$就可以用kmp的$ next$ 数组找到：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">g</span><span class=\"params\">(<span class=\"type\">int</span> j,<span class=\"type\">int</span> k)</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(j!=<span class=\"number\">-1</span>&amp;&amp;a[j]!=k)j=next[j];</span><br><span class=\"line\">  <span class=\"keyword\">return</span> j+<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>$\\ \\ \\ \\ \\ \\ \\,$我们可以花$O(10\\cdot m^2)$的时间把$g$预处理出来，如何$O(nm)$来dp，但是$n$特别大，于是我们用矩阵来优化，完整代码如下：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdlib&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cctype&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;stack&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;map&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;set&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> inf=<span class=\"number\">0x7fffffff</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">double</span> eps=<span class=\"number\">1e-10</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">double</span> pi=<span class=\"built_in\">acos</span>(<span class=\"number\">-1.0</span>);</span><br><span class=\"line\"><span class=\"comment\">//char buf[1&lt;&lt;15],*S=buf,*T=buf;</span></span><br><span class=\"line\"><span class=\"comment\">//char getch()&#123;return S==T&amp;&amp;(T=(S=buf)+fread(buf,1,1&lt;&lt;15,stdin),S==T)?0:*S++;&#125;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">int</span> <span class=\"title\">read</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">  <span class=\"type\">int</span> x=<span class=\"number\">0</span>,f=<span class=\"number\">1</span>;<span class=\"type\">char</span> ch;ch=<span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(ch&lt;<span class=\"string\">&#x27;0&#x27;</span>||ch&gt;<span class=\"string\">&#x27;9&#x27;</span>)&#123;<span class=\"keyword\">if</span>(ch==<span class=\"string\">&#x27;-&#x27;</span>) f=<span class=\"number\">0</span>;ch=<span class=\"built_in\">getchar</span>();&#125;</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(ch&gt;=<span class=\"string\">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class=\"string\">&#x27;9&#x27;</span>)&#123;x=(x&lt;&lt;<span class=\"number\">1</span>)+(x&lt;&lt;<span class=\"number\">3</span>)+(ch&amp;<span class=\"number\">15</span>);ch=<span class=\"built_in\">getchar</span>();&#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(f)<span class=\"keyword\">return</span> x;<span class=\"keyword\">else</span> <span class=\"keyword\">return</span> -x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">30</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> n,m,mod;</span><br><span class=\"line\"><span class=\"type\">char</span> s[N];</span><br><span class=\"line\"><span class=\"type\">int</span> a[N];</span><br><span class=\"line\"><span class=\"type\">int</span> f[N][N],ans;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Matrix</span>&#123;<span class=\"type\">int</span> n,m;<span class=\"type\">int</span> a[N][N];&#125;A,B;</span><br><span class=\"line\"><span class=\"keyword\">inline</span> Matrix <span class=\"keyword\">operator</span> *(<span class=\"type\">const</span> Matrix &amp;a,<span class=\"type\">const</span> Matrix &amp;b)&#123;</span><br><span class=\"line\">  Matrix ret;</span><br><span class=\"line\">  ret.n=a.n;ret.m=b.m;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;=a.n;i++)</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">0</span>;j&lt;=b.m;j++)&#123;</span><br><span class=\"line\">    ret.a[i][j]=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> k=<span class=\"number\">0</span>;k&lt;=a.m;k++)</span><br><span class=\"line\">    ret.a[i][j]=(ret.a[i][j]+a.a[i][k]*b.a[k][j]%mod)%mod;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> next[N];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">g</span><span class=\"params\">(<span class=\"type\">int</span> j,<span class=\"type\">int</span> k)</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(j!=<span class=\"number\">-1</span>&amp;&amp;a[j+<span class=\"number\">1</span>]!=k)j=next[j];</span><br><span class=\"line\">  <span class=\"keyword\">return</span> j+<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  n=<span class=\"built_in\">read</span>();m=<span class=\"built_in\">read</span>();mod=<span class=\"built_in\">read</span>();</span><br><span class=\"line\">  <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%s&quot;</span>,s+<span class=\"number\">1</span>);</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=m;i++)a[i]=s[i]-<span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">  next[<span class=\"number\">0</span>]=<span class=\"number\">-1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">-1</span>,i=<span class=\"number\">1</span>;i&lt;=m;next[i++]=++j)</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(j!=<span class=\"number\">-1</span>&amp;&amp;a[i]!=a[j+<span class=\"number\">1</span>])j=next[j];</span><br><span class=\"line\">  A.n=<span class=\"number\">0</span>;A.m=m<span class=\"number\">-1</span>;</span><br><span class=\"line\">  B.m=B.n=m<span class=\"number\">-1</span>;</span><br><span class=\"line\">  A.a[<span class=\"number\">0</span>][<span class=\"number\">0</span>]=<span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;m;i++)</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">0</span>;j&lt;=<span class=\"number\">9</span>;j++)</span><br><span class=\"line\">  B.a[i][<span class=\"built_in\">g</span>(i,j)]++;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(;n;n&gt;&gt;=<span class=\"number\">1</span>,B=B*B)<span class=\"keyword\">if</span>(n&amp;<span class=\"number\">1</span>)A=A*B;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;m;i++) ans=(ans+A.a[<span class=\"number\">0</span>][i])%mod;</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>,ans);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"Manachar\"><a href=\"#Manachar\" class=\"headerlink\" title=\"Manachar\"></a>Manachar</h2><p>$\\ \\ \\ \\ \\ \\ \\,$manachar算法特别单一，就是求回文串用的，题一般也特别裸，比较套路。</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$首先，我们知道的，回文串分奇偶，但是如果我们在这个串中每一个字符之间都插入一个特殊字符，那么偶回文串就变成奇回文串了，这样我们就可以只处理奇回文串就行了。</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$然后就是$RL$数组，表示以这个字符为中点，回文串的最大半径是多少，manachar算法就是$O(n)$求$RL$数组的算法。下面直接将做法，不讲原理了：</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$记我们已经处理的回文串已经处理到的最右端为$MR$，他的对称轴为$pos$，现在要处理的位置为$i$，显然$pos&lt;i$。</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$如果$MR&gt;i$，那么我们可以确定，已$i$为中点，回文串的最大半径至少是${\\rm min}(RL[2\\cdot pos-i],MR-i)$。</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$剩下的就是暴力扩展，记得到时候更新一下$MR$和$pos$，模板如下：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> RL[N&lt;&lt;<span class=\"number\">1</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Manacher</span><span class=\"params\">(<span class=\"type\">char</span> *s,<span class=\"type\">int</span> n)</span></span>&#123;</span><br><span class=\"line\">  <span class=\"type\">int</span> MR=<span class=\"number\">0</span>,pos=<span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"built_in\">memset</span>(RL,<span class=\"number\">0</span>,<span class=\"built_in\">sizeof</span>(RL));</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(MR&gt;i)RL[i]=<span class=\"built_in\">min</span>(RL[<span class=\"number\">2</span>*pos-i],MR-i);</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> RL[i]=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(s[i+RL[i]]==s[i-RL[i]])RL[i]++;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(i+RL[i]&gt;MR)MR=i+RL[i],pos=i;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">insert</span><span class=\"params\">(<span class=\"type\">char</span> *s,<span class=\"type\">int</span> len)</span></span>&#123;</span><br><span class=\"line\">  len=<span class=\"built_in\">strlen</span>(s);P[<span class=\"number\">0</span>]=<span class=\"string\">&#x27;$&#x27;</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=len*<span class=\"number\">2</span>+<span class=\"number\">1</span>;i+=<span class=\"number\">2</span>) P[i]=<span class=\"string\">&#x27;#&#x27;</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;len;i++) P[i*<span class=\"number\">2</span>+<span class=\"number\">2</span>]=s[i];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"P4555-国家集训队-最长双回文串\"><a href=\"#P4555-国家集训队-最长双回文串\" class=\"headerlink\" title=\"P4555 [国家集训队]最长双回文串\"></a><a href=\"https://www.luogu.org/problemnew/show/P4555\">P4555 [国家集训队]最长双回文串</a></h3><p>$\\ \\ \\ \\ \\ \\ \\,$在我们求好$RL$后，很明显的有一个dp，我们把对称轴上的信息移动到起始点和终点：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)&#123;</span><br><span class=\"line\">  L[i+RL[i]<span class=\"number\">-1</span>]=<span class=\"built_in\">max</span>(L[i+RL[i]<span class=\"number\">-1</span>],RL[i]<span class=\"number\">-1</span>);</span><br><span class=\"line\">  R[i-RL[i]+<span class=\"number\">1</span>]=<span class=\"built_in\">max</span>(R[i-RL[i]+<span class=\"number\">1</span>],RL[i]<span class=\"number\">-1</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>$\\ \\ \\ \\ \\ \\ \\,$那么，显然的，答案等于：<br>${\\rm Max}_{i=0}^{n-1}L_i+R_i[L_i\\neq0,R_i\\neq0]$</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$代码如下：<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdlib&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cctype&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;stack&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;map&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;set&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> inf=<span class=\"number\">0x7fffffff</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">double</span> eps=<span class=\"number\">1e-10</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">double</span> pi=<span class=\"built_in\">acos</span>(<span class=\"number\">-1.0</span>);</span><br><span class=\"line\"><span class=\"comment\">//char buf[1&lt;&lt;15],*S=buf,*T=buf;</span></span><br><span class=\"line\"><span class=\"comment\">//char getch()&#123;return S==T&amp;&amp;(T=(S=buf)+fread(buf,1,1&lt;&lt;15,stdin),S==T)?0:*S++;&#125;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">int</span> <span class=\"title\">read</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">  <span class=\"type\">int</span> x=<span class=\"number\">0</span>,f=<span class=\"number\">1</span>;<span class=\"type\">char</span> ch;ch=<span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(ch&lt;<span class=\"string\">&#x27;0&#x27;</span>||ch&gt;<span class=\"string\">&#x27;9&#x27;</span>)&#123;<span class=\"keyword\">if</span>(ch==<span class=\"string\">&#x27;-&#x27;</span>) f=<span class=\"number\">0</span>;ch=<span class=\"built_in\">getchar</span>();&#125;</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(ch&gt;=<span class=\"string\">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class=\"string\">&#x27;9&#x27;</span>)&#123;x=(x&lt;&lt;<span class=\"number\">1</span>)+(x&lt;&lt;<span class=\"number\">3</span>)+(ch&amp;<span class=\"number\">15</span>);ch=<span class=\"built_in\">getchar</span>();&#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(f)<span class=\"keyword\">return</span> x;<span class=\"keyword\">else</span> <span class=\"keyword\">return</span> -x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">1e5</span>+<span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> RL[N&lt;&lt;<span class=\"number\">1</span>],n;</span><br><span class=\"line\"><span class=\"type\">char</span> s[N],P[N&lt;&lt;<span class=\"number\">1</span>];</span><br><span class=\"line\"><span class=\"type\">int</span> L[N&lt;&lt;<span class=\"number\">1</span>],R[N&lt;&lt;<span class=\"number\">1</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Manacher</span><span class=\"params\">(<span class=\"type\">char</span> *s,<span class=\"type\">int</span> n)</span></span>&#123;</span><br><span class=\"line\">  <span class=\"type\">int</span> MR=<span class=\"number\">0</span>,pos=<span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(MR&gt;i)RL[i]=<span class=\"built_in\">min</span>(RL[<span class=\"number\">2</span>*pos-i],MR-i);</span><br><span class=\"line\">    <span class=\"keyword\">else</span> RL[i]=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(s[i+RL[i]]==s[i-RL[i]])RL[i]++;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(i+RL[i]&gt;MR)MR=i+RL[i],pos=i;</span><br><span class=\"line\">    L[i+RL[i]<span class=\"number\">-1</span>]=<span class=\"built_in\">max</span>(L[i+RL[i]<span class=\"number\">-1</span>],RL[i]<span class=\"number\">-1</span>);</span><br><span class=\"line\">  \tR[i-RL[i]+<span class=\"number\">1</span>]=<span class=\"built_in\">max</span>(R[i-RL[i]+<span class=\"number\">1</span>],RL[i]<span class=\"number\">-1</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">insert</span><span class=\"params\">(<span class=\"type\">char</span> *s,<span class=\"type\">int</span> len)</span></span>&#123;</span><br><span class=\"line\">  len=<span class=\"built_in\">strlen</span>(s);P[<span class=\"number\">0</span>]=<span class=\"string\">&#x27;$&#x27;</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=len*<span class=\"number\">2</span>+<span class=\"number\">1</span>;i+=<span class=\"number\">2</span>) P[i]=<span class=\"string\">&#x27;#&#x27;</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;len;i++) P[i*<span class=\"number\">2</span>+<span class=\"number\">2</span>]=s[i];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%s&quot;</span>,s);n=<span class=\"built_in\">strlen</span>(s);</span><br><span class=\"line\">  <span class=\"built_in\">insert</span>(s,n);</span><br><span class=\"line\">  <span class=\"built_in\">Manacher</span>(P,n*<span class=\"number\">2</span>+<span class=\"number\">2</span>);</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n*<span class=\"number\">2</span>+<span class=\"number\">1</span>;i+=<span class=\"number\">2</span>)R[i]=<span class=\"built_in\">max</span>(R[i],R[i<span class=\"number\">-2</span>]<span class=\"number\">-2</span>);</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=n*<span class=\"number\">2</span>+<span class=\"number\">1</span>;i&gt;=<span class=\"number\">1</span>;i-=<span class=\"number\">2</span>)L[i]=<span class=\"built_in\">max</span>(L[i],L[i+<span class=\"number\">2</span>]<span class=\"number\">-2</span>);</span><br><span class=\"line\">  <span class=\"type\">int</span> ans=<span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=<span class=\"number\">2</span>*n+<span class=\"number\">1</span>;i+=<span class=\"number\">2</span>)</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(R[i]&amp;&amp;L[i])ans=<span class=\"built_in\">max</span>(ans,L[i]+R[i]);</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>,ans);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"<p>$\\ \\ \\ \\ \\ \\ \\ \\,$一些简单字符串相关算法的复习笔记：</p>","more":"<h2 id=\"KMP\"><a href=\"#KMP\" class=\"headerlink\" title=\"KMP\"></a>KMP</h2><p>$\\ \\ \\ \\ \\ \\ \\,$kmp是用来处理字符串匹配的常见简单算法，网上可以找到很多讲解，这里就不细讲了，一笔带过。</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$我们知道，暴力匹配两个字符串的复杂度是$O(n^2)$的，很多时候我们都不能接受这个复杂度，考虑如何减小复杂度，我们发现在暴力匹配的过程中，会重复匹配很多地方，所以我们从这里下手，进行优化。</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$引入kmp算法最核心的东西—— $ next$ 数组：</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$代表当前字符之前的字符串中，有多大长度的相同前缀。例如如果 $next [j] = k$，代表位置 $j$ 之前的字符串中有最大长度为 $k $ 的相同前缀。</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$意味着在某个字符失配时，告诉你下一步匹配中，模式串应该跳到哪个位置（$next [j]$ ）。如果 $next [j]$ 等于$-1$，则跳到模式串的开头字符，若 $next [j] = k$ 且 $k &gt; 0$，代表下次匹配跳到 $j$ 之前的某个字符，而不是跳到开头，跳过了 $k$ 个曾经匹配过的字符。</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$为什么这 $k$ 个字符就这样逃过了？我们可以这样感性地理解：</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$若是在 $j$ 这个位置失配，那么说明在这个位置之前，模式串和文本串是可以匹配的，也就是一样的，那么我们要是可以预处理下次跳到的地方就好了，这个就是我们预处理的结果：$ next$ 数组。</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$这样我们的匹配复杂度就降为$O(n)$：</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$假设现在文本串$S$匹配到 $i$ 位置，模式串$P$匹配到 $j$ 位置</p>\n<ul>\n<li><p>如果$j = -1$，或者当前字符匹配成功（即$S[i] = P[j]$），$i$，$j$都加一，继续匹配下一个字符；</p>\n</li>\n<li><p>如果$j \\neq -1$，且当前字符匹配失败（即$S[i] \\neq P[j]$），则令 $i$ 不变，$j = next[j]$。此举意味着失配时，模式串P相对于文本串S向右移动了$j - next [j]$ 位。</p>\n</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span>(i&lt;slen&amp;&amp;j&lt;plen)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(j==<span class=\"number\">-1</span>||s[i]==p[j])i++,j++;</span><br><span class=\"line\">  <span class=\"keyword\">else</span> j=Next[j];</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(j==plen)j=Next[j];<span class=\"comment\">//到这里就匹配到了一个模式串了。</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>$\\ \\ \\ \\ \\ \\ \\,$那么我们如何快速地求出$ next$ 数组？</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$这个过程相当于自己与自己匹配，假设现在对于字符串$p$，已经处理到了 $k$ 位置，和自己匹配到了 $j$ 位置（显然$k&gt;j$）：</p>\n<ul>\n<li><p>如果$j&gt;0$，并且$p[k]\\neq p[j]$，那么就是和自己失配了，$j = next[j]$；</p>\n</li>\n<li><p>如果$p[k]= p[j]$，那么就是是适配了，$k$，$j$都加一，同时如果下次匹配的时候在 $k+1$ 处失配了，那么我们就跳过枚举前面 $k$ 个元素，直接匹配 $j+1$，所以 $next[k+1]=j+1$。</p>\n</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> j=<span class=\"number\">0</span>;next[<span class=\"number\">0</span>]=<span class=\"number\">-1</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"type\">int</span> k=<span class=\"number\">1</span>;k&lt;n;k++)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(j&gt;<span class=\"number\">0</span>&amp;&amp;(p[k]!=p[j])) j=next[j];</span><br><span class=\"line\">  j+=(p[k]==p[j]);next[k+<span class=\"number\">1</span>]=j;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>$\\ \\ \\ \\ \\ \\ \\,$复杂度$O(n)$。</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$单字符串匹配的话，就是模板题不说了，kmp最重要的，还是对$ next$ 数组的运用。<del>（多字符串匹配我还是信仰Sam，XD）</del>，还是贴一个AC自动机的模板XD：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">AC_Automata</span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> son[<span class=\"number\">26</span>][N],fail[N],appear[N];</span><br><span class=\"line\">\t<span class=\"type\">int</span> size;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Get_trie</span><span class=\"params\">(<span class=\"type\">char</span> s[],<span class=\"type\">int</span> id)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> len=<span class=\"built_in\">strlen</span>(s),now=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;len;i++)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(!son[s[i]-<span class=\"string\">&#x27;a&#x27;</span>][now])son[s[i]-<span class=\"string\">&#x27;a&#x27;</span>][now]=++size;</span><br><span class=\"line\">\t\t\tnow=son[s[i]-<span class=\"string\">&#x27;a&#x27;</span>][now]; </span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tappear[now]=id;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Get_fail</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t\tqueue&lt;<span class=\"type\">int</span>&gt; Q;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">26</span>;i++)<span class=\"keyword\">if</span>(son[i][<span class=\"number\">0</span>]!=<span class=\"number\">0</span>)</span><br><span class=\"line\">\t\tfail[son[i][<span class=\"number\">0</span>]]=<span class=\"number\">0</span>,Q.<span class=\"built_in\">push</span>(son[i][<span class=\"number\">0</span>]);</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(!Q.<span class=\"built_in\">empty</span>())&#123;</span><br><span class=\"line\">\t\t\t<span class=\"type\">int</span> u=Q.<span class=\"built_in\">front</span>();Q.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">26</span>;i++)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(son[i][u])fail[son[i][u]]=son[i][fail[u]],Q.<span class=\"built_in\">push</span>(son[i][u]);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span> son[i][u]=son[i][fail[u]];</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">query</span><span class=\"params\">(<span class=\"type\">char</span> s[])</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> len=<span class=\"built_in\">strlen</span>(s),now=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;len;i++)&#123;</span><br><span class=\"line\">      now=son[s[i]-<span class=\"string\">&#x27;a&#x27;</span>][now];</span><br><span class=\"line\">      <span class=\"keyword\">for</span>(<span class=\"type\">int</span> t=now;t;t=fail[t])</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//something about appear[t];</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"P3193-HNOI2008-GT考试\"><a href=\"#P3193-HNOI2008-GT考试\" class=\"headerlink\" title=\"P3193 [HNOI2008]GT考试\"></a><a href=\"https://www.luogu.org/problemnew/show/P3193\">P3193 [HNOI2008]GT考试</a></h3><p>$\\ \\ \\ \\ \\ \\ \\,$很明显的，我们会得到一个DP方程式：</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$我们令$f(i,j)$表示我们$X$已经处理到了$i$，其中出现了长度为$j$的连续不吉利数字。</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$答案显然就是$\\sum_{i=0}^{m-1}f(n,i)$，现在考虑如何转移。</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$令$g(i,j)$表示，在长度为$j$的连续不吉利数字后，跟上数字$j$后，不吉利数字的长度。</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$那么就有：</p>\n<p>$f(i,j)=\\sum_{b=0}^{9} f(i,a)[j=g(a,b)]$</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$其中$g(a,b)$就可以用kmp的$ next$ 数组找到：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">g</span><span class=\"params\">(<span class=\"type\">int</span> j,<span class=\"type\">int</span> k)</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(j!=<span class=\"number\">-1</span>&amp;&amp;a[j]!=k)j=next[j];</span><br><span class=\"line\">  <span class=\"keyword\">return</span> j+<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>$\\ \\ \\ \\ \\ \\ \\,$我们可以花$O(10\\cdot m^2)$的时间把$g$预处理出来，如何$O(nm)$来dp，但是$n$特别大，于是我们用矩阵来优化，完整代码如下：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdlib&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cctype&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;stack&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;map&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;set&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> inf=<span class=\"number\">0x7fffffff</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">double</span> eps=<span class=\"number\">1e-10</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">double</span> pi=<span class=\"built_in\">acos</span>(<span class=\"number\">-1.0</span>);</span><br><span class=\"line\"><span class=\"comment\">//char buf[1&lt;&lt;15],*S=buf,*T=buf;</span></span><br><span class=\"line\"><span class=\"comment\">//char getch()&#123;return S==T&amp;&amp;(T=(S=buf)+fread(buf,1,1&lt;&lt;15,stdin),S==T)?0:*S++;&#125;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">int</span> <span class=\"title\">read</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">  <span class=\"type\">int</span> x=<span class=\"number\">0</span>,f=<span class=\"number\">1</span>;<span class=\"type\">char</span> ch;ch=<span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(ch&lt;<span class=\"string\">&#x27;0&#x27;</span>||ch&gt;<span class=\"string\">&#x27;9&#x27;</span>)&#123;<span class=\"keyword\">if</span>(ch==<span class=\"string\">&#x27;-&#x27;</span>) f=<span class=\"number\">0</span>;ch=<span class=\"built_in\">getchar</span>();&#125;</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(ch&gt;=<span class=\"string\">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class=\"string\">&#x27;9&#x27;</span>)&#123;x=(x&lt;&lt;<span class=\"number\">1</span>)+(x&lt;&lt;<span class=\"number\">3</span>)+(ch&amp;<span class=\"number\">15</span>);ch=<span class=\"built_in\">getchar</span>();&#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(f)<span class=\"keyword\">return</span> x;<span class=\"keyword\">else</span> <span class=\"keyword\">return</span> -x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">30</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> n,m,mod;</span><br><span class=\"line\"><span class=\"type\">char</span> s[N];</span><br><span class=\"line\"><span class=\"type\">int</span> a[N];</span><br><span class=\"line\"><span class=\"type\">int</span> f[N][N],ans;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Matrix</span>&#123;<span class=\"type\">int</span> n,m;<span class=\"type\">int</span> a[N][N];&#125;A,B;</span><br><span class=\"line\"><span class=\"keyword\">inline</span> Matrix <span class=\"keyword\">operator</span> *(<span class=\"type\">const</span> Matrix &amp;a,<span class=\"type\">const</span> Matrix &amp;b)&#123;</span><br><span class=\"line\">  Matrix ret;</span><br><span class=\"line\">  ret.n=a.n;ret.m=b.m;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;=a.n;i++)</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">0</span>;j&lt;=b.m;j++)&#123;</span><br><span class=\"line\">    ret.a[i][j]=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> k=<span class=\"number\">0</span>;k&lt;=a.m;k++)</span><br><span class=\"line\">    ret.a[i][j]=(ret.a[i][j]+a.a[i][k]*b.a[k][j]%mod)%mod;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> next[N];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">g</span><span class=\"params\">(<span class=\"type\">int</span> j,<span class=\"type\">int</span> k)</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(j!=<span class=\"number\">-1</span>&amp;&amp;a[j+<span class=\"number\">1</span>]!=k)j=next[j];</span><br><span class=\"line\">  <span class=\"keyword\">return</span> j+<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  n=<span class=\"built_in\">read</span>();m=<span class=\"built_in\">read</span>();mod=<span class=\"built_in\">read</span>();</span><br><span class=\"line\">  <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%s&quot;</span>,s+<span class=\"number\">1</span>);</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=m;i++)a[i]=s[i]-<span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">  next[<span class=\"number\">0</span>]=<span class=\"number\">-1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">-1</span>,i=<span class=\"number\">1</span>;i&lt;=m;next[i++]=++j)</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(j!=<span class=\"number\">-1</span>&amp;&amp;a[i]!=a[j+<span class=\"number\">1</span>])j=next[j];</span><br><span class=\"line\">  A.n=<span class=\"number\">0</span>;A.m=m<span class=\"number\">-1</span>;</span><br><span class=\"line\">  B.m=B.n=m<span class=\"number\">-1</span>;</span><br><span class=\"line\">  A.a[<span class=\"number\">0</span>][<span class=\"number\">0</span>]=<span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;m;i++)</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">0</span>;j&lt;=<span class=\"number\">9</span>;j++)</span><br><span class=\"line\">  B.a[i][<span class=\"built_in\">g</span>(i,j)]++;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(;n;n&gt;&gt;=<span class=\"number\">1</span>,B=B*B)<span class=\"keyword\">if</span>(n&amp;<span class=\"number\">1</span>)A=A*B;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;m;i++) ans=(ans+A.a[<span class=\"number\">0</span>][i])%mod;</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>,ans);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"Manachar\"><a href=\"#Manachar\" class=\"headerlink\" title=\"Manachar\"></a>Manachar</h2><p>$\\ \\ \\ \\ \\ \\ \\,$manachar算法特别单一，就是求回文串用的，题一般也特别裸，比较套路。</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$首先，我们知道的，回文串分奇偶，但是如果我们在这个串中每一个字符之间都插入一个特殊字符，那么偶回文串就变成奇回文串了，这样我们就可以只处理奇回文串就行了。</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$然后就是$RL$数组，表示以这个字符为中点，回文串的最大半径是多少，manachar算法就是$O(n)$求$RL$数组的算法。下面直接将做法，不讲原理了：</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$记我们已经处理的回文串已经处理到的最右端为$MR$，他的对称轴为$pos$，现在要处理的位置为$i$，显然$pos&lt;i$。</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$如果$MR&gt;i$，那么我们可以确定，已$i$为中点，回文串的最大半径至少是${\\rm min}(RL[2\\cdot pos-i],MR-i)$。</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$剩下的就是暴力扩展，记得到时候更新一下$MR$和$pos$，模板如下：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> RL[N&lt;&lt;<span class=\"number\">1</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Manacher</span><span class=\"params\">(<span class=\"type\">char</span> *s,<span class=\"type\">int</span> n)</span></span>&#123;</span><br><span class=\"line\">  <span class=\"type\">int</span> MR=<span class=\"number\">0</span>,pos=<span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"built_in\">memset</span>(RL,<span class=\"number\">0</span>,<span class=\"built_in\">sizeof</span>(RL));</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(MR&gt;i)RL[i]=<span class=\"built_in\">min</span>(RL[<span class=\"number\">2</span>*pos-i],MR-i);</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> RL[i]=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(s[i+RL[i]]==s[i-RL[i]])RL[i]++;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(i+RL[i]&gt;MR)MR=i+RL[i],pos=i;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">insert</span><span class=\"params\">(<span class=\"type\">char</span> *s,<span class=\"type\">int</span> len)</span></span>&#123;</span><br><span class=\"line\">  len=<span class=\"built_in\">strlen</span>(s);P[<span class=\"number\">0</span>]=<span class=\"string\">&#x27;$&#x27;</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=len*<span class=\"number\">2</span>+<span class=\"number\">1</span>;i+=<span class=\"number\">2</span>) P[i]=<span class=\"string\">&#x27;#&#x27;</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;len;i++) P[i*<span class=\"number\">2</span>+<span class=\"number\">2</span>]=s[i];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"P4555-国家集训队-最长双回文串\"><a href=\"#P4555-国家集训队-最长双回文串\" class=\"headerlink\" title=\"P4555 [国家集训队]最长双回文串\"></a><a href=\"https://www.luogu.org/problemnew/show/P4555\">P4555 [国家集训队]最长双回文串</a></h3><p>$\\ \\ \\ \\ \\ \\ \\,$在我们求好$RL$后，很明显的有一个dp，我们把对称轴上的信息移动到起始点和终点：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)&#123;</span><br><span class=\"line\">  L[i+RL[i]<span class=\"number\">-1</span>]=<span class=\"built_in\">max</span>(L[i+RL[i]<span class=\"number\">-1</span>],RL[i]<span class=\"number\">-1</span>);</span><br><span class=\"line\">  R[i-RL[i]+<span class=\"number\">1</span>]=<span class=\"built_in\">max</span>(R[i-RL[i]+<span class=\"number\">1</span>],RL[i]<span class=\"number\">-1</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>$\\ \\ \\ \\ \\ \\ \\,$那么，显然的，答案等于：<br>${\\rm Max}_{i=0}^{n-1}L_i+R_i[L_i\\neq0,R_i\\neq0]$</p>\n<p>$\\ \\ \\ \\ \\ \\ \\,$代码如下：<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdlib&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cctype&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;stack&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;map&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;set&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> inf=<span class=\"number\">0x7fffffff</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">double</span> eps=<span class=\"number\">1e-10</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">double</span> pi=<span class=\"built_in\">acos</span>(<span class=\"number\">-1.0</span>);</span><br><span class=\"line\"><span class=\"comment\">//char buf[1&lt;&lt;15],*S=buf,*T=buf;</span></span><br><span class=\"line\"><span class=\"comment\">//char getch()&#123;return S==T&amp;&amp;(T=(S=buf)+fread(buf,1,1&lt;&lt;15,stdin),S==T)?0:*S++;&#125;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">int</span> <span class=\"title\">read</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">  <span class=\"type\">int</span> x=<span class=\"number\">0</span>,f=<span class=\"number\">1</span>;<span class=\"type\">char</span> ch;ch=<span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(ch&lt;<span class=\"string\">&#x27;0&#x27;</span>||ch&gt;<span class=\"string\">&#x27;9&#x27;</span>)&#123;<span class=\"keyword\">if</span>(ch==<span class=\"string\">&#x27;-&#x27;</span>) f=<span class=\"number\">0</span>;ch=<span class=\"built_in\">getchar</span>();&#125;</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(ch&gt;=<span class=\"string\">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class=\"string\">&#x27;9&#x27;</span>)&#123;x=(x&lt;&lt;<span class=\"number\">1</span>)+(x&lt;&lt;<span class=\"number\">3</span>)+(ch&amp;<span class=\"number\">15</span>);ch=<span class=\"built_in\">getchar</span>();&#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(f)<span class=\"keyword\">return</span> x;<span class=\"keyword\">else</span> <span class=\"keyword\">return</span> -x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">1e5</span>+<span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> RL[N&lt;&lt;<span class=\"number\">1</span>],n;</span><br><span class=\"line\"><span class=\"type\">char</span> s[N],P[N&lt;&lt;<span class=\"number\">1</span>];</span><br><span class=\"line\"><span class=\"type\">int</span> L[N&lt;&lt;<span class=\"number\">1</span>],R[N&lt;&lt;<span class=\"number\">1</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Manacher</span><span class=\"params\">(<span class=\"type\">char</span> *s,<span class=\"type\">int</span> n)</span></span>&#123;</span><br><span class=\"line\">  <span class=\"type\">int</span> MR=<span class=\"number\">0</span>,pos=<span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(MR&gt;i)RL[i]=<span class=\"built_in\">min</span>(RL[<span class=\"number\">2</span>*pos-i],MR-i);</span><br><span class=\"line\">    <span class=\"keyword\">else</span> RL[i]=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(s[i+RL[i]]==s[i-RL[i]])RL[i]++;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(i+RL[i]&gt;MR)MR=i+RL[i],pos=i;</span><br><span class=\"line\">    L[i+RL[i]<span class=\"number\">-1</span>]=<span class=\"built_in\">max</span>(L[i+RL[i]<span class=\"number\">-1</span>],RL[i]<span class=\"number\">-1</span>);</span><br><span class=\"line\">  \tR[i-RL[i]+<span class=\"number\">1</span>]=<span class=\"built_in\">max</span>(R[i-RL[i]+<span class=\"number\">1</span>],RL[i]<span class=\"number\">-1</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">insert</span><span class=\"params\">(<span class=\"type\">char</span> *s,<span class=\"type\">int</span> len)</span></span>&#123;</span><br><span class=\"line\">  len=<span class=\"built_in\">strlen</span>(s);P[<span class=\"number\">0</span>]=<span class=\"string\">&#x27;$&#x27;</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=len*<span class=\"number\">2</span>+<span class=\"number\">1</span>;i+=<span class=\"number\">2</span>) P[i]=<span class=\"string\">&#x27;#&#x27;</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;len;i++) P[i*<span class=\"number\">2</span>+<span class=\"number\">2</span>]=s[i];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%s&quot;</span>,s);n=<span class=\"built_in\">strlen</span>(s);</span><br><span class=\"line\">  <span class=\"built_in\">insert</span>(s,n);</span><br><span class=\"line\">  <span class=\"built_in\">Manacher</span>(P,n*<span class=\"number\">2</span>+<span class=\"number\">2</span>);</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n*<span class=\"number\">2</span>+<span class=\"number\">1</span>;i+=<span class=\"number\">2</span>)R[i]=<span class=\"built_in\">max</span>(R[i],R[i<span class=\"number\">-2</span>]<span class=\"number\">-2</span>);</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=n*<span class=\"number\">2</span>+<span class=\"number\">1</span>;i&gt;=<span class=\"number\">1</span>;i-=<span class=\"number\">2</span>)L[i]=<span class=\"built_in\">max</span>(L[i],L[i+<span class=\"number\">2</span>]<span class=\"number\">-2</span>);</span><br><span class=\"line\">  <span class=\"type\">int</span> ans=<span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=<span class=\"number\">2</span>*n+<span class=\"number\">1</span>;i+=<span class=\"number\">2</span>)</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(R[i]&amp;&amp;L[i])ans=<span class=\"built_in\">max</span>(ans,L[i]+R[i]);</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>,ans);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>"},{"title":"莫比乌斯反演经典例题回顾","date":"2018-12-30T03:42:16.000Z","mathjax":true,"_content":"\n$\\ \\ \\ \\ \\ \\ \\ \\,$莫比乌斯反演经典例题回顾，思考和题解：\n\n<!-- more -->\n\n## [P2522 [HAOI2011]Problem b](https://www.luogu.org/problemnew/show/P2522)\n$\\sum_{i=a}^b\\sum_{j=c}^d[gcd(i,j)=k]$\n\n### 反演过程：\n\n${F(n,m)=\\sum_{i=1}^n\\sum_{j=1}^m[gcd(i,j)=k]}$\n\n$ans=F(a,b)-F(a-1,d)-F(b,c-1)+F(a-1,c-1)$\n\n$F(n,m)=$\n\n$\\sum_{i=1}^{\\left\\lfloor\\frac{n}{k}\\right\\rfloor}\\sum_{j=1}^{\\left\\lfloor\\frac{n}{k}\\right\\rfloor}[gcd(i,j)=1]$\n\n$\\sum_{i=1}^{\\left\\lfloor\\frac{n}{k}\\right\\rfloor}\\sum_{j=1}^{\\left\\lfloor\\frac{n}{k}\\right\\rfloor}ϵ(gcd(i,j)=1)$\n\n$\\sum_{d=1}^{\\left\\lfloor\\frac{min(n,m)}{k}\\right\\rfloor}\\sum_{d|T}\\mu(d){\\left\\lfloor\\frac{n}{T}\\right\\rfloor}{\\left\\lfloor\\frac{m}{T}\\right\\rfloor}$\n\n$\\sum_{d=1}^{\\left\\lfloor\\frac{min(n,m)}{k}\\right\\rfloor}\\mu(d){\\left\\lfloor\\frac{n}{kd}\\right\\rfloor}{\\left\\lfloor\\frac{m}{kd}\\right\\rfloor}$\n\n- $\\ \\ \\ \\ \\ \\,$ $O(n)$预处理$\\mu$，每次询问分块，复杂度$O(\\sqrt n)$，总复杂度为$O(n+T4\\sqrt n)$\n\n### 代码\n\n``` cpp\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#include<cstdlib>\n#include<cstring>\n#include<string>\n#include<queue>\n#include<cmath>\nusing namespace std;\nconst int inf=0x7fffffff;\nconst double eps=1e-10;\nconst double pi=acos(-1.0);\nconst int N=50010;\ninline int read(){\n  int x=0,f=1;char ch;ch=getchar();\n  while(ch<'0'||ch>'9'){if(ch=='-') f=-1;ch=getchar();}\n  while(ch>='0'&&ch<='9'){x=x*10+ch-'0';ch=getchar();}\n  return x*f;\n}\nbool vis[N];\nint prim[N],mu[N],sum[N],k;\nvoid get_mu(int n){\n  mu[1]=1;\n  for(int i=2;i<=n;i++){\n    if(!vis[i]){mu[i]=-1;prim[++prim[0]]=i;}\n    for(int j=1;j<=prim[0]&&i*prim[j]<=n;j++){\n      vis[i*prim[j]]=1;\n      if(i%prim[j]==0)break;\n      else mu[i*prim[j]]=-mu[i];\n    }\n  }\n  for(int i=1;i<=n;i++)\n  sum[i]=sum[i-1]+mu[i];\n}\nlong long Ans(int a,int b){\n    a/=k;b/=k;\n  int max_rep=min(a,b);\n  long long ans=0;\n  for(int l=1,r;l<=max_rep;l=r+1){\n    r=min(a/(a/l),b/(b/l));\n    ans+=(long long)(a/l)*(long long)(b/l)*(long long)(sum[r]-sum[l-1]);\n  }\n  return ans;\n}\nint main()\n{\n \tint T=read();\n \tget_mu(N-10);\n \twhile(T--){\n \t\tint a=read(),b=read(),c=read(),d=read();k=read();\n \t\tprintf(\"%lld\\n\",Ans(b,d)-Ans(b,c-1)-Ans(a-1,d)+Ans(a-1,c-1));\n  }\n  return 0;\n}\n```\n\n\n## [P2257 YY的GCD](https://www.luogu.org/problemnew/show/P2257)\n\n$\\sum_{i=1}^n\\sum_{j=1}^m[gcd(i,j)\\rm\\ \\ is\\ \\ prime]$\n\n### 反演过程：\n\n$\\sum_{p=1,[p\\rm\\ \\ is\\ \\ prime]}\\sum_{i=1}^n\\sum_{j=1}^m[gcd(i,j)=p]$\n\n$\\sum_{p=1,[p\\rm\\ \\ is\\ \\ prime]}\\sum_{i=1}^{\\left\\lfloor\\frac{n}{p}\\right\\rfloor}\\sum_{j=1}^{\\left\\lfloor\\frac{m}{p}\\right\\rfloor}[gcd(i,j)=1]$\n\n$\\sum_{p=1,[p\\rm\\ \\ is\\ \\ prime]}\\sum_{d=1}^{\\left\\lfloor\\frac{min(n,m)}{p}\\right\\rfloor}\\mu(d){\\left\\lfloor\\frac{n}{pd}\\right\\rfloor}{\\left\\lfloor\\frac{m}{pd}\\right\\rfloor}$\n\n$\\sum_{T=1}^{min(n,m)}\\sum_{d|T}\\mu(d){\\left\\lfloor\\frac{n}{T}\\right\\rfloor}{\\left\\lfloor\\frac{m}{T}\\right\\rfloor}\\left[\\frac{T}{d}\\rm\\ \\ is\\ \\ prime\\right]$\n\n$\\sum_{T=1}^{min(n,m)}{\\left\\lfloor\\frac{n}{T}\\right\\rfloor}{\\left\\lfloor\\frac{m}{T}\\right\\rfloor}\\sum_{d|T,\\left[d\\rm\\ \\ is\\ \\ prime\\right]}\\mu\\left(\\frac{T}{d}\\right)$\n\n${F(x)=\\sum_{d|x,\\left[d\\rm\\ \\ is\\ \\ prime\\right]}\\mu\\left(\\frac{x}{d}\\right)}$\n\n${\\sum_{T=1}^{min(n,m)}{\\left\\lfloor\\frac{n}{T}\\right\\rfloor}{\\left\\lfloor\\frac{m}{T}\\right\\rfloor}F(T)}$\n\n- $\\ \\ \\ \\ \\ \\,$ $O(n)$预处理$\\mu$，$O(n\\log{n})$预处理$F$，每次询问分块，复杂度$O(\\sqrt n)$，总复杂度为$O(n\\log n+T\\sqrt n)$\n\n### 代码\n\n``` cpp\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#include<cstdlib>\n#include<cstring>\n#include<string>\n#include<queue>\n#include<cmath>\nusing namespace std;\nconst int inf=0x7fffffff;\nconst double eps=1e-10;\nconst double pi=acos(-1.0);\nconst int N=1e7+10;\ninline int read(){\n    int x=0,f=1;char ch;ch=getchar();\n    while(ch<'0'||ch>'9'){if(ch=='-') f=-1;ch=getchar();}\n    while(ch>='0'&&ch<='9'){x=x*10+ch-'0';ch=getchar();}\n    return x*f;\n}\nbool vis[N];\nint prim[N],mu[N];\nlong long F[N];\nvoid get_mu(int n){\n  mu[1]=1;\n  for(int i=2;i<=n;i++){\n    if(!vis[i]){mu[i]=-1;prim[++prim[0]]=i;}\n    for(int j=1;j<=prim[0]&&i*prim[j]<=n;j++){\n      vis[i*prim[j]]=1;\n      if(i%prim[j]==0)break;\n      else mu[i*prim[j]]=-mu[i];\n    }\n  }\n  for(int i=1;i<=prim[0];i++)\n  for(int j=1;j*prim[i]<=n;j++)F[j*prim[i]]+=(long long)mu[j];\n  for(int i=1;i<=n;i++)F[i]+=F[i-1];\n}\nlong long Ans(int n,int m){\n  int lim=min(n,m);\n  long long ans=0;\n  for(int l=1,r;l<=lim;l=r+1){\n    r=min(n/(n/l),m/(m/l));\n    ans+=(long long)(n/l)*(long long)(m/l)*(F[r]-F[l-1]);\n  }\n  return ans;\n}\nint main()\n{\n  get_mu(N-10);\n  int T=read();\n  while(T--){\n    int n=read(),m=read();\n    printf(\"%lld\\n\",Ans(n,m));\n  }\n  return 0;\n}\n```\n\n\n## [P3312 [SDOI2014]数表](https://www.luogu.org/problemnew/show/P3312)\n\n$\\sum_{i=1}^n\\sum_{j=1}^m\\sum_{k|gcd(i,j)}k\\left[\\sum_{k|gcd(i,j)}k≤a\\right]$\n\n### 反演过程：\n\n$F(x)=\\sum_{i|x}i$\n\n$\\sum_{i=1}^n\\sum_{j=1}^mF(gcd(i,j))[F(gcd(i,j))≤a]$\n\n$\\sum_{d=1}^{min(n,m)}\\sum_{i=1}^n\\sum_{j=1}^mF(d)[gcd(i,j)=d][F(d)≤a]$\n\n$\\sum_{d=1}^{min(n,m)}F(d)[F(d)≤a]\\sum_{i=1}^n\\sum_{j=1}^m[gcd(i,j)=d]$\n\n$\\sum_{d=1}^{min(n,m)}F(d)[F(d)≤a]\\sum_{d'=1}^{\\left\\lfloor\\frac{min(n,m)}{d}\\right\\rfloor}\\mu(d')\\left\\lfloor\\frac{n}{d'd}\\right\\rfloor\\left\\lfloor\\frac{m}{d'd}\\right\\rfloor$\n\n$\\sum_{T=1}^{min(n,m)}\\sum_{d|T}F(d)\\mu\\left(\\frac{T}{d}\\right){\\left\\lfloor\\frac{n}{T}\\right\\rfloor}{\\left\\lfloor\\frac{m}{T}\\right\\rfloor}[F(d)≤a]$\n\n$\\sum_{T=1}^{min(n,m)}{\\left\\lfloor\\frac{n}{T}\\right\\rfloor}{\\left\\lfloor\\frac{m}{T}\\right\\rfloor}\\sum_{d|T}F(d)\\mu\\left(\\frac{T}{d}\\right)[F(d)≤a]$\n\n$f(x)=\\sum_{d|T}F(d)\\mu\\left(\\frac{T}{d}\\right)[F(d)≤a]$\n\n$\\sum_{T=1}^{min(n,m)}{\\left\\lfloor\\frac{n}{T}\\right\\rfloor}{\\left\\lfloor\\frac{m}{T}\\right\\rfloor}f(T)$\n\n- $\\ \\ \\ \\ \\ \\,$ $O(n\\log n)$预处理$F$和$\\mu$，把每次询问的$a$值离线排序，用树状数组维护$f$，花费时间$O(n\\log ^2n)$，询问分块，复杂度$O(\\sqrt n\\log n)$，总时间复杂度$O(n\\log ^2n+T\\sqrt n\\log n)$\n\n### 代码\n\n``` cpp\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#include<cstdlib>\n#include<cstring>\n#include<string>\n#include<cmath>\nusing namespace std;\nconst int inf=0x7fffffff;\nconst double eps=1e-10;\nconst double pi=acos(-1.0);\n//char buf[1<<15],*S=buf,*T=buf;\n//char getch(){return S==T&&(T=(S=buf)+fread(buf,1,1<<15,stdin),S==T)?0:*S++;}\ninline int read(){\n  int x=0,f=1;char ch;ch=getchar();\n  while(ch<'0'||ch>'9'){if(ch=='-') f=0;ch=getchar();}\n  while(ch>='0'&&ch<='9'){x=(x<<1)+(x<<3)+(ch&15);ch=getchar();}\n  if(f)return x;else return -x;\n}\nconst int N=1e5+10;\nconst int Q=2e4+10;\nint sum[N];\nbool vis[N];\nint prim[N],mu[N];\nint S=1;\nstruct Sum{int data,id;}F[N];\nbool operator <(Sum a,Sum b){return a.data<b.data;}\nint ans[Q];\n#define lowbit(x) ((x)&(-x))\nvoid add(int i,int c)\n{for(;i<=N-5;i+=lowbit(i))sum[i]+=c;}\nint query(int i){\n  int ans=0;\n  for(;i;i-=lowbit(i))ans+=sum[i];\n  return ans;\n}\nvoid Add(int i,int data){\n  int ed=((N-5)/i);\n  for(register int j=1;j<=ed;++j)\n  add(i*j,data*mu[j]);\n}\nvoid init(){\n  mu[1]=1;\n  for(register int i=2;i<=N-5;++i){\n    if(!vis[i]){mu[i]=-1;prim[++prim[0]]=i;}\n    for(register int j=1;j<=prim[0]&&i*prim[j]<=N-5;++j){\n      vis[i*prim[j]]=1;\n      if(i%prim[j]==0)break;\n      else mu[i*prim[j]]=-mu[i];\n    }\n  }\n  for(register int i=1;i<=N-5;++i){\n    F[i].id=i;\n    int ed=((N-5)/i);\n    for(register int j=1;j<=ed;++j)\n    F[i*j].data+=i;\n  }\n  sort(F+1,F+1+N-5);\n}\nstruct Query{int n,m,a,id;}q[Q];\ninline bool operator <(const Query &a,const Query &b){return a.a<b.a;}\nint main()\n{\n  int T=read();\n  init();\n  for(register int i=1;i<=T;i++){\n    q[i].n=read();q[i].m=read();q[i].a=read();q[i].id=i;\n    if(q[i].n>q[i].m)swap(q[i].n,q[i].m);\n  }\n  sort(q+1,q+T+1);\n  for(register int i=1;i<=T;i++){\n    int n=q[i].n,m=q[i].m,a=q[i].a,id=q[i].id;\n    while(F[S].data<=a){Add(F[S].id,F[S].data);S++;}\n    for(register int l=1,r;l<=n;l=r+1){\n      r=min(n/(n/l),(m/(m/l)));\n      ans[id]+=(n/l)*(m/l)*(query(r)-query(l-1));\n    }\n  }\n  for(register int i=1;i<=T;i++)printf(\"%d\\n\",ans[i]&0x7fffffff);\n  return 0;\n}\n\n```\n\n\n## [P3704 [SDOI2017]数字表格](https://www.luogu.org/problemnew/show/P3704)\n\n$\\prod_{i=1}^{n}\\prod_{j=1}^{m}f\\left(gcd(i,j)\\right)$\n\n$\\ \\ \\ \\ \\ \\,$ $f$为斐波拉契序列。\n\n### 反演过程：\n\n$\\prod_{i=1}^{min(n,m)}\\prod_{i=1}^{n}\\prod_{j=1}^{m}f(d)\\left[gcd(i,j)=d\\right]$\n\n$\\prod_{d=1}^{min(n,m)}f(d)^{\\sum_{i=1}^n\\sum_{j=1}^{m}\\left[gcd(i,j)=d\\right]}$\n\n$\\prod_{d=1}^{min(n,m)}f(d)^{\\sum_{d'=1}^{\\left\\lfloor\\frac{min(n,m)}{d}\\right\\rfloor}\\mu(d')\\left\\lfloor\\frac{n}{d'd}\\right\\rfloor\\left\\lfloor\\frac{m}{d'd}\\right\\rfloor}$\n\n$\\prod_{d=1}^{min(n,m)}\\prod_{d'=1}^{\\left\\lfloor\\frac{min(n,m)}{d}\\right\\rfloor}f(d)^{\\mu(d')\\left\\lfloor\\frac{n}{d'd}\\right\\rfloor\\left\\lfloor\\frac{m}{d'd}\\right\\rfloor}$\n\n$\\prod_{T=1}^{min(n,m)}\\prod_{d|T}f(d)^{\\mu\\left(\\frac{T}{d}\\right)\\left\\lfloor\\frac{n}{T}\\right\\rfloor\\left\\lfloor\\frac{m}{T}\\right\\rfloor}$\n\n${C(x)=\\prod_{d|T}f(d)^{\\mu\\left(\\frac{T}{d}\\right)}}$\n\n$\\prod_{T=1}^{min(n,m)}C(T)^{\\left\\lfloor\\frac{n}{T}\\right\\rfloor\\left\\lfloor\\frac{m}{T}\\right\\rfloor}$\n\n- $\\ \\ \\ \\ \\ \\,$ $O(n)$预处理$f$和$\\mu$，$O(n\\log{n})$预处理$C$，每次询问分块，复杂度$O(\\sqrt n \\log n)$，总复杂度为$O(n\\log n+T\\sqrt n \\log n)$\n\n### 代码\n\n``` cpp\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#include<cstdlib>\n#include<cstring>\n#include<string>\n#include<queue>\n#include<cmath>\nusing namespace std;\nconst int inf=0x7fffffff;\nconst double eps=1e-10;\nconst double pi=acos(-1.0);\nconst int N=1e6+10;\nconst long long mod=1e9+7;\ninline int read(){\n    int x=0,f=1;char ch;ch=getchar();\n    while(ch<'0'||ch>'9'){if(ch=='-') f=-1;ch=getchar();}\n    while(ch>='0'&&ch<='9'){x=x*10+ch-'0';ch=getchar();}\n    return x*f;\n}\nlong long power(long long a,long long b){  \n  long long ans=1ll;  \n  a=a%mod;\n  while(b!=0){  \n    if(b&1) ans=(ans*a)%mod;\n    b>>=1;a=(a*a)%mod;\n  }  \n  return ans;  \n}\nlong long f[N];\nbool vis[N];\nint prim[N],mu[N],sum[N];\nlong long C[N],g[N];\nvoid get_mu(int n){\n  mu[1]=1;\n  g[1]=C[0]=C[1]=1ll;\n  for(int i=2;i<=n;i++){\n  \tg[i]=power(f[i],mod-2);C[i]=1;\n    if(!vis[i]){mu[i]=-1;prim[++prim[0]]=i;}\n    for(int j=1;j<=prim[0]&&i*prim[j]<=n;j++){\n      vis[i*prim[j]]=1;\n      if(i%prim[j]==0)break;\n      else mu[i*prim[j]]=-mu[i];\n    }\n  }\n  for(int i=1;i<=n;++i){\n    if(!mu[i])continue;\n  \tfor(int j=i;j<=n;j+=i)\n    C[j]=1ll*C[j]*(mu[i]==1?f[j/i]:g[j/i])%mod;\n  }\n  for(int i=2;i<=n;++i)C[i]=1ll*C[i]*C[i-1]%mod;\n}\nint n,m;\nint main()\n{\n  f[1]=f[2]=1ll;\n  for(int i=3;i<=N-10;i++)f[i]=f[i-1]+f[i-2],f[i]%=mod;\n  get_mu(N-10);\n  int T=read();\n  while(T--){\n    n=read();m=read();\n    if(n>m)swap(n,m);\n    long long ans=1ll;\n    for(int i=1,lim=0;i<=n;i=lim+1){\n      lim=min(n/(n/i),m/(m/i));\n      ans=1ll*ans*power(C[lim]*power(C[i-1],mod-2),1ll*(n/i)*(m/i)%(mod-1));\n      ans%=mod;\n    }\n    printf(\"%lld\\n\",ans);\n  }\n  return 0;\n}\n```\n## [P3327 [SDOI2015]约数个数和](https://www.luogu.org/problemnew/show/P3327)\n\n$\\sum_{i=1}^n\\sum_{j=1}^m\\sum_{k|gcd(i,j)}1$\n\n### 反演过程：\n\n$F(x)=\\sum_{i|x}1$\n\n$\\sum_{i=1}^n\\sum_{j=1}^mF(gcd(i,j))$\n\n$\\sum_{d=1}^{min(n,m)}\\sum_{i=1}^n\\sum_{j=1}^mF(d)[gcd(i,j)=d]$\n\n$\\sum_{d=1}^{min(n,m)}F(d)\\sum_{i=1}^n\\sum_{j=1}^m[gcd(i,j)=d]$\n\n$\\sum_{d=1}^{min(n,m)}F(d)\\sum_{d'=1}^{\\left\\lfloor\\frac{min(n,m)}{d}\\right\\rfloor}\\mu(d')\\left\\lfloor\\frac{n}{d'd}\\right\\rfloor\\left\\lfloor\\frac{m}{d'd}\\right\\rfloor$\n\n$\\sum_{T=1}^{min(n,m)}\\sum_{d|T}F(d)\\mu\\left(\\frac{T}{d}\\right){\\left\\lfloor\\frac{n}{T}\\right\\rfloor}{\\left\\lfloor\\frac{m}{T}\\right\\rfloor}$\n\n$\\sum_{T=1}^{min(n,m)}{\\left\\lfloor\\frac{n}{T}\\right\\rfloor}{\\left\\lfloor\\frac{m}{T}\\right\\rfloor}\\sum_{d|T}F(d)\\mu\\left(\\frac{T}{d}\\right)$\n\n$f(x)=\\sum_{d|T}F(d)\\mu\\left(\\frac{T}{d}\\right)$\n\n$\\sum_{T=1}^{min(n,m)}{\\left\\lfloor\\frac{n}{T}\\right\\rfloor}{\\left\\lfloor\\frac{m}{T}\\right\\rfloor}f(T)$\n\n- $\\ \\ \\ \\ \\ \\,$ $O(n\\log n)$预处理$F$，$f$和$\\mu$，询问分块，复杂度$O(\\sqrt n\\log n)$，总时间复杂度$O(n\\log n+T\\sqrt n\\log n)$，和[P3312 [SDOI2014]数表](https://www.luogu.org/problemnew/show/P3312)这道题差不多\n\n### 代码\n\n``` cpp\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#include<cstdlib>\n#include<cstring>\n#include<string>\n#include<queue>\n#include<cmath>\nusing namespace std;\nconst int inf=0x7fffffff;\nconst double eps=1e-10;\nconst double pi=acos(-1.0);\nconst int N=50010;\ninline int read(){\n  int x=0,f=1;char ch;ch=getchar();\n  while(ch<'0'||ch>'9'){if(ch=='-') f=-1;ch=getchar();}\n  while(ch>='0'&&ch<='9'){x=x*10+ch-'0';ch=getchar();}\n  return x*f;\n}\nbool vis[N];\nint prim[N],mu[N],sum[N];\nlong long g[N];\nvoid get_mu(int n){\n  mu[1]=1;\n  for(int i=2;i<=n;i++){\n    if(!vis[i]){mu[i]=-1;prim[++prim[0]]=i;}\n    for(int j=1;j<=prim[0]&&i*prim[j]<=n;j++){\n      vis[i*prim[j]]=1;\n      if(i%prim[j]==0)break;\n      else mu[i*prim[j]]=-mu[i];\n    }\n  }\n  for(int i=1;i<=n;i++)sum[i]=sum[i-1]+mu[i];\n  for(int i=1;i<=n;i++){\n    long long ans=0;\n    for(int l=1,r;l<=i;l=r+1){\n      r=(i/(i/l));\n      ans+=1ll*(r-l+1)*1ll*(i/l);\n    }\n    g[i]=ans;\n  }\n}\nlong long Ans(int n,int m){\n  int max_rep=min(n,m);\n  long long ans=0;\n  for(int l=1,r;l<=max_rep;l=r+1){\n    r=min(n/(n/l),m/(m/l));\n  \tans+=(sum[r]-sum[l-1])*1ll*g[n/l]*1ll*g[m/l];\n  }\n  return ans;\n}\nint main()\n{\n  int T=read();\n \tget_mu(N-10);\n \twhile(T--){\n \t\tint a=read(),b=read();\n \t\tprintf(\"%lld\\n\",Ans(a,b));\n  }\n  return 0;\n}\n\n\n```\n\n\n## [P3455 [POI2007]ZAP-Queries](https://www.luogu.org/problemnew/show/P3455)\n\n$\\sum_{i=1}^a\\sum_{j=1}^b[gcd(i,j)=c]$\n\n\n### 反演过程：\n\n$\\sum_{i=1}^a\\sum_{j=1}^b[gcd(i,j)=1]$\n\n$\\sum_{i=1}^{\\left\\lfloor\\frac{a}{c}\\right\\rfloor}\\sum_{j=1}^{\\left\\lfloor\\frac{b}{c}\\right\\rfloor}ϵ(gcd(i,j))$\n\n$\\sum_{i=1}^{\\left\\lfloor\\frac{a}{c}\\right\\rfloor}\\sum_{j=1}^{\\left\\lfloor\\frac{b}{c}\\right\\rfloor}(\\mu*1)(gcd(i,j))$\n\n$\\sum_{i=1}^{\\left\\lfloor\\frac{a}{c}\\right\\rfloor}\\sum_{j=1}^{\\left\\lfloor\\frac{b}{c}\\right\\rfloor}\\sum_{d|gcd(i,j)}\\mu(d)\\times 1$\n\n$\\sum_{x=1}^{\\left\\lfloor\\frac{min(a,b)}{c}\\right\\rfloor}\\sum_{d|x}\\mu(d){\\left\\lfloor\\frac{a}{xc}\\right\\rfloor}{\\left\\lfloor\\frac{b}{xc}\\right\\rfloor}$\n\n$\\sum_{d=1}^{\\left\\lfloor\\frac{min(a,b)}{c}\\right\\rfloor}\\mu(d){\\left\\lfloor\\frac{a}{dc}\\right\\rfloor}{\\left\\lfloor\\frac{b}{dc}\\right\\rfloor}$\n\n- $\\ \\ \\ \\ \\ \\,$ 裸题啊！模板啊！$O(n)$预处理$\\mu$，询问分块，复杂度$O(\\sqrt n)$，总时间复杂度$O(n+T\\sqrt n)$\n\n### 代码\n\n``` cpp\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#include<cstdlib>\n#include<cstring>\n#include<string>\n#include<queue>\n#include<cmath>\nusing namespace std;\nconst int inf=0x7fffffff;\nconst double eps=1e-10;\nconst double pi=acos(-1.0);\nconst int N=50010;\ninline int read(){\n  int x=0,f=1;char ch;ch=getchar();\n  while(ch<'0'||ch>'9'){if(ch=='-') f=-1;ch=getchar();}\n  while(ch>='0'&&ch<='9'){x=x*10+ch-'0';ch=getchar();}\n  return x*f;\n}\nbool vis[N];\nint prim[N],mu[N],sum[N],k;\nvoid get_mu(int n){\n  mu[1]=1;\n  for(int i=2;i<=n;i++){\n    if(!vis[i]){mu[i]=-1;prim[++prim[0]]=i;}\n    for(int j=1;j<=prim[0]&&i*prim[j]<=n;j++){\n      vis[i*prim[j]]=1;\n      if(i%prim[j]==0)break;\n      else mu[i*prim[j]]=-mu[i];\n    }\n  }\n  for(int i=1;i<=n;i++)\n  sum[i]=sum[i-1]+mu[i];\n}\nlong long Ans(int a,int b){\n  int max_rep=min(a,b);\n  long long ans=0;\n  for(int l=1,r;l<=max_rep;l=r+1){\n    r=min(a/(a/l),b/(b/l));\n    ans+=(long long)(a/(l*k))*(long long)(b/(l*k))*(long long)(sum[r]-sum[l-1]);\n  }\n  return ans;\n}\nint T;\nint main()\n{\n \tT=read();\n \tget_mu(N-10);\n \twhile(T--){\n \t\tint a=read(),b=read();k=read();\n \t\tprintf(\"%lld\\n\",Ans(a,b));\n  }\n  return 0;\n}\n```\n\n\n## [P1829 [国家集训队]Crash的数字表格 / JZPTAB](https://www.luogu.org/problemnew/show/P1829)\n\n$\\sum_{i=1}^n\\sum_{j=1}^m lca(i,j)$\n\n### 反演过程：\n\n$\\sum_{i=1}^n\\sum_{j=1}^m\\frac{ij}{gcd(i,j)}$\n\n$\\sum_{d=1}^{min(n,m)}\\sum_{i=1}^n\\sum_{j=1}^m\\frac{ij}{d}[gcd(i,j)=d]$\n\n$\\sum_{d=1}^{min(n,m)}\\frac{1}{d}\\sum_{i=1}^n\\sum_{j=1}^mij[gcd(i,j)=d]$\n\n$\\sum_{d=1}^{min(n,m)}\\frac{1}{d}\\sum_{i=1}^{\\left\\lfloor\\frac{n}{d}\\right\\rfloor}\\sum_{j=1}^{\\left\\lfloor\\frac{m}{d}\\right\\rfloor}ij\\cdot d^2[gcd(i,j)=1]$\n\n$\\sum_{d=1}^{min(n,m)}d\\sum_{i=1}^{\\left\\lfloor\\frac{n}{d}\\right\\rfloor}\\sum_{j=1}^{\\left\\lfloor\\frac{m}{d}\\right\\rfloor}ij[gcd(i,j)=1]$\n\n$\\sum_{d=1}^{min(n,m)}d\\sum_{i=1}^{\\left\\lfloor\\frac{n}{d}\\right\\rfloor}\\sum_{j=1}^{\\left\\lfloor\\frac{m}{d}\\right\\rfloor}ijϵ(gcd(i,j))$\n\n$\\sum_{d=1}^{min(n,m)}d\\sum_{i=1}^{\\left\\lfloor\\frac{n}{d}\\right\\rfloor}\\sum_{j=1}^{\\left\\lfloor\\frac{m}{d}\\right\\rfloor}ij\\sum_{k|gcd(i,j)}\\mu(k)$\n\n$\\sum_{d=1}^{min(n,m)}d\\sum_{k=1}^{\\left\\lfloor\\frac{min(n,m)}{d}\\right\\rfloor}\\mu(k)\\sum_{i=1}^{\\left\\lfloor\\frac{n}{d}\\right\\rfloor}\\sum_{j=1}^{\\left\\lfloor\\frac{m}{d}\\right\\rfloor}ij[k|gcd(i,j)]$\n\n$\\sum_{d=1}^{min(n,m)}d\\sum_{k=1}^{\\left\\lfloor\\frac{min(n,m)}{d}\\right\\rfloor}\\mu(k)\\sum_{i=1}^{\\left\\lfloor\\frac{n}{dk}\\right\\rfloor}\\sum_{j=1}^{\\left\\lfloor\\frac{m}{dk}\\right\\rfloor}ij\\cdot k^2$\n\n$\\sum_{d=1}^{min(n,m)}d\\sum_{k=1}^{\\left\\lfloor\\frac{min(n,m)}{d}\\right\\rfloor}\\mu(k)\\cdot k^2\\sum_{i=1}^{\\left\\lfloor\\frac{n}{dk}\\right\\rfloor}\\sum_{j=1}^{\\left\\lfloor\\frac{m}{dk}\\right\\rfloor}ij$\n\n$\\begin{aligned}F(n,m)=&\\sum_{k=1}^{\\frac{min(n,m)}{d}}\\mu(k)\\cdot k^2\\sum_{i=1}^{\\left\\lfloor\\frac{n}{k}\\right\\rfloor}\\sum_{j=1}^{\\left\\lfloor\\frac{m}{k}\\right\\rfloor}ij\\\\=&\\sum_{k=1}^{\\frac{min(n,m)}{d}}\\mu(k)\\cdot k^2\\cdot\\frac{\\left\\lfloor\\frac{n}{k}\\right\\rfloor\\cdot(\\left\\lfloor\\frac{n}{k}\\right\\rfloor+1)}{2}\\times\\frac{\\left\\lfloor\\frac{m}{k}\\right\\rfloor\\cdot(\\left\\lfloor\\frac{m}{k}\\right\\rfloor+1)}{2} \\end{aligned}$\n\n$\\sum_{d=1}^{min(n,m)}d\\times F\\left(\\left\\lfloor\\frac{n}{k}\\right\\rfloor,\\left\\lfloor\\frac{m}{k}\\right\\rfloor\\right)$\n\n- $\\ \\ \\ \\ \\ \\,$ 感觉很神奇，需要连续提取 $2$ 次公约数，$O(n)$预处理$\\mu$，分块询问$F$,$O(\\sqrt{\\sqrt n})$,答案询问分块，复杂度$O(\\sqrt n)$，嵌套起来总时间复杂度$O(n+n^{\\frac{3}{4}})$，代码比较丑\n\n### 代码\n\n``` cpp\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#include<cstdlib>\n#include<cstring>\n#include<string>\n#include<queue>\n#include<cmath>\nusing namespace std;\nconst int inf=0x7fffffff;\nconst double eps=1e-10;\nconst double pi=acos(-1.0);\ninline int read(){\n    int x=0,f=1;char ch;ch=getchar();\n    while(ch<'0'||ch>'9'){if(ch=='-') f=-1;ch=getchar();}\n    while(ch>='0'&&ch<='9'){x=x*10+ch-'0';ch=getchar();}\n    return x*f;\n}\nconst int N=10010000;\nconst long long mod=20101009;\nlong long sum[N];\nbool vis[N];\nint prim[N],mu[N];\nvoid get_mu(int n){\n  mu[1]=1;\n  for(int i=2;i<=n;i++){\n    if(!vis[i]){mu[i]=-1;prim[++prim[0]]=i;}\n    for(int j=1;j<=prim[0]&&i*prim[j]<=n;j++){\n      vis[i*prim[j]]=1;\n      if(i%prim[j]==0)break;\n      else mu[i*prim[j]]=-mu[i];\n    }\n  }\n  for(int i=1;i<=n;i++)\n  sum[i]=(sum[i-1]+1ll*mu[i]*1ll*i%mod*1ll*i%mod)%mod;\n}\nint main()\n{\n \tint n=read(),m=read();\n \tif(n>m)swap(n,m);\n  get_mu(n);\n  long long ans=0;\n  long long inv2=(mod+1ll)/2ll;\n  for(int d=1;d<=n;d++){\n    int x=n/d,y=m/d,minn=min(x,y);\n    long long Sum=0ll;\n    for(int l=1,r;l<=minn;l=r+1ll){\n    \tr=min(x/(x/l),y/(y/l));\n      Sum=(Sum+(sum[r]-sum[l-1])%mod*(((1ll+x/l)%mod*1ll*(x/l)%mod*inv2%mod)%mod)%mod*(((1ll+y/l)%mod*1ll*(y/l)%mod*inv2%mod)%mod)%mod)%mod;\n    }\n    ans=(ans+Sum*1ll*d)%mod;\n  }\n \tprintf(\"%lld\\n\",(ans%mod+mod)%mod);\n  return 0;\n}\n```\n- 扩展：这个题其实是两道题的融合，上面的方法是过不了JZPTAB的，在bzoj上面是权限题，所以先挖坑，我们下面继续来化简：\n\n$\\sum_{d=1}^{min(n,m)}d\\sum_{k=1}^{\\left\\lfloor\\frac{min(n,m)}{d}\\right\\rfloor}\\mu(k)\\cdot k^2\\sum_{i=1}^{\\left\\lfloor\\frac{n}{dk}\\right\\rfloor}\\sum_{j=1}^{\\left\\lfloor\\frac{m}{dk}\\right\\rfloor}ij$\n\n$\\sum_{d=1}^{min(n,m)}\\sum_{k=1}^{\\left\\lfloor\\frac{min(n,m)}{d}\\right\\rfloor}d\\cdot \\mu(k)\\cdot k^2\\sum_{i=1}^{\\left\\lfloor\\frac{n}{dk}\\right\\rfloor}\\sum_{j=1}^{\\left\\lfloor\\frac{m}{dk}\\right\\rfloor}ij$\n\n$\\sum_{T=1}^{min(n,m)}\\sum_{i=1}^{\\left\\lfloor\\frac{n}{T}\\right\\rfloor}\\sum_{j=1}^{\\left\\lfloor\\frac{m}{T}\\right\\rfloor}ij\\sum_{d|T}\\frac{T}{d}\\cdot \\mu(d)\\cdot d^2$\n\n$\\sum_{T=1}^{min(n,m)}\\sum_{i=1}^{\\left\\lfloor\\frac{n}{T}\\right\\rfloor}\\sum_{j=1}^{\\left\\lfloor\\frac{m}{T}\\right\\rfloor}ij\\sum_{d|T}T \\mu(d) d$\n\n$F(T)=\\sum_{d|T}T \\mu(d) d$\n\n$\\sum_{T=1}^{min(n,m)}\\frac{\\left\\lfloor\\frac{n}{T}\\right\\rfloor\\cdot(\\left\\lfloor\\frac{n}{T}\\right\\rfloor+1)}{2}\\times\\frac{\\left\\lfloor\\frac{m}{T}\\right\\rfloor\\cdot(\\left\\lfloor\\frac{m}{T}\\right\\rfloor+1)}{2}\\times F(T)$\n\n- $\\ \\ \\ \\ \\ \\,$ 显然，$F$是积性函数，我们最快可以$O(n)$地把他筛出来，具体操作可以看[【积性函数的线性筛】](https://www.luogu.org/blog/Althen-Way-Satan/xian-xing-shai)，欧拉筛三步走，询问分块，复杂度$O(\\sqrt n)$,总时间复杂度$O(n+T\\sqrt n)$\n\n  $\\tt step1$. 如果$p$是素数：\n  $f(p)=p-p^2$\n\n  $\\tt step2$. 如果$p$是素数，$i\\%p\\neq0$：$f(pi)=f(i)\\times (p-p^2)$\n\n  $\\tt step3$. 如果$p$是素数，$i\\%p=0$：我们把 $pi$ 分解成 $p^cx$ ：\n  $f(pi)=f(p^cx)=f(x)\\times(p^c-p^{c+1})$\n\n \n  ### 代码\n``` cpp\n#include<algorithm>\n#include<iostream>\n#include<cstdlib>\n#include<cstring>\n#include<cctype>\n#include<cstdio>\n#include<vector>\n#include<string>\n#include<queue>\n#include<stack>\n#include<cmath>\n#include<map>\n#include<set>\nusing namespace std;\nconst int inf=0x7fffffff;\nconst double eps=1e-10;\nconst double pi=acos(-1.0);\n//char buf[1<<15],*S=buf,*T=buf;\n//char getch(){return S==T&&(T=(S=buf)+fread(buf,1,1<<15,stdin),S==T)?0:*S++;}\ninline int read(){\n\tint x=0,f=1;char ch;ch=getchar();\n\twhile(ch<'0'||ch>'9'){if(ch=='-') f=0;ch=getchar();}\n\twhile(ch>='0'&&ch<='9'){x=(x<<1)+(x<<3)+(ch&15);ch=getchar();}\n\tif(f)return x;else return -x;\n}\nconst int N=1e7+10;\nconst long long mod=20101009;\nlong long inv2=(mod+1ll)/2ll;\nbool vis[N];\nlong long pri[N],cnt[N],power[N];\nlong long prime[N],f[N];\nvoid Get_Shai(long long n){\n  f[1]=1;\n  for(long long i=1;i<=n;i++)power[i]=1;\n  for(long long i=2;i<=n;i++){\n    if(!vis[i]){\n      cnt[i]=1;pri[i]=i;power[i]=i;\n      prime[++prime[0]]=i;\n      f[i]=(1ll*i-1ll*i*i%mod+mod)%mod;\n    }\n    for(long long j=1,v,pc;j<=prime[0]&&i*prime[j]<=n;j++){\n      v=i*prime[j];\n      vis[v]=1;\n      if(i%prime[j]==0){\n        cnt[v]=cnt[i]+1;pri[v]=pri[i];power[v]=(1ll*power[i]*pri[i])%mod;\n        f[v]=f[v/power[v]]*(1ll*power[v]-1ll*power[v]*pri[i]%mod+mod)%mod;\n        break;\n      }\n      cnt[v]=1;pri[v]=prime[j];power[v]=prime[j];\n      f[v]=(f[i]*f[prime[j]])%mod;\n    }\n  }\n  for(int i=1;i<=n;i++)f[i]=(1ll*f[i]+f[i-1])%mod;\n}\nlong long Get_ans(int x,int y){\n  long long Sum=0;\n  for(int l=1,r;l<=x;l=r+1){\n    r=min(x/(x/l),y/(y/l));\n    Sum=(Sum+(1ll*f[r]-f[l-1]+mod)%mod*(((1ll+x/l)%mod*1ll*(x/l)%mod*inv2%mod)%mod)%mod*(((1ll+y/l)%mod*1ll*(y/l)%mod*inv2%mod)%mod)%mod)%mod;\n  }\n  return Sum;\n}\nint main()\n{\n\tint n=read(),m=read();\n\tif(n>m)swap(n,m);\n  Get_Shai(1ll*n);\n  printf(\"%lld\\n\",(Get_ans(n,m)%mod+mod)%mod);\n\treturn 0;\n}\n\n```\n- 再扩展，这道题还可以用杜教筛加速的，具体[戳这里](https://blog.csdn.net/VictoryCzt/article/details/85054670?tdsourcetag=s_pctim_aiomsg)，感觉和这道题差不多[P3768](https://www.luogu.org/problemnew/show/P3768)，就不贴了。\n\n\n## [P3768 简单的数学题](https://www.luogu.org/problemnew/show/P3768)\n\n$\\sum_{i=1}^n\\sum_{j=1}^nijgcd(i,j)$\n\n### 反演过程：\n\n$\\sum_{d=1}^{n}\\sum_{i=1}^n\\sum_{j=1}^nijd[gcd(i,j)=d]$\n\n$\\sum_{d=1}^{n}d\\sum_{i=1}^n\\sum_{j=1}^nij[gcd(i,j)=d]$\n\n$\\sum_{d=1}^{n}{d}\\sum_{i=1}^{\\left\\lfloor\\frac{n}{d}\\right\\rfloor}\\sum_{j=1}^{\\left\\lfloor\\frac{n}{d}\\right\\rfloor}ij\\cdot d^2[gcd(i,j)=1]$\n\n$\\sum_{d=1}^{n}{d^3}\\sum_{i=1}^{\\left\\lfloor\\frac{n}{d}\\right\\rfloor}\\sum_{j=1}^{\\left\\lfloor\\frac{n}{d}\\right\\rfloor}ij[gcd(i,j)=1]$\n\n$\\sum_{d=1}^{n}d^3\\sum_{i=1}^{\\left\\lfloor\\frac{n}{d}\\right\\rfloor}\\sum_{j=1}^{\\left\\lfloor\\frac{n}{d}\\right\\rfloor}ijϵ(gcd(i,j))$\n\n$\\sum_{d=1}^{n}d^3\\sum_{i=1}^{\\left\\lfloor\\frac{n}{d}\\right\\rfloor}\\sum_{j=1}^{\\left\\lfloor\\frac{n}{d}\\right\\rfloor}ij\\sum_{k|gcd(i,j)}\\mu(k)$\n\n$\\sum_{d=1}^{n}d^3\\sum_{k=1}^{\\left\\lfloor\\frac{n}{d}\\right\\rfloor}\\mu(k)\\sum_{i=1}^{\\left\\lfloor\\frac{n}{d}\\right\\rfloor}\\sum_{j=1}^{\\left\\lfloor\\frac{n}{d}\\right\\rfloor}ij[k|gcd(i,j)]$\n\n$\\sum_{d=1}^{n}d^3\\sum_{k=1}^{\\left\\lfloor\\frac{n}{d}\\right\\rfloor}\\mu(k)\\sum_{i=1}^{\\left\\lfloor\\frac{n}{dk}\\right\\rfloor}\\sum_{j=1}^{\\left\\lfloor\\frac{m}{dk}\\right\\rfloor}ij\\cdot k^2$\n\n$\\sum_{d=1}^{n}d^3\\sum_{k=1}^{\\left\\lfloor\\frac{n}{d}\\right\\rfloor}\\mu(k)\\cdot k^2\\sum_{i=1}^{\\left\\lfloor\\frac{n}{dk}\\right\\rfloor}\\sum_{j=1}^{\\left\\lfloor\\frac{m}{dk}\\right\\rfloor}ij$\n\n$\\sum_{T=1}^{n}\\sum_{i=1}^{\\left\\lfloor\\frac{n}{T}\\right\\rfloor}\\sum_{j=1}^{\\left\\lfloor\\frac{n}{T}\\right\\rfloor}ij\\sum_{d|T}d^3\\cdot \\mu\\left(\\frac{T}{d}\\right)\\cdot \\left(\\frac{T}{d}\\right)^2$\n\n$\\sum_{T=1}^{n}\\sum_{i=1}^{\\left\\lfloor\\frac{n}{T}\\right\\rfloor}\\sum_{j=1}^{\\left\\lfloor\\frac{n}{T}\\right\\rfloor}ij\\sum_{d|T}T^2\\cdot d\\cdot \\mu\\left(\\frac{T}{d}\\right)$\n\n$\\sum_{T=1}^{n}\\sum_{i=1}^{\\left\\lfloor\\frac{n}{T}\\right\\rfloor}\\sum_{j=1}^{\\left\\lfloor\\frac{n}{T}\\right\\rfloor}ijT^2\\sum_{d|T}d\\cdot \\mu\\left(\\frac{T}{d}\\right)$\n\n$\\sum_{T=1}^{n}\\sum_{i=1}^{\\left\\lfloor\\frac{n}{T}\\right\\rfloor}\\sum_{j=1}^{\\left\\lfloor\\frac{n}{T}\\right\\rfloor}ijT^2(id*\\mu)(T)$\n\n$\\sum_{T=1}^{n}\\sum_{i=1}^{\\left\\lfloor\\frac{n}{T}\\right\\rfloor}\\sum_{j=1}^{\\left\\lfloor\\frac{n}{T}\\right\\rfloor}ijT^2\\varphi(T)$\n\n$\\sum_{T=1}^{n}\\frac{\\left\\lfloor\\frac{n}{T}\\right\\rfloor\\cdot(\\left\\lfloor\\frac{n}{T}\\right\\rfloor+1)}{2}\\times\\frac{\\left\\lfloor\\frac{m}{T}\\right\\rfloor\\cdot(\\left\\lfloor\\frac{m}{T}\\right\\rfloor+1)}{2}\\times T^2\\varphi(T)$\n\n- $\\ \\ \\ \\ \\ \\,$ 需要连续提取 $2$ 次公约数，和[P1829](https://www.luogu.org/problemnew/show/P1829)有异曲同工之妙，杜教筛筛出 $T^2\\varphi(T)$ 的前缀和，分块询问答案询问，总时间复杂度$O(n^{\\frac{2}{3}})$，杜教筛详见[【莫比乌斯反演和杜教筛】](https://www.luogu.org/blog/Althen-Way-Satan/mu-bi-wu-si-fan-yan-yu-du-jiao-shai)\n\n  $f(x)=x^2\\varphi(x)$\n  \n  $g(x)=x^2\\ \\ \\ ,\\sum_{i=1}^{x}g(i)=\\frac{x(x+1)(2x+1)}{6}$\n\n  $(f*g)(x)=x^3\\ \\ \\ ,\\sum_{i=1}^{x}(f*g)(i)=\\frac{x^2(x+1)^2}{4}$\n  \n\n \n  ### 代码\n``` cpp\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#include<cstdlib>\n#include<cstring>\n#include<string>\n#include<map>\n#include<stack>\nusing namespace std;\ninline long long read(){\n  long long x=0,f=1;char ch;ch=getchar();\n  while(ch<'0'||ch>'9'){if(ch=='-') f=0;ch=getchar();}\n  while(ch>='0'&&ch<='9'){x=(x<<1)+(x<<3)+(ch&15);ch=getchar();}\n  if(f)return x;else return -x;\n}\nconst int N=8000010;\nlong long mod,n,inv6,inv4;\nint prim[N];\nlong long f[N];\nbool vis[N];\nvoid get_f(int n){\n  f[1]=1;\n  for(int i=2;i<=n;i++){\n    if(!vis[i]){f[i]=i-1;prim[++prim[0]]=i;}\n    for(int j=1;j<=prim[0]&&i*prim[j]<=n;j++){\n      vis[i*prim[j]]=1;\n      if(i%prim[j]==0){f[i*prim[j]]=f[i]*prim[j];break;}\n      else f[i*prim[j]]=f[i]*(prim[j]-1);\n    }\n  }\n  for(int i=1;i<=n;++i)f[i]=(f[i-1]+1ll*f[i]*i%mod*i%mod)%mod;\n}\nmap<long long,long long> mp;\nlong long power(long long a,long long b){\n  long long ans=1;\n  while(b){if(b&1)ans=ans*a%mod;a=a*a%mod;b>>=1;}\n  return ans;\n}\nlong long Sumfg(long long x){x%=mod;return x*(x+1)%mod*x%mod*(x+1)%mod*inv4%mod;}\nlong long Sumg(long long x){x%=mod;return x*(x+1)%mod*(x+x+1)%mod*inv6%mod;}\nlong long Sumf(long long x){\n  if(x<=min(N-10,(int)n))return f[x];\n  if(mp[x])return mp[x];\n  long long ret=Sumfg(x);\n  for(long long i=2,j;i<=x;i=j+1){\n  \tj=x/(x/i);\n  \tret=(ret-(Sumg(j)-Sumg(i-1)+mod)%mod*Sumf(x/i)%mod+mod)%mod;\n  }\n  return mp[x]=(ret+mod)%mod;\n}\nint main()\n{\n  mod=read();n=read();\n  inv4=power(4,mod-2);\n  inv6=power(6,mod-2);\n  get_f(min(N-10,(int)n));\n  long long ans=0;\n  for(long long i=1,j;i<=n;i=j+1){\n    j=n/(n/i);\n    ans=(ans+(Sumf(j)-Sumf(i-1))%mod*Sumfg(n/i)%mod)%mod;\n  }\n  printf(\"%lld\\n\",(ans+mod)%mod);\n  return 0;\n}\n\n```\n\n## [P4240 毒瘤之神的考验](https://www.luogu.org/problemnew/show/P4240)\n\n$\\sum_{i=1}^n\\sum_{j=1}^m\\varphi(ij)$\n\n### 反演过程：\n\n$\\sum_{i=1}^n\\sum_{j=1}^m\\frac{\\varphi(i)\\varphi(j)gcd(i,j)}{\\varphi(gcd(i,j))}$\n\n$\\sum_{d=1}^{min(n,m)}\\sum_{i=1}^n\\sum_{j=1}^m\\frac{\\varphi(i)\\varphi(j)d}{\\varphi(d)}[gcd(i,j)=d]$\n\n$\\sum_{d=1}^{min(n,m)}\\frac{d}{\\varphi(d)}\\sum_{i=1}^n\\sum_{j=1}^m\\varphi(i)\\varphi(j)[gcd(i,j)=d]$\n\n$\\sum_{d=1}^{min(n,m)}\\frac{d}{\\varphi(d)}\\sum_{i=1}^{\\left\\lfloor\\frac{n}{d}\\right\\rfloor}\\sum_{j=1}^{\\left\\lfloor\\frac{m}{d}\\right\\rfloor}\\varphi(di)\\varphi(dj)[gcd(i,j)=1]$\n\n$\\sum_{d=1}^{min(n,m)}\\frac{d}{\\varphi(d)}\\sum_{i=1}^{\\left\\lfloor\\frac{n}{d}\\right\\rfloor}\\sum_{j=1}^{\\left\\lfloor\\frac{m}{d}\\right\\rfloor}\\varphi(di)\\varphi(dj)ϵ(gcd(i,j))$\n\n$\\sum_{d=1}^{min(n,m)}\\frac{d}{\\varphi(d)}\\sum_{i=1}^{\\left\\lfloor\\frac{n}{d}\\right\\rfloor}\\sum_{j=1}^{\\left\\lfloor\\frac{m}{d}\\right\\rfloor}\\varphi(di)\\varphi(dj)\\sum_{k|gcd(i,j)}\\mu(k)$\n\n$\\sum_{d=1}^{min(n,m)}\\frac{d}{\\varphi(d)}\\sum_{k=1}^{\\left\\lfloor\\frac{min(n,m)}{dk}\\right\\rfloor}\\mu(k)\\sum_{i=1}^{\\left\\lfloor\\frac{n}{d}\\right\\rfloor}\\sum_{j=1}^{\\left\\lfloor\\frac{m}{d}\\right\\rfloor}\\varphi(di)\\varphi(dj)[k|gcd(i,j)]$\n\n$\\sum_{d=1}^{min(n,m)}\\frac{d}{\\varphi(d)}\\sum_{k=1}^{\\left\\lfloor\\frac{min(n,m)}{dk}\\right\\rfloor}\\mu(k)\\sum_{i=1}^{\\left\\lfloor\\frac{n}{dk}\\right\\rfloor}\\sum_{j=1}^{\\left\\lfloor\\frac{m}{dk}\\right\\rfloor}\\varphi(dik)\\varphi(djk)$\n\n$\\sum_{T=1}^{min(n,m)}\\sum_{i=1}^{\\left\\lfloor\\frac{n}{T}\\right\\rfloor}\\sum_{j=1}^{\\left\\lfloor\\frac{m}{T}\\right\\rfloor}\\varphi(iT)\\varphi(jT)\\sum_{d|T}\\frac{d}{\\varphi(d)}\\mu(\\frac{T}{d})$\n\n- $\\ \\ \\ \\ \\ \\,$ $O(n)$预处理出$\\mu$,$\\varphi$，$O(n\\log n)$预处理出后面的$\\sum_{d|T}\\frac{d}{\\varphi(d)}\\mu(\\frac{T}{d})$，然后对前面的进行分块操作，会发现要存很多东西，于是我们一边分块，一边操作，总复杂度很玄学，大约是$O(n\\log n+nT^{\\frac{2}{3}}+T(\\sqrt n+\\left\\lfloor\\frac{n}{T^{\\frac{1}{3}}}\\right\\rfloor))$,能过就行了XD,~~(代码加了信仰fread)~~\n\n### 代码\n\n``` cpp\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#include<cstdlib>\n#include<cstring>\n#include<string>\n#include<queue>\n#include<map>\n#include<set>\n#include<stack>\n#include<cmath>\n#include<cctype>\n#include<vector>\nusing namespace std;\nconst int inf=0x7fffffff;\nconst double eps=1e-10;\nconst double pi=acos(-1.0);\nchar buf[1<<15],*S=buf,*TT=buf;\nchar getch(){return S==TT&&(TT=(S=buf)+fread(buf,1,1<<15,stdin),S==TT)?0:*S++;}\ninline int read(){\n  int x=0,f=1;char ch;ch=getch();\n  while(ch<'0'||ch>'9'){if(ch=='-') f=0;ch=getch();}\n  while(ch>='0'&&ch<='9'){x=(x<<1)+(x<<3)+(ch&15);ch=getch();}\n  if(f)return x;else return -x;\n}\nconst int N=100010;\nconst int mod=998244353;\nconst int B=35;\nbool vis[N];\nint prim[N],phi[N],mu[N],inv[N];\nint F[N];\nvector<int> G[N],T[B+1][B+1];\nvoid get_phi_mu_inv(int n){\n  phi[1]=mu[1]=inv[1]=1;\n  for(int i=2;i<=n;i++){\n    if(!vis[i])phi[i]=i-1,mu[i]=-1,prim[++prim[0]]=i;\n    for(int j=1;j<=prim[0]&&i*prim[j]<=n;j++){\n      vis[i*prim[j]]=1;\n      if(i%prim[j]==0){phi[i*prim[j]]=phi[i]*prim[j];break;}\n      else phi[i*prim[j]]=phi[i]*(prim[j]-1),mu[i*prim[j]]=-mu[i];\n    }\n    inv[i]=1ll*(mod-mod/i)*inv[mod%i]%mod;\n  }\n}\nvoid init(int n){\n  for(int i=1;i<=n;i++)\n  for(int j=i;j<=n;j+=i)\n  F[j]=(F[j]+(1ll*mu[j/i]*i*inv[phi[i]]%mod+mod)%mod)%mod;\n  for(int i=1;i<=n;i++){\n    G[i].push_back(0);\n    for(int j=1;j<=n/i;j++)\n    G[i].push_back((G[i][j-1]+phi[i*j])%mod);\n  }\n  for(int j=1;j<=B;j++)\n    for(int k=j;k<=B;k++){\n    int len=n/max(j,k);\n    T[j][k].push_back(0);\n    for(int i=1;i<=len;i++)\n    T[j][k].push_back((T[j][k][i-1]+1ll*F[i]*G[i][j]%mod*G[i][k]%mod)%mod);\n  }\n}\nlong long Solve(int n,int m){\n  long long res=0;\n  int ed=m/B;\n  for(int i=1;i<=ed;i++)\n  res=(res+1ll*F[i]*G[i][n/i]%mod*G[i][m/i]%mod)%mod;\n  for(int l=m/B+1,r,ln,lm;l<=n;l=r+1){\n  \tln=n/l,lm=m/l;\n    r=min(n/ln,m/lm);\n    res=(res+(T[ln][lm][r]-T[ln][lm][l-1]+mod)%mod)%mod;\n  }\n  return res;\n}\nint main()\n{\n  get_phi_mu_inv(100000);init(100000);\n  int t=read();\n  while(t--){\n    int n=read(),m=read();if(n>m)swap(n,m);\n    printf(\"%lld\\n\",Solve(n,m));\n  }\n  return 0;\n}\n\n```\n\n\n## [P1587 [NOI2016]循环之美](https://www.luogu.org/problemnew/show/P1587)\n\n$\\ \\ \\ \\ \\ \\,$对于一个$K$进制下的无限循环小数，在最简形态下，分母一定和$K$互质，所以这道题，就是求:\n$\\sum_{i=1}^n\\sum_{j=1}^m[gcd(i,j)=1][gcd(j,K)=1]$\n\n### 反演过程：\n\n$\\sum_{j=1}^m[gcd(j,K)=1]\\sum_{i=1}^n[gcd(i,j)=1]$\n\n$\\sum_{j=1}^m[gcd(j,K)=1]\\sum_{i=1}^nϵ(gcd(i,j))$\n\n$\\sum_{j=1}^m[gcd(j,K)=1]\\sum_{i=1}^n\\sum_{k|gcd(i,j)}\\mu(k)$\n\n$\\sum_{k=1}^{min(n,m)}\\mu(k)\\sum_{i=1}^{\\left\\lfloor\\frac{n}{k}\\right\\rfloor}\\sum_{j=1}^{\\left\\lfloor\\frac{m}{k}\\right\\rfloor}[gcd(jk,K)=1]$\n\n$\\sum_{k=1}^{min(n,m)}\\mu(k)[gcd(k,K)=1]\\sum_{i=1}^{\\left\\lfloor\\frac{n}{k}\\right\\rfloor}\\sum_{j=1}^{\\left\\lfloor\\frac{m}{k}\\right\\rfloor}[gcd(j,K)=1]$\n\n$\\sum_{k=1}^{min(n,m)}\\mu(k)[gcd(k,K)=1]\\sum_{j=1}^{\\left\\lfloor\\frac{m}{k}\\right\\rfloor}[gcd(j,K)=1]\\sum_{i=1}^{\\left\\lfloor\\frac{n}{k}\\right\\rfloor}$\n\n$\\sum_{k=1}^{min(n,m)}\\mu(k)[gcd(k,K)=1]\\sum_{j=1}^{\\left\\lfloor\\frac{m}{k}\\right\\rfloor}[gcd(j,K)=1]{\\left\\lfloor\\frac{n}{k}\\right\\rfloor}$\n\n$f(x,K)=\\sum_{i=1}^{x}\\mu(i)[gcd(i,K)=1]$\n\n$s(x)=\\sum_{i=1}^{x}[gcd(i,K)=1]$\n\n$\\sum_{k=1}^{min(n,m)}\\mu(k)[gcd(k,K)=1]{\\left\\lfloor\\frac{n}{k}\\right\\rfloor}s\\left(\\left\\lfloor\\frac{m}{k}\\right\\rfloor\\right)$\n\n$\\ \\ \\ \\ \\ \\,$然而还没有完，我们求出$f$和$s$，也就是方便分块操作，现在我们得化简它们:\n\n- $s(x)$\n  $s(x)=\\sum_{i=1}^{x}[gcd(i,K)=1]$\n  因为若是 $gcd(a,K)=1$，那么就有 $gcd(a+bk,K)=1$。\n  所以有：\n  $s(x)=\\left\\lfloor\\frac{x}{k}\\right\\rfloor s(k)+s(x\\%k)$\n  所以只需要暴力求出$k$以内的$s$就可以了。\n  \n- $f(x,K)$\n\n  $\\sum_{i=1}^{x}\\mu(i)[gcd(i,K)=1]$\n  \n  $\\sum_{i=1}^{x}\\mu(i)ϵ(gcd(i,K))$\n  \n  $\\sum_{i=1}^{x}\\mu(i)\\sum_{d|gcd(i,K)}\\mu(d)$\n\n  $\\sum_{d=1}^{min(x,K)}\\mu(d)\\sum_{i=1}^x\\mu(i)[d|gcd(i,K)]$\n  \n  $\\sum_{d=1}^{min(x,K)}\\mu(d)\\sum_{i=1}^{\\left\\lfloor\\frac{x}{d}\\right\\rfloor}\\mu(id)[d|gcd(id,K)]$\n  \n  $\\sum_{d=1}^{min(x,K)}\\mu(d)\\sum_{i=1}^{\\left\\lfloor\\frac{x}{d}\\right\\rfloor}\\mu(id)[d|K]$\n\n  $\\sum_{d|K}\\mu(d)\\sum_{i=1}^{\\left\\lfloor\\frac{x}{d}\\right\\rfloor}\\mu(id)$\n  \n  $\\sum_{d|K}\\mu(d)\\sum_{i=1,gcd(i,d)=1}^{\\left\\lfloor\\frac{x}{d}\\right\\rfloor}\\mu(d)\\mu(i)$\n  \n  $\\sum_{d|K}\\mu(d)^2\\sum_{i=1,gcd(i,d)=1}^{\\left\\lfloor\\frac{x}{d}\\right\\rfloor}\\mu(i)$\n  \n  $\\sum_{d|K}\\mu(d)^2\\sum_{i=1}^{\\left\\lfloor\\frac{x}{d}\\right\\rfloor}\\mu(i)[gcd(i,d)=1]$\n  \n  $\\sum_{d|K}\\mu(d)^2f\\left({\\left\\lfloor\\frac{x}{d}\\right\\rfloor},d\\right)$\n\n  这个怎么办啊？每次递归求解，但是当$K=1$的时候，就没有办法了，我们试一试化一下$K=1$的情况:\n  \n  $\\sum_{i=1}^{x}\\mu(i)[gcd(i,1)=1]$\n  \n  $\\sum_{i=1}^{x}\\mu(i)$\n  \n  一个杜教筛就完了。\n  \n  复杂度大概是$O(n^{\\frac{2}{3}})$\n  \n- 感觉题目还是比较难的，反正我一开始是没有想出来，翻了题解，主要是对于$s$的处理，有多加一维描述，还有递归处理，程序的最终复杂度呢，大概就在$O(n^{\\frac{2}{3}})$的样子\n\n### 代码\n\n``` cpp\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#include<cstdlib>\n#include<cstring>\n#include<string>\n#include<queue>\n#include<map>\n#include<set>\n#include<stack>\n#include<cmath>\n#include<cctype>\nusing namespace std;\nconst int inf=0x7fffffff;\nconst double eps=1e-10;\nconst double pi=acos(-1.0);\n//char buf[1<<15],*S=buf,*T=buf;\n//char getch(){return S==T&&(T=(S=buf)+fread(buf,1,1<<15,stdin),S==T)?0:*S++;}\ninline int read(){\n  int x=0,f=1;char ch;ch=getchar();\n  while(ch<'0'||ch>'9'){if(ch=='-') f=0;ch=getchar();}\n  while(ch>='0'&&ch<='9'){x=(x<<1)+(x<<3)+(ch&15);ch=getchar();}\n  if(f)return x;else return -x;\n}\nconst int N=10000010;\nint n,K,m;\nint pr[2010];\nbool vis[N];\nint prim[N],mu[N],Sum_mu[N];\nmap<pair<int,int>,int> used;\nint gcd(int a,int b){return b?gcd(b,a%b):a;}\nvoid init(){\n  for(int i=1;i<=K;i++)pr[i]=pr[i-1]+(gcd(i,K)==1);\n  mu[1]=1;\n  for(int i=2;i<N;i++){\n    if(!vis[i]){mu[i]=-1;prim[++prim[0]]=i;}\n    for(int j=1;j<=prim[0];j++){\n      if(i*prim[j]>=N) break;\n      vis[i*prim[j]]=1;\n      if(i%prim[j]==0){mu[i*prim[j]]=0;break;}\n      mu[i*prim[j]]=-mu[i];\n    }\n  }\n  for(int i=1;i<N;i++)Sum_mu[i]=Sum_mu[i-1]+mu[i];\n}\nint s(int x){return pr[x%K]+1ll*(x/K)*pr[K];}\nint f(int x,int k){\n  if(!k||!x)return 0;\n  if(k==1&&x<N)return Sum_mu[x];\n  if(used[make_pair(x,k)])return used[make_pair(x,k)];\n  if(k==1){\n  \tint ret=1;\n    for(int l=2,r;l<=x;l=r+1)\n    r=x/(x/l),ret-=(r-l+1)*f(x/l,1);\n  \treturn used[make_pair(x,k)]=ret;\n  }\n  int ret=0;\n  for(int i=1;i*i<=k;i++)if(k%i==0){\n    if(mu[i])ret+=f(x/i,i);\n    if(i*i!=k&&mu[k/i])\n    ret+=f(x/(k/i),k/i);\n  }\n  return used[make_pair(x,k)]=ret;\n}\nint main()\n{\n  n=read();m=read();K=read();\n  init();\n  long long ans=0;\n  for(int l=1,r;l<=min(n,m);l=r+1){\n    r=min(n/(n/l),m/(m/l));\n    ans+=1ll*(f(r,K)-f(l-1,K))*(n/l)*s(m/l);\n  }\n  printf(\"%lld\\n\",ans);\n  return 0;\n}\n```","source":"_posts/莫比乌斯反演经典例题回顾.md","raw":"---\ntitle: '莫比乌斯反演经典例题回顾'\ndate: 2018-12-30 11:42:16\ncategories:\n- 题解\ntags:\n- OI\n- 莫比乌斯反演\nmathjax: true\n---\n\n$\\ \\ \\ \\ \\ \\ \\ \\,$莫比乌斯反演经典例题回顾，思考和题解：\n\n<!-- more -->\n\n## [P2522 [HAOI2011]Problem b](https://www.luogu.org/problemnew/show/P2522)\n$\\sum_{i=a}^b\\sum_{j=c}^d[gcd(i,j)=k]$\n\n### 反演过程：\n\n${F(n,m)=\\sum_{i=1}^n\\sum_{j=1}^m[gcd(i,j)=k]}$\n\n$ans=F(a,b)-F(a-1,d)-F(b,c-1)+F(a-1,c-1)$\n\n$F(n,m)=$\n\n$\\sum_{i=1}^{\\left\\lfloor\\frac{n}{k}\\right\\rfloor}\\sum_{j=1}^{\\left\\lfloor\\frac{n}{k}\\right\\rfloor}[gcd(i,j)=1]$\n\n$\\sum_{i=1}^{\\left\\lfloor\\frac{n}{k}\\right\\rfloor}\\sum_{j=1}^{\\left\\lfloor\\frac{n}{k}\\right\\rfloor}ϵ(gcd(i,j)=1)$\n\n$\\sum_{d=1}^{\\left\\lfloor\\frac{min(n,m)}{k}\\right\\rfloor}\\sum_{d|T}\\mu(d){\\left\\lfloor\\frac{n}{T}\\right\\rfloor}{\\left\\lfloor\\frac{m}{T}\\right\\rfloor}$\n\n$\\sum_{d=1}^{\\left\\lfloor\\frac{min(n,m)}{k}\\right\\rfloor}\\mu(d){\\left\\lfloor\\frac{n}{kd}\\right\\rfloor}{\\left\\lfloor\\frac{m}{kd}\\right\\rfloor}$\n\n- $\\ \\ \\ \\ \\ \\,$ $O(n)$预处理$\\mu$，每次询问分块，复杂度$O(\\sqrt n)$，总复杂度为$O(n+T4\\sqrt n)$\n\n### 代码\n\n``` cpp\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#include<cstdlib>\n#include<cstring>\n#include<string>\n#include<queue>\n#include<cmath>\nusing namespace std;\nconst int inf=0x7fffffff;\nconst double eps=1e-10;\nconst double pi=acos(-1.0);\nconst int N=50010;\ninline int read(){\n  int x=0,f=1;char ch;ch=getchar();\n  while(ch<'0'||ch>'9'){if(ch=='-') f=-1;ch=getchar();}\n  while(ch>='0'&&ch<='9'){x=x*10+ch-'0';ch=getchar();}\n  return x*f;\n}\nbool vis[N];\nint prim[N],mu[N],sum[N],k;\nvoid get_mu(int n){\n  mu[1]=1;\n  for(int i=2;i<=n;i++){\n    if(!vis[i]){mu[i]=-1;prim[++prim[0]]=i;}\n    for(int j=1;j<=prim[0]&&i*prim[j]<=n;j++){\n      vis[i*prim[j]]=1;\n      if(i%prim[j]==0)break;\n      else mu[i*prim[j]]=-mu[i];\n    }\n  }\n  for(int i=1;i<=n;i++)\n  sum[i]=sum[i-1]+mu[i];\n}\nlong long Ans(int a,int b){\n    a/=k;b/=k;\n  int max_rep=min(a,b);\n  long long ans=0;\n  for(int l=1,r;l<=max_rep;l=r+1){\n    r=min(a/(a/l),b/(b/l));\n    ans+=(long long)(a/l)*(long long)(b/l)*(long long)(sum[r]-sum[l-1]);\n  }\n  return ans;\n}\nint main()\n{\n \tint T=read();\n \tget_mu(N-10);\n \twhile(T--){\n \t\tint a=read(),b=read(),c=read(),d=read();k=read();\n \t\tprintf(\"%lld\\n\",Ans(b,d)-Ans(b,c-1)-Ans(a-1,d)+Ans(a-1,c-1));\n  }\n  return 0;\n}\n```\n\n\n## [P2257 YY的GCD](https://www.luogu.org/problemnew/show/P2257)\n\n$\\sum_{i=1}^n\\sum_{j=1}^m[gcd(i,j)\\rm\\ \\ is\\ \\ prime]$\n\n### 反演过程：\n\n$\\sum_{p=1,[p\\rm\\ \\ is\\ \\ prime]}\\sum_{i=1}^n\\sum_{j=1}^m[gcd(i,j)=p]$\n\n$\\sum_{p=1,[p\\rm\\ \\ is\\ \\ prime]}\\sum_{i=1}^{\\left\\lfloor\\frac{n}{p}\\right\\rfloor}\\sum_{j=1}^{\\left\\lfloor\\frac{m}{p}\\right\\rfloor}[gcd(i,j)=1]$\n\n$\\sum_{p=1,[p\\rm\\ \\ is\\ \\ prime]}\\sum_{d=1}^{\\left\\lfloor\\frac{min(n,m)}{p}\\right\\rfloor}\\mu(d){\\left\\lfloor\\frac{n}{pd}\\right\\rfloor}{\\left\\lfloor\\frac{m}{pd}\\right\\rfloor}$\n\n$\\sum_{T=1}^{min(n,m)}\\sum_{d|T}\\mu(d){\\left\\lfloor\\frac{n}{T}\\right\\rfloor}{\\left\\lfloor\\frac{m}{T}\\right\\rfloor}\\left[\\frac{T}{d}\\rm\\ \\ is\\ \\ prime\\right]$\n\n$\\sum_{T=1}^{min(n,m)}{\\left\\lfloor\\frac{n}{T}\\right\\rfloor}{\\left\\lfloor\\frac{m}{T}\\right\\rfloor}\\sum_{d|T,\\left[d\\rm\\ \\ is\\ \\ prime\\right]}\\mu\\left(\\frac{T}{d}\\right)$\n\n${F(x)=\\sum_{d|x,\\left[d\\rm\\ \\ is\\ \\ prime\\right]}\\mu\\left(\\frac{x}{d}\\right)}$\n\n${\\sum_{T=1}^{min(n,m)}{\\left\\lfloor\\frac{n}{T}\\right\\rfloor}{\\left\\lfloor\\frac{m}{T}\\right\\rfloor}F(T)}$\n\n- $\\ \\ \\ \\ \\ \\,$ $O(n)$预处理$\\mu$，$O(n\\log{n})$预处理$F$，每次询问分块，复杂度$O(\\sqrt n)$，总复杂度为$O(n\\log n+T\\sqrt n)$\n\n### 代码\n\n``` cpp\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#include<cstdlib>\n#include<cstring>\n#include<string>\n#include<queue>\n#include<cmath>\nusing namespace std;\nconst int inf=0x7fffffff;\nconst double eps=1e-10;\nconst double pi=acos(-1.0);\nconst int N=1e7+10;\ninline int read(){\n    int x=0,f=1;char ch;ch=getchar();\n    while(ch<'0'||ch>'9'){if(ch=='-') f=-1;ch=getchar();}\n    while(ch>='0'&&ch<='9'){x=x*10+ch-'0';ch=getchar();}\n    return x*f;\n}\nbool vis[N];\nint prim[N],mu[N];\nlong long F[N];\nvoid get_mu(int n){\n  mu[1]=1;\n  for(int i=2;i<=n;i++){\n    if(!vis[i]){mu[i]=-1;prim[++prim[0]]=i;}\n    for(int j=1;j<=prim[0]&&i*prim[j]<=n;j++){\n      vis[i*prim[j]]=1;\n      if(i%prim[j]==0)break;\n      else mu[i*prim[j]]=-mu[i];\n    }\n  }\n  for(int i=1;i<=prim[0];i++)\n  for(int j=1;j*prim[i]<=n;j++)F[j*prim[i]]+=(long long)mu[j];\n  for(int i=1;i<=n;i++)F[i]+=F[i-1];\n}\nlong long Ans(int n,int m){\n  int lim=min(n,m);\n  long long ans=0;\n  for(int l=1,r;l<=lim;l=r+1){\n    r=min(n/(n/l),m/(m/l));\n    ans+=(long long)(n/l)*(long long)(m/l)*(F[r]-F[l-1]);\n  }\n  return ans;\n}\nint main()\n{\n  get_mu(N-10);\n  int T=read();\n  while(T--){\n    int n=read(),m=read();\n    printf(\"%lld\\n\",Ans(n,m));\n  }\n  return 0;\n}\n```\n\n\n## [P3312 [SDOI2014]数表](https://www.luogu.org/problemnew/show/P3312)\n\n$\\sum_{i=1}^n\\sum_{j=1}^m\\sum_{k|gcd(i,j)}k\\left[\\sum_{k|gcd(i,j)}k≤a\\right]$\n\n### 反演过程：\n\n$F(x)=\\sum_{i|x}i$\n\n$\\sum_{i=1}^n\\sum_{j=1}^mF(gcd(i,j))[F(gcd(i,j))≤a]$\n\n$\\sum_{d=1}^{min(n,m)}\\sum_{i=1}^n\\sum_{j=1}^mF(d)[gcd(i,j)=d][F(d)≤a]$\n\n$\\sum_{d=1}^{min(n,m)}F(d)[F(d)≤a]\\sum_{i=1}^n\\sum_{j=1}^m[gcd(i,j)=d]$\n\n$\\sum_{d=1}^{min(n,m)}F(d)[F(d)≤a]\\sum_{d'=1}^{\\left\\lfloor\\frac{min(n,m)}{d}\\right\\rfloor}\\mu(d')\\left\\lfloor\\frac{n}{d'd}\\right\\rfloor\\left\\lfloor\\frac{m}{d'd}\\right\\rfloor$\n\n$\\sum_{T=1}^{min(n,m)}\\sum_{d|T}F(d)\\mu\\left(\\frac{T}{d}\\right){\\left\\lfloor\\frac{n}{T}\\right\\rfloor}{\\left\\lfloor\\frac{m}{T}\\right\\rfloor}[F(d)≤a]$\n\n$\\sum_{T=1}^{min(n,m)}{\\left\\lfloor\\frac{n}{T}\\right\\rfloor}{\\left\\lfloor\\frac{m}{T}\\right\\rfloor}\\sum_{d|T}F(d)\\mu\\left(\\frac{T}{d}\\right)[F(d)≤a]$\n\n$f(x)=\\sum_{d|T}F(d)\\mu\\left(\\frac{T}{d}\\right)[F(d)≤a]$\n\n$\\sum_{T=1}^{min(n,m)}{\\left\\lfloor\\frac{n}{T}\\right\\rfloor}{\\left\\lfloor\\frac{m}{T}\\right\\rfloor}f(T)$\n\n- $\\ \\ \\ \\ \\ \\,$ $O(n\\log n)$预处理$F$和$\\mu$，把每次询问的$a$值离线排序，用树状数组维护$f$，花费时间$O(n\\log ^2n)$，询问分块，复杂度$O(\\sqrt n\\log n)$，总时间复杂度$O(n\\log ^2n+T\\sqrt n\\log n)$\n\n### 代码\n\n``` cpp\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#include<cstdlib>\n#include<cstring>\n#include<string>\n#include<cmath>\nusing namespace std;\nconst int inf=0x7fffffff;\nconst double eps=1e-10;\nconst double pi=acos(-1.0);\n//char buf[1<<15],*S=buf,*T=buf;\n//char getch(){return S==T&&(T=(S=buf)+fread(buf,1,1<<15,stdin),S==T)?0:*S++;}\ninline int read(){\n  int x=0,f=1;char ch;ch=getchar();\n  while(ch<'0'||ch>'9'){if(ch=='-') f=0;ch=getchar();}\n  while(ch>='0'&&ch<='9'){x=(x<<1)+(x<<3)+(ch&15);ch=getchar();}\n  if(f)return x;else return -x;\n}\nconst int N=1e5+10;\nconst int Q=2e4+10;\nint sum[N];\nbool vis[N];\nint prim[N],mu[N];\nint S=1;\nstruct Sum{int data,id;}F[N];\nbool operator <(Sum a,Sum b){return a.data<b.data;}\nint ans[Q];\n#define lowbit(x) ((x)&(-x))\nvoid add(int i,int c)\n{for(;i<=N-5;i+=lowbit(i))sum[i]+=c;}\nint query(int i){\n  int ans=0;\n  for(;i;i-=lowbit(i))ans+=sum[i];\n  return ans;\n}\nvoid Add(int i,int data){\n  int ed=((N-5)/i);\n  for(register int j=1;j<=ed;++j)\n  add(i*j,data*mu[j]);\n}\nvoid init(){\n  mu[1]=1;\n  for(register int i=2;i<=N-5;++i){\n    if(!vis[i]){mu[i]=-1;prim[++prim[0]]=i;}\n    for(register int j=1;j<=prim[0]&&i*prim[j]<=N-5;++j){\n      vis[i*prim[j]]=1;\n      if(i%prim[j]==0)break;\n      else mu[i*prim[j]]=-mu[i];\n    }\n  }\n  for(register int i=1;i<=N-5;++i){\n    F[i].id=i;\n    int ed=((N-5)/i);\n    for(register int j=1;j<=ed;++j)\n    F[i*j].data+=i;\n  }\n  sort(F+1,F+1+N-5);\n}\nstruct Query{int n,m,a,id;}q[Q];\ninline bool operator <(const Query &a,const Query &b){return a.a<b.a;}\nint main()\n{\n  int T=read();\n  init();\n  for(register int i=1;i<=T;i++){\n    q[i].n=read();q[i].m=read();q[i].a=read();q[i].id=i;\n    if(q[i].n>q[i].m)swap(q[i].n,q[i].m);\n  }\n  sort(q+1,q+T+1);\n  for(register int i=1;i<=T;i++){\n    int n=q[i].n,m=q[i].m,a=q[i].a,id=q[i].id;\n    while(F[S].data<=a){Add(F[S].id,F[S].data);S++;}\n    for(register int l=1,r;l<=n;l=r+1){\n      r=min(n/(n/l),(m/(m/l)));\n      ans[id]+=(n/l)*(m/l)*(query(r)-query(l-1));\n    }\n  }\n  for(register int i=1;i<=T;i++)printf(\"%d\\n\",ans[i]&0x7fffffff);\n  return 0;\n}\n\n```\n\n\n## [P3704 [SDOI2017]数字表格](https://www.luogu.org/problemnew/show/P3704)\n\n$\\prod_{i=1}^{n}\\prod_{j=1}^{m}f\\left(gcd(i,j)\\right)$\n\n$\\ \\ \\ \\ \\ \\,$ $f$为斐波拉契序列。\n\n### 反演过程：\n\n$\\prod_{i=1}^{min(n,m)}\\prod_{i=1}^{n}\\prod_{j=1}^{m}f(d)\\left[gcd(i,j)=d\\right]$\n\n$\\prod_{d=1}^{min(n,m)}f(d)^{\\sum_{i=1}^n\\sum_{j=1}^{m}\\left[gcd(i,j)=d\\right]}$\n\n$\\prod_{d=1}^{min(n,m)}f(d)^{\\sum_{d'=1}^{\\left\\lfloor\\frac{min(n,m)}{d}\\right\\rfloor}\\mu(d')\\left\\lfloor\\frac{n}{d'd}\\right\\rfloor\\left\\lfloor\\frac{m}{d'd}\\right\\rfloor}$\n\n$\\prod_{d=1}^{min(n,m)}\\prod_{d'=1}^{\\left\\lfloor\\frac{min(n,m)}{d}\\right\\rfloor}f(d)^{\\mu(d')\\left\\lfloor\\frac{n}{d'd}\\right\\rfloor\\left\\lfloor\\frac{m}{d'd}\\right\\rfloor}$\n\n$\\prod_{T=1}^{min(n,m)}\\prod_{d|T}f(d)^{\\mu\\left(\\frac{T}{d}\\right)\\left\\lfloor\\frac{n}{T}\\right\\rfloor\\left\\lfloor\\frac{m}{T}\\right\\rfloor}$\n\n${C(x)=\\prod_{d|T}f(d)^{\\mu\\left(\\frac{T}{d}\\right)}}$\n\n$\\prod_{T=1}^{min(n,m)}C(T)^{\\left\\lfloor\\frac{n}{T}\\right\\rfloor\\left\\lfloor\\frac{m}{T}\\right\\rfloor}$\n\n- $\\ \\ \\ \\ \\ \\,$ $O(n)$预处理$f$和$\\mu$，$O(n\\log{n})$预处理$C$，每次询问分块，复杂度$O(\\sqrt n \\log n)$，总复杂度为$O(n\\log n+T\\sqrt n \\log n)$\n\n### 代码\n\n``` cpp\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#include<cstdlib>\n#include<cstring>\n#include<string>\n#include<queue>\n#include<cmath>\nusing namespace std;\nconst int inf=0x7fffffff;\nconst double eps=1e-10;\nconst double pi=acos(-1.0);\nconst int N=1e6+10;\nconst long long mod=1e9+7;\ninline int read(){\n    int x=0,f=1;char ch;ch=getchar();\n    while(ch<'0'||ch>'9'){if(ch=='-') f=-1;ch=getchar();}\n    while(ch>='0'&&ch<='9'){x=x*10+ch-'0';ch=getchar();}\n    return x*f;\n}\nlong long power(long long a,long long b){  \n  long long ans=1ll;  \n  a=a%mod;\n  while(b!=0){  \n    if(b&1) ans=(ans*a)%mod;\n    b>>=1;a=(a*a)%mod;\n  }  \n  return ans;  \n}\nlong long f[N];\nbool vis[N];\nint prim[N],mu[N],sum[N];\nlong long C[N],g[N];\nvoid get_mu(int n){\n  mu[1]=1;\n  g[1]=C[0]=C[1]=1ll;\n  for(int i=2;i<=n;i++){\n  \tg[i]=power(f[i],mod-2);C[i]=1;\n    if(!vis[i]){mu[i]=-1;prim[++prim[0]]=i;}\n    for(int j=1;j<=prim[0]&&i*prim[j]<=n;j++){\n      vis[i*prim[j]]=1;\n      if(i%prim[j]==0)break;\n      else mu[i*prim[j]]=-mu[i];\n    }\n  }\n  for(int i=1;i<=n;++i){\n    if(!mu[i])continue;\n  \tfor(int j=i;j<=n;j+=i)\n    C[j]=1ll*C[j]*(mu[i]==1?f[j/i]:g[j/i])%mod;\n  }\n  for(int i=2;i<=n;++i)C[i]=1ll*C[i]*C[i-1]%mod;\n}\nint n,m;\nint main()\n{\n  f[1]=f[2]=1ll;\n  for(int i=3;i<=N-10;i++)f[i]=f[i-1]+f[i-2],f[i]%=mod;\n  get_mu(N-10);\n  int T=read();\n  while(T--){\n    n=read();m=read();\n    if(n>m)swap(n,m);\n    long long ans=1ll;\n    for(int i=1,lim=0;i<=n;i=lim+1){\n      lim=min(n/(n/i),m/(m/i));\n      ans=1ll*ans*power(C[lim]*power(C[i-1],mod-2),1ll*(n/i)*(m/i)%(mod-1));\n      ans%=mod;\n    }\n    printf(\"%lld\\n\",ans);\n  }\n  return 0;\n}\n```\n## [P3327 [SDOI2015]约数个数和](https://www.luogu.org/problemnew/show/P3327)\n\n$\\sum_{i=1}^n\\sum_{j=1}^m\\sum_{k|gcd(i,j)}1$\n\n### 反演过程：\n\n$F(x)=\\sum_{i|x}1$\n\n$\\sum_{i=1}^n\\sum_{j=1}^mF(gcd(i,j))$\n\n$\\sum_{d=1}^{min(n,m)}\\sum_{i=1}^n\\sum_{j=1}^mF(d)[gcd(i,j)=d]$\n\n$\\sum_{d=1}^{min(n,m)}F(d)\\sum_{i=1}^n\\sum_{j=1}^m[gcd(i,j)=d]$\n\n$\\sum_{d=1}^{min(n,m)}F(d)\\sum_{d'=1}^{\\left\\lfloor\\frac{min(n,m)}{d}\\right\\rfloor}\\mu(d')\\left\\lfloor\\frac{n}{d'd}\\right\\rfloor\\left\\lfloor\\frac{m}{d'd}\\right\\rfloor$\n\n$\\sum_{T=1}^{min(n,m)}\\sum_{d|T}F(d)\\mu\\left(\\frac{T}{d}\\right){\\left\\lfloor\\frac{n}{T}\\right\\rfloor}{\\left\\lfloor\\frac{m}{T}\\right\\rfloor}$\n\n$\\sum_{T=1}^{min(n,m)}{\\left\\lfloor\\frac{n}{T}\\right\\rfloor}{\\left\\lfloor\\frac{m}{T}\\right\\rfloor}\\sum_{d|T}F(d)\\mu\\left(\\frac{T}{d}\\right)$\n\n$f(x)=\\sum_{d|T}F(d)\\mu\\left(\\frac{T}{d}\\right)$\n\n$\\sum_{T=1}^{min(n,m)}{\\left\\lfloor\\frac{n}{T}\\right\\rfloor}{\\left\\lfloor\\frac{m}{T}\\right\\rfloor}f(T)$\n\n- $\\ \\ \\ \\ \\ \\,$ $O(n\\log n)$预处理$F$，$f$和$\\mu$，询问分块，复杂度$O(\\sqrt n\\log n)$，总时间复杂度$O(n\\log n+T\\sqrt n\\log n)$，和[P3312 [SDOI2014]数表](https://www.luogu.org/problemnew/show/P3312)这道题差不多\n\n### 代码\n\n``` cpp\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#include<cstdlib>\n#include<cstring>\n#include<string>\n#include<queue>\n#include<cmath>\nusing namespace std;\nconst int inf=0x7fffffff;\nconst double eps=1e-10;\nconst double pi=acos(-1.0);\nconst int N=50010;\ninline int read(){\n  int x=0,f=1;char ch;ch=getchar();\n  while(ch<'0'||ch>'9'){if(ch=='-') f=-1;ch=getchar();}\n  while(ch>='0'&&ch<='9'){x=x*10+ch-'0';ch=getchar();}\n  return x*f;\n}\nbool vis[N];\nint prim[N],mu[N],sum[N];\nlong long g[N];\nvoid get_mu(int n){\n  mu[1]=1;\n  for(int i=2;i<=n;i++){\n    if(!vis[i]){mu[i]=-1;prim[++prim[0]]=i;}\n    for(int j=1;j<=prim[0]&&i*prim[j]<=n;j++){\n      vis[i*prim[j]]=1;\n      if(i%prim[j]==0)break;\n      else mu[i*prim[j]]=-mu[i];\n    }\n  }\n  for(int i=1;i<=n;i++)sum[i]=sum[i-1]+mu[i];\n  for(int i=1;i<=n;i++){\n    long long ans=0;\n    for(int l=1,r;l<=i;l=r+1){\n      r=(i/(i/l));\n      ans+=1ll*(r-l+1)*1ll*(i/l);\n    }\n    g[i]=ans;\n  }\n}\nlong long Ans(int n,int m){\n  int max_rep=min(n,m);\n  long long ans=0;\n  for(int l=1,r;l<=max_rep;l=r+1){\n    r=min(n/(n/l),m/(m/l));\n  \tans+=(sum[r]-sum[l-1])*1ll*g[n/l]*1ll*g[m/l];\n  }\n  return ans;\n}\nint main()\n{\n  int T=read();\n \tget_mu(N-10);\n \twhile(T--){\n \t\tint a=read(),b=read();\n \t\tprintf(\"%lld\\n\",Ans(a,b));\n  }\n  return 0;\n}\n\n\n```\n\n\n## [P3455 [POI2007]ZAP-Queries](https://www.luogu.org/problemnew/show/P3455)\n\n$\\sum_{i=1}^a\\sum_{j=1}^b[gcd(i,j)=c]$\n\n\n### 反演过程：\n\n$\\sum_{i=1}^a\\sum_{j=1}^b[gcd(i,j)=1]$\n\n$\\sum_{i=1}^{\\left\\lfloor\\frac{a}{c}\\right\\rfloor}\\sum_{j=1}^{\\left\\lfloor\\frac{b}{c}\\right\\rfloor}ϵ(gcd(i,j))$\n\n$\\sum_{i=1}^{\\left\\lfloor\\frac{a}{c}\\right\\rfloor}\\sum_{j=1}^{\\left\\lfloor\\frac{b}{c}\\right\\rfloor}(\\mu*1)(gcd(i,j))$\n\n$\\sum_{i=1}^{\\left\\lfloor\\frac{a}{c}\\right\\rfloor}\\sum_{j=1}^{\\left\\lfloor\\frac{b}{c}\\right\\rfloor}\\sum_{d|gcd(i,j)}\\mu(d)\\times 1$\n\n$\\sum_{x=1}^{\\left\\lfloor\\frac{min(a,b)}{c}\\right\\rfloor}\\sum_{d|x}\\mu(d){\\left\\lfloor\\frac{a}{xc}\\right\\rfloor}{\\left\\lfloor\\frac{b}{xc}\\right\\rfloor}$\n\n$\\sum_{d=1}^{\\left\\lfloor\\frac{min(a,b)}{c}\\right\\rfloor}\\mu(d){\\left\\lfloor\\frac{a}{dc}\\right\\rfloor}{\\left\\lfloor\\frac{b}{dc}\\right\\rfloor}$\n\n- $\\ \\ \\ \\ \\ \\,$ 裸题啊！模板啊！$O(n)$预处理$\\mu$，询问分块，复杂度$O(\\sqrt n)$，总时间复杂度$O(n+T\\sqrt n)$\n\n### 代码\n\n``` cpp\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#include<cstdlib>\n#include<cstring>\n#include<string>\n#include<queue>\n#include<cmath>\nusing namespace std;\nconst int inf=0x7fffffff;\nconst double eps=1e-10;\nconst double pi=acos(-1.0);\nconst int N=50010;\ninline int read(){\n  int x=0,f=1;char ch;ch=getchar();\n  while(ch<'0'||ch>'9'){if(ch=='-') f=-1;ch=getchar();}\n  while(ch>='0'&&ch<='9'){x=x*10+ch-'0';ch=getchar();}\n  return x*f;\n}\nbool vis[N];\nint prim[N],mu[N],sum[N],k;\nvoid get_mu(int n){\n  mu[1]=1;\n  for(int i=2;i<=n;i++){\n    if(!vis[i]){mu[i]=-1;prim[++prim[0]]=i;}\n    for(int j=1;j<=prim[0]&&i*prim[j]<=n;j++){\n      vis[i*prim[j]]=1;\n      if(i%prim[j]==0)break;\n      else mu[i*prim[j]]=-mu[i];\n    }\n  }\n  for(int i=1;i<=n;i++)\n  sum[i]=sum[i-1]+mu[i];\n}\nlong long Ans(int a,int b){\n  int max_rep=min(a,b);\n  long long ans=0;\n  for(int l=1,r;l<=max_rep;l=r+1){\n    r=min(a/(a/l),b/(b/l));\n    ans+=(long long)(a/(l*k))*(long long)(b/(l*k))*(long long)(sum[r]-sum[l-1]);\n  }\n  return ans;\n}\nint T;\nint main()\n{\n \tT=read();\n \tget_mu(N-10);\n \twhile(T--){\n \t\tint a=read(),b=read();k=read();\n \t\tprintf(\"%lld\\n\",Ans(a,b));\n  }\n  return 0;\n}\n```\n\n\n## [P1829 [国家集训队]Crash的数字表格 / JZPTAB](https://www.luogu.org/problemnew/show/P1829)\n\n$\\sum_{i=1}^n\\sum_{j=1}^m lca(i,j)$\n\n### 反演过程：\n\n$\\sum_{i=1}^n\\sum_{j=1}^m\\frac{ij}{gcd(i,j)}$\n\n$\\sum_{d=1}^{min(n,m)}\\sum_{i=1}^n\\sum_{j=1}^m\\frac{ij}{d}[gcd(i,j)=d]$\n\n$\\sum_{d=1}^{min(n,m)}\\frac{1}{d}\\sum_{i=1}^n\\sum_{j=1}^mij[gcd(i,j)=d]$\n\n$\\sum_{d=1}^{min(n,m)}\\frac{1}{d}\\sum_{i=1}^{\\left\\lfloor\\frac{n}{d}\\right\\rfloor}\\sum_{j=1}^{\\left\\lfloor\\frac{m}{d}\\right\\rfloor}ij\\cdot d^2[gcd(i,j)=1]$\n\n$\\sum_{d=1}^{min(n,m)}d\\sum_{i=1}^{\\left\\lfloor\\frac{n}{d}\\right\\rfloor}\\sum_{j=1}^{\\left\\lfloor\\frac{m}{d}\\right\\rfloor}ij[gcd(i,j)=1]$\n\n$\\sum_{d=1}^{min(n,m)}d\\sum_{i=1}^{\\left\\lfloor\\frac{n}{d}\\right\\rfloor}\\sum_{j=1}^{\\left\\lfloor\\frac{m}{d}\\right\\rfloor}ijϵ(gcd(i,j))$\n\n$\\sum_{d=1}^{min(n,m)}d\\sum_{i=1}^{\\left\\lfloor\\frac{n}{d}\\right\\rfloor}\\sum_{j=1}^{\\left\\lfloor\\frac{m}{d}\\right\\rfloor}ij\\sum_{k|gcd(i,j)}\\mu(k)$\n\n$\\sum_{d=1}^{min(n,m)}d\\sum_{k=1}^{\\left\\lfloor\\frac{min(n,m)}{d}\\right\\rfloor}\\mu(k)\\sum_{i=1}^{\\left\\lfloor\\frac{n}{d}\\right\\rfloor}\\sum_{j=1}^{\\left\\lfloor\\frac{m}{d}\\right\\rfloor}ij[k|gcd(i,j)]$\n\n$\\sum_{d=1}^{min(n,m)}d\\sum_{k=1}^{\\left\\lfloor\\frac{min(n,m)}{d}\\right\\rfloor}\\mu(k)\\sum_{i=1}^{\\left\\lfloor\\frac{n}{dk}\\right\\rfloor}\\sum_{j=1}^{\\left\\lfloor\\frac{m}{dk}\\right\\rfloor}ij\\cdot k^2$\n\n$\\sum_{d=1}^{min(n,m)}d\\sum_{k=1}^{\\left\\lfloor\\frac{min(n,m)}{d}\\right\\rfloor}\\mu(k)\\cdot k^2\\sum_{i=1}^{\\left\\lfloor\\frac{n}{dk}\\right\\rfloor}\\sum_{j=1}^{\\left\\lfloor\\frac{m}{dk}\\right\\rfloor}ij$\n\n$\\begin{aligned}F(n,m)=&\\sum_{k=1}^{\\frac{min(n,m)}{d}}\\mu(k)\\cdot k^2\\sum_{i=1}^{\\left\\lfloor\\frac{n}{k}\\right\\rfloor}\\sum_{j=1}^{\\left\\lfloor\\frac{m}{k}\\right\\rfloor}ij\\\\=&\\sum_{k=1}^{\\frac{min(n,m)}{d}}\\mu(k)\\cdot k^2\\cdot\\frac{\\left\\lfloor\\frac{n}{k}\\right\\rfloor\\cdot(\\left\\lfloor\\frac{n}{k}\\right\\rfloor+1)}{2}\\times\\frac{\\left\\lfloor\\frac{m}{k}\\right\\rfloor\\cdot(\\left\\lfloor\\frac{m}{k}\\right\\rfloor+1)}{2} \\end{aligned}$\n\n$\\sum_{d=1}^{min(n,m)}d\\times F\\left(\\left\\lfloor\\frac{n}{k}\\right\\rfloor,\\left\\lfloor\\frac{m}{k}\\right\\rfloor\\right)$\n\n- $\\ \\ \\ \\ \\ \\,$ 感觉很神奇，需要连续提取 $2$ 次公约数，$O(n)$预处理$\\mu$，分块询问$F$,$O(\\sqrt{\\sqrt n})$,答案询问分块，复杂度$O(\\sqrt n)$，嵌套起来总时间复杂度$O(n+n^{\\frac{3}{4}})$，代码比较丑\n\n### 代码\n\n``` cpp\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#include<cstdlib>\n#include<cstring>\n#include<string>\n#include<queue>\n#include<cmath>\nusing namespace std;\nconst int inf=0x7fffffff;\nconst double eps=1e-10;\nconst double pi=acos(-1.0);\ninline int read(){\n    int x=0,f=1;char ch;ch=getchar();\n    while(ch<'0'||ch>'9'){if(ch=='-') f=-1;ch=getchar();}\n    while(ch>='0'&&ch<='9'){x=x*10+ch-'0';ch=getchar();}\n    return x*f;\n}\nconst int N=10010000;\nconst long long mod=20101009;\nlong long sum[N];\nbool vis[N];\nint prim[N],mu[N];\nvoid get_mu(int n){\n  mu[1]=1;\n  for(int i=2;i<=n;i++){\n    if(!vis[i]){mu[i]=-1;prim[++prim[0]]=i;}\n    for(int j=1;j<=prim[0]&&i*prim[j]<=n;j++){\n      vis[i*prim[j]]=1;\n      if(i%prim[j]==0)break;\n      else mu[i*prim[j]]=-mu[i];\n    }\n  }\n  for(int i=1;i<=n;i++)\n  sum[i]=(sum[i-1]+1ll*mu[i]*1ll*i%mod*1ll*i%mod)%mod;\n}\nint main()\n{\n \tint n=read(),m=read();\n \tif(n>m)swap(n,m);\n  get_mu(n);\n  long long ans=0;\n  long long inv2=(mod+1ll)/2ll;\n  for(int d=1;d<=n;d++){\n    int x=n/d,y=m/d,minn=min(x,y);\n    long long Sum=0ll;\n    for(int l=1,r;l<=minn;l=r+1ll){\n    \tr=min(x/(x/l),y/(y/l));\n      Sum=(Sum+(sum[r]-sum[l-1])%mod*(((1ll+x/l)%mod*1ll*(x/l)%mod*inv2%mod)%mod)%mod*(((1ll+y/l)%mod*1ll*(y/l)%mod*inv2%mod)%mod)%mod)%mod;\n    }\n    ans=(ans+Sum*1ll*d)%mod;\n  }\n \tprintf(\"%lld\\n\",(ans%mod+mod)%mod);\n  return 0;\n}\n```\n- 扩展：这个题其实是两道题的融合，上面的方法是过不了JZPTAB的，在bzoj上面是权限题，所以先挖坑，我们下面继续来化简：\n\n$\\sum_{d=1}^{min(n,m)}d\\sum_{k=1}^{\\left\\lfloor\\frac{min(n,m)}{d}\\right\\rfloor}\\mu(k)\\cdot k^2\\sum_{i=1}^{\\left\\lfloor\\frac{n}{dk}\\right\\rfloor}\\sum_{j=1}^{\\left\\lfloor\\frac{m}{dk}\\right\\rfloor}ij$\n\n$\\sum_{d=1}^{min(n,m)}\\sum_{k=1}^{\\left\\lfloor\\frac{min(n,m)}{d}\\right\\rfloor}d\\cdot \\mu(k)\\cdot k^2\\sum_{i=1}^{\\left\\lfloor\\frac{n}{dk}\\right\\rfloor}\\sum_{j=1}^{\\left\\lfloor\\frac{m}{dk}\\right\\rfloor}ij$\n\n$\\sum_{T=1}^{min(n,m)}\\sum_{i=1}^{\\left\\lfloor\\frac{n}{T}\\right\\rfloor}\\sum_{j=1}^{\\left\\lfloor\\frac{m}{T}\\right\\rfloor}ij\\sum_{d|T}\\frac{T}{d}\\cdot \\mu(d)\\cdot d^2$\n\n$\\sum_{T=1}^{min(n,m)}\\sum_{i=1}^{\\left\\lfloor\\frac{n}{T}\\right\\rfloor}\\sum_{j=1}^{\\left\\lfloor\\frac{m}{T}\\right\\rfloor}ij\\sum_{d|T}T \\mu(d) d$\n\n$F(T)=\\sum_{d|T}T \\mu(d) d$\n\n$\\sum_{T=1}^{min(n,m)}\\frac{\\left\\lfloor\\frac{n}{T}\\right\\rfloor\\cdot(\\left\\lfloor\\frac{n}{T}\\right\\rfloor+1)}{2}\\times\\frac{\\left\\lfloor\\frac{m}{T}\\right\\rfloor\\cdot(\\left\\lfloor\\frac{m}{T}\\right\\rfloor+1)}{2}\\times F(T)$\n\n- $\\ \\ \\ \\ \\ \\,$ 显然，$F$是积性函数，我们最快可以$O(n)$地把他筛出来，具体操作可以看[【积性函数的线性筛】](https://www.luogu.org/blog/Althen-Way-Satan/xian-xing-shai)，欧拉筛三步走，询问分块，复杂度$O(\\sqrt n)$,总时间复杂度$O(n+T\\sqrt n)$\n\n  $\\tt step1$. 如果$p$是素数：\n  $f(p)=p-p^2$\n\n  $\\tt step2$. 如果$p$是素数，$i\\%p\\neq0$：$f(pi)=f(i)\\times (p-p^2)$\n\n  $\\tt step3$. 如果$p$是素数，$i\\%p=0$：我们把 $pi$ 分解成 $p^cx$ ：\n  $f(pi)=f(p^cx)=f(x)\\times(p^c-p^{c+1})$\n\n \n  ### 代码\n``` cpp\n#include<algorithm>\n#include<iostream>\n#include<cstdlib>\n#include<cstring>\n#include<cctype>\n#include<cstdio>\n#include<vector>\n#include<string>\n#include<queue>\n#include<stack>\n#include<cmath>\n#include<map>\n#include<set>\nusing namespace std;\nconst int inf=0x7fffffff;\nconst double eps=1e-10;\nconst double pi=acos(-1.0);\n//char buf[1<<15],*S=buf,*T=buf;\n//char getch(){return S==T&&(T=(S=buf)+fread(buf,1,1<<15,stdin),S==T)?0:*S++;}\ninline int read(){\n\tint x=0,f=1;char ch;ch=getchar();\n\twhile(ch<'0'||ch>'9'){if(ch=='-') f=0;ch=getchar();}\n\twhile(ch>='0'&&ch<='9'){x=(x<<1)+(x<<3)+(ch&15);ch=getchar();}\n\tif(f)return x;else return -x;\n}\nconst int N=1e7+10;\nconst long long mod=20101009;\nlong long inv2=(mod+1ll)/2ll;\nbool vis[N];\nlong long pri[N],cnt[N],power[N];\nlong long prime[N],f[N];\nvoid Get_Shai(long long n){\n  f[1]=1;\n  for(long long i=1;i<=n;i++)power[i]=1;\n  for(long long i=2;i<=n;i++){\n    if(!vis[i]){\n      cnt[i]=1;pri[i]=i;power[i]=i;\n      prime[++prime[0]]=i;\n      f[i]=(1ll*i-1ll*i*i%mod+mod)%mod;\n    }\n    for(long long j=1,v,pc;j<=prime[0]&&i*prime[j]<=n;j++){\n      v=i*prime[j];\n      vis[v]=1;\n      if(i%prime[j]==0){\n        cnt[v]=cnt[i]+1;pri[v]=pri[i];power[v]=(1ll*power[i]*pri[i])%mod;\n        f[v]=f[v/power[v]]*(1ll*power[v]-1ll*power[v]*pri[i]%mod+mod)%mod;\n        break;\n      }\n      cnt[v]=1;pri[v]=prime[j];power[v]=prime[j];\n      f[v]=(f[i]*f[prime[j]])%mod;\n    }\n  }\n  for(int i=1;i<=n;i++)f[i]=(1ll*f[i]+f[i-1])%mod;\n}\nlong long Get_ans(int x,int y){\n  long long Sum=0;\n  for(int l=1,r;l<=x;l=r+1){\n    r=min(x/(x/l),y/(y/l));\n    Sum=(Sum+(1ll*f[r]-f[l-1]+mod)%mod*(((1ll+x/l)%mod*1ll*(x/l)%mod*inv2%mod)%mod)%mod*(((1ll+y/l)%mod*1ll*(y/l)%mod*inv2%mod)%mod)%mod)%mod;\n  }\n  return Sum;\n}\nint main()\n{\n\tint n=read(),m=read();\n\tif(n>m)swap(n,m);\n  Get_Shai(1ll*n);\n  printf(\"%lld\\n\",(Get_ans(n,m)%mod+mod)%mod);\n\treturn 0;\n}\n\n```\n- 再扩展，这道题还可以用杜教筛加速的，具体[戳这里](https://blog.csdn.net/VictoryCzt/article/details/85054670?tdsourcetag=s_pctim_aiomsg)，感觉和这道题差不多[P3768](https://www.luogu.org/problemnew/show/P3768)，就不贴了。\n\n\n## [P3768 简单的数学题](https://www.luogu.org/problemnew/show/P3768)\n\n$\\sum_{i=1}^n\\sum_{j=1}^nijgcd(i,j)$\n\n### 反演过程：\n\n$\\sum_{d=1}^{n}\\sum_{i=1}^n\\sum_{j=1}^nijd[gcd(i,j)=d]$\n\n$\\sum_{d=1}^{n}d\\sum_{i=1}^n\\sum_{j=1}^nij[gcd(i,j)=d]$\n\n$\\sum_{d=1}^{n}{d}\\sum_{i=1}^{\\left\\lfloor\\frac{n}{d}\\right\\rfloor}\\sum_{j=1}^{\\left\\lfloor\\frac{n}{d}\\right\\rfloor}ij\\cdot d^2[gcd(i,j)=1]$\n\n$\\sum_{d=1}^{n}{d^3}\\sum_{i=1}^{\\left\\lfloor\\frac{n}{d}\\right\\rfloor}\\sum_{j=1}^{\\left\\lfloor\\frac{n}{d}\\right\\rfloor}ij[gcd(i,j)=1]$\n\n$\\sum_{d=1}^{n}d^3\\sum_{i=1}^{\\left\\lfloor\\frac{n}{d}\\right\\rfloor}\\sum_{j=1}^{\\left\\lfloor\\frac{n}{d}\\right\\rfloor}ijϵ(gcd(i,j))$\n\n$\\sum_{d=1}^{n}d^3\\sum_{i=1}^{\\left\\lfloor\\frac{n}{d}\\right\\rfloor}\\sum_{j=1}^{\\left\\lfloor\\frac{n}{d}\\right\\rfloor}ij\\sum_{k|gcd(i,j)}\\mu(k)$\n\n$\\sum_{d=1}^{n}d^3\\sum_{k=1}^{\\left\\lfloor\\frac{n}{d}\\right\\rfloor}\\mu(k)\\sum_{i=1}^{\\left\\lfloor\\frac{n}{d}\\right\\rfloor}\\sum_{j=1}^{\\left\\lfloor\\frac{n}{d}\\right\\rfloor}ij[k|gcd(i,j)]$\n\n$\\sum_{d=1}^{n}d^3\\sum_{k=1}^{\\left\\lfloor\\frac{n}{d}\\right\\rfloor}\\mu(k)\\sum_{i=1}^{\\left\\lfloor\\frac{n}{dk}\\right\\rfloor}\\sum_{j=1}^{\\left\\lfloor\\frac{m}{dk}\\right\\rfloor}ij\\cdot k^2$\n\n$\\sum_{d=1}^{n}d^3\\sum_{k=1}^{\\left\\lfloor\\frac{n}{d}\\right\\rfloor}\\mu(k)\\cdot k^2\\sum_{i=1}^{\\left\\lfloor\\frac{n}{dk}\\right\\rfloor}\\sum_{j=1}^{\\left\\lfloor\\frac{m}{dk}\\right\\rfloor}ij$\n\n$\\sum_{T=1}^{n}\\sum_{i=1}^{\\left\\lfloor\\frac{n}{T}\\right\\rfloor}\\sum_{j=1}^{\\left\\lfloor\\frac{n}{T}\\right\\rfloor}ij\\sum_{d|T}d^3\\cdot \\mu\\left(\\frac{T}{d}\\right)\\cdot \\left(\\frac{T}{d}\\right)^2$\n\n$\\sum_{T=1}^{n}\\sum_{i=1}^{\\left\\lfloor\\frac{n}{T}\\right\\rfloor}\\sum_{j=1}^{\\left\\lfloor\\frac{n}{T}\\right\\rfloor}ij\\sum_{d|T}T^2\\cdot d\\cdot \\mu\\left(\\frac{T}{d}\\right)$\n\n$\\sum_{T=1}^{n}\\sum_{i=1}^{\\left\\lfloor\\frac{n}{T}\\right\\rfloor}\\sum_{j=1}^{\\left\\lfloor\\frac{n}{T}\\right\\rfloor}ijT^2\\sum_{d|T}d\\cdot \\mu\\left(\\frac{T}{d}\\right)$\n\n$\\sum_{T=1}^{n}\\sum_{i=1}^{\\left\\lfloor\\frac{n}{T}\\right\\rfloor}\\sum_{j=1}^{\\left\\lfloor\\frac{n}{T}\\right\\rfloor}ijT^2(id*\\mu)(T)$\n\n$\\sum_{T=1}^{n}\\sum_{i=1}^{\\left\\lfloor\\frac{n}{T}\\right\\rfloor}\\sum_{j=1}^{\\left\\lfloor\\frac{n}{T}\\right\\rfloor}ijT^2\\varphi(T)$\n\n$\\sum_{T=1}^{n}\\frac{\\left\\lfloor\\frac{n}{T}\\right\\rfloor\\cdot(\\left\\lfloor\\frac{n}{T}\\right\\rfloor+1)}{2}\\times\\frac{\\left\\lfloor\\frac{m}{T}\\right\\rfloor\\cdot(\\left\\lfloor\\frac{m}{T}\\right\\rfloor+1)}{2}\\times T^2\\varphi(T)$\n\n- $\\ \\ \\ \\ \\ \\,$ 需要连续提取 $2$ 次公约数，和[P1829](https://www.luogu.org/problemnew/show/P1829)有异曲同工之妙，杜教筛筛出 $T^2\\varphi(T)$ 的前缀和，分块询问答案询问，总时间复杂度$O(n^{\\frac{2}{3}})$，杜教筛详见[【莫比乌斯反演和杜教筛】](https://www.luogu.org/blog/Althen-Way-Satan/mu-bi-wu-si-fan-yan-yu-du-jiao-shai)\n\n  $f(x)=x^2\\varphi(x)$\n  \n  $g(x)=x^2\\ \\ \\ ,\\sum_{i=1}^{x}g(i)=\\frac{x(x+1)(2x+1)}{6}$\n\n  $(f*g)(x)=x^3\\ \\ \\ ,\\sum_{i=1}^{x}(f*g)(i)=\\frac{x^2(x+1)^2}{4}$\n  \n\n \n  ### 代码\n``` cpp\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#include<cstdlib>\n#include<cstring>\n#include<string>\n#include<map>\n#include<stack>\nusing namespace std;\ninline long long read(){\n  long long x=0,f=1;char ch;ch=getchar();\n  while(ch<'0'||ch>'9'){if(ch=='-') f=0;ch=getchar();}\n  while(ch>='0'&&ch<='9'){x=(x<<1)+(x<<3)+(ch&15);ch=getchar();}\n  if(f)return x;else return -x;\n}\nconst int N=8000010;\nlong long mod,n,inv6,inv4;\nint prim[N];\nlong long f[N];\nbool vis[N];\nvoid get_f(int n){\n  f[1]=1;\n  for(int i=2;i<=n;i++){\n    if(!vis[i]){f[i]=i-1;prim[++prim[0]]=i;}\n    for(int j=1;j<=prim[0]&&i*prim[j]<=n;j++){\n      vis[i*prim[j]]=1;\n      if(i%prim[j]==0){f[i*prim[j]]=f[i]*prim[j];break;}\n      else f[i*prim[j]]=f[i]*(prim[j]-1);\n    }\n  }\n  for(int i=1;i<=n;++i)f[i]=(f[i-1]+1ll*f[i]*i%mod*i%mod)%mod;\n}\nmap<long long,long long> mp;\nlong long power(long long a,long long b){\n  long long ans=1;\n  while(b){if(b&1)ans=ans*a%mod;a=a*a%mod;b>>=1;}\n  return ans;\n}\nlong long Sumfg(long long x){x%=mod;return x*(x+1)%mod*x%mod*(x+1)%mod*inv4%mod;}\nlong long Sumg(long long x){x%=mod;return x*(x+1)%mod*(x+x+1)%mod*inv6%mod;}\nlong long Sumf(long long x){\n  if(x<=min(N-10,(int)n))return f[x];\n  if(mp[x])return mp[x];\n  long long ret=Sumfg(x);\n  for(long long i=2,j;i<=x;i=j+1){\n  \tj=x/(x/i);\n  \tret=(ret-(Sumg(j)-Sumg(i-1)+mod)%mod*Sumf(x/i)%mod+mod)%mod;\n  }\n  return mp[x]=(ret+mod)%mod;\n}\nint main()\n{\n  mod=read();n=read();\n  inv4=power(4,mod-2);\n  inv6=power(6,mod-2);\n  get_f(min(N-10,(int)n));\n  long long ans=0;\n  for(long long i=1,j;i<=n;i=j+1){\n    j=n/(n/i);\n    ans=(ans+(Sumf(j)-Sumf(i-1))%mod*Sumfg(n/i)%mod)%mod;\n  }\n  printf(\"%lld\\n\",(ans+mod)%mod);\n  return 0;\n}\n\n```\n\n## [P4240 毒瘤之神的考验](https://www.luogu.org/problemnew/show/P4240)\n\n$\\sum_{i=1}^n\\sum_{j=1}^m\\varphi(ij)$\n\n### 反演过程：\n\n$\\sum_{i=1}^n\\sum_{j=1}^m\\frac{\\varphi(i)\\varphi(j)gcd(i,j)}{\\varphi(gcd(i,j))}$\n\n$\\sum_{d=1}^{min(n,m)}\\sum_{i=1}^n\\sum_{j=1}^m\\frac{\\varphi(i)\\varphi(j)d}{\\varphi(d)}[gcd(i,j)=d]$\n\n$\\sum_{d=1}^{min(n,m)}\\frac{d}{\\varphi(d)}\\sum_{i=1}^n\\sum_{j=1}^m\\varphi(i)\\varphi(j)[gcd(i,j)=d]$\n\n$\\sum_{d=1}^{min(n,m)}\\frac{d}{\\varphi(d)}\\sum_{i=1}^{\\left\\lfloor\\frac{n}{d}\\right\\rfloor}\\sum_{j=1}^{\\left\\lfloor\\frac{m}{d}\\right\\rfloor}\\varphi(di)\\varphi(dj)[gcd(i,j)=1]$\n\n$\\sum_{d=1}^{min(n,m)}\\frac{d}{\\varphi(d)}\\sum_{i=1}^{\\left\\lfloor\\frac{n}{d}\\right\\rfloor}\\sum_{j=1}^{\\left\\lfloor\\frac{m}{d}\\right\\rfloor}\\varphi(di)\\varphi(dj)ϵ(gcd(i,j))$\n\n$\\sum_{d=1}^{min(n,m)}\\frac{d}{\\varphi(d)}\\sum_{i=1}^{\\left\\lfloor\\frac{n}{d}\\right\\rfloor}\\sum_{j=1}^{\\left\\lfloor\\frac{m}{d}\\right\\rfloor}\\varphi(di)\\varphi(dj)\\sum_{k|gcd(i,j)}\\mu(k)$\n\n$\\sum_{d=1}^{min(n,m)}\\frac{d}{\\varphi(d)}\\sum_{k=1}^{\\left\\lfloor\\frac{min(n,m)}{dk}\\right\\rfloor}\\mu(k)\\sum_{i=1}^{\\left\\lfloor\\frac{n}{d}\\right\\rfloor}\\sum_{j=1}^{\\left\\lfloor\\frac{m}{d}\\right\\rfloor}\\varphi(di)\\varphi(dj)[k|gcd(i,j)]$\n\n$\\sum_{d=1}^{min(n,m)}\\frac{d}{\\varphi(d)}\\sum_{k=1}^{\\left\\lfloor\\frac{min(n,m)}{dk}\\right\\rfloor}\\mu(k)\\sum_{i=1}^{\\left\\lfloor\\frac{n}{dk}\\right\\rfloor}\\sum_{j=1}^{\\left\\lfloor\\frac{m}{dk}\\right\\rfloor}\\varphi(dik)\\varphi(djk)$\n\n$\\sum_{T=1}^{min(n,m)}\\sum_{i=1}^{\\left\\lfloor\\frac{n}{T}\\right\\rfloor}\\sum_{j=1}^{\\left\\lfloor\\frac{m}{T}\\right\\rfloor}\\varphi(iT)\\varphi(jT)\\sum_{d|T}\\frac{d}{\\varphi(d)}\\mu(\\frac{T}{d})$\n\n- $\\ \\ \\ \\ \\ \\,$ $O(n)$预处理出$\\mu$,$\\varphi$，$O(n\\log n)$预处理出后面的$\\sum_{d|T}\\frac{d}{\\varphi(d)}\\mu(\\frac{T}{d})$，然后对前面的进行分块操作，会发现要存很多东西，于是我们一边分块，一边操作，总复杂度很玄学，大约是$O(n\\log n+nT^{\\frac{2}{3}}+T(\\sqrt n+\\left\\lfloor\\frac{n}{T^{\\frac{1}{3}}}\\right\\rfloor))$,能过就行了XD,~~(代码加了信仰fread)~~\n\n### 代码\n\n``` cpp\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#include<cstdlib>\n#include<cstring>\n#include<string>\n#include<queue>\n#include<map>\n#include<set>\n#include<stack>\n#include<cmath>\n#include<cctype>\n#include<vector>\nusing namespace std;\nconst int inf=0x7fffffff;\nconst double eps=1e-10;\nconst double pi=acos(-1.0);\nchar buf[1<<15],*S=buf,*TT=buf;\nchar getch(){return S==TT&&(TT=(S=buf)+fread(buf,1,1<<15,stdin),S==TT)?0:*S++;}\ninline int read(){\n  int x=0,f=1;char ch;ch=getch();\n  while(ch<'0'||ch>'9'){if(ch=='-') f=0;ch=getch();}\n  while(ch>='0'&&ch<='9'){x=(x<<1)+(x<<3)+(ch&15);ch=getch();}\n  if(f)return x;else return -x;\n}\nconst int N=100010;\nconst int mod=998244353;\nconst int B=35;\nbool vis[N];\nint prim[N],phi[N],mu[N],inv[N];\nint F[N];\nvector<int> G[N],T[B+1][B+1];\nvoid get_phi_mu_inv(int n){\n  phi[1]=mu[1]=inv[1]=1;\n  for(int i=2;i<=n;i++){\n    if(!vis[i])phi[i]=i-1,mu[i]=-1,prim[++prim[0]]=i;\n    for(int j=1;j<=prim[0]&&i*prim[j]<=n;j++){\n      vis[i*prim[j]]=1;\n      if(i%prim[j]==0){phi[i*prim[j]]=phi[i]*prim[j];break;}\n      else phi[i*prim[j]]=phi[i]*(prim[j]-1),mu[i*prim[j]]=-mu[i];\n    }\n    inv[i]=1ll*(mod-mod/i)*inv[mod%i]%mod;\n  }\n}\nvoid init(int n){\n  for(int i=1;i<=n;i++)\n  for(int j=i;j<=n;j+=i)\n  F[j]=(F[j]+(1ll*mu[j/i]*i*inv[phi[i]]%mod+mod)%mod)%mod;\n  for(int i=1;i<=n;i++){\n    G[i].push_back(0);\n    for(int j=1;j<=n/i;j++)\n    G[i].push_back((G[i][j-1]+phi[i*j])%mod);\n  }\n  for(int j=1;j<=B;j++)\n    for(int k=j;k<=B;k++){\n    int len=n/max(j,k);\n    T[j][k].push_back(0);\n    for(int i=1;i<=len;i++)\n    T[j][k].push_back((T[j][k][i-1]+1ll*F[i]*G[i][j]%mod*G[i][k]%mod)%mod);\n  }\n}\nlong long Solve(int n,int m){\n  long long res=0;\n  int ed=m/B;\n  for(int i=1;i<=ed;i++)\n  res=(res+1ll*F[i]*G[i][n/i]%mod*G[i][m/i]%mod)%mod;\n  for(int l=m/B+1,r,ln,lm;l<=n;l=r+1){\n  \tln=n/l,lm=m/l;\n    r=min(n/ln,m/lm);\n    res=(res+(T[ln][lm][r]-T[ln][lm][l-1]+mod)%mod)%mod;\n  }\n  return res;\n}\nint main()\n{\n  get_phi_mu_inv(100000);init(100000);\n  int t=read();\n  while(t--){\n    int n=read(),m=read();if(n>m)swap(n,m);\n    printf(\"%lld\\n\",Solve(n,m));\n  }\n  return 0;\n}\n\n```\n\n\n## [P1587 [NOI2016]循环之美](https://www.luogu.org/problemnew/show/P1587)\n\n$\\ \\ \\ \\ \\ \\,$对于一个$K$进制下的无限循环小数，在最简形态下，分母一定和$K$互质，所以这道题，就是求:\n$\\sum_{i=1}^n\\sum_{j=1}^m[gcd(i,j)=1][gcd(j,K)=1]$\n\n### 反演过程：\n\n$\\sum_{j=1}^m[gcd(j,K)=1]\\sum_{i=1}^n[gcd(i,j)=1]$\n\n$\\sum_{j=1}^m[gcd(j,K)=1]\\sum_{i=1}^nϵ(gcd(i,j))$\n\n$\\sum_{j=1}^m[gcd(j,K)=1]\\sum_{i=1}^n\\sum_{k|gcd(i,j)}\\mu(k)$\n\n$\\sum_{k=1}^{min(n,m)}\\mu(k)\\sum_{i=1}^{\\left\\lfloor\\frac{n}{k}\\right\\rfloor}\\sum_{j=1}^{\\left\\lfloor\\frac{m}{k}\\right\\rfloor}[gcd(jk,K)=1]$\n\n$\\sum_{k=1}^{min(n,m)}\\mu(k)[gcd(k,K)=1]\\sum_{i=1}^{\\left\\lfloor\\frac{n}{k}\\right\\rfloor}\\sum_{j=1}^{\\left\\lfloor\\frac{m}{k}\\right\\rfloor}[gcd(j,K)=1]$\n\n$\\sum_{k=1}^{min(n,m)}\\mu(k)[gcd(k,K)=1]\\sum_{j=1}^{\\left\\lfloor\\frac{m}{k}\\right\\rfloor}[gcd(j,K)=1]\\sum_{i=1}^{\\left\\lfloor\\frac{n}{k}\\right\\rfloor}$\n\n$\\sum_{k=1}^{min(n,m)}\\mu(k)[gcd(k,K)=1]\\sum_{j=1}^{\\left\\lfloor\\frac{m}{k}\\right\\rfloor}[gcd(j,K)=1]{\\left\\lfloor\\frac{n}{k}\\right\\rfloor}$\n\n$f(x,K)=\\sum_{i=1}^{x}\\mu(i)[gcd(i,K)=1]$\n\n$s(x)=\\sum_{i=1}^{x}[gcd(i,K)=1]$\n\n$\\sum_{k=1}^{min(n,m)}\\mu(k)[gcd(k,K)=1]{\\left\\lfloor\\frac{n}{k}\\right\\rfloor}s\\left(\\left\\lfloor\\frac{m}{k}\\right\\rfloor\\right)$\n\n$\\ \\ \\ \\ \\ \\,$然而还没有完，我们求出$f$和$s$，也就是方便分块操作，现在我们得化简它们:\n\n- $s(x)$\n  $s(x)=\\sum_{i=1}^{x}[gcd(i,K)=1]$\n  因为若是 $gcd(a,K)=1$，那么就有 $gcd(a+bk,K)=1$。\n  所以有：\n  $s(x)=\\left\\lfloor\\frac{x}{k}\\right\\rfloor s(k)+s(x\\%k)$\n  所以只需要暴力求出$k$以内的$s$就可以了。\n  \n- $f(x,K)$\n\n  $\\sum_{i=1}^{x}\\mu(i)[gcd(i,K)=1]$\n  \n  $\\sum_{i=1}^{x}\\mu(i)ϵ(gcd(i,K))$\n  \n  $\\sum_{i=1}^{x}\\mu(i)\\sum_{d|gcd(i,K)}\\mu(d)$\n\n  $\\sum_{d=1}^{min(x,K)}\\mu(d)\\sum_{i=1}^x\\mu(i)[d|gcd(i,K)]$\n  \n  $\\sum_{d=1}^{min(x,K)}\\mu(d)\\sum_{i=1}^{\\left\\lfloor\\frac{x}{d}\\right\\rfloor}\\mu(id)[d|gcd(id,K)]$\n  \n  $\\sum_{d=1}^{min(x,K)}\\mu(d)\\sum_{i=1}^{\\left\\lfloor\\frac{x}{d}\\right\\rfloor}\\mu(id)[d|K]$\n\n  $\\sum_{d|K}\\mu(d)\\sum_{i=1}^{\\left\\lfloor\\frac{x}{d}\\right\\rfloor}\\mu(id)$\n  \n  $\\sum_{d|K}\\mu(d)\\sum_{i=1,gcd(i,d)=1}^{\\left\\lfloor\\frac{x}{d}\\right\\rfloor}\\mu(d)\\mu(i)$\n  \n  $\\sum_{d|K}\\mu(d)^2\\sum_{i=1,gcd(i,d)=1}^{\\left\\lfloor\\frac{x}{d}\\right\\rfloor}\\mu(i)$\n  \n  $\\sum_{d|K}\\mu(d)^2\\sum_{i=1}^{\\left\\lfloor\\frac{x}{d}\\right\\rfloor}\\mu(i)[gcd(i,d)=1]$\n  \n  $\\sum_{d|K}\\mu(d)^2f\\left({\\left\\lfloor\\frac{x}{d}\\right\\rfloor},d\\right)$\n\n  这个怎么办啊？每次递归求解，但是当$K=1$的时候，就没有办法了，我们试一试化一下$K=1$的情况:\n  \n  $\\sum_{i=1}^{x}\\mu(i)[gcd(i,1)=1]$\n  \n  $\\sum_{i=1}^{x}\\mu(i)$\n  \n  一个杜教筛就完了。\n  \n  复杂度大概是$O(n^{\\frac{2}{3}})$\n  \n- 感觉题目还是比较难的，反正我一开始是没有想出来，翻了题解，主要是对于$s$的处理，有多加一维描述，还有递归处理，程序的最终复杂度呢，大概就在$O(n^{\\frac{2}{3}})$的样子\n\n### 代码\n\n``` cpp\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#include<cstdlib>\n#include<cstring>\n#include<string>\n#include<queue>\n#include<map>\n#include<set>\n#include<stack>\n#include<cmath>\n#include<cctype>\nusing namespace std;\nconst int inf=0x7fffffff;\nconst double eps=1e-10;\nconst double pi=acos(-1.0);\n//char buf[1<<15],*S=buf,*T=buf;\n//char getch(){return S==T&&(T=(S=buf)+fread(buf,1,1<<15,stdin),S==T)?0:*S++;}\ninline int read(){\n  int x=0,f=1;char ch;ch=getchar();\n  while(ch<'0'||ch>'9'){if(ch=='-') f=0;ch=getchar();}\n  while(ch>='0'&&ch<='9'){x=(x<<1)+(x<<3)+(ch&15);ch=getchar();}\n  if(f)return x;else return -x;\n}\nconst int N=10000010;\nint n,K,m;\nint pr[2010];\nbool vis[N];\nint prim[N],mu[N],Sum_mu[N];\nmap<pair<int,int>,int> used;\nint gcd(int a,int b){return b?gcd(b,a%b):a;}\nvoid init(){\n  for(int i=1;i<=K;i++)pr[i]=pr[i-1]+(gcd(i,K)==1);\n  mu[1]=1;\n  for(int i=2;i<N;i++){\n    if(!vis[i]){mu[i]=-1;prim[++prim[0]]=i;}\n    for(int j=1;j<=prim[0];j++){\n      if(i*prim[j]>=N) break;\n      vis[i*prim[j]]=1;\n      if(i%prim[j]==0){mu[i*prim[j]]=0;break;}\n      mu[i*prim[j]]=-mu[i];\n    }\n  }\n  for(int i=1;i<N;i++)Sum_mu[i]=Sum_mu[i-1]+mu[i];\n}\nint s(int x){return pr[x%K]+1ll*(x/K)*pr[K];}\nint f(int x,int k){\n  if(!k||!x)return 0;\n  if(k==1&&x<N)return Sum_mu[x];\n  if(used[make_pair(x,k)])return used[make_pair(x,k)];\n  if(k==1){\n  \tint ret=1;\n    for(int l=2,r;l<=x;l=r+1)\n    r=x/(x/l),ret-=(r-l+1)*f(x/l,1);\n  \treturn used[make_pair(x,k)]=ret;\n  }\n  int ret=0;\n  for(int i=1;i*i<=k;i++)if(k%i==0){\n    if(mu[i])ret+=f(x/i,i);\n    if(i*i!=k&&mu[k/i])\n    ret+=f(x/(k/i),k/i);\n  }\n  return used[make_pair(x,k)]=ret;\n}\nint main()\n{\n  n=read();m=read();K=read();\n  init();\n  long long ans=0;\n  for(int l=1,r;l<=min(n,m);l=r+1){\n    r=min(n/(n/l),m/(m/l));\n    ans+=1ll*(f(r,K)-f(l-1,K))*(n/l)*s(m/l);\n  }\n  printf(\"%lld\\n\",ans);\n  return 0;\n}\n```","slug":"莫比乌斯反演经典例题回顾","published":1,"updated":"2022-02-14T04:35:59.763Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0i63w6m002ju4gb01pmbubq","content":"<p>$\\ \\ \\ \\ \\ \\ \\ \\,$莫比乌斯反演经典例题回顾，思考和题解：</p>\n<span id=\"more\"></span>\n<h2 id=\"P2522-HAOI2011-Problem-b\"><a href=\"#P2522-HAOI2011-Problem-b\" class=\"headerlink\" title=\"P2522 [HAOI2011]Problem b\"></a><a href=\"https://www.luogu.org/problemnew/show/P2522\">P2522 [HAOI2011]Problem b</a></h2><p>$\\sum_{i=a}^b\\sum_{j=c}^d[gcd(i,j)=k]$</p>\n<h3 id=\"反演过程：\"><a href=\"#反演过程：\" class=\"headerlink\" title=\"反演过程：\"></a>反演过程：</h3><p>${F(n,m)=\\sum_{i=1}^n\\sum_{j=1}^m[gcd(i,j)=k]}$</p>\n<p>$ans=F(a,b)-F(a-1,d)-F(b,c-1)+F(a-1,c-1)$</p>\n<p>$F(n,m)=$</p>\n<p>$\\sum_{i=1}^{\\left\\lfloor\\frac{n}{k}\\right\\rfloor}\\sum_{j=1}^{\\left\\lfloor\\frac{n}{k}\\right\\rfloor}[gcd(i,j)=1]$</p>\n<p>$\\sum_{i=1}^{\\left\\lfloor\\frac{n}{k}\\right\\rfloor}\\sum_{j=1}^{\\left\\lfloor\\frac{n}{k}\\right\\rfloor}ϵ(gcd(i,j)=1)$</p>\n<p>$\\sum_{d=1}^{\\left\\lfloor\\frac{min(n,m)}{k}\\right\\rfloor}\\sum_{d|T}\\mu(d){\\left\\lfloor\\frac{n}{T}\\right\\rfloor}{\\left\\lfloor\\frac{m}{T}\\right\\rfloor}$</p>\n<p>$\\sum_{d=1}^{\\left\\lfloor\\frac{min(n,m)}{k}\\right\\rfloor}\\mu(d){\\left\\lfloor\\frac{n}{kd}\\right\\rfloor}{\\left\\lfloor\\frac{m}{kd}\\right\\rfloor}$</p>\n<ul>\n<li>$\\ \\ \\ \\ \\ \\,$ $O(n)$预处理$\\mu$，每次询问分块，复杂度$O(\\sqrt n)$，总复杂度为$O(n+T4\\sqrt n)$</li>\n</ul>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdlib&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> inf=<span class=\"number\">0x7fffffff</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">double</span> eps=<span class=\"number\">1e-10</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">double</span> pi=<span class=\"built_in\">acos</span>(<span class=\"number\">-1.0</span>);</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">50010</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">int</span> <span class=\"title\">read</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">  <span class=\"type\">int</span> x=<span class=\"number\">0</span>,f=<span class=\"number\">1</span>;<span class=\"type\">char</span> ch;ch=<span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(ch&lt;<span class=\"string\">&#x27;0&#x27;</span>||ch&gt;<span class=\"string\">&#x27;9&#x27;</span>)&#123;<span class=\"keyword\">if</span>(ch==<span class=\"string\">&#x27;-&#x27;</span>) f=<span class=\"number\">-1</span>;ch=<span class=\"built_in\">getchar</span>();&#125;</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(ch&gt;=<span class=\"string\">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class=\"string\">&#x27;9&#x27;</span>)&#123;x=x*<span class=\"number\">10</span>+ch-<span class=\"string\">&#x27;0&#x27;</span>;ch=<span class=\"built_in\">getchar</span>();&#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> x*f;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">bool</span> vis[N];</span><br><span class=\"line\"><span class=\"type\">int</span> prim[N],mu[N],sum[N],k;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">get_mu</span><span class=\"params\">(<span class=\"type\">int</span> n)</span></span>&#123;</span><br><span class=\"line\">  mu[<span class=\"number\">1</span>]=<span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">2</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!vis[i])&#123;mu[i]=<span class=\"number\">-1</span>;prim[++prim[<span class=\"number\">0</span>]]=i;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;=prim[<span class=\"number\">0</span>]&amp;&amp;i*prim[j]&lt;=n;j++)&#123;</span><br><span class=\"line\">      vis[i*prim[j]]=<span class=\"number\">1</span>;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(i%prim[j]==<span class=\"number\">0</span>)<span class=\"keyword\">break</span>;</span><br><span class=\"line\">      <span class=\"keyword\">else</span> mu[i*prim[j]]=-mu[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)</span><br><span class=\"line\">  sum[i]=sum[i<span class=\"number\">-1</span>]+mu[i];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"title\">Ans</span><span class=\"params\">(<span class=\"type\">int</span> a,<span class=\"type\">int</span> b)</span></span>&#123;</span><br><span class=\"line\">    a/=k;b/=k;</span><br><span class=\"line\">  <span class=\"type\">int</span> max_rep=<span class=\"built_in\">min</span>(a,b);</span><br><span class=\"line\">  <span class=\"type\">long</span> <span class=\"type\">long</span> ans=<span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> l=<span class=\"number\">1</span>,r;l&lt;=max_rep;l=r+<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">    r=<span class=\"built_in\">min</span>(a/(a/l),b/(b/l));</span><br><span class=\"line\">    ans+=(<span class=\"type\">long</span> <span class=\"type\">long</span>)(a/l)*(<span class=\"type\">long</span> <span class=\"type\">long</span>)(b/l)*(<span class=\"type\">long</span> <span class=\"type\">long</span>)(sum[r]-sum[l<span class=\"number\">-1</span>]);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"> \t<span class=\"type\">int</span> T=<span class=\"built_in\">read</span>();</span><br><span class=\"line\"> \t<span class=\"built_in\">get_mu</span>(N<span class=\"number\">-10</span>);</span><br><span class=\"line\"> \t<span class=\"keyword\">while</span>(T--)&#123;</span><br><span class=\"line\"> \t\t<span class=\"type\">int</span> a=<span class=\"built_in\">read</span>(),b=<span class=\"built_in\">read</span>(),c=<span class=\"built_in\">read</span>(),d=<span class=\"built_in\">read</span>();k=<span class=\"built_in\">read</span>();</span><br><span class=\"line\"> \t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%lld\\n&quot;</span>,<span class=\"built_in\">Ans</span>(b,d)-<span class=\"built_in\">Ans</span>(b,c<span class=\"number\">-1</span>)-<span class=\"built_in\">Ans</span>(a<span class=\"number\">-1</span>,d)+<span class=\"built_in\">Ans</span>(a<span class=\"number\">-1</span>,c<span class=\"number\">-1</span>));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"P2257-YY的GCD\"><a href=\"#P2257-YY的GCD\" class=\"headerlink\" title=\"P2257 YY的GCD\"></a><a href=\"https://www.luogu.org/problemnew/show/P2257\">P2257 YY的GCD</a></h2><p>$\\sum_{i=1}^n\\sum_{j=1}^m[gcd(i,j)\\rm\\ \\ is\\ \\ prime]$</p>\n<h3 id=\"反演过程：-1\"><a href=\"#反演过程：-1\" class=\"headerlink\" title=\"反演过程：\"></a>反演过程：</h3><p>$\\sum_{p=1,[p\\rm\\ \\ is\\ \\ prime]}\\sum_{i=1}^n\\sum_{j=1}^m[gcd(i,j)=p]$</p>\n<p>$\\sum_{p=1,[p\\rm\\ \\ is\\ \\ prime]}\\sum_{i=1}^{\\left\\lfloor\\frac{n}{p}\\right\\rfloor}\\sum_{j=1}^{\\left\\lfloor\\frac{m}{p}\\right\\rfloor}[gcd(i,j)=1]$</p>\n<p>$\\sum_{p=1,[p\\rm\\ \\ is\\ \\ prime]}\\sum_{d=1}^{\\left\\lfloor\\frac{min(n,m)}{p}\\right\\rfloor}\\mu(d){\\left\\lfloor\\frac{n}{pd}\\right\\rfloor}{\\left\\lfloor\\frac{m}{pd}\\right\\rfloor}$</p>\n<p>$\\sum_{T=1}^{min(n,m)}\\sum_{d|T}\\mu(d){\\left\\lfloor\\frac{n}{T}\\right\\rfloor}{\\left\\lfloor\\frac{m}{T}\\right\\rfloor}\\left[\\frac{T}{d}\\rm\\ \\ is\\ \\ prime\\right]$</p>\n<p>$\\sum_{T=1}^{min(n,m)}{\\left\\lfloor\\frac{n}{T}\\right\\rfloor}{\\left\\lfloor\\frac{m}{T}\\right\\rfloor}\\sum_{d|T,\\left[d\\rm\\ \\ is\\ \\ prime\\right]}\\mu\\left(\\frac{T}{d}\\right)$</p>\n<p>${F(x)=\\sum_{d|x,\\left[d\\rm\\ \\ is\\ \\ prime\\right]}\\mu\\left(\\frac{x}{d}\\right)}$</p>\n<p>${\\sum_{T=1}^{min(n,m)}{\\left\\lfloor\\frac{n}{T}\\right\\rfloor}{\\left\\lfloor\\frac{m}{T}\\right\\rfloor}F(T)}$</p>\n<ul>\n<li>$\\ \\ \\ \\ \\ \\,$ $O(n)$预处理$\\mu$，$O(n\\log{n})$预处理$F$，每次询问分块，复杂度$O(\\sqrt n)$，总复杂度为$O(n\\log n+T\\sqrt n)$</li>\n</ul>\n<h3 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdlib&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> inf=<span class=\"number\">0x7fffffff</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">double</span> eps=<span class=\"number\">1e-10</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">double</span> pi=<span class=\"built_in\">acos</span>(<span class=\"number\">-1.0</span>);</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">1e7</span>+<span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">int</span> <span class=\"title\">read</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> x=<span class=\"number\">0</span>,f=<span class=\"number\">1</span>;<span class=\"type\">char</span> ch;ch=<span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(ch&lt;<span class=\"string\">&#x27;0&#x27;</span>||ch&gt;<span class=\"string\">&#x27;9&#x27;</span>)&#123;<span class=\"keyword\">if</span>(ch==<span class=\"string\">&#x27;-&#x27;</span>) f=<span class=\"number\">-1</span>;ch=<span class=\"built_in\">getchar</span>();&#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(ch&gt;=<span class=\"string\">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class=\"string\">&#x27;9&#x27;</span>)&#123;x=x*<span class=\"number\">10</span>+ch-<span class=\"string\">&#x27;0&#x27;</span>;ch=<span class=\"built_in\">getchar</span>();&#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x*f;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">bool</span> vis[N];</span><br><span class=\"line\"><span class=\"type\">int</span> prim[N],mu[N];</span><br><span class=\"line\"><span class=\"type\">long</span> <span class=\"type\">long</span> F[N];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">get_mu</span><span class=\"params\">(<span class=\"type\">int</span> n)</span></span>&#123;</span><br><span class=\"line\">  mu[<span class=\"number\">1</span>]=<span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">2</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!vis[i])&#123;mu[i]=<span class=\"number\">-1</span>;prim[++prim[<span class=\"number\">0</span>]]=i;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;=prim[<span class=\"number\">0</span>]&amp;&amp;i*prim[j]&lt;=n;j++)&#123;</span><br><span class=\"line\">      vis[i*prim[j]]=<span class=\"number\">1</span>;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(i%prim[j]==<span class=\"number\">0</span>)<span class=\"keyword\">break</span>;</span><br><span class=\"line\">      <span class=\"keyword\">else</span> mu[i*prim[j]]=-mu[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=prim[<span class=\"number\">0</span>];i++)</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">1</span>;j*prim[i]&lt;=n;j++)F[j*prim[i]]+=(<span class=\"type\">long</span> <span class=\"type\">long</span>)mu[j];</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)F[i]+=F[i<span class=\"number\">-1</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"title\">Ans</span><span class=\"params\">(<span class=\"type\">int</span> n,<span class=\"type\">int</span> m)</span></span>&#123;</span><br><span class=\"line\">  <span class=\"type\">int</span> lim=<span class=\"built_in\">min</span>(n,m);</span><br><span class=\"line\">  <span class=\"type\">long</span> <span class=\"type\">long</span> ans=<span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> l=<span class=\"number\">1</span>,r;l&lt;=lim;l=r+<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">    r=<span class=\"built_in\">min</span>(n/(n/l),m/(m/l));</span><br><span class=\"line\">    ans+=(<span class=\"type\">long</span> <span class=\"type\">long</span>)(n/l)*(<span class=\"type\">long</span> <span class=\"type\">long</span>)(m/l)*(F[r]-F[l<span class=\"number\">-1</span>]);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">get_mu</span>(N<span class=\"number\">-10</span>);</span><br><span class=\"line\">  <span class=\"type\">int</span> T=<span class=\"built_in\">read</span>();</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(T--)&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n=<span class=\"built_in\">read</span>(),m=<span class=\"built_in\">read</span>();</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%lld\\n&quot;</span>,<span class=\"built_in\">Ans</span>(n,m));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"P3312-SDOI2014-数表\"><a href=\"#P3312-SDOI2014-数表\" class=\"headerlink\" title=\"P3312 [SDOI2014]数表\"></a><a href=\"https://www.luogu.org/problemnew/show/P3312\">P3312 [SDOI2014]数表</a></h2><p>$\\sum_{i=1}^n\\sum_{j=1}^m\\sum_{k|gcd(i,j)}k\\left[\\sum_{k|gcd(i,j)}k≤a\\right]$</p>\n<h3 id=\"反演过程：-2\"><a href=\"#反演过程：-2\" class=\"headerlink\" title=\"反演过程：\"></a>反演过程：</h3><p>$F(x)=\\sum_{i|x}i$</p>\n<p>$\\sum_{i=1}^n\\sum_{j=1}^mF(gcd(i,j))[F(gcd(i,j))≤a]$</p>\n<p>$\\sum_{d=1}^{min(n,m)}\\sum_{i=1}^n\\sum_{j=1}^mF(d)[gcd(i,j)=d][F(d)≤a]$</p>\n<p>$\\sum_{d=1}^{min(n,m)}F(d)[F(d)≤a]\\sum_{i=1}^n\\sum_{j=1}^m[gcd(i,j)=d]$</p>\n<p>$\\sum_{d=1}^{min(n,m)}F(d)[F(d)≤a]\\sum_{d’=1}^{\\left\\lfloor\\frac{min(n,m)}{d}\\right\\rfloor}\\mu(d’)\\left\\lfloor\\frac{n}{d’d}\\right\\rfloor\\left\\lfloor\\frac{m}{d’d}\\right\\rfloor$</p>\n<p>$\\sum_{T=1}^{min(n,m)}\\sum_{d|T}F(d)\\mu\\left(\\frac{T}{d}\\right){\\left\\lfloor\\frac{n}{T}\\right\\rfloor}{\\left\\lfloor\\frac{m}{T}\\right\\rfloor}[F(d)≤a]$</p>\n<p>$\\sum_{T=1}^{min(n,m)}{\\left\\lfloor\\frac{n}{T}\\right\\rfloor}{\\left\\lfloor\\frac{m}{T}\\right\\rfloor}\\sum_{d|T}F(d)\\mu\\left(\\frac{T}{d}\\right)[F(d)≤a]$</p>\n<p>$f(x)=\\sum_{d|T}F(d)\\mu\\left(\\frac{T}{d}\\right)[F(d)≤a]$</p>\n<p>$\\sum_{T=1}^{min(n,m)}{\\left\\lfloor\\frac{n}{T}\\right\\rfloor}{\\left\\lfloor\\frac{m}{T}\\right\\rfloor}f(T)$</p>\n<ul>\n<li>$\\ \\ \\ \\ \\ \\,$ $O(n\\log n)$预处理$F$和$\\mu$，把每次询问的$a$值离线排序，用树状数组维护$f$，花费时间$O(n\\log ^2n)$，询问分块，复杂度$O(\\sqrt n\\log n)$，总时间复杂度$O(n\\log ^2n+T\\sqrt n\\log n)$</li>\n</ul>\n<h3 id=\"代码-2\"><a href=\"#代码-2\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdlib&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> inf=<span class=\"number\">0x7fffffff</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">double</span> eps=<span class=\"number\">1e-10</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">double</span> pi=<span class=\"built_in\">acos</span>(<span class=\"number\">-1.0</span>);</span><br><span class=\"line\"><span class=\"comment\">//char buf[1&lt;&lt;15],*S=buf,*T=buf;</span></span><br><span class=\"line\"><span class=\"comment\">//char getch()&#123;return S==T&amp;&amp;(T=(S=buf)+fread(buf,1,1&lt;&lt;15,stdin),S==T)?0:*S++;&#125;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">int</span> <span class=\"title\">read</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">  <span class=\"type\">int</span> x=<span class=\"number\">0</span>,f=<span class=\"number\">1</span>;<span class=\"type\">char</span> ch;ch=<span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(ch&lt;<span class=\"string\">&#x27;0&#x27;</span>||ch&gt;<span class=\"string\">&#x27;9&#x27;</span>)&#123;<span class=\"keyword\">if</span>(ch==<span class=\"string\">&#x27;-&#x27;</span>) f=<span class=\"number\">0</span>;ch=<span class=\"built_in\">getchar</span>();&#125;</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(ch&gt;=<span class=\"string\">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class=\"string\">&#x27;9&#x27;</span>)&#123;x=(x&lt;&lt;<span class=\"number\">1</span>)+(x&lt;&lt;<span class=\"number\">3</span>)+(ch&amp;<span class=\"number\">15</span>);ch=<span class=\"built_in\">getchar</span>();&#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(f)<span class=\"keyword\">return</span> x;<span class=\"keyword\">else</span> <span class=\"keyword\">return</span> -x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">1e5</span>+<span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> Q=<span class=\"number\">2e4</span>+<span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> sum[N];</span><br><span class=\"line\"><span class=\"type\">bool</span> vis[N];</span><br><span class=\"line\"><span class=\"type\">int</span> prim[N],mu[N];</span><br><span class=\"line\"><span class=\"type\">int</span> S=<span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Sum</span>&#123;<span class=\"type\">int</span> data,id;&#125;F[N];</span><br><span class=\"line\"><span class=\"type\">bool</span> <span class=\"keyword\">operator</span> &lt;(Sum a,Sum b)&#123;<span class=\"keyword\">return</span> a.data&lt;b.data;&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> ans[Q];</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> lowbit(x) ((x)&amp;(-x))</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"type\">int</span> i,<span class=\"type\">int</span> c)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;<span class=\"keyword\">for</span>(;i&lt;=N<span class=\"number\">-5</span>;i+=<span class=\"built_in\">lowbit</span>(i))sum[i]+=c;&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">query</span><span class=\"params\">(<span class=\"type\">int</span> i)</span></span>&#123;</span><br><span class=\"line\">  <span class=\"type\">int</span> ans=<span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(;i;i-=<span class=\"built_in\">lowbit</span>(i))ans+=sum[i];</span><br><span class=\"line\">  <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Add</span><span class=\"params\">(<span class=\"type\">int</span> i,<span class=\"type\">int</span> data)</span></span>&#123;</span><br><span class=\"line\">  <span class=\"type\">int</span> ed=((N<span class=\"number\">-5</span>)/i);</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">register</span> <span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;=ed;++j)</span><br><span class=\"line\">  <span class=\"built_in\">add</span>(i*j,data*mu[j]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">  mu[<span class=\"number\">1</span>]=<span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">register</span> <span class=\"type\">int</span> i=<span class=\"number\">2</span>;i&lt;=N<span class=\"number\">-5</span>;++i)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!vis[i])&#123;mu[i]=<span class=\"number\">-1</span>;prim[++prim[<span class=\"number\">0</span>]]=i;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">register</span> <span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;=prim[<span class=\"number\">0</span>]&amp;&amp;i*prim[j]&lt;=N<span class=\"number\">-5</span>;++j)&#123;</span><br><span class=\"line\">      vis[i*prim[j]]=<span class=\"number\">1</span>;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(i%prim[j]==<span class=\"number\">0</span>)<span class=\"keyword\">break</span>;</span><br><span class=\"line\">      <span class=\"keyword\">else</span> mu[i*prim[j]]=-mu[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">register</span> <span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=N<span class=\"number\">-5</span>;++i)&#123;</span><br><span class=\"line\">    F[i].id=i;</span><br><span class=\"line\">    <span class=\"type\">int</span> ed=((N<span class=\"number\">-5</span>)/i);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">register</span> <span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;=ed;++j)</span><br><span class=\"line\">    F[i*j].data+=i;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">sort</span>(F+<span class=\"number\">1</span>,F+<span class=\"number\">1</span>+N<span class=\"number\">-5</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Query</span>&#123;<span class=\"type\">int</span> n,m,a,id;&#125;q[Q];</span><br><span class=\"line\"><span class=\"keyword\">inline</span> <span class=\"type\">bool</span> <span class=\"keyword\">operator</span> &lt;(<span class=\"type\">const</span> Query &amp;a,<span class=\"type\">const</span> Query &amp;b)&#123;<span class=\"keyword\">return</span> a.a&lt;b.a;&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"type\">int</span> T=<span class=\"built_in\">read</span>();</span><br><span class=\"line\">  <span class=\"built_in\">init</span>();</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">register</span> <span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=T;i++)&#123;</span><br><span class=\"line\">    q[i].n=<span class=\"built_in\">read</span>();q[i].m=<span class=\"built_in\">read</span>();q[i].a=<span class=\"built_in\">read</span>();q[i].id=i;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(q[i].n&gt;q[i].m)<span class=\"built_in\">swap</span>(q[i].n,q[i].m);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">sort</span>(q+<span class=\"number\">1</span>,q+T+<span class=\"number\">1</span>);</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">register</span> <span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=T;i++)&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n=q[i].n,m=q[i].m,a=q[i].a,id=q[i].id;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(F[S].data&lt;=a)&#123;<span class=\"built_in\">Add</span>(F[S].id,F[S].data);S++;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">register</span> <span class=\"type\">int</span> l=<span class=\"number\">1</span>,r;l&lt;=n;l=r+<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">      r=<span class=\"built_in\">min</span>(n/(n/l),(m/(m/l)));</span><br><span class=\"line\">      ans[id]+=(n/l)*(m/l)*(<span class=\"built_in\">query</span>(r)-<span class=\"built_in\">query</span>(l<span class=\"number\">-1</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">register</span> <span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=T;i++)<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>,ans[i]&amp;<span class=\"number\">0x7fffffff</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"P3704-SDOI2017-数字表格\"><a href=\"#P3704-SDOI2017-数字表格\" class=\"headerlink\" title=\"P3704 [SDOI2017]数字表格\"></a><a href=\"https://www.luogu.org/problemnew/show/P3704\">P3704 [SDOI2017]数字表格</a></h2><p>$\\prod_{i=1}^{n}\\prod_{j=1}^{m}f\\left(gcd(i,j)\\right)$</p>\n<p>$\\ \\ \\ \\ \\ \\,$ $f$为斐波拉契序列。</p>\n<h3 id=\"反演过程：-3\"><a href=\"#反演过程：-3\" class=\"headerlink\" title=\"反演过程：\"></a>反演过程：</h3><p>$\\prod_{i=1}^{min(n,m)}\\prod_{i=1}^{n}\\prod_{j=1}^{m}f(d)\\left[gcd(i,j)=d\\right]$</p>\n<p>$\\prod_{d=1}^{min(n,m)}f(d)^{\\sum_{i=1}^n\\sum_{j=1}^{m}\\left[gcd(i,j)=d\\right]}$</p>\n<p>$\\prod_{d=1}^{min(n,m)}f(d)^{\\sum_{d’=1}^{\\left\\lfloor\\frac{min(n,m)}{d}\\right\\rfloor}\\mu(d’)\\left\\lfloor\\frac{n}{d’d}\\right\\rfloor\\left\\lfloor\\frac{m}{d’d}\\right\\rfloor}$</p>\n<p>$\\prod_{d=1}^{min(n,m)}\\prod_{d’=1}^{\\left\\lfloor\\frac{min(n,m)}{d}\\right\\rfloor}f(d)^{\\mu(d’)\\left\\lfloor\\frac{n}{d’d}\\right\\rfloor\\left\\lfloor\\frac{m}{d’d}\\right\\rfloor}$</p>\n<p>$\\prod_{T=1}^{min(n,m)}\\prod_{d|T}f(d)^{\\mu\\left(\\frac{T}{d}\\right)\\left\\lfloor\\frac{n}{T}\\right\\rfloor\\left\\lfloor\\frac{m}{T}\\right\\rfloor}$</p>\n<p>${C(x)=\\prod_{d|T}f(d)^{\\mu\\left(\\frac{T}{d}\\right)}}$</p>\n<p>$\\prod_{T=1}^{min(n,m)}C(T)^{\\left\\lfloor\\frac{n}{T}\\right\\rfloor\\left\\lfloor\\frac{m}{T}\\right\\rfloor}$</p>\n<ul>\n<li>$\\ \\ \\ \\ \\ \\,$ $O(n)$预处理$f$和$\\mu$，$O(n\\log{n})$预处理$C$，每次询问分块，复杂度$O(\\sqrt n \\log n)$，总复杂度为$O(n\\log n+T\\sqrt n \\log n)$</li>\n</ul>\n<h3 id=\"代码-3\"><a href=\"#代码-3\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdlib&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> inf=<span class=\"number\">0x7fffffff</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">double</span> eps=<span class=\"number\">1e-10</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">double</span> pi=<span class=\"built_in\">acos</span>(<span class=\"number\">-1.0</span>);</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">1e6</span>+<span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">long</span> <span class=\"type\">long</span> mod=<span class=\"number\">1e9</span>+<span class=\"number\">7</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">int</span> <span class=\"title\">read</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> x=<span class=\"number\">0</span>,f=<span class=\"number\">1</span>;<span class=\"type\">char</span> ch;ch=<span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(ch&lt;<span class=\"string\">&#x27;0&#x27;</span>||ch&gt;<span class=\"string\">&#x27;9&#x27;</span>)&#123;<span class=\"keyword\">if</span>(ch==<span class=\"string\">&#x27;-&#x27;</span>) f=<span class=\"number\">-1</span>;ch=<span class=\"built_in\">getchar</span>();&#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(ch&gt;=<span class=\"string\">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class=\"string\">&#x27;9&#x27;</span>)&#123;x=x*<span class=\"number\">10</span>+ch-<span class=\"string\">&#x27;0&#x27;</span>;ch=<span class=\"built_in\">getchar</span>();&#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x*f;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"title\">power</span><span class=\"params\">(<span class=\"type\">long</span> <span class=\"type\">long</span> a,<span class=\"type\">long</span> <span class=\"type\">long</span> b)</span></span>&#123;  </span><br><span class=\"line\">  <span class=\"type\">long</span> <span class=\"type\">long</span> ans=<span class=\"number\">1ll</span>;  </span><br><span class=\"line\">  a=a%mod;</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(b!=<span class=\"number\">0</span>)&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">if</span>(b&amp;<span class=\"number\">1</span>) ans=(ans*a)%mod;</span><br><span class=\"line\">    b&gt;&gt;=<span class=\"number\">1</span>;a=(a*a)%mod;</span><br><span class=\"line\">  &#125;  </span><br><span class=\"line\">  <span class=\"keyword\">return</span> ans;  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">long</span> <span class=\"type\">long</span> f[N];</span><br><span class=\"line\"><span class=\"type\">bool</span> vis[N];</span><br><span class=\"line\"><span class=\"type\">int</span> prim[N],mu[N],sum[N];</span><br><span class=\"line\"><span class=\"type\">long</span> <span class=\"type\">long</span> C[N],g[N];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">get_mu</span><span class=\"params\">(<span class=\"type\">int</span> n)</span></span>&#123;</span><br><span class=\"line\">  mu[<span class=\"number\">1</span>]=<span class=\"number\">1</span>;</span><br><span class=\"line\">  g[<span class=\"number\">1</span>]=C[<span class=\"number\">0</span>]=C[<span class=\"number\">1</span>]=<span class=\"number\">1ll</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">2</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">  \tg[i]=<span class=\"built_in\">power</span>(f[i],mod<span class=\"number\">-2</span>);C[i]=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!vis[i])&#123;mu[i]=<span class=\"number\">-1</span>;prim[++prim[<span class=\"number\">0</span>]]=i;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;=prim[<span class=\"number\">0</span>]&amp;&amp;i*prim[j]&lt;=n;j++)&#123;</span><br><span class=\"line\">      vis[i*prim[j]]=<span class=\"number\">1</span>;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(i%prim[j]==<span class=\"number\">0</span>)<span class=\"keyword\">break</span>;</span><br><span class=\"line\">      <span class=\"keyword\">else</span> mu[i*prim[j]]=-mu[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!mu[i])<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">  \t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=i;j&lt;=n;j+=i)</span><br><span class=\"line\">    C[j]=<span class=\"number\">1ll</span>*C[j]*(mu[i]==<span class=\"number\">1</span>?f[j/i]:g[j/i])%mod;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">2</span>;i&lt;=n;++i)C[i]=<span class=\"number\">1ll</span>*C[i]*C[i<span class=\"number\">-1</span>]%mod;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> n,m;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  f[<span class=\"number\">1</span>]=f[<span class=\"number\">2</span>]=<span class=\"number\">1ll</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">3</span>;i&lt;=N<span class=\"number\">-10</span>;i++)f[i]=f[i<span class=\"number\">-1</span>]+f[i<span class=\"number\">-2</span>],f[i]%=mod;</span><br><span class=\"line\">  <span class=\"built_in\">get_mu</span>(N<span class=\"number\">-10</span>);</span><br><span class=\"line\">  <span class=\"type\">int</span> T=<span class=\"built_in\">read</span>();</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(T--)&#123;</span><br><span class=\"line\">    n=<span class=\"built_in\">read</span>();m=<span class=\"built_in\">read</span>();</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(n&gt;m)<span class=\"built_in\">swap</span>(n,m);</span><br><span class=\"line\">    <span class=\"type\">long</span> <span class=\"type\">long</span> ans=<span class=\"number\">1ll</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>,lim=<span class=\"number\">0</span>;i&lt;=n;i=lim+<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">      lim=<span class=\"built_in\">min</span>(n/(n/i),m/(m/i));</span><br><span class=\"line\">      ans=<span class=\"number\">1ll</span>*ans*<span class=\"built_in\">power</span>(C[lim]*<span class=\"built_in\">power</span>(C[i<span class=\"number\">-1</span>],mod<span class=\"number\">-2</span>),<span class=\"number\">1ll</span>*(n/i)*(m/i)%(mod<span class=\"number\">-1</span>));</span><br><span class=\"line\">      ans%=mod;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%lld\\n&quot;</span>,ans);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"P3327-SDOI2015-约数个数和\"><a href=\"#P3327-SDOI2015-约数个数和\" class=\"headerlink\" title=\"P3327 [SDOI2015]约数个数和\"></a><a href=\"https://www.luogu.org/problemnew/show/P3327\">P3327 [SDOI2015]约数个数和</a></h2><p>$\\sum_{i=1}^n\\sum_{j=1}^m\\sum_{k|gcd(i,j)}1$</p>\n<h3 id=\"反演过程：-4\"><a href=\"#反演过程：-4\" class=\"headerlink\" title=\"反演过程：\"></a>反演过程：</h3><p>$F(x)=\\sum_{i|x}1$</p>\n<p>$\\sum_{i=1}^n\\sum_{j=1}^mF(gcd(i,j))$</p>\n<p>$\\sum_{d=1}^{min(n,m)}\\sum_{i=1}^n\\sum_{j=1}^mF(d)[gcd(i,j)=d]$</p>\n<p>$\\sum_{d=1}^{min(n,m)}F(d)\\sum_{i=1}^n\\sum_{j=1}^m[gcd(i,j)=d]$</p>\n<p>$\\sum_{d=1}^{min(n,m)}F(d)\\sum_{d’=1}^{\\left\\lfloor\\frac{min(n,m)}{d}\\right\\rfloor}\\mu(d’)\\left\\lfloor\\frac{n}{d’d}\\right\\rfloor\\left\\lfloor\\frac{m}{d’d}\\right\\rfloor$</p>\n<p>$\\sum_{T=1}^{min(n,m)}\\sum_{d|T}F(d)\\mu\\left(\\frac{T}{d}\\right){\\left\\lfloor\\frac{n}{T}\\right\\rfloor}{\\left\\lfloor\\frac{m}{T}\\right\\rfloor}$</p>\n<p>$\\sum_{T=1}^{min(n,m)}{\\left\\lfloor\\frac{n}{T}\\right\\rfloor}{\\left\\lfloor\\frac{m}{T}\\right\\rfloor}\\sum_{d|T}F(d)\\mu\\left(\\frac{T}{d}\\right)$</p>\n<p>$f(x)=\\sum_{d|T}F(d)\\mu\\left(\\frac{T}{d}\\right)$</p>\n<p>$\\sum_{T=1}^{min(n,m)}{\\left\\lfloor\\frac{n}{T}\\right\\rfloor}{\\left\\lfloor\\frac{m}{T}\\right\\rfloor}f(T)$</p>\n<ul>\n<li>$\\ \\ \\ \\ \\ \\,$ $O(n\\log n)$预处理$F$，$f$和$\\mu$，询问分块，复杂度$O(\\sqrt n\\log n)$，总时间复杂度$O(n\\log n+T\\sqrt n\\log n)$，和<a href=\"https://www.luogu.org/problemnew/show/P3312\">P3312 [SDOI2014]数表</a>这道题差不多</li>\n</ul>\n<h3 id=\"代码-4\"><a href=\"#代码-4\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdlib&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> inf=<span class=\"number\">0x7fffffff</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">double</span> eps=<span class=\"number\">1e-10</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">double</span> pi=<span class=\"built_in\">acos</span>(<span class=\"number\">-1.0</span>);</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">50010</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">int</span> <span class=\"title\">read</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">  <span class=\"type\">int</span> x=<span class=\"number\">0</span>,f=<span class=\"number\">1</span>;<span class=\"type\">char</span> ch;ch=<span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(ch&lt;<span class=\"string\">&#x27;0&#x27;</span>||ch&gt;<span class=\"string\">&#x27;9&#x27;</span>)&#123;<span class=\"keyword\">if</span>(ch==<span class=\"string\">&#x27;-&#x27;</span>) f=<span class=\"number\">-1</span>;ch=<span class=\"built_in\">getchar</span>();&#125;</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(ch&gt;=<span class=\"string\">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class=\"string\">&#x27;9&#x27;</span>)&#123;x=x*<span class=\"number\">10</span>+ch-<span class=\"string\">&#x27;0&#x27;</span>;ch=<span class=\"built_in\">getchar</span>();&#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> x*f;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">bool</span> vis[N];</span><br><span class=\"line\"><span class=\"type\">int</span> prim[N],mu[N],sum[N];</span><br><span class=\"line\"><span class=\"type\">long</span> <span class=\"type\">long</span> g[N];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">get_mu</span><span class=\"params\">(<span class=\"type\">int</span> n)</span></span>&#123;</span><br><span class=\"line\">  mu[<span class=\"number\">1</span>]=<span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">2</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!vis[i])&#123;mu[i]=<span class=\"number\">-1</span>;prim[++prim[<span class=\"number\">0</span>]]=i;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;=prim[<span class=\"number\">0</span>]&amp;&amp;i*prim[j]&lt;=n;j++)&#123;</span><br><span class=\"line\">      vis[i*prim[j]]=<span class=\"number\">1</span>;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(i%prim[j]==<span class=\"number\">0</span>)<span class=\"keyword\">break</span>;</span><br><span class=\"line\">      <span class=\"keyword\">else</span> mu[i*prim[j]]=-mu[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)sum[i]=sum[i<span class=\"number\">-1</span>]+mu[i];</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">    <span class=\"type\">long</span> <span class=\"type\">long</span> ans=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> l=<span class=\"number\">1</span>,r;l&lt;=i;l=r+<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">      r=(i/(i/l));</span><br><span class=\"line\">      ans+=<span class=\"number\">1ll</span>*(r-l+<span class=\"number\">1</span>)*<span class=\"number\">1ll</span>*(i/l);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    g[i]=ans;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"title\">Ans</span><span class=\"params\">(<span class=\"type\">int</span> n,<span class=\"type\">int</span> m)</span></span>&#123;</span><br><span class=\"line\">  <span class=\"type\">int</span> max_rep=<span class=\"built_in\">min</span>(n,m);</span><br><span class=\"line\">  <span class=\"type\">long</span> <span class=\"type\">long</span> ans=<span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> l=<span class=\"number\">1</span>,r;l&lt;=max_rep;l=r+<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">    r=<span class=\"built_in\">min</span>(n/(n/l),m/(m/l));</span><br><span class=\"line\">  \tans+=(sum[r]-sum[l<span class=\"number\">-1</span>])*<span class=\"number\">1ll</span>*g[n/l]*<span class=\"number\">1ll</span>*g[m/l];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"type\">int</span> T=<span class=\"built_in\">read</span>();</span><br><span class=\"line\"> \t<span class=\"built_in\">get_mu</span>(N<span class=\"number\">-10</span>);</span><br><span class=\"line\"> \t<span class=\"keyword\">while</span>(T--)&#123;</span><br><span class=\"line\"> \t\t<span class=\"type\">int</span> a=<span class=\"built_in\">read</span>(),b=<span class=\"built_in\">read</span>();</span><br><span class=\"line\"> \t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%lld\\n&quot;</span>,<span class=\"built_in\">Ans</span>(a,b));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"P3455-POI2007-ZAP-Queries\"><a href=\"#P3455-POI2007-ZAP-Queries\" class=\"headerlink\" title=\"P3455 [POI2007]ZAP-Queries\"></a><a href=\"https://www.luogu.org/problemnew/show/P3455\">P3455 [POI2007]ZAP-Queries</a></h2><p>$\\sum_{i=1}^a\\sum_{j=1}^b[gcd(i,j)=c]$</p>\n<h3 id=\"反演过程：-5\"><a href=\"#反演过程：-5\" class=\"headerlink\" title=\"反演过程：\"></a>反演过程：</h3><p>$\\sum_{i=1}^a\\sum_{j=1}^b[gcd(i,j)=1]$</p>\n<p>$\\sum_{i=1}^{\\left\\lfloor\\frac{a}{c}\\right\\rfloor}\\sum_{j=1}^{\\left\\lfloor\\frac{b}{c}\\right\\rfloor}ϵ(gcd(i,j))$</p>\n<p>$\\sum_{i=1}^{\\left\\lfloor\\frac{a}{c}\\right\\rfloor}\\sum_{j=1}^{\\left\\lfloor\\frac{b}{c}\\right\\rfloor}(\\mu*1)(gcd(i,j))$</p>\n<p>$\\sum_{i=1}^{\\left\\lfloor\\frac{a}{c}\\right\\rfloor}\\sum_{j=1}^{\\left\\lfloor\\frac{b}{c}\\right\\rfloor}\\sum_{d|gcd(i,j)}\\mu(d)\\times 1$</p>\n<p>$\\sum_{x=1}^{\\left\\lfloor\\frac{min(a,b)}{c}\\right\\rfloor}\\sum_{d|x}\\mu(d){\\left\\lfloor\\frac{a}{xc}\\right\\rfloor}{\\left\\lfloor\\frac{b}{xc}\\right\\rfloor}$</p>\n<p>$\\sum_{d=1}^{\\left\\lfloor\\frac{min(a,b)}{c}\\right\\rfloor}\\mu(d){\\left\\lfloor\\frac{a}{dc}\\right\\rfloor}{\\left\\lfloor\\frac{b}{dc}\\right\\rfloor}$</p>\n<ul>\n<li>$\\ \\ \\ \\ \\ \\,$ 裸题啊！模板啊！$O(n)$预处理$\\mu$，询问分块，复杂度$O(\\sqrt n)$，总时间复杂度$O(n+T\\sqrt n)$</li>\n</ul>\n<h3 id=\"代码-5\"><a href=\"#代码-5\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdlib&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> inf=<span class=\"number\">0x7fffffff</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">double</span> eps=<span class=\"number\">1e-10</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">double</span> pi=<span class=\"built_in\">acos</span>(<span class=\"number\">-1.0</span>);</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">50010</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">int</span> <span class=\"title\">read</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">  <span class=\"type\">int</span> x=<span class=\"number\">0</span>,f=<span class=\"number\">1</span>;<span class=\"type\">char</span> ch;ch=<span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(ch&lt;<span class=\"string\">&#x27;0&#x27;</span>||ch&gt;<span class=\"string\">&#x27;9&#x27;</span>)&#123;<span class=\"keyword\">if</span>(ch==<span class=\"string\">&#x27;-&#x27;</span>) f=<span class=\"number\">-1</span>;ch=<span class=\"built_in\">getchar</span>();&#125;</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(ch&gt;=<span class=\"string\">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class=\"string\">&#x27;9&#x27;</span>)&#123;x=x*<span class=\"number\">10</span>+ch-<span class=\"string\">&#x27;0&#x27;</span>;ch=<span class=\"built_in\">getchar</span>();&#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> x*f;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">bool</span> vis[N];</span><br><span class=\"line\"><span class=\"type\">int</span> prim[N],mu[N],sum[N],k;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">get_mu</span><span class=\"params\">(<span class=\"type\">int</span> n)</span></span>&#123;</span><br><span class=\"line\">  mu[<span class=\"number\">1</span>]=<span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">2</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!vis[i])&#123;mu[i]=<span class=\"number\">-1</span>;prim[++prim[<span class=\"number\">0</span>]]=i;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;=prim[<span class=\"number\">0</span>]&amp;&amp;i*prim[j]&lt;=n;j++)&#123;</span><br><span class=\"line\">      vis[i*prim[j]]=<span class=\"number\">1</span>;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(i%prim[j]==<span class=\"number\">0</span>)<span class=\"keyword\">break</span>;</span><br><span class=\"line\">      <span class=\"keyword\">else</span> mu[i*prim[j]]=-mu[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)</span><br><span class=\"line\">  sum[i]=sum[i<span class=\"number\">-1</span>]+mu[i];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"title\">Ans</span><span class=\"params\">(<span class=\"type\">int</span> a,<span class=\"type\">int</span> b)</span></span>&#123;</span><br><span class=\"line\">  <span class=\"type\">int</span> max_rep=<span class=\"built_in\">min</span>(a,b);</span><br><span class=\"line\">  <span class=\"type\">long</span> <span class=\"type\">long</span> ans=<span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> l=<span class=\"number\">1</span>,r;l&lt;=max_rep;l=r+<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">    r=<span class=\"built_in\">min</span>(a/(a/l),b/(b/l));</span><br><span class=\"line\">    ans+=(<span class=\"type\">long</span> <span class=\"type\">long</span>)(a/(l*k))*(<span class=\"type\">long</span> <span class=\"type\">long</span>)(b/(l*k))*(<span class=\"type\">long</span> <span class=\"type\">long</span>)(sum[r]-sum[l<span class=\"number\">-1</span>]);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> T;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"> \tT=<span class=\"built_in\">read</span>();</span><br><span class=\"line\"> \t<span class=\"built_in\">get_mu</span>(N<span class=\"number\">-10</span>);</span><br><span class=\"line\"> \t<span class=\"keyword\">while</span>(T--)&#123;</span><br><span class=\"line\"> \t\t<span class=\"type\">int</span> a=<span class=\"built_in\">read</span>(),b=<span class=\"built_in\">read</span>();k=<span class=\"built_in\">read</span>();</span><br><span class=\"line\"> \t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%lld\\n&quot;</span>,<span class=\"built_in\">Ans</span>(a,b));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"P1829-国家集训队-Crash的数字表格-JZPTAB\"><a href=\"#P1829-国家集训队-Crash的数字表格-JZPTAB\" class=\"headerlink\" title=\"P1829 [国家集训队]Crash的数字表格 / JZPTAB\"></a><a href=\"https://www.luogu.org/problemnew/show/P1829\">P1829 [国家集训队]Crash的数字表格 / JZPTAB</a></h2><p>$\\sum_{i=1}^n\\sum_{j=1}^m lca(i,j)$</p>\n<h3 id=\"反演过程：-6\"><a href=\"#反演过程：-6\" class=\"headerlink\" title=\"反演过程：\"></a>反演过程：</h3><p>$\\sum_{i=1}^n\\sum_{j=1}^m\\frac{ij}{gcd(i,j)}$</p>\n<p>$\\sum_{d=1}^{min(n,m)}\\sum_{i=1}^n\\sum_{j=1}^m\\frac{ij}{d}[gcd(i,j)=d]$</p>\n<p>$\\sum_{d=1}^{min(n,m)}\\frac{1}{d}\\sum_{i=1}^n\\sum_{j=1}^mij[gcd(i,j)=d]$</p>\n<p>$\\sum_{d=1}^{min(n,m)}\\frac{1}{d}\\sum_{i=1}^{\\left\\lfloor\\frac{n}{d}\\right\\rfloor}\\sum_{j=1}^{\\left\\lfloor\\frac{m}{d}\\right\\rfloor}ij\\cdot d^2[gcd(i,j)=1]$</p>\n<p>$\\sum_{d=1}^{min(n,m)}d\\sum_{i=1}^{\\left\\lfloor\\frac{n}{d}\\right\\rfloor}\\sum_{j=1}^{\\left\\lfloor\\frac{m}{d}\\right\\rfloor}ij[gcd(i,j)=1]$</p>\n<p>$\\sum_{d=1}^{min(n,m)}d\\sum_{i=1}^{\\left\\lfloor\\frac{n}{d}\\right\\rfloor}\\sum_{j=1}^{\\left\\lfloor\\frac{m}{d}\\right\\rfloor}ijϵ(gcd(i,j))$</p>\n<p>$\\sum_{d=1}^{min(n,m)}d\\sum_{i=1}^{\\left\\lfloor\\frac{n}{d}\\right\\rfloor}\\sum_{j=1}^{\\left\\lfloor\\frac{m}{d}\\right\\rfloor}ij\\sum_{k|gcd(i,j)}\\mu(k)$</p>\n<p>$\\sum_{d=1}^{min(n,m)}d\\sum_{k=1}^{\\left\\lfloor\\frac{min(n,m)}{d}\\right\\rfloor}\\mu(k)\\sum_{i=1}^{\\left\\lfloor\\frac{n}{d}\\right\\rfloor}\\sum_{j=1}^{\\left\\lfloor\\frac{m}{d}\\right\\rfloor}ij[k|gcd(i,j)]$</p>\n<p>$\\sum_{d=1}^{min(n,m)}d\\sum_{k=1}^{\\left\\lfloor\\frac{min(n,m)}{d}\\right\\rfloor}\\mu(k)\\sum_{i=1}^{\\left\\lfloor\\frac{n}{dk}\\right\\rfloor}\\sum_{j=1}^{\\left\\lfloor\\frac{m}{dk}\\right\\rfloor}ij\\cdot k^2$</p>\n<p>$\\sum_{d=1}^{min(n,m)}d\\sum_{k=1}^{\\left\\lfloor\\frac{min(n,m)}{d}\\right\\rfloor}\\mu(k)\\cdot k^2\\sum_{i=1}^{\\left\\lfloor\\frac{n}{dk}\\right\\rfloor}\\sum_{j=1}^{\\left\\lfloor\\frac{m}{dk}\\right\\rfloor}ij$</p>\n<p>$\\begin{aligned}F(n,m)=&amp;\\sum_{k=1}^{\\frac{min(n,m)}{d}}\\mu(k)\\cdot k^2\\sum_{i=1}^{\\left\\lfloor\\frac{n}{k}\\right\\rfloor}\\sum_{j=1}^{\\left\\lfloor\\frac{m}{k}\\right\\rfloor}ij\\\\=&amp;\\sum_{k=1}^{\\frac{min(n,m)}{d}}\\mu(k)\\cdot k^2\\cdot\\frac{\\left\\lfloor\\frac{n}{k}\\right\\rfloor\\cdot(\\left\\lfloor\\frac{n}{k}\\right\\rfloor+1)}{2}\\times\\frac{\\left\\lfloor\\frac{m}{k}\\right\\rfloor\\cdot(\\left\\lfloor\\frac{m}{k}\\right\\rfloor+1)}{2} \\end{aligned}$</p>\n<p>$\\sum_{d=1}^{min(n,m)}d\\times F\\left(\\left\\lfloor\\frac{n}{k}\\right\\rfloor,\\left\\lfloor\\frac{m}{k}\\right\\rfloor\\right)$</p>\n<ul>\n<li>$\\ \\ \\ \\ \\ \\,$ 感觉很神奇，需要连续提取 $2$ 次公约数，$O(n)$预处理$\\mu$，分块询问$F$,$O(\\sqrt{\\sqrt n})$,答案询问分块，复杂度$O(\\sqrt n)$，嵌套起来总时间复杂度$O(n+n^{\\frac{3}{4}})$，代码比较丑</li>\n</ul>\n<h3 id=\"代码-6\"><a href=\"#代码-6\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdlib&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> inf=<span class=\"number\">0x7fffffff</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">double</span> eps=<span class=\"number\">1e-10</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">double</span> pi=<span class=\"built_in\">acos</span>(<span class=\"number\">-1.0</span>);</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">int</span> <span class=\"title\">read</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> x=<span class=\"number\">0</span>,f=<span class=\"number\">1</span>;<span class=\"type\">char</span> ch;ch=<span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(ch&lt;<span class=\"string\">&#x27;0&#x27;</span>||ch&gt;<span class=\"string\">&#x27;9&#x27;</span>)&#123;<span class=\"keyword\">if</span>(ch==<span class=\"string\">&#x27;-&#x27;</span>) f=<span class=\"number\">-1</span>;ch=<span class=\"built_in\">getchar</span>();&#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(ch&gt;=<span class=\"string\">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class=\"string\">&#x27;9&#x27;</span>)&#123;x=x*<span class=\"number\">10</span>+ch-<span class=\"string\">&#x27;0&#x27;</span>;ch=<span class=\"built_in\">getchar</span>();&#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x*f;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">10010000</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">long</span> <span class=\"type\">long</span> mod=<span class=\"number\">20101009</span>;</span><br><span class=\"line\"><span class=\"type\">long</span> <span class=\"type\">long</span> sum[N];</span><br><span class=\"line\"><span class=\"type\">bool</span> vis[N];</span><br><span class=\"line\"><span class=\"type\">int</span> prim[N],mu[N];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">get_mu</span><span class=\"params\">(<span class=\"type\">int</span> n)</span></span>&#123;</span><br><span class=\"line\">  mu[<span class=\"number\">1</span>]=<span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">2</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!vis[i])&#123;mu[i]=<span class=\"number\">-1</span>;prim[++prim[<span class=\"number\">0</span>]]=i;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;=prim[<span class=\"number\">0</span>]&amp;&amp;i*prim[j]&lt;=n;j++)&#123;</span><br><span class=\"line\">      vis[i*prim[j]]=<span class=\"number\">1</span>;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(i%prim[j]==<span class=\"number\">0</span>)<span class=\"keyword\">break</span>;</span><br><span class=\"line\">      <span class=\"keyword\">else</span> mu[i*prim[j]]=-mu[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)</span><br><span class=\"line\">  sum[i]=(sum[i<span class=\"number\">-1</span>]+<span class=\"number\">1ll</span>*mu[i]*<span class=\"number\">1ll</span>*i%mod*<span class=\"number\">1ll</span>*i%mod)%mod;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"> \t<span class=\"type\">int</span> n=<span class=\"built_in\">read</span>(),m=<span class=\"built_in\">read</span>();</span><br><span class=\"line\"> \t<span class=\"keyword\">if</span>(n&gt;m)<span class=\"built_in\">swap</span>(n,m);</span><br><span class=\"line\">  <span class=\"built_in\">get_mu</span>(n);</span><br><span class=\"line\">  <span class=\"type\">long</span> <span class=\"type\">long</span> ans=<span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"type\">long</span> <span class=\"type\">long</span> inv2=(mod+<span class=\"number\">1ll</span>)/<span class=\"number\">2ll</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> d=<span class=\"number\">1</span>;d&lt;=n;d++)&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> x=n/d,y=m/d,minn=<span class=\"built_in\">min</span>(x,y);</span><br><span class=\"line\">    <span class=\"type\">long</span> <span class=\"type\">long</span> Sum=<span class=\"number\">0ll</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> l=<span class=\"number\">1</span>,r;l&lt;=minn;l=r+<span class=\"number\">1ll</span>)&#123;</span><br><span class=\"line\">    \tr=<span class=\"built_in\">min</span>(x/(x/l),y/(y/l));</span><br><span class=\"line\">      Sum=(Sum+(sum[r]-sum[l<span class=\"number\">-1</span>])%mod*(((<span class=\"number\">1ll</span>+x/l)%mod*<span class=\"number\">1ll</span>*(x/l)%mod*inv2%mod)%mod)%mod*(((<span class=\"number\">1ll</span>+y/l)%mod*<span class=\"number\">1ll</span>*(y/l)%mod*inv2%mod)%mod)%mod)%mod;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ans=(ans+Sum*<span class=\"number\">1ll</span>*d)%mod;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> \t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%lld\\n&quot;</span>,(ans%mod+mod)%mod);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>扩展：这个题其实是两道题的融合，上面的方法是过不了JZPTAB的，在bzoj上面是权限题，所以先挖坑，我们下面继续来化简：</li>\n</ul>\n<p>$\\sum_{d=1}^{min(n,m)}d\\sum_{k=1}^{\\left\\lfloor\\frac{min(n,m)}{d}\\right\\rfloor}\\mu(k)\\cdot k^2\\sum_{i=1}^{\\left\\lfloor\\frac{n}{dk}\\right\\rfloor}\\sum_{j=1}^{\\left\\lfloor\\frac{m}{dk}\\right\\rfloor}ij$</p>\n<p>$\\sum_{d=1}^{min(n,m)}\\sum_{k=1}^{\\left\\lfloor\\frac{min(n,m)}{d}\\right\\rfloor}d\\cdot \\mu(k)\\cdot k^2\\sum_{i=1}^{\\left\\lfloor\\frac{n}{dk}\\right\\rfloor}\\sum_{j=1}^{\\left\\lfloor\\frac{m}{dk}\\right\\rfloor}ij$</p>\n<p>$\\sum_{T=1}^{min(n,m)}\\sum_{i=1}^{\\left\\lfloor\\frac{n}{T}\\right\\rfloor}\\sum_{j=1}^{\\left\\lfloor\\frac{m}{T}\\right\\rfloor}ij\\sum_{d|T}\\frac{T}{d}\\cdot \\mu(d)\\cdot d^2$</p>\n<p>$\\sum_{T=1}^{min(n,m)}\\sum_{i=1}^{\\left\\lfloor\\frac{n}{T}\\right\\rfloor}\\sum_{j=1}^{\\left\\lfloor\\frac{m}{T}\\right\\rfloor}ij\\sum_{d|T}T \\mu(d) d$</p>\n<p>$F(T)=\\sum_{d|T}T \\mu(d) d$</p>\n<p>$\\sum_{T=1}^{min(n,m)}\\frac{\\left\\lfloor\\frac{n}{T}\\right\\rfloor\\cdot(\\left\\lfloor\\frac{n}{T}\\right\\rfloor+1)}{2}\\times\\frac{\\left\\lfloor\\frac{m}{T}\\right\\rfloor\\cdot(\\left\\lfloor\\frac{m}{T}\\right\\rfloor+1)}{2}\\times F(T)$</p>\n<ul>\n<li><p>$\\ \\ \\ \\ \\ \\,$ 显然，$F$是积性函数，我们最快可以$O(n)$地把他筛出来，具体操作可以看<a href=\"https://www.luogu.org/blog/Althen-Way-Satan/xian-xing-shai\">【积性函数的线性筛】</a>，欧拉筛三步走，询问分块，复杂度$O(\\sqrt n)$,总时间复杂度$O(n+T\\sqrt n)$</p>\n<p>$\\tt step1$. 如果$p$是素数：<br>$f(p)=p-p^2$</p>\n<p>$\\tt step2$. 如果$p$是素数，$i\\%p\\neq0$：$f(pi)=f(i)\\times (p-p^2)$</p>\n<p>$\\tt step3$. 如果$p$是素数，$i\\%p=0$：我们把 $pi$ 分解成 $p^cx$ ：<br>$f(pi)=f(p^cx)=f(x)\\times(p^c-p^{c+1})$</p>\n</li>\n</ul>\n<h3 id=\"代码-7\"><a href=\"#代码-7\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdlib&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cctype&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;stack&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;map&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;set&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> inf=<span class=\"number\">0x7fffffff</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">double</span> eps=<span class=\"number\">1e-10</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">double</span> pi=<span class=\"built_in\">acos</span>(<span class=\"number\">-1.0</span>);</span><br><span class=\"line\"><span class=\"comment\">//char buf[1&lt;&lt;15],*S=buf,*T=buf;</span></span><br><span class=\"line\"><span class=\"comment\">//char getch()&#123;return S==T&amp;&amp;(T=(S=buf)+fread(buf,1,1&lt;&lt;15,stdin),S==T)?0:*S++;&#125;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">int</span> <span class=\"title\">read</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> x=<span class=\"number\">0</span>,f=<span class=\"number\">1</span>;<span class=\"type\">char</span> ch;ch=<span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(ch&lt;<span class=\"string\">&#x27;0&#x27;</span>||ch&gt;<span class=\"string\">&#x27;9&#x27;</span>)&#123;<span class=\"keyword\">if</span>(ch==<span class=\"string\">&#x27;-&#x27;</span>) f=<span class=\"number\">0</span>;ch=<span class=\"built_in\">getchar</span>();&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(ch&gt;=<span class=\"string\">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class=\"string\">&#x27;9&#x27;</span>)&#123;x=(x&lt;&lt;<span class=\"number\">1</span>)+(x&lt;&lt;<span class=\"number\">3</span>)+(ch&amp;<span class=\"number\">15</span>);ch=<span class=\"built_in\">getchar</span>();&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(f)<span class=\"keyword\">return</span> x;<span class=\"keyword\">else</span> <span class=\"keyword\">return</span> -x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">1e7</span>+<span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">long</span> <span class=\"type\">long</span> mod=<span class=\"number\">20101009</span>;</span><br><span class=\"line\"><span class=\"type\">long</span> <span class=\"type\">long</span> inv2=(mod+<span class=\"number\">1ll</span>)/<span class=\"number\">2ll</span>;</span><br><span class=\"line\"><span class=\"type\">bool</span> vis[N];</span><br><span class=\"line\"><span class=\"type\">long</span> <span class=\"type\">long</span> pri[N],cnt[N],power[N];</span><br><span class=\"line\"><span class=\"type\">long</span> <span class=\"type\">long</span> prime[N],f[N];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Get_Shai</span><span class=\"params\">(<span class=\"type\">long</span> <span class=\"type\">long</span> n)</span></span>&#123;</span><br><span class=\"line\">  f[<span class=\"number\">1</span>]=<span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">long</span> <span class=\"type\">long</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)power[i]=<span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">long</span> <span class=\"type\">long</span> i=<span class=\"number\">2</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!vis[i])&#123;</span><br><span class=\"line\">      cnt[i]=<span class=\"number\">1</span>;pri[i]=i;power[i]=i;</span><br><span class=\"line\">      prime[++prime[<span class=\"number\">0</span>]]=i;</span><br><span class=\"line\">      f[i]=(<span class=\"number\">1ll</span>*i<span class=\"number\">-1ll</span>*i*i%mod+mod)%mod;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">long</span> <span class=\"type\">long</span> j=<span class=\"number\">1</span>,v,pc;j&lt;=prime[<span class=\"number\">0</span>]&amp;&amp;i*prime[j]&lt;=n;j++)&#123;</span><br><span class=\"line\">      v=i*prime[j];</span><br><span class=\"line\">      vis[v]=<span class=\"number\">1</span>;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(i%prime[j]==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        cnt[v]=cnt[i]+<span class=\"number\">1</span>;pri[v]=pri[i];power[v]=(<span class=\"number\">1ll</span>*power[i]*pri[i])%mod;</span><br><span class=\"line\">        f[v]=f[v/power[v]]*(<span class=\"number\">1ll</span>*power[v]<span class=\"number\">-1ll</span>*power[v]*pri[i]%mod+mod)%mod;</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      cnt[v]=<span class=\"number\">1</span>;pri[v]=prime[j];power[v]=prime[j];</span><br><span class=\"line\">      f[v]=(f[i]*f[prime[j]])%mod;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)f[i]=(<span class=\"number\">1ll</span>*f[i]+f[i<span class=\"number\">-1</span>])%mod;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"title\">Get_ans</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> y)</span></span>&#123;</span><br><span class=\"line\">  <span class=\"type\">long</span> <span class=\"type\">long</span> Sum=<span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> l=<span class=\"number\">1</span>,r;l&lt;=x;l=r+<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">    r=<span class=\"built_in\">min</span>(x/(x/l),y/(y/l));</span><br><span class=\"line\">    Sum=(Sum+(<span class=\"number\">1ll</span>*f[r]-f[l<span class=\"number\">-1</span>]+mod)%mod*(((<span class=\"number\">1ll</span>+x/l)%mod*<span class=\"number\">1ll</span>*(x/l)%mod*inv2%mod)%mod)%mod*(((<span class=\"number\">1ll</span>+y/l)%mod*<span class=\"number\">1ll</span>*(y/l)%mod*inv2%mod)%mod)%mod)%mod;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> Sum;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> n=<span class=\"built_in\">read</span>(),m=<span class=\"built_in\">read</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(n&gt;m)<span class=\"built_in\">swap</span>(n,m);</span><br><span class=\"line\">  <span class=\"built_in\">Get_Shai</span>(<span class=\"number\">1ll</span>*n);</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%lld\\n&quot;</span>,(<span class=\"built_in\">Get_ans</span>(n,m)%mod+mod)%mod);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<ul>\n<li>再扩展，这道题还可以用杜教筛加速的，具体<a href=\"https://blog.csdn.net/VictoryCzt/article/details/85054670?tdsourcetag=s_pctim_aiomsg\">戳这里</a>，感觉和这道题差不多<a href=\"https://www.luogu.org/problemnew/show/P3768\">P3768</a>，就不贴了。</li>\n</ul>\n<h2 id=\"P3768-简单的数学题\"><a href=\"#P3768-简单的数学题\" class=\"headerlink\" title=\"P3768 简单的数学题\"></a><a href=\"https://www.luogu.org/problemnew/show/P3768\">P3768 简单的数学题</a></h2><p>$\\sum_{i=1}^n\\sum_{j=1}^nijgcd(i,j)$</p>\n<h3 id=\"反演过程：-7\"><a href=\"#反演过程：-7\" class=\"headerlink\" title=\"反演过程：\"></a>反演过程：</h3><p>$\\sum_{d=1}^{n}\\sum_{i=1}^n\\sum_{j=1}^nijd[gcd(i,j)=d]$</p>\n<p>$\\sum_{d=1}^{n}d\\sum_{i=1}^n\\sum_{j=1}^nij[gcd(i,j)=d]$</p>\n<p>$\\sum_{d=1}^{n}{d}\\sum_{i=1}^{\\left\\lfloor\\frac{n}{d}\\right\\rfloor}\\sum_{j=1}^{\\left\\lfloor\\frac{n}{d}\\right\\rfloor}ij\\cdot d^2[gcd(i,j)=1]$</p>\n<p>$\\sum_{d=1}^{n}{d^3}\\sum_{i=1}^{\\left\\lfloor\\frac{n}{d}\\right\\rfloor}\\sum_{j=1}^{\\left\\lfloor\\frac{n}{d}\\right\\rfloor}ij[gcd(i,j)=1]$</p>\n<p>$\\sum_{d=1}^{n}d^3\\sum_{i=1}^{\\left\\lfloor\\frac{n}{d}\\right\\rfloor}\\sum_{j=1}^{\\left\\lfloor\\frac{n}{d}\\right\\rfloor}ijϵ(gcd(i,j))$</p>\n<p>$\\sum_{d=1}^{n}d^3\\sum_{i=1}^{\\left\\lfloor\\frac{n}{d}\\right\\rfloor}\\sum_{j=1}^{\\left\\lfloor\\frac{n}{d}\\right\\rfloor}ij\\sum_{k|gcd(i,j)}\\mu(k)$</p>\n<p>$\\sum_{d=1}^{n}d^3\\sum_{k=1}^{\\left\\lfloor\\frac{n}{d}\\right\\rfloor}\\mu(k)\\sum_{i=1}^{\\left\\lfloor\\frac{n}{d}\\right\\rfloor}\\sum_{j=1}^{\\left\\lfloor\\frac{n}{d}\\right\\rfloor}ij[k|gcd(i,j)]$</p>\n<p>$\\sum_{d=1}^{n}d^3\\sum_{k=1}^{\\left\\lfloor\\frac{n}{d}\\right\\rfloor}\\mu(k)\\sum_{i=1}^{\\left\\lfloor\\frac{n}{dk}\\right\\rfloor}\\sum_{j=1}^{\\left\\lfloor\\frac{m}{dk}\\right\\rfloor}ij\\cdot k^2$</p>\n<p>$\\sum_{d=1}^{n}d^3\\sum_{k=1}^{\\left\\lfloor\\frac{n}{d}\\right\\rfloor}\\mu(k)\\cdot k^2\\sum_{i=1}^{\\left\\lfloor\\frac{n}{dk}\\right\\rfloor}\\sum_{j=1}^{\\left\\lfloor\\frac{m}{dk}\\right\\rfloor}ij$</p>\n<p>$\\sum_{T=1}^{n}\\sum_{i=1}^{\\left\\lfloor\\frac{n}{T}\\right\\rfloor}\\sum_{j=1}^{\\left\\lfloor\\frac{n}{T}\\right\\rfloor}ij\\sum_{d|T}d^3\\cdot \\mu\\left(\\frac{T}{d}\\right)\\cdot \\left(\\frac{T}{d}\\right)^2$</p>\n<p>$\\sum_{T=1}^{n}\\sum_{i=1}^{\\left\\lfloor\\frac{n}{T}\\right\\rfloor}\\sum_{j=1}^{\\left\\lfloor\\frac{n}{T}\\right\\rfloor}ij\\sum_{d|T}T^2\\cdot d\\cdot \\mu\\left(\\frac{T}{d}\\right)$</p>\n<p>$\\sum_{T=1}^{n}\\sum_{i=1}^{\\left\\lfloor\\frac{n}{T}\\right\\rfloor}\\sum_{j=1}^{\\left\\lfloor\\frac{n}{T}\\right\\rfloor}ijT^2\\sum_{d|T}d\\cdot \\mu\\left(\\frac{T}{d}\\right)$</p>\n<p>$\\sum_{T=1}^{n}\\sum_{i=1}^{\\left\\lfloor\\frac{n}{T}\\right\\rfloor}\\sum_{j=1}^{\\left\\lfloor\\frac{n}{T}\\right\\rfloor}ijT^2(id*\\mu)(T)$</p>\n<p>$\\sum_{T=1}^{n}\\sum_{i=1}^{\\left\\lfloor\\frac{n}{T}\\right\\rfloor}\\sum_{j=1}^{\\left\\lfloor\\frac{n}{T}\\right\\rfloor}ijT^2\\varphi(T)$</p>\n<p>$\\sum_{T=1}^{n}\\frac{\\left\\lfloor\\frac{n}{T}\\right\\rfloor\\cdot(\\left\\lfloor\\frac{n}{T}\\right\\rfloor+1)}{2}\\times\\frac{\\left\\lfloor\\frac{m}{T}\\right\\rfloor\\cdot(\\left\\lfloor\\frac{m}{T}\\right\\rfloor+1)}{2}\\times T^2\\varphi(T)$</p>\n<ul>\n<li><p>$\\ \\ \\ \\ \\ \\,$ 需要连续提取 $2$ 次公约数，和<a href=\"https://www.luogu.org/problemnew/show/P1829\">P1829</a>有异曲同工之妙，杜教筛筛出 $T^2\\varphi(T)$ 的前缀和，分块询问答案询问，总时间复杂度$O(n^{\\frac{2}{3}})$，杜教筛详见<a href=\"https://www.luogu.org/blog/Althen-Way-Satan/mu-bi-wu-si-fan-yan-yu-du-jiao-shai\">【莫比乌斯反演和杜教筛】</a></p>\n<p>$f(x)=x^2\\varphi(x)$</p>\n<p>$g(x)=x^2\\ \\ \\ ,\\sum_{i=1}^{x}g(i)=\\frac{x(x+1)(2x+1)}{6}$</p>\n<p>$(f<em>g)(x)=x^3\\ \\ \\ ,\\sum_{i=1}^{x}(f</em>g)(i)=\\frac{x^2(x+1)^2}{4}$</p>\n</li>\n</ul>\n<h3 id=\"代码-8\"><a href=\"#代码-8\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdlib&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;map&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;stack&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"title\">read</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">  <span class=\"type\">long</span> <span class=\"type\">long</span> x=<span class=\"number\">0</span>,f=<span class=\"number\">1</span>;<span class=\"type\">char</span> ch;ch=<span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(ch&lt;<span class=\"string\">&#x27;0&#x27;</span>||ch&gt;<span class=\"string\">&#x27;9&#x27;</span>)&#123;<span class=\"keyword\">if</span>(ch==<span class=\"string\">&#x27;-&#x27;</span>) f=<span class=\"number\">0</span>;ch=<span class=\"built_in\">getchar</span>();&#125;</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(ch&gt;=<span class=\"string\">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class=\"string\">&#x27;9&#x27;</span>)&#123;x=(x&lt;&lt;<span class=\"number\">1</span>)+(x&lt;&lt;<span class=\"number\">3</span>)+(ch&amp;<span class=\"number\">15</span>);ch=<span class=\"built_in\">getchar</span>();&#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(f)<span class=\"keyword\">return</span> x;<span class=\"keyword\">else</span> <span class=\"keyword\">return</span> -x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">8000010</span>;</span><br><span class=\"line\"><span class=\"type\">long</span> <span class=\"type\">long</span> mod,n,inv6,inv4;</span><br><span class=\"line\"><span class=\"type\">int</span> prim[N];</span><br><span class=\"line\"><span class=\"type\">long</span> <span class=\"type\">long</span> f[N];</span><br><span class=\"line\"><span class=\"type\">bool</span> vis[N];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">get_f</span><span class=\"params\">(<span class=\"type\">int</span> n)</span></span>&#123;</span><br><span class=\"line\">  f[<span class=\"number\">1</span>]=<span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">2</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!vis[i])&#123;f[i]=i<span class=\"number\">-1</span>;prim[++prim[<span class=\"number\">0</span>]]=i;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;=prim[<span class=\"number\">0</span>]&amp;&amp;i*prim[j]&lt;=n;j++)&#123;</span><br><span class=\"line\">      vis[i*prim[j]]=<span class=\"number\">1</span>;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(i%prim[j]==<span class=\"number\">0</span>)&#123;f[i*prim[j]]=f[i]*prim[j];<span class=\"keyword\">break</span>;&#125;</span><br><span class=\"line\">      <span class=\"keyword\">else</span> f[i*prim[j]]=f[i]*(prim[j]<span class=\"number\">-1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i)f[i]=(f[i<span class=\"number\">-1</span>]+<span class=\"number\">1ll</span>*f[i]*i%mod*i%mod)%mod;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">map&lt;<span class=\"type\">long</span> <span class=\"type\">long</span>,<span class=\"type\">long</span> <span class=\"type\">long</span>&gt; mp;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"title\">power</span><span class=\"params\">(<span class=\"type\">long</span> <span class=\"type\">long</span> a,<span class=\"type\">long</span> <span class=\"type\">long</span> b)</span></span>&#123;</span><br><span class=\"line\">  <span class=\"type\">long</span> <span class=\"type\">long</span> ans=<span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(b)&#123;<span class=\"keyword\">if</span>(b&amp;<span class=\"number\">1</span>)ans=ans*a%mod;a=a*a%mod;b&gt;&gt;=<span class=\"number\">1</span>;&#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"title\">Sumfg</span><span class=\"params\">(<span class=\"type\">long</span> <span class=\"type\">long</span> x)</span></span>&#123;x%=mod;<span class=\"keyword\">return</span> x*(x+<span class=\"number\">1</span>)%mod*x%mod*(x+<span class=\"number\">1</span>)%mod*inv4%mod;&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"title\">Sumg</span><span class=\"params\">(<span class=\"type\">long</span> <span class=\"type\">long</span> x)</span></span>&#123;x%=mod;<span class=\"keyword\">return</span> x*(x+<span class=\"number\">1</span>)%mod*(x+x+<span class=\"number\">1</span>)%mod*inv6%mod;&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"title\">Sumf</span><span class=\"params\">(<span class=\"type\">long</span> <span class=\"type\">long</span> x)</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(x&lt;=<span class=\"built_in\">min</span>(N<span class=\"number\">-10</span>,(<span class=\"type\">int</span>)n))<span class=\"keyword\">return</span> f[x];</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(mp[x])<span class=\"keyword\">return</span> mp[x];</span><br><span class=\"line\">  <span class=\"type\">long</span> <span class=\"type\">long</span> ret=<span class=\"built_in\">Sumfg</span>(x);</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">long</span> <span class=\"type\">long</span> i=<span class=\"number\">2</span>,j;i&lt;=x;i=j+<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">  \tj=x/(x/i);</span><br><span class=\"line\">  \tret=(ret-(<span class=\"built_in\">Sumg</span>(j)-<span class=\"built_in\">Sumg</span>(i<span class=\"number\">-1</span>)+mod)%mod*<span class=\"built_in\">Sumf</span>(x/i)%mod+mod)%mod;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> mp[x]=(ret+mod)%mod;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  mod=<span class=\"built_in\">read</span>();n=<span class=\"built_in\">read</span>();</span><br><span class=\"line\">  inv4=<span class=\"built_in\">power</span>(<span class=\"number\">4</span>,mod<span class=\"number\">-2</span>);</span><br><span class=\"line\">  inv6=<span class=\"built_in\">power</span>(<span class=\"number\">6</span>,mod<span class=\"number\">-2</span>);</span><br><span class=\"line\">  <span class=\"built_in\">get_f</span>(<span class=\"built_in\">min</span>(N<span class=\"number\">-10</span>,(<span class=\"type\">int</span>)n));</span><br><span class=\"line\">  <span class=\"type\">long</span> <span class=\"type\">long</span> ans=<span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">long</span> <span class=\"type\">long</span> i=<span class=\"number\">1</span>,j;i&lt;=n;i=j+<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">    j=n/(n/i);</span><br><span class=\"line\">    ans=(ans+(<span class=\"built_in\">Sumf</span>(j)-<span class=\"built_in\">Sumf</span>(i<span class=\"number\">-1</span>))%mod*<span class=\"built_in\">Sumfg</span>(n/i)%mod)%mod;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%lld\\n&quot;</span>,(ans+mod)%mod);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"P4240-毒瘤之神的考验\"><a href=\"#P4240-毒瘤之神的考验\" class=\"headerlink\" title=\"P4240 毒瘤之神的考验\"></a><a href=\"https://www.luogu.org/problemnew/show/P4240\">P4240 毒瘤之神的考验</a></h2><p>$\\sum_{i=1}^n\\sum_{j=1}^m\\varphi(ij)$</p>\n<h3 id=\"反演过程：-8\"><a href=\"#反演过程：-8\" class=\"headerlink\" title=\"反演过程：\"></a>反演过程：</h3><p>$\\sum_{i=1}^n\\sum_{j=1}^m\\frac{\\varphi(i)\\varphi(j)gcd(i,j)}{\\varphi(gcd(i,j))}$</p>\n<p>$\\sum_{d=1}^{min(n,m)}\\sum_{i=1}^n\\sum_{j=1}^m\\frac{\\varphi(i)\\varphi(j)d}{\\varphi(d)}[gcd(i,j)=d]$</p>\n<p>$\\sum_{d=1}^{min(n,m)}\\frac{d}{\\varphi(d)}\\sum_{i=1}^n\\sum_{j=1}^m\\varphi(i)\\varphi(j)[gcd(i,j)=d]$</p>\n<p>$\\sum_{d=1}^{min(n,m)}\\frac{d}{\\varphi(d)}\\sum_{i=1}^{\\left\\lfloor\\frac{n}{d}\\right\\rfloor}\\sum_{j=1}^{\\left\\lfloor\\frac{m}{d}\\right\\rfloor}\\varphi(di)\\varphi(dj)[gcd(i,j)=1]$</p>\n<p>$\\sum_{d=1}^{min(n,m)}\\frac{d}{\\varphi(d)}\\sum_{i=1}^{\\left\\lfloor\\frac{n}{d}\\right\\rfloor}\\sum_{j=1}^{\\left\\lfloor\\frac{m}{d}\\right\\rfloor}\\varphi(di)\\varphi(dj)ϵ(gcd(i,j))$</p>\n<p>$\\sum_{d=1}^{min(n,m)}\\frac{d}{\\varphi(d)}\\sum_{i=1}^{\\left\\lfloor\\frac{n}{d}\\right\\rfloor}\\sum_{j=1}^{\\left\\lfloor\\frac{m}{d}\\right\\rfloor}\\varphi(di)\\varphi(dj)\\sum_{k|gcd(i,j)}\\mu(k)$</p>\n<p>$\\sum_{d=1}^{min(n,m)}\\frac{d}{\\varphi(d)}\\sum_{k=1}^{\\left\\lfloor\\frac{min(n,m)}{dk}\\right\\rfloor}\\mu(k)\\sum_{i=1}^{\\left\\lfloor\\frac{n}{d}\\right\\rfloor}\\sum_{j=1}^{\\left\\lfloor\\frac{m}{d}\\right\\rfloor}\\varphi(di)\\varphi(dj)[k|gcd(i,j)]$</p>\n<p>$\\sum_{d=1}^{min(n,m)}\\frac{d}{\\varphi(d)}\\sum_{k=1}^{\\left\\lfloor\\frac{min(n,m)}{dk}\\right\\rfloor}\\mu(k)\\sum_{i=1}^{\\left\\lfloor\\frac{n}{dk}\\right\\rfloor}\\sum_{j=1}^{\\left\\lfloor\\frac{m}{dk}\\right\\rfloor}\\varphi(dik)\\varphi(djk)$</p>\n<p>$\\sum_{T=1}^{min(n,m)}\\sum_{i=1}^{\\left\\lfloor\\frac{n}{T}\\right\\rfloor}\\sum_{j=1}^{\\left\\lfloor\\frac{m}{T}\\right\\rfloor}\\varphi(iT)\\varphi(jT)\\sum_{d|T}\\frac{d}{\\varphi(d)}\\mu(\\frac{T}{d})$</p>\n<ul>\n<li>$\\ \\ \\ \\ \\ \\,$ $O(n)$预处理出$\\mu$,$\\varphi$，$O(n\\log n)$预处理出后面的$\\sum_{d|T}\\frac{d}{\\varphi(d)}\\mu(\\frac{T}{d})$，然后对前面的进行分块操作，会发现要存很多东西，于是我们一边分块，一边操作，总复杂度很玄学，大约是$O(n\\log n+nT^{\\frac{2}{3}}+T(\\sqrt n+\\left\\lfloor\\frac{n}{T^{\\frac{1}{3}}}\\right\\rfloor))$,能过就行了XD,<del>(代码加了信仰fread)</del></li>\n</ul>\n<h3 id=\"代码-9\"><a href=\"#代码-9\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdlib&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;map&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;set&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;stack&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cctype&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> inf=<span class=\"number\">0x7fffffff</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">double</span> eps=<span class=\"number\">1e-10</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">double</span> pi=<span class=\"built_in\">acos</span>(<span class=\"number\">-1.0</span>);</span><br><span class=\"line\"><span class=\"type\">char</span> buf[<span class=\"number\">1</span>&lt;&lt;<span class=\"number\">15</span>],*S=buf,*TT=buf;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">char</span> <span class=\"title\">getch</span><span class=\"params\">()</span></span>&#123;<span class=\"keyword\">return</span> S==TT&amp;&amp;(TT=(S=buf)+<span class=\"built_in\">fread</span>(buf,<span class=\"number\">1</span>,<span class=\"number\">1</span>&lt;&lt;<span class=\"number\">15</span>,stdin),S==TT)?<span class=\"number\">0</span>:*S++;&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">int</span> <span class=\"title\">read</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">  <span class=\"type\">int</span> x=<span class=\"number\">0</span>,f=<span class=\"number\">1</span>;<span class=\"type\">char</span> ch;ch=<span class=\"built_in\">getch</span>();</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(ch&lt;<span class=\"string\">&#x27;0&#x27;</span>||ch&gt;<span class=\"string\">&#x27;9&#x27;</span>)&#123;<span class=\"keyword\">if</span>(ch==<span class=\"string\">&#x27;-&#x27;</span>) f=<span class=\"number\">0</span>;ch=<span class=\"built_in\">getch</span>();&#125;</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(ch&gt;=<span class=\"string\">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class=\"string\">&#x27;9&#x27;</span>)&#123;x=(x&lt;&lt;<span class=\"number\">1</span>)+(x&lt;&lt;<span class=\"number\">3</span>)+(ch&amp;<span class=\"number\">15</span>);ch=<span class=\"built_in\">getch</span>();&#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(f)<span class=\"keyword\">return</span> x;<span class=\"keyword\">else</span> <span class=\"keyword\">return</span> -x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">100010</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> mod=<span class=\"number\">998244353</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> B=<span class=\"number\">35</span>;</span><br><span class=\"line\"><span class=\"type\">bool</span> vis[N];</span><br><span class=\"line\"><span class=\"type\">int</span> prim[N],phi[N],mu[N],inv[N];</span><br><span class=\"line\"><span class=\"type\">int</span> F[N];</span><br><span class=\"line\">vector&lt;<span class=\"type\">int</span>&gt; G[N],T[B+<span class=\"number\">1</span>][B+<span class=\"number\">1</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">get_phi_mu_inv</span><span class=\"params\">(<span class=\"type\">int</span> n)</span></span>&#123;</span><br><span class=\"line\">  phi[<span class=\"number\">1</span>]=mu[<span class=\"number\">1</span>]=inv[<span class=\"number\">1</span>]=<span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">2</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!vis[i])phi[i]=i<span class=\"number\">-1</span>,mu[i]=<span class=\"number\">-1</span>,prim[++prim[<span class=\"number\">0</span>]]=i;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;=prim[<span class=\"number\">0</span>]&amp;&amp;i*prim[j]&lt;=n;j++)&#123;</span><br><span class=\"line\">      vis[i*prim[j]]=<span class=\"number\">1</span>;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(i%prim[j]==<span class=\"number\">0</span>)&#123;phi[i*prim[j]]=phi[i]*prim[j];<span class=\"keyword\">break</span>;&#125;</span><br><span class=\"line\">      <span class=\"keyword\">else</span> phi[i*prim[j]]=phi[i]*(prim[j]<span class=\"number\">-1</span>),mu[i*prim[j]]=-mu[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    inv[i]=<span class=\"number\">1ll</span>*(mod-mod/i)*inv[mod%i]%mod;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">init</span><span class=\"params\">(<span class=\"type\">int</span> n)</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=i;j&lt;=n;j+=i)</span><br><span class=\"line\">  F[j]=(F[j]+(<span class=\"number\">1ll</span>*mu[j/i]*i*inv[phi[i]]%mod+mod)%mod)%mod;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">    G[i].<span class=\"built_in\">push_back</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;=n/i;j++)</span><br><span class=\"line\">    G[i].<span class=\"built_in\">push_back</span>((G[i][j<span class=\"number\">-1</span>]+phi[i*j])%mod);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;=B;j++)</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> k=j;k&lt;=B;k++)&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> len=n/<span class=\"built_in\">max</span>(j,k);</span><br><span class=\"line\">    T[j][k].<span class=\"built_in\">push_back</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=len;i++)</span><br><span class=\"line\">    T[j][k].<span class=\"built_in\">push_back</span>((T[j][k][i<span class=\"number\">-1</span>]+<span class=\"number\">1ll</span>*F[i]*G[i][j]%mod*G[i][k]%mod)%mod);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"title\">Solve</span><span class=\"params\">(<span class=\"type\">int</span> n,<span class=\"type\">int</span> m)</span></span>&#123;</span><br><span class=\"line\">  <span class=\"type\">long</span> <span class=\"type\">long</span> res=<span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"type\">int</span> ed=m/B;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=ed;i++)</span><br><span class=\"line\">  res=(res+<span class=\"number\">1ll</span>*F[i]*G[i][n/i]%mod*G[i][m/i]%mod)%mod;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> l=m/B+<span class=\"number\">1</span>,r,ln,lm;l&lt;=n;l=r+<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">  \tln=n/l,lm=m/l;</span><br><span class=\"line\">    r=<span class=\"built_in\">min</span>(n/ln,m/lm);</span><br><span class=\"line\">    res=(res+(T[ln][lm][r]-T[ln][lm][l<span class=\"number\">-1</span>]+mod)%mod)%mod;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">get_phi_mu_inv</span>(<span class=\"number\">100000</span>);<span class=\"built_in\">init</span>(<span class=\"number\">100000</span>);</span><br><span class=\"line\">  <span class=\"type\">int</span> t=<span class=\"built_in\">read</span>();</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(t--)&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n=<span class=\"built_in\">read</span>(),m=<span class=\"built_in\">read</span>();<span class=\"keyword\">if</span>(n&gt;m)<span class=\"built_in\">swap</span>(n,m);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%lld\\n&quot;</span>,<span class=\"built_in\">Solve</span>(n,m));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"P1587-NOI2016-循环之美\"><a href=\"#P1587-NOI2016-循环之美\" class=\"headerlink\" title=\"P1587 [NOI2016]循环之美\"></a><a href=\"https://www.luogu.org/problemnew/show/P1587\">P1587 [NOI2016]循环之美</a></h2><p>$\\ \\ \\ \\ \\ \\,$对于一个$K$进制下的无限循环小数，在最简形态下，分母一定和$K$互质，所以这道题，就是求:<br>$\\sum_{i=1}^n\\sum_{j=1}^m[gcd(i,j)=1][gcd(j,K)=1]$</p>\n<h3 id=\"反演过程：-9\"><a href=\"#反演过程：-9\" class=\"headerlink\" title=\"反演过程：\"></a>反演过程：</h3><p>$\\sum_{j=1}^m[gcd(j,K)=1]\\sum_{i=1}^n[gcd(i,j)=1]$</p>\n<p>$\\sum_{j=1}^m[gcd(j,K)=1]\\sum_{i=1}^nϵ(gcd(i,j))$</p>\n<p>$\\sum_{j=1}^m[gcd(j,K)=1]\\sum_{i=1}^n\\sum_{k|gcd(i,j)}\\mu(k)$</p>\n<p>$\\sum_{k=1}^{min(n,m)}\\mu(k)\\sum_{i=1}^{\\left\\lfloor\\frac{n}{k}\\right\\rfloor}\\sum_{j=1}^{\\left\\lfloor\\frac{m}{k}\\right\\rfloor}[gcd(jk,K)=1]$</p>\n<p>$\\sum_{k=1}^{min(n,m)}\\mu(k)[gcd(k,K)=1]\\sum_{i=1}^{\\left\\lfloor\\frac{n}{k}\\right\\rfloor}\\sum_{j=1}^{\\left\\lfloor\\frac{m}{k}\\right\\rfloor}[gcd(j,K)=1]$</p>\n<p>$\\sum_{k=1}^{min(n,m)}\\mu(k)[gcd(k,K)=1]\\sum_{j=1}^{\\left\\lfloor\\frac{m}{k}\\right\\rfloor}[gcd(j,K)=1]\\sum_{i=1}^{\\left\\lfloor\\frac{n}{k}\\right\\rfloor}$</p>\n<p>$\\sum_{k=1}^{min(n,m)}\\mu(k)[gcd(k,K)=1]\\sum_{j=1}^{\\left\\lfloor\\frac{m}{k}\\right\\rfloor}[gcd(j,K)=1]{\\left\\lfloor\\frac{n}{k}\\right\\rfloor}$</p>\n<p>$f(x,K)=\\sum_{i=1}^{x}\\mu(i)[gcd(i,K)=1]$</p>\n<p>$s(x)=\\sum_{i=1}^{x}[gcd(i,K)=1]$</p>\n<p>$\\sum_{k=1}^{min(n,m)}\\mu(k)[gcd(k,K)=1]{\\left\\lfloor\\frac{n}{k}\\right\\rfloor}s\\left(\\left\\lfloor\\frac{m}{k}\\right\\rfloor\\right)$</p>\n<p>$\\ \\ \\ \\ \\ \\,$然而还没有完，我们求出$f$和$s$，也就是方便分块操作，现在我们得化简它们:</p>\n<ul>\n<li><p>$s(x)$<br>$s(x)=\\sum_{i=1}^{x}[gcd(i,K)=1]$<br>因为若是 $gcd(a,K)=1$，那么就有 $gcd(a+bk,K)=1$。<br>所以有：<br>$s(x)=\\left\\lfloor\\frac{x}{k}\\right\\rfloor s(k)+s(x\\%k)$<br>所以只需要暴力求出$k$以内的$s$就可以了。</p>\n</li>\n<li><p>$f(x,K)$</p>\n<p>$\\sum_{i=1}^{x}\\mu(i)[gcd(i,K)=1]$</p>\n<p>$\\sum_{i=1}^{x}\\mu(i)ϵ(gcd(i,K))$</p>\n<p>$\\sum_{i=1}^{x}\\mu(i)\\sum_{d|gcd(i,K)}\\mu(d)$</p>\n<p>$\\sum_{d=1}^{min(x,K)}\\mu(d)\\sum_{i=1}^x\\mu(i)[d|gcd(i,K)]$</p>\n<p>$\\sum_{d=1}^{min(x,K)}\\mu(d)\\sum_{i=1}^{\\left\\lfloor\\frac{x}{d}\\right\\rfloor}\\mu(id)[d|gcd(id,K)]$</p>\n<p>$\\sum_{d=1}^{min(x,K)}\\mu(d)\\sum_{i=1}^{\\left\\lfloor\\frac{x}{d}\\right\\rfloor}\\mu(id)[d|K]$</p>\n<p>$\\sum_{d|K}\\mu(d)\\sum_{i=1}^{\\left\\lfloor\\frac{x}{d}\\right\\rfloor}\\mu(id)$</p>\n<p>$\\sum_{d|K}\\mu(d)\\sum_{i=1,gcd(i,d)=1}^{\\left\\lfloor\\frac{x}{d}\\right\\rfloor}\\mu(d)\\mu(i)$</p>\n<p>$\\sum_{d|K}\\mu(d)^2\\sum_{i=1,gcd(i,d)=1}^{\\left\\lfloor\\frac{x}{d}\\right\\rfloor}\\mu(i)$</p>\n<p>$\\sum_{d|K}\\mu(d)^2\\sum_{i=1}^{\\left\\lfloor\\frac{x}{d}\\right\\rfloor}\\mu(i)[gcd(i,d)=1]$</p>\n<p>$\\sum_{d|K}\\mu(d)^2f\\left({\\left\\lfloor\\frac{x}{d}\\right\\rfloor},d\\right)$</p>\n<p>这个怎么办啊？每次递归求解，但是当$K=1$的时候，就没有办法了，我们试一试化一下$K=1$的情况:</p>\n<p>$\\sum_{i=1}^{x}\\mu(i)[gcd(i,1)=1]$</p>\n<p>$\\sum_{i=1}^{x}\\mu(i)$</p>\n<p>一个杜教筛就完了。</p>\n<p>复杂度大概是$O(n^{\\frac{2}{3}})$</p>\n</li>\n<li><p>感觉题目还是比较难的，反正我一开始是没有想出来，翻了题解，主要是对于$s$的处理，有多加一维描述，还有递归处理，程序的最终复杂度呢，大概就在$O(n^{\\frac{2}{3}})$的样子</p>\n</li>\n</ul>\n<h3 id=\"代码-10\"><a href=\"#代码-10\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdlib&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;map&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;set&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;stack&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cctype&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> inf=<span class=\"number\">0x7fffffff</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">double</span> eps=<span class=\"number\">1e-10</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">double</span> pi=<span class=\"built_in\">acos</span>(<span class=\"number\">-1.0</span>);</span><br><span class=\"line\"><span class=\"comment\">//char buf[1&lt;&lt;15],*S=buf,*T=buf;</span></span><br><span class=\"line\"><span class=\"comment\">//char getch()&#123;return S==T&amp;&amp;(T=(S=buf)+fread(buf,1,1&lt;&lt;15,stdin),S==T)?0:*S++;&#125;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">int</span> <span class=\"title\">read</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">  <span class=\"type\">int</span> x=<span class=\"number\">0</span>,f=<span class=\"number\">1</span>;<span class=\"type\">char</span> ch;ch=<span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(ch&lt;<span class=\"string\">&#x27;0&#x27;</span>||ch&gt;<span class=\"string\">&#x27;9&#x27;</span>)&#123;<span class=\"keyword\">if</span>(ch==<span class=\"string\">&#x27;-&#x27;</span>) f=<span class=\"number\">0</span>;ch=<span class=\"built_in\">getchar</span>();&#125;</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(ch&gt;=<span class=\"string\">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class=\"string\">&#x27;9&#x27;</span>)&#123;x=(x&lt;&lt;<span class=\"number\">1</span>)+(x&lt;&lt;<span class=\"number\">3</span>)+(ch&amp;<span class=\"number\">15</span>);ch=<span class=\"built_in\">getchar</span>();&#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(f)<span class=\"keyword\">return</span> x;<span class=\"keyword\">else</span> <span class=\"keyword\">return</span> -x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">10000010</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> n,K,m;</span><br><span class=\"line\"><span class=\"type\">int</span> pr[<span class=\"number\">2010</span>];</span><br><span class=\"line\"><span class=\"type\">bool</span> vis[N];</span><br><span class=\"line\"><span class=\"type\">int</span> prim[N],mu[N],Sum_mu[N];</span><br><span class=\"line\">map&lt;pair&lt;<span class=\"type\">int</span>,<span class=\"type\">int</span>&gt;,<span class=\"type\">int</span>&gt; used;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">gcd</span><span class=\"params\">(<span class=\"type\">int</span> a,<span class=\"type\">int</span> b)</span></span>&#123;<span class=\"keyword\">return</span> b?<span class=\"built_in\">gcd</span>(b,a%b):a;&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=K;i++)pr[i]=pr[i<span class=\"number\">-1</span>]+(<span class=\"built_in\">gcd</span>(i,K)==<span class=\"number\">1</span>);</span><br><span class=\"line\">  mu[<span class=\"number\">1</span>]=<span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">2</span>;i&lt;N;i++)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!vis[i])&#123;mu[i]=<span class=\"number\">-1</span>;prim[++prim[<span class=\"number\">0</span>]]=i;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;=prim[<span class=\"number\">0</span>];j++)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(i*prim[j]&gt;=N) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      vis[i*prim[j]]=<span class=\"number\">1</span>;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(i%prim[j]==<span class=\"number\">0</span>)&#123;mu[i*prim[j]]=<span class=\"number\">0</span>;<span class=\"keyword\">break</span>;&#125;</span><br><span class=\"line\">      mu[i*prim[j]]=-mu[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;N;i++)Sum_mu[i]=Sum_mu[i<span class=\"number\">-1</span>]+mu[i];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">s</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span>&#123;<span class=\"keyword\">return</span> pr[x%K]+<span class=\"number\">1ll</span>*(x/K)*pr[K];&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">f</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> k)</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(!k||!x)<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(k==<span class=\"number\">1</span>&amp;&amp;x&lt;N)<span class=\"keyword\">return</span> Sum_mu[x];</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(used[<span class=\"built_in\">make_pair</span>(x,k)])<span class=\"keyword\">return</span> used[<span class=\"built_in\">make_pair</span>(x,k)];</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(k==<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">  \t<span class=\"type\">int</span> ret=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> l=<span class=\"number\">2</span>,r;l&lt;=x;l=r+<span class=\"number\">1</span>)</span><br><span class=\"line\">    r=x/(x/l),ret-=(r-l+<span class=\"number\">1</span>)*<span class=\"built_in\">f</span>(x/l,<span class=\"number\">1</span>);</span><br><span class=\"line\">  \t<span class=\"keyword\">return</span> used[<span class=\"built_in\">make_pair</span>(x,k)]=ret;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"type\">int</span> ret=<span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i*i&lt;=k;i++)<span class=\"keyword\">if</span>(k%i==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(mu[i])ret+=<span class=\"built_in\">f</span>(x/i,i);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(i*i!=k&amp;&amp;mu[k/i])</span><br><span class=\"line\">    ret+=<span class=\"built_in\">f</span>(x/(k/i),k/i);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> used[<span class=\"built_in\">make_pair</span>(x,k)]=ret;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  n=<span class=\"built_in\">read</span>();m=<span class=\"built_in\">read</span>();K=<span class=\"built_in\">read</span>();</span><br><span class=\"line\">  <span class=\"built_in\">init</span>();</span><br><span class=\"line\">  <span class=\"type\">long</span> <span class=\"type\">long</span> ans=<span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> l=<span class=\"number\">1</span>,r;l&lt;=<span class=\"built_in\">min</span>(n,m);l=r+<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">    r=<span class=\"built_in\">min</span>(n/(n/l),m/(m/l));</span><br><span class=\"line\">    ans+=<span class=\"number\">1ll</span>*(<span class=\"built_in\">f</span>(r,K)-<span class=\"built_in\">f</span>(l<span class=\"number\">-1</span>,K))*(n/l)*<span class=\"built_in\">s</span>(m/l);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%lld\\n&quot;</span>,ans);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p>$\\ \\ \\ \\ \\ \\ \\ \\,$莫比乌斯反演经典例题回顾，思考和题解：</p>","more":"<h2 id=\"P2522-HAOI2011-Problem-b\"><a href=\"#P2522-HAOI2011-Problem-b\" class=\"headerlink\" title=\"P2522 [HAOI2011]Problem b\"></a><a href=\"https://www.luogu.org/problemnew/show/P2522\">P2522 [HAOI2011]Problem b</a></h2><p>$\\sum_{i=a}^b\\sum_{j=c}^d[gcd(i,j)=k]$</p>\n<h3 id=\"反演过程：\"><a href=\"#反演过程：\" class=\"headerlink\" title=\"反演过程：\"></a>反演过程：</h3><p>${F(n,m)=\\sum_{i=1}^n\\sum_{j=1}^m[gcd(i,j)=k]}$</p>\n<p>$ans=F(a,b)-F(a-1,d)-F(b,c-1)+F(a-1,c-1)$</p>\n<p>$F(n,m)=$</p>\n<p>$\\sum_{i=1}^{\\left\\lfloor\\frac{n}{k}\\right\\rfloor}\\sum_{j=1}^{\\left\\lfloor\\frac{n}{k}\\right\\rfloor}[gcd(i,j)=1]$</p>\n<p>$\\sum_{i=1}^{\\left\\lfloor\\frac{n}{k}\\right\\rfloor}\\sum_{j=1}^{\\left\\lfloor\\frac{n}{k}\\right\\rfloor}ϵ(gcd(i,j)=1)$</p>\n<p>$\\sum_{d=1}^{\\left\\lfloor\\frac{min(n,m)}{k}\\right\\rfloor}\\sum_{d|T}\\mu(d){\\left\\lfloor\\frac{n}{T}\\right\\rfloor}{\\left\\lfloor\\frac{m}{T}\\right\\rfloor}$</p>\n<p>$\\sum_{d=1}^{\\left\\lfloor\\frac{min(n,m)}{k}\\right\\rfloor}\\mu(d){\\left\\lfloor\\frac{n}{kd}\\right\\rfloor}{\\left\\lfloor\\frac{m}{kd}\\right\\rfloor}$</p>\n<ul>\n<li>$\\ \\ \\ \\ \\ \\,$ $O(n)$预处理$\\mu$，每次询问分块，复杂度$O(\\sqrt n)$，总复杂度为$O(n+T4\\sqrt n)$</li>\n</ul>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdlib&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> inf=<span class=\"number\">0x7fffffff</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">double</span> eps=<span class=\"number\">1e-10</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">double</span> pi=<span class=\"built_in\">acos</span>(<span class=\"number\">-1.0</span>);</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">50010</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">int</span> <span class=\"title\">read</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">  <span class=\"type\">int</span> x=<span class=\"number\">0</span>,f=<span class=\"number\">1</span>;<span class=\"type\">char</span> ch;ch=<span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(ch&lt;<span class=\"string\">&#x27;0&#x27;</span>||ch&gt;<span class=\"string\">&#x27;9&#x27;</span>)&#123;<span class=\"keyword\">if</span>(ch==<span class=\"string\">&#x27;-&#x27;</span>) f=<span class=\"number\">-1</span>;ch=<span class=\"built_in\">getchar</span>();&#125;</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(ch&gt;=<span class=\"string\">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class=\"string\">&#x27;9&#x27;</span>)&#123;x=x*<span class=\"number\">10</span>+ch-<span class=\"string\">&#x27;0&#x27;</span>;ch=<span class=\"built_in\">getchar</span>();&#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> x*f;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">bool</span> vis[N];</span><br><span class=\"line\"><span class=\"type\">int</span> prim[N],mu[N],sum[N],k;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">get_mu</span><span class=\"params\">(<span class=\"type\">int</span> n)</span></span>&#123;</span><br><span class=\"line\">  mu[<span class=\"number\">1</span>]=<span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">2</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!vis[i])&#123;mu[i]=<span class=\"number\">-1</span>;prim[++prim[<span class=\"number\">0</span>]]=i;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;=prim[<span class=\"number\">0</span>]&amp;&amp;i*prim[j]&lt;=n;j++)&#123;</span><br><span class=\"line\">      vis[i*prim[j]]=<span class=\"number\">1</span>;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(i%prim[j]==<span class=\"number\">0</span>)<span class=\"keyword\">break</span>;</span><br><span class=\"line\">      <span class=\"keyword\">else</span> mu[i*prim[j]]=-mu[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)</span><br><span class=\"line\">  sum[i]=sum[i<span class=\"number\">-1</span>]+mu[i];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"title\">Ans</span><span class=\"params\">(<span class=\"type\">int</span> a,<span class=\"type\">int</span> b)</span></span>&#123;</span><br><span class=\"line\">    a/=k;b/=k;</span><br><span class=\"line\">  <span class=\"type\">int</span> max_rep=<span class=\"built_in\">min</span>(a,b);</span><br><span class=\"line\">  <span class=\"type\">long</span> <span class=\"type\">long</span> ans=<span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> l=<span class=\"number\">1</span>,r;l&lt;=max_rep;l=r+<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">    r=<span class=\"built_in\">min</span>(a/(a/l),b/(b/l));</span><br><span class=\"line\">    ans+=(<span class=\"type\">long</span> <span class=\"type\">long</span>)(a/l)*(<span class=\"type\">long</span> <span class=\"type\">long</span>)(b/l)*(<span class=\"type\">long</span> <span class=\"type\">long</span>)(sum[r]-sum[l<span class=\"number\">-1</span>]);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"> \t<span class=\"type\">int</span> T=<span class=\"built_in\">read</span>();</span><br><span class=\"line\"> \t<span class=\"built_in\">get_mu</span>(N<span class=\"number\">-10</span>);</span><br><span class=\"line\"> \t<span class=\"keyword\">while</span>(T--)&#123;</span><br><span class=\"line\"> \t\t<span class=\"type\">int</span> a=<span class=\"built_in\">read</span>(),b=<span class=\"built_in\">read</span>(),c=<span class=\"built_in\">read</span>(),d=<span class=\"built_in\">read</span>();k=<span class=\"built_in\">read</span>();</span><br><span class=\"line\"> \t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%lld\\n&quot;</span>,<span class=\"built_in\">Ans</span>(b,d)-<span class=\"built_in\">Ans</span>(b,c<span class=\"number\">-1</span>)-<span class=\"built_in\">Ans</span>(a<span class=\"number\">-1</span>,d)+<span class=\"built_in\">Ans</span>(a<span class=\"number\">-1</span>,c<span class=\"number\">-1</span>));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"P2257-YY的GCD\"><a href=\"#P2257-YY的GCD\" class=\"headerlink\" title=\"P2257 YY的GCD\"></a><a href=\"https://www.luogu.org/problemnew/show/P2257\">P2257 YY的GCD</a></h2><p>$\\sum_{i=1}^n\\sum_{j=1}^m[gcd(i,j)\\rm\\ \\ is\\ \\ prime]$</p>\n<h3 id=\"反演过程：-1\"><a href=\"#反演过程：-1\" class=\"headerlink\" title=\"反演过程：\"></a>反演过程：</h3><p>$\\sum_{p=1,[p\\rm\\ \\ is\\ \\ prime]}\\sum_{i=1}^n\\sum_{j=1}^m[gcd(i,j)=p]$</p>\n<p>$\\sum_{p=1,[p\\rm\\ \\ is\\ \\ prime]}\\sum_{i=1}^{\\left\\lfloor\\frac{n}{p}\\right\\rfloor}\\sum_{j=1}^{\\left\\lfloor\\frac{m}{p}\\right\\rfloor}[gcd(i,j)=1]$</p>\n<p>$\\sum_{p=1,[p\\rm\\ \\ is\\ \\ prime]}\\sum_{d=1}^{\\left\\lfloor\\frac{min(n,m)}{p}\\right\\rfloor}\\mu(d){\\left\\lfloor\\frac{n}{pd}\\right\\rfloor}{\\left\\lfloor\\frac{m}{pd}\\right\\rfloor}$</p>\n<p>$\\sum_{T=1}^{min(n,m)}\\sum_{d|T}\\mu(d){\\left\\lfloor\\frac{n}{T}\\right\\rfloor}{\\left\\lfloor\\frac{m}{T}\\right\\rfloor}\\left[\\frac{T}{d}\\rm\\ \\ is\\ \\ prime\\right]$</p>\n<p>$\\sum_{T=1}^{min(n,m)}{\\left\\lfloor\\frac{n}{T}\\right\\rfloor}{\\left\\lfloor\\frac{m}{T}\\right\\rfloor}\\sum_{d|T,\\left[d\\rm\\ \\ is\\ \\ prime\\right]}\\mu\\left(\\frac{T}{d}\\right)$</p>\n<p>${F(x)=\\sum_{d|x,\\left[d\\rm\\ \\ is\\ \\ prime\\right]}\\mu\\left(\\frac{x}{d}\\right)}$</p>\n<p>${\\sum_{T=1}^{min(n,m)}{\\left\\lfloor\\frac{n}{T}\\right\\rfloor}{\\left\\lfloor\\frac{m}{T}\\right\\rfloor}F(T)}$</p>\n<ul>\n<li>$\\ \\ \\ \\ \\ \\,$ $O(n)$预处理$\\mu$，$O(n\\log{n})$预处理$F$，每次询问分块，复杂度$O(\\sqrt n)$，总复杂度为$O(n\\log n+T\\sqrt n)$</li>\n</ul>\n<h3 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdlib&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> inf=<span class=\"number\">0x7fffffff</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">double</span> eps=<span class=\"number\">1e-10</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">double</span> pi=<span class=\"built_in\">acos</span>(<span class=\"number\">-1.0</span>);</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">1e7</span>+<span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">int</span> <span class=\"title\">read</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> x=<span class=\"number\">0</span>,f=<span class=\"number\">1</span>;<span class=\"type\">char</span> ch;ch=<span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(ch&lt;<span class=\"string\">&#x27;0&#x27;</span>||ch&gt;<span class=\"string\">&#x27;9&#x27;</span>)&#123;<span class=\"keyword\">if</span>(ch==<span class=\"string\">&#x27;-&#x27;</span>) f=<span class=\"number\">-1</span>;ch=<span class=\"built_in\">getchar</span>();&#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(ch&gt;=<span class=\"string\">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class=\"string\">&#x27;9&#x27;</span>)&#123;x=x*<span class=\"number\">10</span>+ch-<span class=\"string\">&#x27;0&#x27;</span>;ch=<span class=\"built_in\">getchar</span>();&#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x*f;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">bool</span> vis[N];</span><br><span class=\"line\"><span class=\"type\">int</span> prim[N],mu[N];</span><br><span class=\"line\"><span class=\"type\">long</span> <span class=\"type\">long</span> F[N];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">get_mu</span><span class=\"params\">(<span class=\"type\">int</span> n)</span></span>&#123;</span><br><span class=\"line\">  mu[<span class=\"number\">1</span>]=<span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">2</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!vis[i])&#123;mu[i]=<span class=\"number\">-1</span>;prim[++prim[<span class=\"number\">0</span>]]=i;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;=prim[<span class=\"number\">0</span>]&amp;&amp;i*prim[j]&lt;=n;j++)&#123;</span><br><span class=\"line\">      vis[i*prim[j]]=<span class=\"number\">1</span>;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(i%prim[j]==<span class=\"number\">0</span>)<span class=\"keyword\">break</span>;</span><br><span class=\"line\">      <span class=\"keyword\">else</span> mu[i*prim[j]]=-mu[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=prim[<span class=\"number\">0</span>];i++)</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">1</span>;j*prim[i]&lt;=n;j++)F[j*prim[i]]+=(<span class=\"type\">long</span> <span class=\"type\">long</span>)mu[j];</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)F[i]+=F[i<span class=\"number\">-1</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"title\">Ans</span><span class=\"params\">(<span class=\"type\">int</span> n,<span class=\"type\">int</span> m)</span></span>&#123;</span><br><span class=\"line\">  <span class=\"type\">int</span> lim=<span class=\"built_in\">min</span>(n,m);</span><br><span class=\"line\">  <span class=\"type\">long</span> <span class=\"type\">long</span> ans=<span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> l=<span class=\"number\">1</span>,r;l&lt;=lim;l=r+<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">    r=<span class=\"built_in\">min</span>(n/(n/l),m/(m/l));</span><br><span class=\"line\">    ans+=(<span class=\"type\">long</span> <span class=\"type\">long</span>)(n/l)*(<span class=\"type\">long</span> <span class=\"type\">long</span>)(m/l)*(F[r]-F[l<span class=\"number\">-1</span>]);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">get_mu</span>(N<span class=\"number\">-10</span>);</span><br><span class=\"line\">  <span class=\"type\">int</span> T=<span class=\"built_in\">read</span>();</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(T--)&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n=<span class=\"built_in\">read</span>(),m=<span class=\"built_in\">read</span>();</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%lld\\n&quot;</span>,<span class=\"built_in\">Ans</span>(n,m));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"P3312-SDOI2014-数表\"><a href=\"#P3312-SDOI2014-数表\" class=\"headerlink\" title=\"P3312 [SDOI2014]数表\"></a><a href=\"https://www.luogu.org/problemnew/show/P3312\">P3312 [SDOI2014]数表</a></h2><p>$\\sum_{i=1}^n\\sum_{j=1}^m\\sum_{k|gcd(i,j)}k\\left[\\sum_{k|gcd(i,j)}k≤a\\right]$</p>\n<h3 id=\"反演过程：-2\"><a href=\"#反演过程：-2\" class=\"headerlink\" title=\"反演过程：\"></a>反演过程：</h3><p>$F(x)=\\sum_{i|x}i$</p>\n<p>$\\sum_{i=1}^n\\sum_{j=1}^mF(gcd(i,j))[F(gcd(i,j))≤a]$</p>\n<p>$\\sum_{d=1}^{min(n,m)}\\sum_{i=1}^n\\sum_{j=1}^mF(d)[gcd(i,j)=d][F(d)≤a]$</p>\n<p>$\\sum_{d=1}^{min(n,m)}F(d)[F(d)≤a]\\sum_{i=1}^n\\sum_{j=1}^m[gcd(i,j)=d]$</p>\n<p>$\\sum_{d=1}^{min(n,m)}F(d)[F(d)≤a]\\sum_{d’=1}^{\\left\\lfloor\\frac{min(n,m)}{d}\\right\\rfloor}\\mu(d’)\\left\\lfloor\\frac{n}{d’d}\\right\\rfloor\\left\\lfloor\\frac{m}{d’d}\\right\\rfloor$</p>\n<p>$\\sum_{T=1}^{min(n,m)}\\sum_{d|T}F(d)\\mu\\left(\\frac{T}{d}\\right){\\left\\lfloor\\frac{n}{T}\\right\\rfloor}{\\left\\lfloor\\frac{m}{T}\\right\\rfloor}[F(d)≤a]$</p>\n<p>$\\sum_{T=1}^{min(n,m)}{\\left\\lfloor\\frac{n}{T}\\right\\rfloor}{\\left\\lfloor\\frac{m}{T}\\right\\rfloor}\\sum_{d|T}F(d)\\mu\\left(\\frac{T}{d}\\right)[F(d)≤a]$</p>\n<p>$f(x)=\\sum_{d|T}F(d)\\mu\\left(\\frac{T}{d}\\right)[F(d)≤a]$</p>\n<p>$\\sum_{T=1}^{min(n,m)}{\\left\\lfloor\\frac{n}{T}\\right\\rfloor}{\\left\\lfloor\\frac{m}{T}\\right\\rfloor}f(T)$</p>\n<ul>\n<li>$\\ \\ \\ \\ \\ \\,$ $O(n\\log n)$预处理$F$和$\\mu$，把每次询问的$a$值离线排序，用树状数组维护$f$，花费时间$O(n\\log ^2n)$，询问分块，复杂度$O(\\sqrt n\\log n)$，总时间复杂度$O(n\\log ^2n+T\\sqrt n\\log n)$</li>\n</ul>\n<h3 id=\"代码-2\"><a href=\"#代码-2\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdlib&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> inf=<span class=\"number\">0x7fffffff</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">double</span> eps=<span class=\"number\">1e-10</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">double</span> pi=<span class=\"built_in\">acos</span>(<span class=\"number\">-1.0</span>);</span><br><span class=\"line\"><span class=\"comment\">//char buf[1&lt;&lt;15],*S=buf,*T=buf;</span></span><br><span class=\"line\"><span class=\"comment\">//char getch()&#123;return S==T&amp;&amp;(T=(S=buf)+fread(buf,1,1&lt;&lt;15,stdin),S==T)?0:*S++;&#125;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">int</span> <span class=\"title\">read</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">  <span class=\"type\">int</span> x=<span class=\"number\">0</span>,f=<span class=\"number\">1</span>;<span class=\"type\">char</span> ch;ch=<span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(ch&lt;<span class=\"string\">&#x27;0&#x27;</span>||ch&gt;<span class=\"string\">&#x27;9&#x27;</span>)&#123;<span class=\"keyword\">if</span>(ch==<span class=\"string\">&#x27;-&#x27;</span>) f=<span class=\"number\">0</span>;ch=<span class=\"built_in\">getchar</span>();&#125;</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(ch&gt;=<span class=\"string\">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class=\"string\">&#x27;9&#x27;</span>)&#123;x=(x&lt;&lt;<span class=\"number\">1</span>)+(x&lt;&lt;<span class=\"number\">3</span>)+(ch&amp;<span class=\"number\">15</span>);ch=<span class=\"built_in\">getchar</span>();&#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(f)<span class=\"keyword\">return</span> x;<span class=\"keyword\">else</span> <span class=\"keyword\">return</span> -x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">1e5</span>+<span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> Q=<span class=\"number\">2e4</span>+<span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> sum[N];</span><br><span class=\"line\"><span class=\"type\">bool</span> vis[N];</span><br><span class=\"line\"><span class=\"type\">int</span> prim[N],mu[N];</span><br><span class=\"line\"><span class=\"type\">int</span> S=<span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Sum</span>&#123;<span class=\"type\">int</span> data,id;&#125;F[N];</span><br><span class=\"line\"><span class=\"type\">bool</span> <span class=\"keyword\">operator</span> &lt;(Sum a,Sum b)&#123;<span class=\"keyword\">return</span> a.data&lt;b.data;&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> ans[Q];</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> lowbit(x) ((x)&amp;(-x))</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"type\">int</span> i,<span class=\"type\">int</span> c)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;<span class=\"keyword\">for</span>(;i&lt;=N<span class=\"number\">-5</span>;i+=<span class=\"built_in\">lowbit</span>(i))sum[i]+=c;&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">query</span><span class=\"params\">(<span class=\"type\">int</span> i)</span></span>&#123;</span><br><span class=\"line\">  <span class=\"type\">int</span> ans=<span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(;i;i-=<span class=\"built_in\">lowbit</span>(i))ans+=sum[i];</span><br><span class=\"line\">  <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Add</span><span class=\"params\">(<span class=\"type\">int</span> i,<span class=\"type\">int</span> data)</span></span>&#123;</span><br><span class=\"line\">  <span class=\"type\">int</span> ed=((N<span class=\"number\">-5</span>)/i);</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">register</span> <span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;=ed;++j)</span><br><span class=\"line\">  <span class=\"built_in\">add</span>(i*j,data*mu[j]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">  mu[<span class=\"number\">1</span>]=<span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">register</span> <span class=\"type\">int</span> i=<span class=\"number\">2</span>;i&lt;=N<span class=\"number\">-5</span>;++i)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!vis[i])&#123;mu[i]=<span class=\"number\">-1</span>;prim[++prim[<span class=\"number\">0</span>]]=i;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">register</span> <span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;=prim[<span class=\"number\">0</span>]&amp;&amp;i*prim[j]&lt;=N<span class=\"number\">-5</span>;++j)&#123;</span><br><span class=\"line\">      vis[i*prim[j]]=<span class=\"number\">1</span>;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(i%prim[j]==<span class=\"number\">0</span>)<span class=\"keyword\">break</span>;</span><br><span class=\"line\">      <span class=\"keyword\">else</span> mu[i*prim[j]]=-mu[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">register</span> <span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=N<span class=\"number\">-5</span>;++i)&#123;</span><br><span class=\"line\">    F[i].id=i;</span><br><span class=\"line\">    <span class=\"type\">int</span> ed=((N<span class=\"number\">-5</span>)/i);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">register</span> <span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;=ed;++j)</span><br><span class=\"line\">    F[i*j].data+=i;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">sort</span>(F+<span class=\"number\">1</span>,F+<span class=\"number\">1</span>+N<span class=\"number\">-5</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Query</span>&#123;<span class=\"type\">int</span> n,m,a,id;&#125;q[Q];</span><br><span class=\"line\"><span class=\"keyword\">inline</span> <span class=\"type\">bool</span> <span class=\"keyword\">operator</span> &lt;(<span class=\"type\">const</span> Query &amp;a,<span class=\"type\">const</span> Query &amp;b)&#123;<span class=\"keyword\">return</span> a.a&lt;b.a;&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"type\">int</span> T=<span class=\"built_in\">read</span>();</span><br><span class=\"line\">  <span class=\"built_in\">init</span>();</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">register</span> <span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=T;i++)&#123;</span><br><span class=\"line\">    q[i].n=<span class=\"built_in\">read</span>();q[i].m=<span class=\"built_in\">read</span>();q[i].a=<span class=\"built_in\">read</span>();q[i].id=i;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(q[i].n&gt;q[i].m)<span class=\"built_in\">swap</span>(q[i].n,q[i].m);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">sort</span>(q+<span class=\"number\">1</span>,q+T+<span class=\"number\">1</span>);</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">register</span> <span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=T;i++)&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n=q[i].n,m=q[i].m,a=q[i].a,id=q[i].id;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(F[S].data&lt;=a)&#123;<span class=\"built_in\">Add</span>(F[S].id,F[S].data);S++;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">register</span> <span class=\"type\">int</span> l=<span class=\"number\">1</span>,r;l&lt;=n;l=r+<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">      r=<span class=\"built_in\">min</span>(n/(n/l),(m/(m/l)));</span><br><span class=\"line\">      ans[id]+=(n/l)*(m/l)*(<span class=\"built_in\">query</span>(r)-<span class=\"built_in\">query</span>(l<span class=\"number\">-1</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">register</span> <span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=T;i++)<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>,ans[i]&amp;<span class=\"number\">0x7fffffff</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"P3704-SDOI2017-数字表格\"><a href=\"#P3704-SDOI2017-数字表格\" class=\"headerlink\" title=\"P3704 [SDOI2017]数字表格\"></a><a href=\"https://www.luogu.org/problemnew/show/P3704\">P3704 [SDOI2017]数字表格</a></h2><p>$\\prod_{i=1}^{n}\\prod_{j=1}^{m}f\\left(gcd(i,j)\\right)$</p>\n<p>$\\ \\ \\ \\ \\ \\,$ $f$为斐波拉契序列。</p>\n<h3 id=\"反演过程：-3\"><a href=\"#反演过程：-3\" class=\"headerlink\" title=\"反演过程：\"></a>反演过程：</h3><p>$\\prod_{i=1}^{min(n,m)}\\prod_{i=1}^{n}\\prod_{j=1}^{m}f(d)\\left[gcd(i,j)=d\\right]$</p>\n<p>$\\prod_{d=1}^{min(n,m)}f(d)^{\\sum_{i=1}^n\\sum_{j=1}^{m}\\left[gcd(i,j)=d\\right]}$</p>\n<p>$\\prod_{d=1}^{min(n,m)}f(d)^{\\sum_{d’=1}^{\\left\\lfloor\\frac{min(n,m)}{d}\\right\\rfloor}\\mu(d’)\\left\\lfloor\\frac{n}{d’d}\\right\\rfloor\\left\\lfloor\\frac{m}{d’d}\\right\\rfloor}$</p>\n<p>$\\prod_{d=1}^{min(n,m)}\\prod_{d’=1}^{\\left\\lfloor\\frac{min(n,m)}{d}\\right\\rfloor}f(d)^{\\mu(d’)\\left\\lfloor\\frac{n}{d’d}\\right\\rfloor\\left\\lfloor\\frac{m}{d’d}\\right\\rfloor}$</p>\n<p>$\\prod_{T=1}^{min(n,m)}\\prod_{d|T}f(d)^{\\mu\\left(\\frac{T}{d}\\right)\\left\\lfloor\\frac{n}{T}\\right\\rfloor\\left\\lfloor\\frac{m}{T}\\right\\rfloor}$</p>\n<p>${C(x)=\\prod_{d|T}f(d)^{\\mu\\left(\\frac{T}{d}\\right)}}$</p>\n<p>$\\prod_{T=1}^{min(n,m)}C(T)^{\\left\\lfloor\\frac{n}{T}\\right\\rfloor\\left\\lfloor\\frac{m}{T}\\right\\rfloor}$</p>\n<ul>\n<li>$\\ \\ \\ \\ \\ \\,$ $O(n)$预处理$f$和$\\mu$，$O(n\\log{n})$预处理$C$，每次询问分块，复杂度$O(\\sqrt n \\log n)$，总复杂度为$O(n\\log n+T\\sqrt n \\log n)$</li>\n</ul>\n<h3 id=\"代码-3\"><a href=\"#代码-3\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdlib&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> inf=<span class=\"number\">0x7fffffff</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">double</span> eps=<span class=\"number\">1e-10</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">double</span> pi=<span class=\"built_in\">acos</span>(<span class=\"number\">-1.0</span>);</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">1e6</span>+<span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">long</span> <span class=\"type\">long</span> mod=<span class=\"number\">1e9</span>+<span class=\"number\">7</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">int</span> <span class=\"title\">read</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> x=<span class=\"number\">0</span>,f=<span class=\"number\">1</span>;<span class=\"type\">char</span> ch;ch=<span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(ch&lt;<span class=\"string\">&#x27;0&#x27;</span>||ch&gt;<span class=\"string\">&#x27;9&#x27;</span>)&#123;<span class=\"keyword\">if</span>(ch==<span class=\"string\">&#x27;-&#x27;</span>) f=<span class=\"number\">-1</span>;ch=<span class=\"built_in\">getchar</span>();&#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(ch&gt;=<span class=\"string\">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class=\"string\">&#x27;9&#x27;</span>)&#123;x=x*<span class=\"number\">10</span>+ch-<span class=\"string\">&#x27;0&#x27;</span>;ch=<span class=\"built_in\">getchar</span>();&#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x*f;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"title\">power</span><span class=\"params\">(<span class=\"type\">long</span> <span class=\"type\">long</span> a,<span class=\"type\">long</span> <span class=\"type\">long</span> b)</span></span>&#123;  </span><br><span class=\"line\">  <span class=\"type\">long</span> <span class=\"type\">long</span> ans=<span class=\"number\">1ll</span>;  </span><br><span class=\"line\">  a=a%mod;</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(b!=<span class=\"number\">0</span>)&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">if</span>(b&amp;<span class=\"number\">1</span>) ans=(ans*a)%mod;</span><br><span class=\"line\">    b&gt;&gt;=<span class=\"number\">1</span>;a=(a*a)%mod;</span><br><span class=\"line\">  &#125;  </span><br><span class=\"line\">  <span class=\"keyword\">return</span> ans;  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">long</span> <span class=\"type\">long</span> f[N];</span><br><span class=\"line\"><span class=\"type\">bool</span> vis[N];</span><br><span class=\"line\"><span class=\"type\">int</span> prim[N],mu[N],sum[N];</span><br><span class=\"line\"><span class=\"type\">long</span> <span class=\"type\">long</span> C[N],g[N];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">get_mu</span><span class=\"params\">(<span class=\"type\">int</span> n)</span></span>&#123;</span><br><span class=\"line\">  mu[<span class=\"number\">1</span>]=<span class=\"number\">1</span>;</span><br><span class=\"line\">  g[<span class=\"number\">1</span>]=C[<span class=\"number\">0</span>]=C[<span class=\"number\">1</span>]=<span class=\"number\">1ll</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">2</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">  \tg[i]=<span class=\"built_in\">power</span>(f[i],mod<span class=\"number\">-2</span>);C[i]=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!vis[i])&#123;mu[i]=<span class=\"number\">-1</span>;prim[++prim[<span class=\"number\">0</span>]]=i;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;=prim[<span class=\"number\">0</span>]&amp;&amp;i*prim[j]&lt;=n;j++)&#123;</span><br><span class=\"line\">      vis[i*prim[j]]=<span class=\"number\">1</span>;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(i%prim[j]==<span class=\"number\">0</span>)<span class=\"keyword\">break</span>;</span><br><span class=\"line\">      <span class=\"keyword\">else</span> mu[i*prim[j]]=-mu[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!mu[i])<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">  \t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=i;j&lt;=n;j+=i)</span><br><span class=\"line\">    C[j]=<span class=\"number\">1ll</span>*C[j]*(mu[i]==<span class=\"number\">1</span>?f[j/i]:g[j/i])%mod;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">2</span>;i&lt;=n;++i)C[i]=<span class=\"number\">1ll</span>*C[i]*C[i<span class=\"number\">-1</span>]%mod;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> n,m;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  f[<span class=\"number\">1</span>]=f[<span class=\"number\">2</span>]=<span class=\"number\">1ll</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">3</span>;i&lt;=N<span class=\"number\">-10</span>;i++)f[i]=f[i<span class=\"number\">-1</span>]+f[i<span class=\"number\">-2</span>],f[i]%=mod;</span><br><span class=\"line\">  <span class=\"built_in\">get_mu</span>(N<span class=\"number\">-10</span>);</span><br><span class=\"line\">  <span class=\"type\">int</span> T=<span class=\"built_in\">read</span>();</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(T--)&#123;</span><br><span class=\"line\">    n=<span class=\"built_in\">read</span>();m=<span class=\"built_in\">read</span>();</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(n&gt;m)<span class=\"built_in\">swap</span>(n,m);</span><br><span class=\"line\">    <span class=\"type\">long</span> <span class=\"type\">long</span> ans=<span class=\"number\">1ll</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>,lim=<span class=\"number\">0</span>;i&lt;=n;i=lim+<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">      lim=<span class=\"built_in\">min</span>(n/(n/i),m/(m/i));</span><br><span class=\"line\">      ans=<span class=\"number\">1ll</span>*ans*<span class=\"built_in\">power</span>(C[lim]*<span class=\"built_in\">power</span>(C[i<span class=\"number\">-1</span>],mod<span class=\"number\">-2</span>),<span class=\"number\">1ll</span>*(n/i)*(m/i)%(mod<span class=\"number\">-1</span>));</span><br><span class=\"line\">      ans%=mod;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%lld\\n&quot;</span>,ans);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"P3327-SDOI2015-约数个数和\"><a href=\"#P3327-SDOI2015-约数个数和\" class=\"headerlink\" title=\"P3327 [SDOI2015]约数个数和\"></a><a href=\"https://www.luogu.org/problemnew/show/P3327\">P3327 [SDOI2015]约数个数和</a></h2><p>$\\sum_{i=1}^n\\sum_{j=1}^m\\sum_{k|gcd(i,j)}1$</p>\n<h3 id=\"反演过程：-4\"><a href=\"#反演过程：-4\" class=\"headerlink\" title=\"反演过程：\"></a>反演过程：</h3><p>$F(x)=\\sum_{i|x}1$</p>\n<p>$\\sum_{i=1}^n\\sum_{j=1}^mF(gcd(i,j))$</p>\n<p>$\\sum_{d=1}^{min(n,m)}\\sum_{i=1}^n\\sum_{j=1}^mF(d)[gcd(i,j)=d]$</p>\n<p>$\\sum_{d=1}^{min(n,m)}F(d)\\sum_{i=1}^n\\sum_{j=1}^m[gcd(i,j)=d]$</p>\n<p>$\\sum_{d=1}^{min(n,m)}F(d)\\sum_{d’=1}^{\\left\\lfloor\\frac{min(n,m)}{d}\\right\\rfloor}\\mu(d’)\\left\\lfloor\\frac{n}{d’d}\\right\\rfloor\\left\\lfloor\\frac{m}{d’d}\\right\\rfloor$</p>\n<p>$\\sum_{T=1}^{min(n,m)}\\sum_{d|T}F(d)\\mu\\left(\\frac{T}{d}\\right){\\left\\lfloor\\frac{n}{T}\\right\\rfloor}{\\left\\lfloor\\frac{m}{T}\\right\\rfloor}$</p>\n<p>$\\sum_{T=1}^{min(n,m)}{\\left\\lfloor\\frac{n}{T}\\right\\rfloor}{\\left\\lfloor\\frac{m}{T}\\right\\rfloor}\\sum_{d|T}F(d)\\mu\\left(\\frac{T}{d}\\right)$</p>\n<p>$f(x)=\\sum_{d|T}F(d)\\mu\\left(\\frac{T}{d}\\right)$</p>\n<p>$\\sum_{T=1}^{min(n,m)}{\\left\\lfloor\\frac{n}{T}\\right\\rfloor}{\\left\\lfloor\\frac{m}{T}\\right\\rfloor}f(T)$</p>\n<ul>\n<li>$\\ \\ \\ \\ \\ \\,$ $O(n\\log n)$预处理$F$，$f$和$\\mu$，询问分块，复杂度$O(\\sqrt n\\log n)$，总时间复杂度$O(n\\log n+T\\sqrt n\\log n)$，和<a href=\"https://www.luogu.org/problemnew/show/P3312\">P3312 [SDOI2014]数表</a>这道题差不多</li>\n</ul>\n<h3 id=\"代码-4\"><a href=\"#代码-4\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdlib&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> inf=<span class=\"number\">0x7fffffff</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">double</span> eps=<span class=\"number\">1e-10</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">double</span> pi=<span class=\"built_in\">acos</span>(<span class=\"number\">-1.0</span>);</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">50010</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">int</span> <span class=\"title\">read</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">  <span class=\"type\">int</span> x=<span class=\"number\">0</span>,f=<span class=\"number\">1</span>;<span class=\"type\">char</span> ch;ch=<span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(ch&lt;<span class=\"string\">&#x27;0&#x27;</span>||ch&gt;<span class=\"string\">&#x27;9&#x27;</span>)&#123;<span class=\"keyword\">if</span>(ch==<span class=\"string\">&#x27;-&#x27;</span>) f=<span class=\"number\">-1</span>;ch=<span class=\"built_in\">getchar</span>();&#125;</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(ch&gt;=<span class=\"string\">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class=\"string\">&#x27;9&#x27;</span>)&#123;x=x*<span class=\"number\">10</span>+ch-<span class=\"string\">&#x27;0&#x27;</span>;ch=<span class=\"built_in\">getchar</span>();&#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> x*f;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">bool</span> vis[N];</span><br><span class=\"line\"><span class=\"type\">int</span> prim[N],mu[N],sum[N];</span><br><span class=\"line\"><span class=\"type\">long</span> <span class=\"type\">long</span> g[N];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">get_mu</span><span class=\"params\">(<span class=\"type\">int</span> n)</span></span>&#123;</span><br><span class=\"line\">  mu[<span class=\"number\">1</span>]=<span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">2</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!vis[i])&#123;mu[i]=<span class=\"number\">-1</span>;prim[++prim[<span class=\"number\">0</span>]]=i;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;=prim[<span class=\"number\">0</span>]&amp;&amp;i*prim[j]&lt;=n;j++)&#123;</span><br><span class=\"line\">      vis[i*prim[j]]=<span class=\"number\">1</span>;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(i%prim[j]==<span class=\"number\">0</span>)<span class=\"keyword\">break</span>;</span><br><span class=\"line\">      <span class=\"keyword\">else</span> mu[i*prim[j]]=-mu[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)sum[i]=sum[i<span class=\"number\">-1</span>]+mu[i];</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">    <span class=\"type\">long</span> <span class=\"type\">long</span> ans=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> l=<span class=\"number\">1</span>,r;l&lt;=i;l=r+<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">      r=(i/(i/l));</span><br><span class=\"line\">      ans+=<span class=\"number\">1ll</span>*(r-l+<span class=\"number\">1</span>)*<span class=\"number\">1ll</span>*(i/l);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    g[i]=ans;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"title\">Ans</span><span class=\"params\">(<span class=\"type\">int</span> n,<span class=\"type\">int</span> m)</span></span>&#123;</span><br><span class=\"line\">  <span class=\"type\">int</span> max_rep=<span class=\"built_in\">min</span>(n,m);</span><br><span class=\"line\">  <span class=\"type\">long</span> <span class=\"type\">long</span> ans=<span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> l=<span class=\"number\">1</span>,r;l&lt;=max_rep;l=r+<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">    r=<span class=\"built_in\">min</span>(n/(n/l),m/(m/l));</span><br><span class=\"line\">  \tans+=(sum[r]-sum[l<span class=\"number\">-1</span>])*<span class=\"number\">1ll</span>*g[n/l]*<span class=\"number\">1ll</span>*g[m/l];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"type\">int</span> T=<span class=\"built_in\">read</span>();</span><br><span class=\"line\"> \t<span class=\"built_in\">get_mu</span>(N<span class=\"number\">-10</span>);</span><br><span class=\"line\"> \t<span class=\"keyword\">while</span>(T--)&#123;</span><br><span class=\"line\"> \t\t<span class=\"type\">int</span> a=<span class=\"built_in\">read</span>(),b=<span class=\"built_in\">read</span>();</span><br><span class=\"line\"> \t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%lld\\n&quot;</span>,<span class=\"built_in\">Ans</span>(a,b));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"P3455-POI2007-ZAP-Queries\"><a href=\"#P3455-POI2007-ZAP-Queries\" class=\"headerlink\" title=\"P3455 [POI2007]ZAP-Queries\"></a><a href=\"https://www.luogu.org/problemnew/show/P3455\">P3455 [POI2007]ZAP-Queries</a></h2><p>$\\sum_{i=1}^a\\sum_{j=1}^b[gcd(i,j)=c]$</p>\n<h3 id=\"反演过程：-5\"><a href=\"#反演过程：-5\" class=\"headerlink\" title=\"反演过程：\"></a>反演过程：</h3><p>$\\sum_{i=1}^a\\sum_{j=1}^b[gcd(i,j)=1]$</p>\n<p>$\\sum_{i=1}^{\\left\\lfloor\\frac{a}{c}\\right\\rfloor}\\sum_{j=1}^{\\left\\lfloor\\frac{b}{c}\\right\\rfloor}ϵ(gcd(i,j))$</p>\n<p>$\\sum_{i=1}^{\\left\\lfloor\\frac{a}{c}\\right\\rfloor}\\sum_{j=1}^{\\left\\lfloor\\frac{b}{c}\\right\\rfloor}(\\mu*1)(gcd(i,j))$</p>\n<p>$\\sum_{i=1}^{\\left\\lfloor\\frac{a}{c}\\right\\rfloor}\\sum_{j=1}^{\\left\\lfloor\\frac{b}{c}\\right\\rfloor}\\sum_{d|gcd(i,j)}\\mu(d)\\times 1$</p>\n<p>$\\sum_{x=1}^{\\left\\lfloor\\frac{min(a,b)}{c}\\right\\rfloor}\\sum_{d|x}\\mu(d){\\left\\lfloor\\frac{a}{xc}\\right\\rfloor}{\\left\\lfloor\\frac{b}{xc}\\right\\rfloor}$</p>\n<p>$\\sum_{d=1}^{\\left\\lfloor\\frac{min(a,b)}{c}\\right\\rfloor}\\mu(d){\\left\\lfloor\\frac{a}{dc}\\right\\rfloor}{\\left\\lfloor\\frac{b}{dc}\\right\\rfloor}$</p>\n<ul>\n<li>$\\ \\ \\ \\ \\ \\,$ 裸题啊！模板啊！$O(n)$预处理$\\mu$，询问分块，复杂度$O(\\sqrt n)$，总时间复杂度$O(n+T\\sqrt n)$</li>\n</ul>\n<h3 id=\"代码-5\"><a href=\"#代码-5\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdlib&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> inf=<span class=\"number\">0x7fffffff</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">double</span> eps=<span class=\"number\">1e-10</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">double</span> pi=<span class=\"built_in\">acos</span>(<span class=\"number\">-1.0</span>);</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">50010</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">int</span> <span class=\"title\">read</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">  <span class=\"type\">int</span> x=<span class=\"number\">0</span>,f=<span class=\"number\">1</span>;<span class=\"type\">char</span> ch;ch=<span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(ch&lt;<span class=\"string\">&#x27;0&#x27;</span>||ch&gt;<span class=\"string\">&#x27;9&#x27;</span>)&#123;<span class=\"keyword\">if</span>(ch==<span class=\"string\">&#x27;-&#x27;</span>) f=<span class=\"number\">-1</span>;ch=<span class=\"built_in\">getchar</span>();&#125;</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(ch&gt;=<span class=\"string\">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class=\"string\">&#x27;9&#x27;</span>)&#123;x=x*<span class=\"number\">10</span>+ch-<span class=\"string\">&#x27;0&#x27;</span>;ch=<span class=\"built_in\">getchar</span>();&#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> x*f;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">bool</span> vis[N];</span><br><span class=\"line\"><span class=\"type\">int</span> prim[N],mu[N],sum[N],k;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">get_mu</span><span class=\"params\">(<span class=\"type\">int</span> n)</span></span>&#123;</span><br><span class=\"line\">  mu[<span class=\"number\">1</span>]=<span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">2</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!vis[i])&#123;mu[i]=<span class=\"number\">-1</span>;prim[++prim[<span class=\"number\">0</span>]]=i;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;=prim[<span class=\"number\">0</span>]&amp;&amp;i*prim[j]&lt;=n;j++)&#123;</span><br><span class=\"line\">      vis[i*prim[j]]=<span class=\"number\">1</span>;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(i%prim[j]==<span class=\"number\">0</span>)<span class=\"keyword\">break</span>;</span><br><span class=\"line\">      <span class=\"keyword\">else</span> mu[i*prim[j]]=-mu[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)</span><br><span class=\"line\">  sum[i]=sum[i<span class=\"number\">-1</span>]+mu[i];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"title\">Ans</span><span class=\"params\">(<span class=\"type\">int</span> a,<span class=\"type\">int</span> b)</span></span>&#123;</span><br><span class=\"line\">  <span class=\"type\">int</span> max_rep=<span class=\"built_in\">min</span>(a,b);</span><br><span class=\"line\">  <span class=\"type\">long</span> <span class=\"type\">long</span> ans=<span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> l=<span class=\"number\">1</span>,r;l&lt;=max_rep;l=r+<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">    r=<span class=\"built_in\">min</span>(a/(a/l),b/(b/l));</span><br><span class=\"line\">    ans+=(<span class=\"type\">long</span> <span class=\"type\">long</span>)(a/(l*k))*(<span class=\"type\">long</span> <span class=\"type\">long</span>)(b/(l*k))*(<span class=\"type\">long</span> <span class=\"type\">long</span>)(sum[r]-sum[l<span class=\"number\">-1</span>]);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> T;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"> \tT=<span class=\"built_in\">read</span>();</span><br><span class=\"line\"> \t<span class=\"built_in\">get_mu</span>(N<span class=\"number\">-10</span>);</span><br><span class=\"line\"> \t<span class=\"keyword\">while</span>(T--)&#123;</span><br><span class=\"line\"> \t\t<span class=\"type\">int</span> a=<span class=\"built_in\">read</span>(),b=<span class=\"built_in\">read</span>();k=<span class=\"built_in\">read</span>();</span><br><span class=\"line\"> \t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%lld\\n&quot;</span>,<span class=\"built_in\">Ans</span>(a,b));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"P1829-国家集训队-Crash的数字表格-JZPTAB\"><a href=\"#P1829-国家集训队-Crash的数字表格-JZPTAB\" class=\"headerlink\" title=\"P1829 [国家集训队]Crash的数字表格 / JZPTAB\"></a><a href=\"https://www.luogu.org/problemnew/show/P1829\">P1829 [国家集训队]Crash的数字表格 / JZPTAB</a></h2><p>$\\sum_{i=1}^n\\sum_{j=1}^m lca(i,j)$</p>\n<h3 id=\"反演过程：-6\"><a href=\"#反演过程：-6\" class=\"headerlink\" title=\"反演过程：\"></a>反演过程：</h3><p>$\\sum_{i=1}^n\\sum_{j=1}^m\\frac{ij}{gcd(i,j)}$</p>\n<p>$\\sum_{d=1}^{min(n,m)}\\sum_{i=1}^n\\sum_{j=1}^m\\frac{ij}{d}[gcd(i,j)=d]$</p>\n<p>$\\sum_{d=1}^{min(n,m)}\\frac{1}{d}\\sum_{i=1}^n\\sum_{j=1}^mij[gcd(i,j)=d]$</p>\n<p>$\\sum_{d=1}^{min(n,m)}\\frac{1}{d}\\sum_{i=1}^{\\left\\lfloor\\frac{n}{d}\\right\\rfloor}\\sum_{j=1}^{\\left\\lfloor\\frac{m}{d}\\right\\rfloor}ij\\cdot d^2[gcd(i,j)=1]$</p>\n<p>$\\sum_{d=1}^{min(n,m)}d\\sum_{i=1}^{\\left\\lfloor\\frac{n}{d}\\right\\rfloor}\\sum_{j=1}^{\\left\\lfloor\\frac{m}{d}\\right\\rfloor}ij[gcd(i,j)=1]$</p>\n<p>$\\sum_{d=1}^{min(n,m)}d\\sum_{i=1}^{\\left\\lfloor\\frac{n}{d}\\right\\rfloor}\\sum_{j=1}^{\\left\\lfloor\\frac{m}{d}\\right\\rfloor}ijϵ(gcd(i,j))$</p>\n<p>$\\sum_{d=1}^{min(n,m)}d\\sum_{i=1}^{\\left\\lfloor\\frac{n}{d}\\right\\rfloor}\\sum_{j=1}^{\\left\\lfloor\\frac{m}{d}\\right\\rfloor}ij\\sum_{k|gcd(i,j)}\\mu(k)$</p>\n<p>$\\sum_{d=1}^{min(n,m)}d\\sum_{k=1}^{\\left\\lfloor\\frac{min(n,m)}{d}\\right\\rfloor}\\mu(k)\\sum_{i=1}^{\\left\\lfloor\\frac{n}{d}\\right\\rfloor}\\sum_{j=1}^{\\left\\lfloor\\frac{m}{d}\\right\\rfloor}ij[k|gcd(i,j)]$</p>\n<p>$\\sum_{d=1}^{min(n,m)}d\\sum_{k=1}^{\\left\\lfloor\\frac{min(n,m)}{d}\\right\\rfloor}\\mu(k)\\sum_{i=1}^{\\left\\lfloor\\frac{n}{dk}\\right\\rfloor}\\sum_{j=1}^{\\left\\lfloor\\frac{m}{dk}\\right\\rfloor}ij\\cdot k^2$</p>\n<p>$\\sum_{d=1}^{min(n,m)}d\\sum_{k=1}^{\\left\\lfloor\\frac{min(n,m)}{d}\\right\\rfloor}\\mu(k)\\cdot k^2\\sum_{i=1}^{\\left\\lfloor\\frac{n}{dk}\\right\\rfloor}\\sum_{j=1}^{\\left\\lfloor\\frac{m}{dk}\\right\\rfloor}ij$</p>\n<p>$\\begin{aligned}F(n,m)=&amp;\\sum_{k=1}^{\\frac{min(n,m)}{d}}\\mu(k)\\cdot k^2\\sum_{i=1}^{\\left\\lfloor\\frac{n}{k}\\right\\rfloor}\\sum_{j=1}^{\\left\\lfloor\\frac{m}{k}\\right\\rfloor}ij\\\\=&amp;\\sum_{k=1}^{\\frac{min(n,m)}{d}}\\mu(k)\\cdot k^2\\cdot\\frac{\\left\\lfloor\\frac{n}{k}\\right\\rfloor\\cdot(\\left\\lfloor\\frac{n}{k}\\right\\rfloor+1)}{2}\\times\\frac{\\left\\lfloor\\frac{m}{k}\\right\\rfloor\\cdot(\\left\\lfloor\\frac{m}{k}\\right\\rfloor+1)}{2} \\end{aligned}$</p>\n<p>$\\sum_{d=1}^{min(n,m)}d\\times F\\left(\\left\\lfloor\\frac{n}{k}\\right\\rfloor,\\left\\lfloor\\frac{m}{k}\\right\\rfloor\\right)$</p>\n<ul>\n<li>$\\ \\ \\ \\ \\ \\,$ 感觉很神奇，需要连续提取 $2$ 次公约数，$O(n)$预处理$\\mu$，分块询问$F$,$O(\\sqrt{\\sqrt n})$,答案询问分块，复杂度$O(\\sqrt n)$，嵌套起来总时间复杂度$O(n+n^{\\frac{3}{4}})$，代码比较丑</li>\n</ul>\n<h3 id=\"代码-6\"><a href=\"#代码-6\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdlib&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> inf=<span class=\"number\">0x7fffffff</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">double</span> eps=<span class=\"number\">1e-10</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">double</span> pi=<span class=\"built_in\">acos</span>(<span class=\"number\">-1.0</span>);</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">int</span> <span class=\"title\">read</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> x=<span class=\"number\">0</span>,f=<span class=\"number\">1</span>;<span class=\"type\">char</span> ch;ch=<span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(ch&lt;<span class=\"string\">&#x27;0&#x27;</span>||ch&gt;<span class=\"string\">&#x27;9&#x27;</span>)&#123;<span class=\"keyword\">if</span>(ch==<span class=\"string\">&#x27;-&#x27;</span>) f=<span class=\"number\">-1</span>;ch=<span class=\"built_in\">getchar</span>();&#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(ch&gt;=<span class=\"string\">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class=\"string\">&#x27;9&#x27;</span>)&#123;x=x*<span class=\"number\">10</span>+ch-<span class=\"string\">&#x27;0&#x27;</span>;ch=<span class=\"built_in\">getchar</span>();&#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x*f;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">10010000</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">long</span> <span class=\"type\">long</span> mod=<span class=\"number\">20101009</span>;</span><br><span class=\"line\"><span class=\"type\">long</span> <span class=\"type\">long</span> sum[N];</span><br><span class=\"line\"><span class=\"type\">bool</span> vis[N];</span><br><span class=\"line\"><span class=\"type\">int</span> prim[N],mu[N];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">get_mu</span><span class=\"params\">(<span class=\"type\">int</span> n)</span></span>&#123;</span><br><span class=\"line\">  mu[<span class=\"number\">1</span>]=<span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">2</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!vis[i])&#123;mu[i]=<span class=\"number\">-1</span>;prim[++prim[<span class=\"number\">0</span>]]=i;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;=prim[<span class=\"number\">0</span>]&amp;&amp;i*prim[j]&lt;=n;j++)&#123;</span><br><span class=\"line\">      vis[i*prim[j]]=<span class=\"number\">1</span>;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(i%prim[j]==<span class=\"number\">0</span>)<span class=\"keyword\">break</span>;</span><br><span class=\"line\">      <span class=\"keyword\">else</span> mu[i*prim[j]]=-mu[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)</span><br><span class=\"line\">  sum[i]=(sum[i<span class=\"number\">-1</span>]+<span class=\"number\">1ll</span>*mu[i]*<span class=\"number\">1ll</span>*i%mod*<span class=\"number\">1ll</span>*i%mod)%mod;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"> \t<span class=\"type\">int</span> n=<span class=\"built_in\">read</span>(),m=<span class=\"built_in\">read</span>();</span><br><span class=\"line\"> \t<span class=\"keyword\">if</span>(n&gt;m)<span class=\"built_in\">swap</span>(n,m);</span><br><span class=\"line\">  <span class=\"built_in\">get_mu</span>(n);</span><br><span class=\"line\">  <span class=\"type\">long</span> <span class=\"type\">long</span> ans=<span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"type\">long</span> <span class=\"type\">long</span> inv2=(mod+<span class=\"number\">1ll</span>)/<span class=\"number\">2ll</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> d=<span class=\"number\">1</span>;d&lt;=n;d++)&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> x=n/d,y=m/d,minn=<span class=\"built_in\">min</span>(x,y);</span><br><span class=\"line\">    <span class=\"type\">long</span> <span class=\"type\">long</span> Sum=<span class=\"number\">0ll</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> l=<span class=\"number\">1</span>,r;l&lt;=minn;l=r+<span class=\"number\">1ll</span>)&#123;</span><br><span class=\"line\">    \tr=<span class=\"built_in\">min</span>(x/(x/l),y/(y/l));</span><br><span class=\"line\">      Sum=(Sum+(sum[r]-sum[l<span class=\"number\">-1</span>])%mod*(((<span class=\"number\">1ll</span>+x/l)%mod*<span class=\"number\">1ll</span>*(x/l)%mod*inv2%mod)%mod)%mod*(((<span class=\"number\">1ll</span>+y/l)%mod*<span class=\"number\">1ll</span>*(y/l)%mod*inv2%mod)%mod)%mod)%mod;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ans=(ans+Sum*<span class=\"number\">1ll</span>*d)%mod;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> \t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%lld\\n&quot;</span>,(ans%mod+mod)%mod);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>扩展：这个题其实是两道题的融合，上面的方法是过不了JZPTAB的，在bzoj上面是权限题，所以先挖坑，我们下面继续来化简：</li>\n</ul>\n<p>$\\sum_{d=1}^{min(n,m)}d\\sum_{k=1}^{\\left\\lfloor\\frac{min(n,m)}{d}\\right\\rfloor}\\mu(k)\\cdot k^2\\sum_{i=1}^{\\left\\lfloor\\frac{n}{dk}\\right\\rfloor}\\sum_{j=1}^{\\left\\lfloor\\frac{m}{dk}\\right\\rfloor}ij$</p>\n<p>$\\sum_{d=1}^{min(n,m)}\\sum_{k=1}^{\\left\\lfloor\\frac{min(n,m)}{d}\\right\\rfloor}d\\cdot \\mu(k)\\cdot k^2\\sum_{i=1}^{\\left\\lfloor\\frac{n}{dk}\\right\\rfloor}\\sum_{j=1}^{\\left\\lfloor\\frac{m}{dk}\\right\\rfloor}ij$</p>\n<p>$\\sum_{T=1}^{min(n,m)}\\sum_{i=1}^{\\left\\lfloor\\frac{n}{T}\\right\\rfloor}\\sum_{j=1}^{\\left\\lfloor\\frac{m}{T}\\right\\rfloor}ij\\sum_{d|T}\\frac{T}{d}\\cdot \\mu(d)\\cdot d^2$</p>\n<p>$\\sum_{T=1}^{min(n,m)}\\sum_{i=1}^{\\left\\lfloor\\frac{n}{T}\\right\\rfloor}\\sum_{j=1}^{\\left\\lfloor\\frac{m}{T}\\right\\rfloor}ij\\sum_{d|T}T \\mu(d) d$</p>\n<p>$F(T)=\\sum_{d|T}T \\mu(d) d$</p>\n<p>$\\sum_{T=1}^{min(n,m)}\\frac{\\left\\lfloor\\frac{n}{T}\\right\\rfloor\\cdot(\\left\\lfloor\\frac{n}{T}\\right\\rfloor+1)}{2}\\times\\frac{\\left\\lfloor\\frac{m}{T}\\right\\rfloor\\cdot(\\left\\lfloor\\frac{m}{T}\\right\\rfloor+1)}{2}\\times F(T)$</p>\n<ul>\n<li><p>$\\ \\ \\ \\ \\ \\,$ 显然，$F$是积性函数，我们最快可以$O(n)$地把他筛出来，具体操作可以看<a href=\"https://www.luogu.org/blog/Althen-Way-Satan/xian-xing-shai\">【积性函数的线性筛】</a>，欧拉筛三步走，询问分块，复杂度$O(\\sqrt n)$,总时间复杂度$O(n+T\\sqrt n)$</p>\n<p>$\\tt step1$. 如果$p$是素数：<br>$f(p)=p-p^2$</p>\n<p>$\\tt step2$. 如果$p$是素数，$i\\%p\\neq0$：$f(pi)=f(i)\\times (p-p^2)$</p>\n<p>$\\tt step3$. 如果$p$是素数，$i\\%p=0$：我们把 $pi$ 分解成 $p^cx$ ：<br>$f(pi)=f(p^cx)=f(x)\\times(p^c-p^{c+1})$</p>\n</li>\n</ul>\n<h3 id=\"代码-7\"><a href=\"#代码-7\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdlib&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cctype&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;stack&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;map&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;set&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> inf=<span class=\"number\">0x7fffffff</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">double</span> eps=<span class=\"number\">1e-10</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">double</span> pi=<span class=\"built_in\">acos</span>(<span class=\"number\">-1.0</span>);</span><br><span class=\"line\"><span class=\"comment\">//char buf[1&lt;&lt;15],*S=buf,*T=buf;</span></span><br><span class=\"line\"><span class=\"comment\">//char getch()&#123;return S==T&amp;&amp;(T=(S=buf)+fread(buf,1,1&lt;&lt;15,stdin),S==T)?0:*S++;&#125;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">int</span> <span class=\"title\">read</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> x=<span class=\"number\">0</span>,f=<span class=\"number\">1</span>;<span class=\"type\">char</span> ch;ch=<span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(ch&lt;<span class=\"string\">&#x27;0&#x27;</span>||ch&gt;<span class=\"string\">&#x27;9&#x27;</span>)&#123;<span class=\"keyword\">if</span>(ch==<span class=\"string\">&#x27;-&#x27;</span>) f=<span class=\"number\">0</span>;ch=<span class=\"built_in\">getchar</span>();&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(ch&gt;=<span class=\"string\">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class=\"string\">&#x27;9&#x27;</span>)&#123;x=(x&lt;&lt;<span class=\"number\">1</span>)+(x&lt;&lt;<span class=\"number\">3</span>)+(ch&amp;<span class=\"number\">15</span>);ch=<span class=\"built_in\">getchar</span>();&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(f)<span class=\"keyword\">return</span> x;<span class=\"keyword\">else</span> <span class=\"keyword\">return</span> -x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">1e7</span>+<span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">long</span> <span class=\"type\">long</span> mod=<span class=\"number\">20101009</span>;</span><br><span class=\"line\"><span class=\"type\">long</span> <span class=\"type\">long</span> inv2=(mod+<span class=\"number\">1ll</span>)/<span class=\"number\">2ll</span>;</span><br><span class=\"line\"><span class=\"type\">bool</span> vis[N];</span><br><span class=\"line\"><span class=\"type\">long</span> <span class=\"type\">long</span> pri[N],cnt[N],power[N];</span><br><span class=\"line\"><span class=\"type\">long</span> <span class=\"type\">long</span> prime[N],f[N];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Get_Shai</span><span class=\"params\">(<span class=\"type\">long</span> <span class=\"type\">long</span> n)</span></span>&#123;</span><br><span class=\"line\">  f[<span class=\"number\">1</span>]=<span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">long</span> <span class=\"type\">long</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)power[i]=<span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">long</span> <span class=\"type\">long</span> i=<span class=\"number\">2</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!vis[i])&#123;</span><br><span class=\"line\">      cnt[i]=<span class=\"number\">1</span>;pri[i]=i;power[i]=i;</span><br><span class=\"line\">      prime[++prime[<span class=\"number\">0</span>]]=i;</span><br><span class=\"line\">      f[i]=(<span class=\"number\">1ll</span>*i<span class=\"number\">-1ll</span>*i*i%mod+mod)%mod;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">long</span> <span class=\"type\">long</span> j=<span class=\"number\">1</span>,v,pc;j&lt;=prime[<span class=\"number\">0</span>]&amp;&amp;i*prime[j]&lt;=n;j++)&#123;</span><br><span class=\"line\">      v=i*prime[j];</span><br><span class=\"line\">      vis[v]=<span class=\"number\">1</span>;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(i%prime[j]==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        cnt[v]=cnt[i]+<span class=\"number\">1</span>;pri[v]=pri[i];power[v]=(<span class=\"number\">1ll</span>*power[i]*pri[i])%mod;</span><br><span class=\"line\">        f[v]=f[v/power[v]]*(<span class=\"number\">1ll</span>*power[v]<span class=\"number\">-1ll</span>*power[v]*pri[i]%mod+mod)%mod;</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      cnt[v]=<span class=\"number\">1</span>;pri[v]=prime[j];power[v]=prime[j];</span><br><span class=\"line\">      f[v]=(f[i]*f[prime[j]])%mod;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)f[i]=(<span class=\"number\">1ll</span>*f[i]+f[i<span class=\"number\">-1</span>])%mod;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"title\">Get_ans</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> y)</span></span>&#123;</span><br><span class=\"line\">  <span class=\"type\">long</span> <span class=\"type\">long</span> Sum=<span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> l=<span class=\"number\">1</span>,r;l&lt;=x;l=r+<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">    r=<span class=\"built_in\">min</span>(x/(x/l),y/(y/l));</span><br><span class=\"line\">    Sum=(Sum+(<span class=\"number\">1ll</span>*f[r]-f[l<span class=\"number\">-1</span>]+mod)%mod*(((<span class=\"number\">1ll</span>+x/l)%mod*<span class=\"number\">1ll</span>*(x/l)%mod*inv2%mod)%mod)%mod*(((<span class=\"number\">1ll</span>+y/l)%mod*<span class=\"number\">1ll</span>*(y/l)%mod*inv2%mod)%mod)%mod)%mod;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> Sum;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> n=<span class=\"built_in\">read</span>(),m=<span class=\"built_in\">read</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(n&gt;m)<span class=\"built_in\">swap</span>(n,m);</span><br><span class=\"line\">  <span class=\"built_in\">Get_Shai</span>(<span class=\"number\">1ll</span>*n);</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%lld\\n&quot;</span>,(<span class=\"built_in\">Get_ans</span>(n,m)%mod+mod)%mod);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<ul>\n<li>再扩展，这道题还可以用杜教筛加速的，具体<a href=\"https://blog.csdn.net/VictoryCzt/article/details/85054670?tdsourcetag=s_pctim_aiomsg\">戳这里</a>，感觉和这道题差不多<a href=\"https://www.luogu.org/problemnew/show/P3768\">P3768</a>，就不贴了。</li>\n</ul>\n<h2 id=\"P3768-简单的数学题\"><a href=\"#P3768-简单的数学题\" class=\"headerlink\" title=\"P3768 简单的数学题\"></a><a href=\"https://www.luogu.org/problemnew/show/P3768\">P3768 简单的数学题</a></h2><p>$\\sum_{i=1}^n\\sum_{j=1}^nijgcd(i,j)$</p>\n<h3 id=\"反演过程：-7\"><a href=\"#反演过程：-7\" class=\"headerlink\" title=\"反演过程：\"></a>反演过程：</h3><p>$\\sum_{d=1}^{n}\\sum_{i=1}^n\\sum_{j=1}^nijd[gcd(i,j)=d]$</p>\n<p>$\\sum_{d=1}^{n}d\\sum_{i=1}^n\\sum_{j=1}^nij[gcd(i,j)=d]$</p>\n<p>$\\sum_{d=1}^{n}{d}\\sum_{i=1}^{\\left\\lfloor\\frac{n}{d}\\right\\rfloor}\\sum_{j=1}^{\\left\\lfloor\\frac{n}{d}\\right\\rfloor}ij\\cdot d^2[gcd(i,j)=1]$</p>\n<p>$\\sum_{d=1}^{n}{d^3}\\sum_{i=1}^{\\left\\lfloor\\frac{n}{d}\\right\\rfloor}\\sum_{j=1}^{\\left\\lfloor\\frac{n}{d}\\right\\rfloor}ij[gcd(i,j)=1]$</p>\n<p>$\\sum_{d=1}^{n}d^3\\sum_{i=1}^{\\left\\lfloor\\frac{n}{d}\\right\\rfloor}\\sum_{j=1}^{\\left\\lfloor\\frac{n}{d}\\right\\rfloor}ijϵ(gcd(i,j))$</p>\n<p>$\\sum_{d=1}^{n}d^3\\sum_{i=1}^{\\left\\lfloor\\frac{n}{d}\\right\\rfloor}\\sum_{j=1}^{\\left\\lfloor\\frac{n}{d}\\right\\rfloor}ij\\sum_{k|gcd(i,j)}\\mu(k)$</p>\n<p>$\\sum_{d=1}^{n}d^3\\sum_{k=1}^{\\left\\lfloor\\frac{n}{d}\\right\\rfloor}\\mu(k)\\sum_{i=1}^{\\left\\lfloor\\frac{n}{d}\\right\\rfloor}\\sum_{j=1}^{\\left\\lfloor\\frac{n}{d}\\right\\rfloor}ij[k|gcd(i,j)]$</p>\n<p>$\\sum_{d=1}^{n}d^3\\sum_{k=1}^{\\left\\lfloor\\frac{n}{d}\\right\\rfloor}\\mu(k)\\sum_{i=1}^{\\left\\lfloor\\frac{n}{dk}\\right\\rfloor}\\sum_{j=1}^{\\left\\lfloor\\frac{m}{dk}\\right\\rfloor}ij\\cdot k^2$</p>\n<p>$\\sum_{d=1}^{n}d^3\\sum_{k=1}^{\\left\\lfloor\\frac{n}{d}\\right\\rfloor}\\mu(k)\\cdot k^2\\sum_{i=1}^{\\left\\lfloor\\frac{n}{dk}\\right\\rfloor}\\sum_{j=1}^{\\left\\lfloor\\frac{m}{dk}\\right\\rfloor}ij$</p>\n<p>$\\sum_{T=1}^{n}\\sum_{i=1}^{\\left\\lfloor\\frac{n}{T}\\right\\rfloor}\\sum_{j=1}^{\\left\\lfloor\\frac{n}{T}\\right\\rfloor}ij\\sum_{d|T}d^3\\cdot \\mu\\left(\\frac{T}{d}\\right)\\cdot \\left(\\frac{T}{d}\\right)^2$</p>\n<p>$\\sum_{T=1}^{n}\\sum_{i=1}^{\\left\\lfloor\\frac{n}{T}\\right\\rfloor}\\sum_{j=1}^{\\left\\lfloor\\frac{n}{T}\\right\\rfloor}ij\\sum_{d|T}T^2\\cdot d\\cdot \\mu\\left(\\frac{T}{d}\\right)$</p>\n<p>$\\sum_{T=1}^{n}\\sum_{i=1}^{\\left\\lfloor\\frac{n}{T}\\right\\rfloor}\\sum_{j=1}^{\\left\\lfloor\\frac{n}{T}\\right\\rfloor}ijT^2\\sum_{d|T}d\\cdot \\mu\\left(\\frac{T}{d}\\right)$</p>\n<p>$\\sum_{T=1}^{n}\\sum_{i=1}^{\\left\\lfloor\\frac{n}{T}\\right\\rfloor}\\sum_{j=1}^{\\left\\lfloor\\frac{n}{T}\\right\\rfloor}ijT^2(id*\\mu)(T)$</p>\n<p>$\\sum_{T=1}^{n}\\sum_{i=1}^{\\left\\lfloor\\frac{n}{T}\\right\\rfloor}\\sum_{j=1}^{\\left\\lfloor\\frac{n}{T}\\right\\rfloor}ijT^2\\varphi(T)$</p>\n<p>$\\sum_{T=1}^{n}\\frac{\\left\\lfloor\\frac{n}{T}\\right\\rfloor\\cdot(\\left\\lfloor\\frac{n}{T}\\right\\rfloor+1)}{2}\\times\\frac{\\left\\lfloor\\frac{m}{T}\\right\\rfloor\\cdot(\\left\\lfloor\\frac{m}{T}\\right\\rfloor+1)}{2}\\times T^2\\varphi(T)$</p>\n<ul>\n<li><p>$\\ \\ \\ \\ \\ \\,$ 需要连续提取 $2$ 次公约数，和<a href=\"https://www.luogu.org/problemnew/show/P1829\">P1829</a>有异曲同工之妙，杜教筛筛出 $T^2\\varphi(T)$ 的前缀和，分块询问答案询问，总时间复杂度$O(n^{\\frac{2}{3}})$，杜教筛详见<a href=\"https://www.luogu.org/blog/Althen-Way-Satan/mu-bi-wu-si-fan-yan-yu-du-jiao-shai\">【莫比乌斯反演和杜教筛】</a></p>\n<p>$f(x)=x^2\\varphi(x)$</p>\n<p>$g(x)=x^2\\ \\ \\ ,\\sum_{i=1}^{x}g(i)=\\frac{x(x+1)(2x+1)}{6}$</p>\n<p>$(f<em>g)(x)=x^3\\ \\ \\ ,\\sum_{i=1}^{x}(f</em>g)(i)=\\frac{x^2(x+1)^2}{4}$</p>\n</li>\n</ul>\n<h3 id=\"代码-8\"><a href=\"#代码-8\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdlib&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;map&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;stack&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"title\">read</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">  <span class=\"type\">long</span> <span class=\"type\">long</span> x=<span class=\"number\">0</span>,f=<span class=\"number\">1</span>;<span class=\"type\">char</span> ch;ch=<span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(ch&lt;<span class=\"string\">&#x27;0&#x27;</span>||ch&gt;<span class=\"string\">&#x27;9&#x27;</span>)&#123;<span class=\"keyword\">if</span>(ch==<span class=\"string\">&#x27;-&#x27;</span>) f=<span class=\"number\">0</span>;ch=<span class=\"built_in\">getchar</span>();&#125;</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(ch&gt;=<span class=\"string\">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class=\"string\">&#x27;9&#x27;</span>)&#123;x=(x&lt;&lt;<span class=\"number\">1</span>)+(x&lt;&lt;<span class=\"number\">3</span>)+(ch&amp;<span class=\"number\">15</span>);ch=<span class=\"built_in\">getchar</span>();&#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(f)<span class=\"keyword\">return</span> x;<span class=\"keyword\">else</span> <span class=\"keyword\">return</span> -x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">8000010</span>;</span><br><span class=\"line\"><span class=\"type\">long</span> <span class=\"type\">long</span> mod,n,inv6,inv4;</span><br><span class=\"line\"><span class=\"type\">int</span> prim[N];</span><br><span class=\"line\"><span class=\"type\">long</span> <span class=\"type\">long</span> f[N];</span><br><span class=\"line\"><span class=\"type\">bool</span> vis[N];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">get_f</span><span class=\"params\">(<span class=\"type\">int</span> n)</span></span>&#123;</span><br><span class=\"line\">  f[<span class=\"number\">1</span>]=<span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">2</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!vis[i])&#123;f[i]=i<span class=\"number\">-1</span>;prim[++prim[<span class=\"number\">0</span>]]=i;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;=prim[<span class=\"number\">0</span>]&amp;&amp;i*prim[j]&lt;=n;j++)&#123;</span><br><span class=\"line\">      vis[i*prim[j]]=<span class=\"number\">1</span>;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(i%prim[j]==<span class=\"number\">0</span>)&#123;f[i*prim[j]]=f[i]*prim[j];<span class=\"keyword\">break</span>;&#125;</span><br><span class=\"line\">      <span class=\"keyword\">else</span> f[i*prim[j]]=f[i]*(prim[j]<span class=\"number\">-1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i)f[i]=(f[i<span class=\"number\">-1</span>]+<span class=\"number\">1ll</span>*f[i]*i%mod*i%mod)%mod;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">map&lt;<span class=\"type\">long</span> <span class=\"type\">long</span>,<span class=\"type\">long</span> <span class=\"type\">long</span>&gt; mp;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"title\">power</span><span class=\"params\">(<span class=\"type\">long</span> <span class=\"type\">long</span> a,<span class=\"type\">long</span> <span class=\"type\">long</span> b)</span></span>&#123;</span><br><span class=\"line\">  <span class=\"type\">long</span> <span class=\"type\">long</span> ans=<span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(b)&#123;<span class=\"keyword\">if</span>(b&amp;<span class=\"number\">1</span>)ans=ans*a%mod;a=a*a%mod;b&gt;&gt;=<span class=\"number\">1</span>;&#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"title\">Sumfg</span><span class=\"params\">(<span class=\"type\">long</span> <span class=\"type\">long</span> x)</span></span>&#123;x%=mod;<span class=\"keyword\">return</span> x*(x+<span class=\"number\">1</span>)%mod*x%mod*(x+<span class=\"number\">1</span>)%mod*inv4%mod;&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"title\">Sumg</span><span class=\"params\">(<span class=\"type\">long</span> <span class=\"type\">long</span> x)</span></span>&#123;x%=mod;<span class=\"keyword\">return</span> x*(x+<span class=\"number\">1</span>)%mod*(x+x+<span class=\"number\">1</span>)%mod*inv6%mod;&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"title\">Sumf</span><span class=\"params\">(<span class=\"type\">long</span> <span class=\"type\">long</span> x)</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(x&lt;=<span class=\"built_in\">min</span>(N<span class=\"number\">-10</span>,(<span class=\"type\">int</span>)n))<span class=\"keyword\">return</span> f[x];</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(mp[x])<span class=\"keyword\">return</span> mp[x];</span><br><span class=\"line\">  <span class=\"type\">long</span> <span class=\"type\">long</span> ret=<span class=\"built_in\">Sumfg</span>(x);</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">long</span> <span class=\"type\">long</span> i=<span class=\"number\">2</span>,j;i&lt;=x;i=j+<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">  \tj=x/(x/i);</span><br><span class=\"line\">  \tret=(ret-(<span class=\"built_in\">Sumg</span>(j)-<span class=\"built_in\">Sumg</span>(i<span class=\"number\">-1</span>)+mod)%mod*<span class=\"built_in\">Sumf</span>(x/i)%mod+mod)%mod;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> mp[x]=(ret+mod)%mod;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  mod=<span class=\"built_in\">read</span>();n=<span class=\"built_in\">read</span>();</span><br><span class=\"line\">  inv4=<span class=\"built_in\">power</span>(<span class=\"number\">4</span>,mod<span class=\"number\">-2</span>);</span><br><span class=\"line\">  inv6=<span class=\"built_in\">power</span>(<span class=\"number\">6</span>,mod<span class=\"number\">-2</span>);</span><br><span class=\"line\">  <span class=\"built_in\">get_f</span>(<span class=\"built_in\">min</span>(N<span class=\"number\">-10</span>,(<span class=\"type\">int</span>)n));</span><br><span class=\"line\">  <span class=\"type\">long</span> <span class=\"type\">long</span> ans=<span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">long</span> <span class=\"type\">long</span> i=<span class=\"number\">1</span>,j;i&lt;=n;i=j+<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">    j=n/(n/i);</span><br><span class=\"line\">    ans=(ans+(<span class=\"built_in\">Sumf</span>(j)-<span class=\"built_in\">Sumf</span>(i<span class=\"number\">-1</span>))%mod*<span class=\"built_in\">Sumfg</span>(n/i)%mod)%mod;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%lld\\n&quot;</span>,(ans+mod)%mod);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"P4240-毒瘤之神的考验\"><a href=\"#P4240-毒瘤之神的考验\" class=\"headerlink\" title=\"P4240 毒瘤之神的考验\"></a><a href=\"https://www.luogu.org/problemnew/show/P4240\">P4240 毒瘤之神的考验</a></h2><p>$\\sum_{i=1}^n\\sum_{j=1}^m\\varphi(ij)$</p>\n<h3 id=\"反演过程：-8\"><a href=\"#反演过程：-8\" class=\"headerlink\" title=\"反演过程：\"></a>反演过程：</h3><p>$\\sum_{i=1}^n\\sum_{j=1}^m\\frac{\\varphi(i)\\varphi(j)gcd(i,j)}{\\varphi(gcd(i,j))}$</p>\n<p>$\\sum_{d=1}^{min(n,m)}\\sum_{i=1}^n\\sum_{j=1}^m\\frac{\\varphi(i)\\varphi(j)d}{\\varphi(d)}[gcd(i,j)=d]$</p>\n<p>$\\sum_{d=1}^{min(n,m)}\\frac{d}{\\varphi(d)}\\sum_{i=1}^n\\sum_{j=1}^m\\varphi(i)\\varphi(j)[gcd(i,j)=d]$</p>\n<p>$\\sum_{d=1}^{min(n,m)}\\frac{d}{\\varphi(d)}\\sum_{i=1}^{\\left\\lfloor\\frac{n}{d}\\right\\rfloor}\\sum_{j=1}^{\\left\\lfloor\\frac{m}{d}\\right\\rfloor}\\varphi(di)\\varphi(dj)[gcd(i,j)=1]$</p>\n<p>$\\sum_{d=1}^{min(n,m)}\\frac{d}{\\varphi(d)}\\sum_{i=1}^{\\left\\lfloor\\frac{n}{d}\\right\\rfloor}\\sum_{j=1}^{\\left\\lfloor\\frac{m}{d}\\right\\rfloor}\\varphi(di)\\varphi(dj)ϵ(gcd(i,j))$</p>\n<p>$\\sum_{d=1}^{min(n,m)}\\frac{d}{\\varphi(d)}\\sum_{i=1}^{\\left\\lfloor\\frac{n}{d}\\right\\rfloor}\\sum_{j=1}^{\\left\\lfloor\\frac{m}{d}\\right\\rfloor}\\varphi(di)\\varphi(dj)\\sum_{k|gcd(i,j)}\\mu(k)$</p>\n<p>$\\sum_{d=1}^{min(n,m)}\\frac{d}{\\varphi(d)}\\sum_{k=1}^{\\left\\lfloor\\frac{min(n,m)}{dk}\\right\\rfloor}\\mu(k)\\sum_{i=1}^{\\left\\lfloor\\frac{n}{d}\\right\\rfloor}\\sum_{j=1}^{\\left\\lfloor\\frac{m}{d}\\right\\rfloor}\\varphi(di)\\varphi(dj)[k|gcd(i,j)]$</p>\n<p>$\\sum_{d=1}^{min(n,m)}\\frac{d}{\\varphi(d)}\\sum_{k=1}^{\\left\\lfloor\\frac{min(n,m)}{dk}\\right\\rfloor}\\mu(k)\\sum_{i=1}^{\\left\\lfloor\\frac{n}{dk}\\right\\rfloor}\\sum_{j=1}^{\\left\\lfloor\\frac{m}{dk}\\right\\rfloor}\\varphi(dik)\\varphi(djk)$</p>\n<p>$\\sum_{T=1}^{min(n,m)}\\sum_{i=1}^{\\left\\lfloor\\frac{n}{T}\\right\\rfloor}\\sum_{j=1}^{\\left\\lfloor\\frac{m}{T}\\right\\rfloor}\\varphi(iT)\\varphi(jT)\\sum_{d|T}\\frac{d}{\\varphi(d)}\\mu(\\frac{T}{d})$</p>\n<ul>\n<li>$\\ \\ \\ \\ \\ \\,$ $O(n)$预处理出$\\mu$,$\\varphi$，$O(n\\log n)$预处理出后面的$\\sum_{d|T}\\frac{d}{\\varphi(d)}\\mu(\\frac{T}{d})$，然后对前面的进行分块操作，会发现要存很多东西，于是我们一边分块，一边操作，总复杂度很玄学，大约是$O(n\\log n+nT^{\\frac{2}{3}}+T(\\sqrt n+\\left\\lfloor\\frac{n}{T^{\\frac{1}{3}}}\\right\\rfloor))$,能过就行了XD,<del>(代码加了信仰fread)</del></li>\n</ul>\n<h3 id=\"代码-9\"><a href=\"#代码-9\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdlib&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;map&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;set&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;stack&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cctype&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> inf=<span class=\"number\">0x7fffffff</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">double</span> eps=<span class=\"number\">1e-10</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">double</span> pi=<span class=\"built_in\">acos</span>(<span class=\"number\">-1.0</span>);</span><br><span class=\"line\"><span class=\"type\">char</span> buf[<span class=\"number\">1</span>&lt;&lt;<span class=\"number\">15</span>],*S=buf,*TT=buf;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">char</span> <span class=\"title\">getch</span><span class=\"params\">()</span></span>&#123;<span class=\"keyword\">return</span> S==TT&amp;&amp;(TT=(S=buf)+<span class=\"built_in\">fread</span>(buf,<span class=\"number\">1</span>,<span class=\"number\">1</span>&lt;&lt;<span class=\"number\">15</span>,stdin),S==TT)?<span class=\"number\">0</span>:*S++;&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">int</span> <span class=\"title\">read</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">  <span class=\"type\">int</span> x=<span class=\"number\">0</span>,f=<span class=\"number\">1</span>;<span class=\"type\">char</span> ch;ch=<span class=\"built_in\">getch</span>();</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(ch&lt;<span class=\"string\">&#x27;0&#x27;</span>||ch&gt;<span class=\"string\">&#x27;9&#x27;</span>)&#123;<span class=\"keyword\">if</span>(ch==<span class=\"string\">&#x27;-&#x27;</span>) f=<span class=\"number\">0</span>;ch=<span class=\"built_in\">getch</span>();&#125;</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(ch&gt;=<span class=\"string\">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class=\"string\">&#x27;9&#x27;</span>)&#123;x=(x&lt;&lt;<span class=\"number\">1</span>)+(x&lt;&lt;<span class=\"number\">3</span>)+(ch&amp;<span class=\"number\">15</span>);ch=<span class=\"built_in\">getch</span>();&#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(f)<span class=\"keyword\">return</span> x;<span class=\"keyword\">else</span> <span class=\"keyword\">return</span> -x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">100010</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> mod=<span class=\"number\">998244353</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> B=<span class=\"number\">35</span>;</span><br><span class=\"line\"><span class=\"type\">bool</span> vis[N];</span><br><span class=\"line\"><span class=\"type\">int</span> prim[N],phi[N],mu[N],inv[N];</span><br><span class=\"line\"><span class=\"type\">int</span> F[N];</span><br><span class=\"line\">vector&lt;<span class=\"type\">int</span>&gt; G[N],T[B+<span class=\"number\">1</span>][B+<span class=\"number\">1</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">get_phi_mu_inv</span><span class=\"params\">(<span class=\"type\">int</span> n)</span></span>&#123;</span><br><span class=\"line\">  phi[<span class=\"number\">1</span>]=mu[<span class=\"number\">1</span>]=inv[<span class=\"number\">1</span>]=<span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">2</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!vis[i])phi[i]=i<span class=\"number\">-1</span>,mu[i]=<span class=\"number\">-1</span>,prim[++prim[<span class=\"number\">0</span>]]=i;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;=prim[<span class=\"number\">0</span>]&amp;&amp;i*prim[j]&lt;=n;j++)&#123;</span><br><span class=\"line\">      vis[i*prim[j]]=<span class=\"number\">1</span>;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(i%prim[j]==<span class=\"number\">0</span>)&#123;phi[i*prim[j]]=phi[i]*prim[j];<span class=\"keyword\">break</span>;&#125;</span><br><span class=\"line\">      <span class=\"keyword\">else</span> phi[i*prim[j]]=phi[i]*(prim[j]<span class=\"number\">-1</span>),mu[i*prim[j]]=-mu[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    inv[i]=<span class=\"number\">1ll</span>*(mod-mod/i)*inv[mod%i]%mod;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">init</span><span class=\"params\">(<span class=\"type\">int</span> n)</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=i;j&lt;=n;j+=i)</span><br><span class=\"line\">  F[j]=(F[j]+(<span class=\"number\">1ll</span>*mu[j/i]*i*inv[phi[i]]%mod+mod)%mod)%mod;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">    G[i].<span class=\"built_in\">push_back</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;=n/i;j++)</span><br><span class=\"line\">    G[i].<span class=\"built_in\">push_back</span>((G[i][j<span class=\"number\">-1</span>]+phi[i*j])%mod);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;=B;j++)</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> k=j;k&lt;=B;k++)&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> len=n/<span class=\"built_in\">max</span>(j,k);</span><br><span class=\"line\">    T[j][k].<span class=\"built_in\">push_back</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=len;i++)</span><br><span class=\"line\">    T[j][k].<span class=\"built_in\">push_back</span>((T[j][k][i<span class=\"number\">-1</span>]+<span class=\"number\">1ll</span>*F[i]*G[i][j]%mod*G[i][k]%mod)%mod);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"title\">Solve</span><span class=\"params\">(<span class=\"type\">int</span> n,<span class=\"type\">int</span> m)</span></span>&#123;</span><br><span class=\"line\">  <span class=\"type\">long</span> <span class=\"type\">long</span> res=<span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"type\">int</span> ed=m/B;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=ed;i++)</span><br><span class=\"line\">  res=(res+<span class=\"number\">1ll</span>*F[i]*G[i][n/i]%mod*G[i][m/i]%mod)%mod;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> l=m/B+<span class=\"number\">1</span>,r,ln,lm;l&lt;=n;l=r+<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">  \tln=n/l,lm=m/l;</span><br><span class=\"line\">    r=<span class=\"built_in\">min</span>(n/ln,m/lm);</span><br><span class=\"line\">    res=(res+(T[ln][lm][r]-T[ln][lm][l<span class=\"number\">-1</span>]+mod)%mod)%mod;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">get_phi_mu_inv</span>(<span class=\"number\">100000</span>);<span class=\"built_in\">init</span>(<span class=\"number\">100000</span>);</span><br><span class=\"line\">  <span class=\"type\">int</span> t=<span class=\"built_in\">read</span>();</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(t--)&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n=<span class=\"built_in\">read</span>(),m=<span class=\"built_in\">read</span>();<span class=\"keyword\">if</span>(n&gt;m)<span class=\"built_in\">swap</span>(n,m);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%lld\\n&quot;</span>,<span class=\"built_in\">Solve</span>(n,m));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"P1587-NOI2016-循环之美\"><a href=\"#P1587-NOI2016-循环之美\" class=\"headerlink\" title=\"P1587 [NOI2016]循环之美\"></a><a href=\"https://www.luogu.org/problemnew/show/P1587\">P1587 [NOI2016]循环之美</a></h2><p>$\\ \\ \\ \\ \\ \\,$对于一个$K$进制下的无限循环小数，在最简形态下，分母一定和$K$互质，所以这道题，就是求:<br>$\\sum_{i=1}^n\\sum_{j=1}^m[gcd(i,j)=1][gcd(j,K)=1]$</p>\n<h3 id=\"反演过程：-9\"><a href=\"#反演过程：-9\" class=\"headerlink\" title=\"反演过程：\"></a>反演过程：</h3><p>$\\sum_{j=1}^m[gcd(j,K)=1]\\sum_{i=1}^n[gcd(i,j)=1]$</p>\n<p>$\\sum_{j=1}^m[gcd(j,K)=1]\\sum_{i=1}^nϵ(gcd(i,j))$</p>\n<p>$\\sum_{j=1}^m[gcd(j,K)=1]\\sum_{i=1}^n\\sum_{k|gcd(i,j)}\\mu(k)$</p>\n<p>$\\sum_{k=1}^{min(n,m)}\\mu(k)\\sum_{i=1}^{\\left\\lfloor\\frac{n}{k}\\right\\rfloor}\\sum_{j=1}^{\\left\\lfloor\\frac{m}{k}\\right\\rfloor}[gcd(jk,K)=1]$</p>\n<p>$\\sum_{k=1}^{min(n,m)}\\mu(k)[gcd(k,K)=1]\\sum_{i=1}^{\\left\\lfloor\\frac{n}{k}\\right\\rfloor}\\sum_{j=1}^{\\left\\lfloor\\frac{m}{k}\\right\\rfloor}[gcd(j,K)=1]$</p>\n<p>$\\sum_{k=1}^{min(n,m)}\\mu(k)[gcd(k,K)=1]\\sum_{j=1}^{\\left\\lfloor\\frac{m}{k}\\right\\rfloor}[gcd(j,K)=1]\\sum_{i=1}^{\\left\\lfloor\\frac{n}{k}\\right\\rfloor}$</p>\n<p>$\\sum_{k=1}^{min(n,m)}\\mu(k)[gcd(k,K)=1]\\sum_{j=1}^{\\left\\lfloor\\frac{m}{k}\\right\\rfloor}[gcd(j,K)=1]{\\left\\lfloor\\frac{n}{k}\\right\\rfloor}$</p>\n<p>$f(x,K)=\\sum_{i=1}^{x}\\mu(i)[gcd(i,K)=1]$</p>\n<p>$s(x)=\\sum_{i=1}^{x}[gcd(i,K)=1]$</p>\n<p>$\\sum_{k=1}^{min(n,m)}\\mu(k)[gcd(k,K)=1]{\\left\\lfloor\\frac{n}{k}\\right\\rfloor}s\\left(\\left\\lfloor\\frac{m}{k}\\right\\rfloor\\right)$</p>\n<p>$\\ \\ \\ \\ \\ \\,$然而还没有完，我们求出$f$和$s$，也就是方便分块操作，现在我们得化简它们:</p>\n<ul>\n<li><p>$s(x)$<br>$s(x)=\\sum_{i=1}^{x}[gcd(i,K)=1]$<br>因为若是 $gcd(a,K)=1$，那么就有 $gcd(a+bk,K)=1$。<br>所以有：<br>$s(x)=\\left\\lfloor\\frac{x}{k}\\right\\rfloor s(k)+s(x\\%k)$<br>所以只需要暴力求出$k$以内的$s$就可以了。</p>\n</li>\n<li><p>$f(x,K)$</p>\n<p>$\\sum_{i=1}^{x}\\mu(i)[gcd(i,K)=1]$</p>\n<p>$\\sum_{i=1}^{x}\\mu(i)ϵ(gcd(i,K))$</p>\n<p>$\\sum_{i=1}^{x}\\mu(i)\\sum_{d|gcd(i,K)}\\mu(d)$</p>\n<p>$\\sum_{d=1}^{min(x,K)}\\mu(d)\\sum_{i=1}^x\\mu(i)[d|gcd(i,K)]$</p>\n<p>$\\sum_{d=1}^{min(x,K)}\\mu(d)\\sum_{i=1}^{\\left\\lfloor\\frac{x}{d}\\right\\rfloor}\\mu(id)[d|gcd(id,K)]$</p>\n<p>$\\sum_{d=1}^{min(x,K)}\\mu(d)\\sum_{i=1}^{\\left\\lfloor\\frac{x}{d}\\right\\rfloor}\\mu(id)[d|K]$</p>\n<p>$\\sum_{d|K}\\mu(d)\\sum_{i=1}^{\\left\\lfloor\\frac{x}{d}\\right\\rfloor}\\mu(id)$</p>\n<p>$\\sum_{d|K}\\mu(d)\\sum_{i=1,gcd(i,d)=1}^{\\left\\lfloor\\frac{x}{d}\\right\\rfloor}\\mu(d)\\mu(i)$</p>\n<p>$\\sum_{d|K}\\mu(d)^2\\sum_{i=1,gcd(i,d)=1}^{\\left\\lfloor\\frac{x}{d}\\right\\rfloor}\\mu(i)$</p>\n<p>$\\sum_{d|K}\\mu(d)^2\\sum_{i=1}^{\\left\\lfloor\\frac{x}{d}\\right\\rfloor}\\mu(i)[gcd(i,d)=1]$</p>\n<p>$\\sum_{d|K}\\mu(d)^2f\\left({\\left\\lfloor\\frac{x}{d}\\right\\rfloor},d\\right)$</p>\n<p>这个怎么办啊？每次递归求解，但是当$K=1$的时候，就没有办法了，我们试一试化一下$K=1$的情况:</p>\n<p>$\\sum_{i=1}^{x}\\mu(i)[gcd(i,1)=1]$</p>\n<p>$\\sum_{i=1}^{x}\\mu(i)$</p>\n<p>一个杜教筛就完了。</p>\n<p>复杂度大概是$O(n^{\\frac{2}{3}})$</p>\n</li>\n<li><p>感觉题目还是比较难的，反正我一开始是没有想出来，翻了题解，主要是对于$s$的处理，有多加一维描述，还有递归处理，程序的最终复杂度呢，大概就在$O(n^{\\frac{2}{3}})$的样子</p>\n</li>\n</ul>\n<h3 id=\"代码-10\"><a href=\"#代码-10\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdlib&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;map&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;set&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;stack&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cctype&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> inf=<span class=\"number\">0x7fffffff</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">double</span> eps=<span class=\"number\">1e-10</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">double</span> pi=<span class=\"built_in\">acos</span>(<span class=\"number\">-1.0</span>);</span><br><span class=\"line\"><span class=\"comment\">//char buf[1&lt;&lt;15],*S=buf,*T=buf;</span></span><br><span class=\"line\"><span class=\"comment\">//char getch()&#123;return S==T&amp;&amp;(T=(S=buf)+fread(buf,1,1&lt;&lt;15,stdin),S==T)?0:*S++;&#125;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">int</span> <span class=\"title\">read</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">  <span class=\"type\">int</span> x=<span class=\"number\">0</span>,f=<span class=\"number\">1</span>;<span class=\"type\">char</span> ch;ch=<span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(ch&lt;<span class=\"string\">&#x27;0&#x27;</span>||ch&gt;<span class=\"string\">&#x27;9&#x27;</span>)&#123;<span class=\"keyword\">if</span>(ch==<span class=\"string\">&#x27;-&#x27;</span>) f=<span class=\"number\">0</span>;ch=<span class=\"built_in\">getchar</span>();&#125;</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(ch&gt;=<span class=\"string\">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class=\"string\">&#x27;9&#x27;</span>)&#123;x=(x&lt;&lt;<span class=\"number\">1</span>)+(x&lt;&lt;<span class=\"number\">3</span>)+(ch&amp;<span class=\"number\">15</span>);ch=<span class=\"built_in\">getchar</span>();&#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(f)<span class=\"keyword\">return</span> x;<span class=\"keyword\">else</span> <span class=\"keyword\">return</span> -x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">10000010</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> n,K,m;</span><br><span class=\"line\"><span class=\"type\">int</span> pr[<span class=\"number\">2010</span>];</span><br><span class=\"line\"><span class=\"type\">bool</span> vis[N];</span><br><span class=\"line\"><span class=\"type\">int</span> prim[N],mu[N],Sum_mu[N];</span><br><span class=\"line\">map&lt;pair&lt;<span class=\"type\">int</span>,<span class=\"type\">int</span>&gt;,<span class=\"type\">int</span>&gt; used;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">gcd</span><span class=\"params\">(<span class=\"type\">int</span> a,<span class=\"type\">int</span> b)</span></span>&#123;<span class=\"keyword\">return</span> b?<span class=\"built_in\">gcd</span>(b,a%b):a;&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=K;i++)pr[i]=pr[i<span class=\"number\">-1</span>]+(<span class=\"built_in\">gcd</span>(i,K)==<span class=\"number\">1</span>);</span><br><span class=\"line\">  mu[<span class=\"number\">1</span>]=<span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">2</span>;i&lt;N;i++)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!vis[i])&#123;mu[i]=<span class=\"number\">-1</span>;prim[++prim[<span class=\"number\">0</span>]]=i;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;=prim[<span class=\"number\">0</span>];j++)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(i*prim[j]&gt;=N) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      vis[i*prim[j]]=<span class=\"number\">1</span>;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(i%prim[j]==<span class=\"number\">0</span>)&#123;mu[i*prim[j]]=<span class=\"number\">0</span>;<span class=\"keyword\">break</span>;&#125;</span><br><span class=\"line\">      mu[i*prim[j]]=-mu[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;N;i++)Sum_mu[i]=Sum_mu[i<span class=\"number\">-1</span>]+mu[i];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">s</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span>&#123;<span class=\"keyword\">return</span> pr[x%K]+<span class=\"number\">1ll</span>*(x/K)*pr[K];&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">f</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> k)</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(!k||!x)<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(k==<span class=\"number\">1</span>&amp;&amp;x&lt;N)<span class=\"keyword\">return</span> Sum_mu[x];</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(used[<span class=\"built_in\">make_pair</span>(x,k)])<span class=\"keyword\">return</span> used[<span class=\"built_in\">make_pair</span>(x,k)];</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(k==<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">  \t<span class=\"type\">int</span> ret=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> l=<span class=\"number\">2</span>,r;l&lt;=x;l=r+<span class=\"number\">1</span>)</span><br><span class=\"line\">    r=x/(x/l),ret-=(r-l+<span class=\"number\">1</span>)*<span class=\"built_in\">f</span>(x/l,<span class=\"number\">1</span>);</span><br><span class=\"line\">  \t<span class=\"keyword\">return</span> used[<span class=\"built_in\">make_pair</span>(x,k)]=ret;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"type\">int</span> ret=<span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i*i&lt;=k;i++)<span class=\"keyword\">if</span>(k%i==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(mu[i])ret+=<span class=\"built_in\">f</span>(x/i,i);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(i*i!=k&amp;&amp;mu[k/i])</span><br><span class=\"line\">    ret+=<span class=\"built_in\">f</span>(x/(k/i),k/i);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> used[<span class=\"built_in\">make_pair</span>(x,k)]=ret;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  n=<span class=\"built_in\">read</span>();m=<span class=\"built_in\">read</span>();K=<span class=\"built_in\">read</span>();</span><br><span class=\"line\">  <span class=\"built_in\">init</span>();</span><br><span class=\"line\">  <span class=\"type\">long</span> <span class=\"type\">long</span> ans=<span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> l=<span class=\"number\">1</span>,r;l&lt;=<span class=\"built_in\">min</span>(n,m);l=r+<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">    r=<span class=\"built_in\">min</span>(n/(n/l),m/(m/l));</span><br><span class=\"line\">    ans+=<span class=\"number\">1ll</span>*(<span class=\"built_in\">f</span>(r,K)-<span class=\"built_in\">f</span>(l<span class=\"number\">-1</span>,K))*(n/l)*<span class=\"built_in\">s</span>(m/l);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%lld\\n&quot;</span>,ans);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"}],"PostAsset":[],"PostCategory":[{"post_id":"cl0i63w5t0009u4gbengk3txm","category_id":"cl0i63w5q0004u4gbfriyccn7","_id":"cl0i63w5w000gu4gb2r8m3hvk"},{"post_id":"cl0i63w5m0001u4gbep7qhe4g","category_id":"cl0i63w5q0004u4gbfriyccn7","_id":"cl0i63w5z000ku4gb0qilhd1s"},{"post_id":"cl0i63w5v000eu4gbcg0x86ki","category_id":"cl0i63w5u000cu4gbffio3e3d","_id":"cl0i63w60000mu4gbejkl6ntu"},{"post_id":"cl0i63w5o0003u4gbf301bb0n","category_id":"cl0i63w5u000cu4gbffio3e3d","_id":"cl0i63w61000qu4gb05ph9szu"},{"post_id":"cl0i63w5w000fu4gb8fgpf5q2","category_id":"cl0i63w5u000cu4gbffio3e3d","_id":"cl0i63w62000su4gb5j4v46th"},{"post_id":"cl0i63w5x000ju4gbeuwk8avs","category_id":"cl0i63w5u000cu4gbffio3e3d","_id":"cl0i63w63000wu4gb11y00x8k"},{"post_id":"cl0i63w5s0007u4gb6k37bxlk","category_id":"cl0i63w5u000cu4gbffio3e3d","_id":"cl0i63w64000yu4gbayvf22xw"},{"post_id":"cl0i63w5z000lu4gb3fhna7u8","category_id":"cl0i63w5u000cu4gbffio3e3d","_id":"cl0i63w660010u4gbhxr0ccom"},{"post_id":"cl0i63w5u000bu4gbf8bc2vo6","category_id":"cl0i63w5u000cu4gbffio3e3d","_id":"cl0i63w670014u4gbcp33a250"},{"post_id":"cl0i63w62000ru4gb1njta2hk","category_id":"cl0i63w5q0004u4gbfriyccn7","_id":"cl0i63w680017u4gbh265bj2r"},{"post_id":"cl0i63w63000vu4gb0y3e1e51","category_id":"cl0i63w5q0004u4gbfriyccn7","_id":"cl0i63w68001bu4gb3ewa0maj"},{"post_id":"cl0i63w63000xu4gba4xj6gft","category_id":"cl0i63w5q0004u4gbfriyccn7","_id":"cl0i63w69001eu4gb8q3hcp68"},{"post_id":"cl0i63w61000pu4gb0t4oa7rq","category_id":"cl0i63w62000tu4gb1u1q532d","_id":"cl0i63w6a001iu4gbhn0x87a6"},{"post_id":"cl0i63w64000zu4gb6qwcgy7z","category_id":"cl0i63w5q0004u4gbfriyccn7","_id":"cl0i63w6a001ku4gbc21f67fk"},{"post_id":"cl0i63w670013u4gbaloahzxl","category_id":"cl0i63w5q0004u4gbfriyccn7","_id":"cl0i63w6b001nu4gb5nyld2l1"},{"post_id":"cl0i63w670016u4gb8blqgfri","category_id":"cl0i63w5q0004u4gbfriyccn7","_id":"cl0i63w6d001pu4gbd73i4sab"},{"post_id":"cl0i63w68001au4gb3z6jghi8","category_id":"cl0i63w5q0004u4gbfriyccn7","_id":"cl0i63w6e001tu4gb48pygvch"},{"post_id":"cl0i63w69001du4gb4c1vfjbm","category_id":"cl0i63w5q0004u4gbfriyccn7","_id":"cl0i63w6g001wu4gb01503dwc"},{"post_id":"cl0i63w6a001hu4gb6plh4def","category_id":"cl0i63w5q0004u4gbfriyccn7","_id":"cl0i63w6h0020u4gb07wt0dcn"},{"post_id":"cl0i63w6a001ju4gbd23ify0t","category_id":"cl0i63w5q0004u4gbfriyccn7","_id":"cl0i63w6j0023u4gbgvq8bm6y"},{"post_id":"cl0i63w6b001mu4gbeovgbaft","category_id":"cl0i63w5u000cu4gbffio3e3d","_id":"cl0i63w6k0026u4gb26u7dnf3"},{"post_id":"cl0i63w6b001ou4gbdkri705w","category_id":"cl0i63w5q0004u4gbfriyccn7","_id":"cl0i63w6k002au4gb9vkl5imu"},{"post_id":"cl0i63w6d001su4gb2ws35vnt","category_id":"cl0i63w5q0004u4gbfriyccn7","_id":"cl0i63w6l002du4gbca2ldegv"},{"post_id":"cl0i63w6e001vu4gbasmc8dx4","category_id":"cl0i63w5u000cu4gbffio3e3d","_id":"cl0i63w6m002hu4gb7lp32pmw"},{"post_id":"cl0i63w6h001zu4gb2u084osn","category_id":"cl0i63w5q0004u4gbfriyccn7","_id":"cl0i63w6n002ku4gbfk7p3opq"},{"post_id":"cl0i63w6i0022u4gbhs8bd9s6","category_id":"cl0i63w5q0004u4gbfriyccn7","_id":"cl0i63w6n002nu4gbd83081my"},{"post_id":"cl0i63w6j0025u4gb8s2k90aq","category_id":"cl0i63w5q0004u4gbfriyccn7","_id":"cl0i63w6n002pu4gb7urnei9r"},{"post_id":"cl0i63w6k0029u4gbbxyfbdhf","category_id":"cl0i63w5q0004u4gbfriyccn7","_id":"cl0i63w6o002su4gbbh1yc81u"},{"post_id":"cl0i63w6l002cu4gbd8vc4l6m","category_id":"cl0i63w5q0004u4gbfriyccn7","_id":"cl0i63w6o002uu4gb5brwhc9h"},{"post_id":"cl0i63w6m002gu4gb3p2mhk5u","category_id":"cl0i63w5q0004u4gbfriyccn7","_id":"cl0i63w6o002wu4gb1zj32zga"},{"post_id":"cl0i63w6m002ju4gb01pmbubq","category_id":"cl0i63w5u000cu4gbffio3e3d","_id":"cl0i63w6o002zu4gbfh5m4649"}],"PostTag":[{"post_id":"cl0i63w5m0001u4gbep7qhe4g","tag_id":"cl0i63w5r0005u4gb0phl0cqx","_id":"cl0i63w670012u4gb7pqkc5gc"},{"post_id":"cl0i63w5m0001u4gbep7qhe4g","tag_id":"cl0i63w5u000du4gb0rp2fncv","_id":"cl0i63w670015u4gb4neqamtz"},{"post_id":"cl0i63w5m0001u4gbep7qhe4g","tag_id":"cl0i63w5w000iu4gbdybo3n0h","_id":"cl0i63w680019u4gbgni54lua"},{"post_id":"cl0i63w5m0001u4gbep7qhe4g","tag_id":"cl0i63w60000ou4gb343r3srx","_id":"cl0i63w69001cu4gb99psc6a3"},{"post_id":"cl0i63w5m0001u4gbep7qhe4g","tag_id":"cl0i63w62000uu4gbce5vhsxw","_id":"cl0i63w69001gu4gb6cmncj93"},{"post_id":"cl0i63w6b001mu4gbeovgbaft","tag_id":"cl0i63w5r0005u4gb0phl0cqx","_id":"cl0i63w6d001qu4gbfmwugo0i"},{"post_id":"cl0i63w6b001mu4gbeovgbaft","tag_id":"cl0i63w5w000iu4gbdybo3n0h","_id":"cl0i63w6e001uu4gb5pl08bm2"},{"post_id":"cl0i63w6b001mu4gbeovgbaft","tag_id":"cl0i63w60000ou4gb343r3srx","_id":"cl0i63w6h001xu4gb6nri3ir6"},{"post_id":"cl0i63w6b001mu4gbeovgbaft","tag_id":"cl0i63w62000uu4gbce5vhsxw","_id":"cl0i63w6i0021u4gbdfm4czeg"},{"post_id":"cl0i63w5o0003u4gbf301bb0n","tag_id":"cl0i63w5r0005u4gb0phl0cqx","_id":"cl0i63w6j0024u4gbfycu1b3j"},{"post_id":"cl0i63w5o0003u4gbf301bb0n","tag_id":"cl0i63w680018u4gb5eww1mq5","_id":"cl0i63w6k0028u4gb75fef43i"},{"post_id":"cl0i63w5o0003u4gbf301bb0n","tag_id":"cl0i63w69001fu4gbhdqbc8br","_id":"cl0i63w6k002bu4gb5c5r35sg"},{"post_id":"cl0i63w5o0003u4gbf301bb0n","tag_id":"cl0i63w6b001lu4gbbp4u75pk","_id":"cl0i63w6m002fu4gbglabfmtb"},{"post_id":"cl0i63w6e001vu4gbasmc8dx4","tag_id":"cl0i63w5r0005u4gb0phl0cqx","_id":"cl0i63w6m002iu4gb3g0j8dqs"},{"post_id":"cl0i63w6e001vu4gbasmc8dx4","tag_id":"cl0i63w5w000iu4gbdybo3n0h","_id":"cl0i63w6n002mu4gbdov12xrx"},{"post_id":"cl0i63w6e001vu4gbasmc8dx4","tag_id":"cl0i63w60000ou4gb343r3srx","_id":"cl0i63w6n002ou4gbah610jth"},{"post_id":"cl0i63w6e001vu4gbasmc8dx4","tag_id":"cl0i63w62000uu4gbce5vhsxw","_id":"cl0i63w6o002qu4gba5rhgoum"},{"post_id":"cl0i63w5s0007u4gb6k37bxlk","tag_id":"cl0i63w5r0005u4gb0phl0cqx","_id":"cl0i63w6o002tu4gbd6ocfxfa"},{"post_id":"cl0i63w5s0007u4gb6k37bxlk","tag_id":"cl0i63w6h001yu4gb3rwlgx6h","_id":"cl0i63w6o002vu4gbe2as9zgf"},{"post_id":"cl0i63w5s0007u4gb6k37bxlk","tag_id":"cl0i63w6k0027u4gb58ku9pf5","_id":"cl0i63w6o002yu4gb7u19d1a3"},{"post_id":"cl0i63w5t0009u4gbengk3txm","tag_id":"cl0i63w5r0005u4gb0phl0cqx","_id":"cl0i63w6o0031u4gbgxj20942"},{"post_id":"cl0i63w5t0009u4gbengk3txm","tag_id":"cl0i63w6l002eu4gb7xllgyhc","_id":"cl0i63w6p0032u4gb7fk98ale"},{"post_id":"cl0i63w5t0009u4gbengk3txm","tag_id":"cl0i63w6n002lu4gbgx32auyh","_id":"cl0i63w6p0034u4gbcp2f27wz"},{"post_id":"cl0i63w5t0009u4gbengk3txm","tag_id":"cl0i63w6o002ru4gbexv4b0t7","_id":"cl0i63w6p0035u4gba462fsje"},{"post_id":"cl0i63w5t0009u4gbengk3txm","tag_id":"cl0i63w6o002xu4gbh3yc6ku8","_id":"cl0i63w6p0037u4gb244wfzow"},{"post_id":"cl0i63w5u000bu4gbf8bc2vo6","tag_id":"cl0i63w5r0005u4gb0phl0cqx","_id":"cl0i63w6q003cu4gbechah1pc"},{"post_id":"cl0i63w5u000bu4gbf8bc2vo6","tag_id":"cl0i63w6o0030u4gb7w432ck2","_id":"cl0i63w6q003du4gb3cw52s7x"},{"post_id":"cl0i63w5u000bu4gbf8bc2vo6","tag_id":"cl0i63w6p0033u4gbeye1ayza","_id":"cl0i63w6q003fu4gbenc0f0cc"},{"post_id":"cl0i63w5u000bu4gbf8bc2vo6","tag_id":"cl0i63w6p0036u4gb4kglb98v","_id":"cl0i63w6q003gu4gb7v21g6jr"},{"post_id":"cl0i63w5u000bu4gbf8bc2vo6","tag_id":"cl0i63w6p0038u4gb3qg91863","_id":"cl0i63w6r003iu4gbdznyfswa"},{"post_id":"cl0i63w5u000bu4gbf8bc2vo6","tag_id":"cl0i63w6n002lu4gbgx32auyh","_id":"cl0i63w6r003ju4gbb84mdozo"},{"post_id":"cl0i63w5u000bu4gbf8bc2vo6","tag_id":"cl0i63w5w000iu4gbdybo3n0h","_id":"cl0i63w6r003lu4gb42k63uw6"},{"post_id":"cl0i63w5v000eu4gbcg0x86ki","tag_id":"cl0i63w5r0005u4gb0phl0cqx","_id":"cl0i63w6r003ou4gbaw9md2hg"},{"post_id":"cl0i63w5v000eu4gbcg0x86ki","tag_id":"cl0i63w6q003bu4gbfz158rv6","_id":"cl0i63w6r003pu4gbf8s7d5kf"},{"post_id":"cl0i63w5v000eu4gbcg0x86ki","tag_id":"cl0i63w6q003eu4gb1tdugtmo","_id":"cl0i63w6s003ru4gbcywt452o"},{"post_id":"cl0i63w5v000eu4gbcg0x86ki","tag_id":"cl0i63w5w000iu4gbdybo3n0h","_id":"cl0i63w6s003su4gbfal11yvl"},{"post_id":"cl0i63w5v000eu4gbcg0x86ki","tag_id":"cl0i63w6r003ku4gbgw6x2j6m","_id":"cl0i63w6s003uu4gb4rvn566i"},{"post_id":"cl0i63w5v000eu4gbcg0x86ki","tag_id":"cl0i63w6r003mu4gb2s252251","_id":"cl0i63w6s003vu4gb5s827l0b"},{"post_id":"cl0i63w5w000fu4gb8fgpf5q2","tag_id":"cl0i63w5r0005u4gb0phl0cqx","_id":"cl0i63w6t0040u4gb1o8sh832"},{"post_id":"cl0i63w5w000fu4gb8fgpf5q2","tag_id":"cl0i63w6r003nu4gb04xlaj98","_id":"cl0i63w6t0041u4gbfwf6edov"},{"post_id":"cl0i63w5w000fu4gb8fgpf5q2","tag_id":"cl0i63w6s003qu4gb7v465psh","_id":"cl0i63w6t0043u4gb915u0kwj"},{"post_id":"cl0i63w5w000fu4gb8fgpf5q2","tag_id":"cl0i63w6s003tu4gbfm4l73my","_id":"cl0i63w6u0044u4gb1s8yb9ya"},{"post_id":"cl0i63w5w000fu4gb8fgpf5q2","tag_id":"cl0i63w5w000iu4gbdybo3n0h","_id":"cl0i63w6u0046u4gb7uhq615j"},{"post_id":"cl0i63w5w000fu4gb8fgpf5q2","tag_id":"cl0i63w6s003xu4gb5l2eb0z6","_id":"cl0i63w6u0047u4gb76n0aaob"},{"post_id":"cl0i63w5w000fu4gb8fgpf5q2","tag_id":"cl0i63w6p0036u4gb4kglb98v","_id":"cl0i63w6v0049u4gb1pvh0wmg"},{"post_id":"cl0i63w5x000ju4gbeuwk8avs","tag_id":"cl0i63w5r0005u4gb0phl0cqx","_id":"cl0i63w6v004au4gb2lvgburs"},{"post_id":"cl0i63w5x000ju4gbeuwk8avs","tag_id":"cl0i63w6r003ku4gbgw6x2j6m","_id":"cl0i63w6y004cu4gb8kj1912c"},{"post_id":"cl0i63w5x000ju4gbeuwk8avs","tag_id":"cl0i63w6q003eu4gb1tdugtmo","_id":"cl0i63w6y004du4gb796ke02h"},{"post_id":"cl0i63w5x000ju4gbeuwk8avs","tag_id":"cl0i63w5w000iu4gbdybo3n0h","_id":"cl0i63w6z004fu4gbg1is0vis"},{"post_id":"cl0i63w5z000lu4gb3fhna7u8","tag_id":"cl0i63w5r0005u4gb0phl0cqx","_id":"cl0i63w6z004gu4gbhd2i9gyt"},{"post_id":"cl0i63w5z000lu4gb3fhna7u8","tag_id":"cl0i63w5w000iu4gbdybo3n0h","_id":"cl0i63w70004iu4gbetijb2rv"},{"post_id":"cl0i63w5z000lu4gb3fhna7u8","tag_id":"cl0i63w5u000du4gb0rp2fncv","_id":"cl0i63w70004ju4gbdtshapxt"},{"post_id":"cl0i63w5z000lu4gb3fhna7u8","tag_id":"cl0i63w6u0045u4gbh1147cmx","_id":"cl0i63w70004lu4gbh3wdaiw1"},{"post_id":"cl0i63w62000ru4gb1njta2hk","tag_id":"cl0i63w5r0005u4gb0phl0cqx","_id":"cl0i63w70004mu4gba8mpdkpc"},{"post_id":"cl0i63w62000ru4gb1njta2hk","tag_id":"cl0i63w5u000du4gb0rp2fncv","_id":"cl0i63w71004ou4gbam2ba59d"},{"post_id":"cl0i63w62000ru4gb1njta2hk","tag_id":"cl0i63w5w000iu4gbdybo3n0h","_id":"cl0i63w71004pu4gb9lk4ft2o"},{"post_id":"cl0i63w62000ru4gb1njta2hk","tag_id":"cl0i63w60000ou4gb343r3srx","_id":"cl0i63w71004ru4gb43ypacyf"},{"post_id":"cl0i63w62000ru4gb1njta2hk","tag_id":"cl0i63w6u0048u4gb1h0r6jiu","_id":"cl0i63w71004su4gb1ztx3gro"},{"post_id":"cl0i63w63000vu4gb0y3e1e51","tag_id":"cl0i63w5r0005u4gb0phl0cqx","_id":"cl0i63w71004uu4gb2t9n3mg1"},{"post_id":"cl0i63w63000vu4gb0y3e1e51","tag_id":"cl0i63w6r003ku4gbgw6x2j6m","_id":"cl0i63w71004vu4gb8fwu6c8i"},{"post_id":"cl0i63w63000vu4gb0y3e1e51","tag_id":"cl0i63w6l002eu4gb7xllgyhc","_id":"cl0i63w71004wu4gbhh7fa2sc"},{"post_id":"cl0i63w63000vu4gb0y3e1e51","tag_id":"cl0i63w6r003mu4gb2s252251","_id":"cl0i63w71004yu4gbb8auh70c"},{"post_id":"cl0i63w63000vu4gb0y3e1e51","tag_id":"cl0i63w6o0030u4gb7w432ck2","_id":"cl0i63w72004zu4gb47zn9el5"},{"post_id":"cl0i63w63000xu4gba4xj6gft","tag_id":"cl0i63w5r0005u4gb0phl0cqx","_id":"cl0i63w720052u4gbhhlgfr31"},{"post_id":"cl0i63w63000xu4gba4xj6gft","tag_id":"cl0i63w6h001yu4gb3rwlgx6h","_id":"cl0i63w720053u4gb1lcia9dl"},{"post_id":"cl0i63w63000xu4gba4xj6gft","tag_id":"cl0i63w71004qu4gb7ujqe19g","_id":"cl0i63w720055u4gbe47z7wh5"},{"post_id":"cl0i63w63000xu4gba4xj6gft","tag_id":"cl0i63w71004tu4gbc53r1m6f","_id":"cl0i63w730056u4gb38n0g4dz"},{"post_id":"cl0i63w63000xu4gba4xj6gft","tag_id":"cl0i63w6k0027u4gb58ku9pf5","_id":"cl0i63w740058u4gb287fgnhq"},{"post_id":"cl0i63w63000xu4gba4xj6gft","tag_id":"cl0i63w720050u4gb26nffamm","_id":"cl0i63w740059u4gbh2o23dsn"},{"post_id":"cl0i63w64000zu4gb6qwcgy7z","tag_id":"cl0i63w5r0005u4gb0phl0cqx","_id":"cl0i63w74005du4gbc0xsbwof"},{"post_id":"cl0i63w64000zu4gb6qwcgy7z","tag_id":"cl0i63w6p0038u4gb3qg91863","_id":"cl0i63w74005eu4gbgmblcjf0"},{"post_id":"cl0i63w64000zu4gb6qwcgy7z","tag_id":"cl0i63w6n002lu4gbgx32auyh","_id":"cl0i63w75005gu4gb0y7nar2h"},{"post_id":"cl0i63w64000zu4gb6qwcgy7z","tag_id":"cl0i63w730057u4gb0951115q","_id":"cl0i63w75005hu4gb33yl5tsc"},{"post_id":"cl0i63w64000zu4gb6qwcgy7z","tag_id":"cl0i63w74005au4gbeo5g04iy","_id":"cl0i63w75005ju4gb9hulhvzh"},{"post_id":"cl0i63w64000zu4gb6qwcgy7z","tag_id":"cl0i63w74005bu4gb7gde6d0x","_id":"cl0i63w75005ku4gb59ondcyy"},{"post_id":"cl0i63w670013u4gbaloahzxl","tag_id":"cl0i63w5r0005u4gb0phl0cqx","_id":"cl0i63w76005mu4gbcbjjbs4i"},{"post_id":"cl0i63w670013u4gbaloahzxl","tag_id":"cl0i63w5u000du4gb0rp2fncv","_id":"cl0i63w76005nu4gb4l5ja72z"},{"post_id":"cl0i63w670013u4gbaloahzxl","tag_id":"cl0i63w5w000iu4gbdybo3n0h","_id":"cl0i63w76005pu4gbhjzpdkd2"},{"post_id":"cl0i63w670013u4gbaloahzxl","tag_id":"cl0i63w6u0045u4gbh1147cmx","_id":"cl0i63w76005qu4gb87bw2kh7"},{"post_id":"cl0i63w670016u4gb8blqgfri","tag_id":"cl0i63w5r0005u4gb0phl0cqx","_id":"cl0i63w78005xu4gbg2as1o6y"},{"post_id":"cl0i63w670016u4gb8blqgfri","tag_id":"cl0i63w75005fu4gb1vuh0rvx","_id":"cl0i63w78005yu4gbg32l8tzm"},{"post_id":"cl0i63w670016u4gb8blqgfri","tag_id":"cl0i63w69001fu4gbhdqbc8br","_id":"cl0i63w790060u4gb4p9fdklg"},{"post_id":"cl0i63w670016u4gb8blqgfri","tag_id":"cl0i63w75005lu4gb1ue3bru9","_id":"cl0i63w790061u4gb7lel7oc3"},{"post_id":"cl0i63w670016u4gb8blqgfri","tag_id":"cl0i63w76005ou4gb5twbhb2p","_id":"cl0i63w790063u4gbal01edcp"},{"post_id":"cl0i63w670016u4gb8blqgfri","tag_id":"cl0i63w76005ru4gb9rfr6os5","_id":"cl0i63w790064u4gb2jzn8n45"},{"post_id":"cl0i63w670016u4gb8blqgfri","tag_id":"cl0i63w76005su4gbhovg25qr","_id":"cl0i63w790066u4gb5ijub07f"},{"post_id":"cl0i63w670016u4gb8blqgfri","tag_id":"cl0i63w76005tu4gb2vpgh1ml","_id":"cl0i63w7a0067u4gba0fu8b90"},{"post_id":"cl0i63w670016u4gb8blqgfri","tag_id":"cl0i63w76005uu4gbe9v24lfg","_id":"cl0i63w7a0069u4gb52cucjcp"},{"post_id":"cl0i63w670016u4gb8blqgfri","tag_id":"cl0i63w77005vu4gbgi1b8r3d","_id":"cl0i63w7a006au4gbef9ve7cq"},{"post_id":"cl0i63w68001au4gb3z6jghi8","tag_id":"cl0i63w5r0005u4gb0phl0cqx","_id":"cl0i63w7a006cu4gbc90e2t7r"},{"post_id":"cl0i63w68001au4gb3z6jghi8","tag_id":"cl0i63w6l002eu4gb7xllgyhc","_id":"cl0i63w7a006du4gb2p5s2gl9"},{"post_id":"cl0i63w68001au4gb3z6jghi8","tag_id":"cl0i63w78005zu4gbfkaj48n7","_id":"cl0i63w7a006fu4gb9gehgqka"},{"post_id":"cl0i63w68001au4gb3z6jghi8","tag_id":"cl0i63w790062u4gbc4e04yl0","_id":"cl0i63w7a006gu4gb02f101ry"},{"post_id":"cl0i63w69001du4gb4c1vfjbm","tag_id":"cl0i63w5r0005u4gb0phl0cqx","_id":"cl0i63w7a006hu4gbd26v1qck"},{"post_id":"cl0i63w69001du4gb4c1vfjbm","tag_id":"cl0i63w69001fu4gbhdqbc8br","_id":"cl0i63w7b006ju4gbh2hnae0h"},{"post_id":"cl0i63w69001du4gb4c1vfjbm","tag_id":"cl0i63w7a0068u4gbgd509sz3","_id":"cl0i63w7b006ku4gb1nthh8da"},{"post_id":"cl0i63w6a001hu4gb6plh4def","tag_id":"cl0i63w5r0005u4gb0phl0cqx","_id":"cl0i63w7b006mu4gb1lsr0175"},{"post_id":"cl0i63w6a001hu4gb6plh4def","tag_id":"cl0i63w6l002eu4gb7xllgyhc","_id":"cl0i63w7b006nu4gb6kj1bhem"},{"post_id":"cl0i63w6a001hu4gb6plh4def","tag_id":"cl0i63w7a006eu4gb5usr2yfn","_id":"cl0i63w7b006pu4gbhpnibxr8"},{"post_id":"cl0i63w6a001ju4gbd23ify0t","tag_id":"cl0i63w5r0005u4gb0phl0cqx","_id":"cl0i63w7b006ru4gb2jhgfiht"},{"post_id":"cl0i63w6a001ju4gbd23ify0t","tag_id":"cl0i63w6h001yu4gb3rwlgx6h","_id":"cl0i63w7c006su4gb2cuo2r9o"},{"post_id":"cl0i63w6a001ju4gbd23ify0t","tag_id":"cl0i63w7b006lu4gbcck5bv3k","_id":"cl0i63w7c006uu4gbe0mm27cm"},{"post_id":"cl0i63w6a001ju4gbd23ify0t","tag_id":"cl0i63w7b006ou4gb3yfndv1x","_id":"cl0i63w7c006vu4gb19vtdtws"},{"post_id":"cl0i63w6b001ou4gbdkri705w","tag_id":"cl0i63w5r0005u4gb0phl0cqx","_id":"cl0i63w7c006zu4gb37naf81d"},{"post_id":"cl0i63w6b001ou4gbdkri705w","tag_id":"cl0i63w69001fu4gbhdqbc8br","_id":"cl0i63w7d0070u4gbb7rido5t"},{"post_id":"cl0i63w6b001ou4gbdkri705w","tag_id":"cl0i63w7b006qu4gb6qmob3uy","_id":"cl0i63w7d0072u4gb7jxuc8g9"},{"post_id":"cl0i63w6b001ou4gbdkri705w","tag_id":"cl0i63w75005fu4gb1vuh0rvx","_id":"cl0i63w7d0073u4gb9f3m2b0d"},{"post_id":"cl0i63w6b001ou4gbdkri705w","tag_id":"cl0i63w7c006wu4gbgbesfv6h","_id":"cl0i63w7d0075u4gb4og5cvva"},{"post_id":"cl0i63w6b001ou4gbdkri705w","tag_id":"cl0i63w7c006xu4gbeve97yy4","_id":"cl0i63w7d0076u4gbh3f13qnq"},{"post_id":"cl0i63w6d001su4gb2ws35vnt","tag_id":"cl0i63w5r0005u4gb0phl0cqx","_id":"cl0i63w7e0079u4gb6ru3h1q3"},{"post_id":"cl0i63w6d001su4gb2ws35vnt","tag_id":"cl0i63w6h001yu4gb3rwlgx6h","_id":"cl0i63w7e007au4gbet27fqp6"},{"post_id":"cl0i63w6d001su4gb2ws35vnt","tag_id":"cl0i63w5w000iu4gbdybo3n0h","_id":"cl0i63w7e007cu4gb5li1f02n"},{"post_id":"cl0i63w6d001su4gb2ws35vnt","tag_id":"cl0i63w7d0071u4gb79nd2xpu","_id":"cl0i63w7e007du4gbdjd0db7k"},{"post_id":"cl0i63w6d001su4gb2ws35vnt","tag_id":"cl0i63w7d0074u4gbgbrs5pe5","_id":"cl0i63w7e007fu4gbgsv91s2n"},{"post_id":"cl0i63w6d001su4gb2ws35vnt","tag_id":"cl0i63w7d0077u4gb1yeya4pv","_id":"cl0i63w7e007gu4gbf54x77kv"},{"post_id":"cl0i63w6h001zu4gb2u084osn","tag_id":"cl0i63w5r0005u4gb0phl0cqx","_id":"cl0i63w7g007qu4gb1wwu8vqb"},{"post_id":"cl0i63w6h001zu4gb2u084osn","tag_id":"cl0i63w6l002eu4gb7xllgyhc","_id":"cl0i63w7g007ru4gbdivof6no"},{"post_id":"cl0i63w6h001zu4gb2u084osn","tag_id":"cl0i63w78005zu4gbfkaj48n7","_id":"cl0i63w7g007tu4gbg3243mep"},{"post_id":"cl0i63w6h001zu4gb2u084osn","tag_id":"cl0i63w790062u4gbc4e04yl0","_id":"cl0i63w7g007uu4gb286r4r5w"},{"post_id":"cl0i63w6h001zu4gb2u084osn","tag_id":"cl0i63w7e007hu4gb2zrt4n6a","_id":"cl0i63w7h007wu4gb64nnhx63"},{"post_id":"cl0i63w6h001zu4gb2u084osn","tag_id":"cl0i63w7e007iu4gb9erxcs0z","_id":"cl0i63w7h007xu4gb8uj5cgv6"},{"post_id":"cl0i63w6h001zu4gb2u084osn","tag_id":"cl0i63w7f007ju4gbh04e1ian","_id":"cl0i63w7h007zu4gbg8bq8ayj"},{"post_id":"cl0i63w6h001zu4gb2u084osn","tag_id":"cl0i63w7f007ku4gb0zzqesgi","_id":"cl0i63w7h0080u4gb7knedhxe"},{"post_id":"cl0i63w6h001zu4gb2u084osn","tag_id":"cl0i63w7f007lu4gbbh9xb7fy","_id":"cl0i63w7h0082u4gb8tr34wdv"},{"post_id":"cl0i63w6h001zu4gb2u084osn","tag_id":"cl0i63w7f007mu4gbe2nvc3l1","_id":"cl0i63w7h0083u4gba1t0ga3n"},{"post_id":"cl0i63w6h001zu4gb2u084osn","tag_id":"cl0i63w75005fu4gb1vuh0rvx","_id":"cl0i63w7h0084u4gb9051hgq9"},{"post_id":"cl0i63w6h001zu4gb2u084osn","tag_id":"cl0i63w7f007ou4gb97yh69pn","_id":"cl0i63w7i0086u4gb22jl4zya"},{"post_id":"cl0i63w6i0022u4gbhs8bd9s6","tag_id":"cl0i63w5r0005u4gb0phl0cqx","_id":"cl0i63w7i0087u4gbgeor0eo1"},{"post_id":"cl0i63w6i0022u4gbhs8bd9s6","tag_id":"cl0i63w6h001yu4gb3rwlgx6h","_id":"cl0i63w7i0089u4gbhn37dof4"},{"post_id":"cl0i63w6i0022u4gbhs8bd9s6","tag_id":"cl0i63w7f007pu4gb9xqb3mdl","_id":"cl0i63w7i008au4gb9wy8aha7"},{"post_id":"cl0i63w6i0022u4gbhs8bd9s6","tag_id":"cl0i63w7g007su4gb3v3r4l9v","_id":"cl0i63w7i008cu4gbdlnb719i"},{"post_id":"cl0i63w6j0025u4gb8s2k90aq","tag_id":"cl0i63w5r0005u4gb0phl0cqx","_id":"cl0i63w7i008du4gb5qicecbe"},{"post_id":"cl0i63w6j0025u4gb8s2k90aq","tag_id":"cl0i63w6l002eu4gb7xllgyhc","_id":"cl0i63w7j008fu4gb9y0qfq28"},{"post_id":"cl0i63w6j0025u4gb8s2k90aq","tag_id":"cl0i63w7h007yu4gbanfz6grz","_id":"cl0i63w7j008gu4gbbx2yhqv2"},{"post_id":"cl0i63w6k0029u4gbbxyfbdhf","tag_id":"cl0i63w5r0005u4gb0phl0cqx","_id":"cl0i63w7j008iu4gb0cu4bqre"},{"post_id":"cl0i63w6k0029u4gbbxyfbdhf","tag_id":"cl0i63w7h0081u4gb00jf31hs","_id":"cl0i63w7j008ju4gb0ccbajkb"},{"post_id":"cl0i63w6k0029u4gbbxyfbdhf","tag_id":"cl0i63w7h0085u4gbfqes4dfb","_id":"cl0i63w7j008ku4gbcwfccpbh"},{"post_id":"cl0i63w6l002cu4gbd8vc4l6m","tag_id":"cl0i63w5r0005u4gb0phl0cqx","_id":"cl0i63w7j008mu4gb08uteljm"},{"post_id":"cl0i63w6l002cu4gbd8vc4l6m","tag_id":"cl0i63w6l002eu4gb7xllgyhc","_id":"cl0i63w7j008nu4gb87xf1t9i"},{"post_id":"cl0i63w6l002cu4gbd8vc4l6m","tag_id":"cl0i63w7i008bu4gb3919bun6","_id":"cl0i63w7k008pu4gb4ktteax4"},{"post_id":"cl0i63w6m002gu4gb3p2mhk5u","tag_id":"cl0i63w5r0005u4gb0phl0cqx","_id":"cl0i63w7k008qu4gb25e29nrs"},{"post_id":"cl0i63w6m002gu4gb3p2mhk5u","tag_id":"cl0i63w5u000du4gb0rp2fncv","_id":"cl0i63w7k008ru4gb02iacrlq"},{"post_id":"cl0i63w6m002gu4gb3p2mhk5u","tag_id":"cl0i63w5w000iu4gbdybo3n0h","_id":"cl0i63w7l008su4gb4tfge15o"},{"post_id":"cl0i63w6m002gu4gb3p2mhk5u","tag_id":"cl0i63w7i008eu4gb429x3j64","_id":"cl0i63w7l008tu4gb00ao5s59"},{"post_id":"cl0i63w6m002gu4gb3p2mhk5u","tag_id":"cl0i63w7j008hu4gbahwt36go","_id":"cl0i63w7l008uu4gbep7b0bti"},{"post_id":"cl0i63w6m002gu4gb3p2mhk5u","tag_id":"cl0i63w7j008lu4gb75y4h4rp","_id":"cl0i63w7l008vu4gb7e9x40xu"},{"post_id":"cl0i63w6m002ju4gb01pmbubq","tag_id":"cl0i63w5r0005u4gb0phl0cqx","_id":"cl0i63w7l008wu4gbax8rg3uc"},{"post_id":"cl0i63w6m002ju4gb01pmbubq","tag_id":"cl0i63w7h0081u4gb00jf31hs","_id":"cl0i63w7l008xu4gb77w664u8"}],"Tag":[{"name":"OI","_id":"cl0i63w5r0005u4gb0phl0cqx"},{"name":"字符串","_id":"cl0i63w5u000du4gb0rp2fncv"},{"name":"数据结构","_id":"cl0i63w5w000iu4gbdybo3n0h"},{"name":"平衡树","_id":"cl0i63w60000ou4gb343r3srx"},{"name":"Fhq_Treap","_id":"cl0i63w62000uu4gbce5vhsxw"},{"name":"DP","_id":"cl0i63w680018u4gb5eww1mq5"},{"name":"多项式","_id":"cl0i63w69001fu4gbhdqbc8br"},{"name":"生成函数","_id":"cl0i63w6b001lu4gbbp4u75pk"},{"name":"图论","_id":"cl0i63w6h001yu4gb3rwlgx6h"},{"name":"圆方树","_id":"cl0i63w6k0027u4gb58ku9pf5"},{"name":"数学","_id":"cl0i63w6l002eu4gb7xllgyhc"},{"name":"矩阵乘法","_id":"cl0i63w6n002lu4gbgx32auyh"},{"name":"矩阵求逆","_id":"cl0i63w6o002ru4gbexv4b0t7"},{"name":"高斯消元","_id":"cl0i63w6o002xu4gbh3yc6ku8"},{"name":"修勾勾","_id":"cl0i63w6o0030u4gb7w432ck2"},{"name":"暴力模拟","_id":"cl0i63w6p0033u4gbeye1ayza"},{"name":"贪心","_id":"cl0i63w6p0036u4gb4kglb98v"},{"name":"动态规划","_id":"cl0i63w6p0038u4gb3qg91863"},{"name":"并查集","_id":"cl0i63w6q003bu4gbfz158rv6"},{"name":"Trie树","_id":"cl0i63w6q003eu4gb1tdugtmo"},{"name":"异或","_id":"cl0i63w6r003ku4gbgw6x2j6m"},{"name":"线性基","_id":"cl0i63w6r003mu4gb2s252251"},{"name":"计算几何","_id":"cl0i63w6r003nu4gb04xlaj98"},{"name":"凸壳","_id":"cl0i63w6s003qu4gb7v465psh"},{"name":"数形结合","_id":"cl0i63w6s003tu4gbfm4l73my"},{"name":"主席树","_id":"cl0i63w6s003xu4gb5l2eb0z6"},{"name":"后缀自动机","_id":"cl0i63w6u0045u4gbh1147cmx"},{"name":"Splay","_id":"cl0i63w6u0048u4gb1h0r6jiu"},{"name":"Tarjian","_id":"cl0i63w71004qu4gb7ujqe19g"},{"name":"连通分量","_id":"cl0i63w71004tu4gbc53r1m6f"},{"name":"割点","_id":"cl0i63w720050u4gb26nffamm"},{"name":"单调队列","_id":"cl0i63w730057u4gb0951115q"},{"name":"斜率优化","_id":"cl0i63w74005au4gbeo5g04iy"},{"name":"WQS二分","_id":"cl0i63w74005bu4gb7gde6d0x"},{"name":"NTT","_id":"cl0i63w75005fu4gb1vuh0rvx"},{"name":"多项式卷积","_id":"cl0i63w75005lu4gb1ue3bru9"},{"name":"多项式求逆","_id":"cl0i63w76005ou4gb5twbhb2p"},{"name":"多项式求导","_id":"cl0i63w76005ru4gb9rfr6os5"},{"name":"多项式求积","_id":"cl0i63w76005su4gbhovg25qr"},{"name":"多项式复合逆","_id":"cl0i63w76005tu4gb2vpgh1ml"},{"name":"多项式ln","_id":"cl0i63w76005uu4gbe9v24lfg"},{"name":"多项式exp","_id":"cl0i63w77005vu4gbgi1b8r3d"},{"name":"CRT","_id":"cl0i63w78005zu4gbfkaj48n7"},{"name":"exCRT","_id":"cl0i63w790062u4gbc4e04yl0"},{"name":"牛顿迭代","_id":"cl0i63w7a0068u4gbgd509sz3"},{"name":"拉格朗日插值法","_id":"cl0i63w7a006eu4gb5usr2yfn"},{"name":"最短路","_id":"cl0i63w7b006lu4gbcck5bv3k"},{"name":"生成树形图","_id":"cl0i63w7b006ou4gb3yfndv1x"},{"name":"FFT","_id":"cl0i63w7b006qu4gb6qmob3uy"},{"name":"FWT","_id":"cl0i63w7c006wu4gbgbesfv6h"},{"name":"MTT","_id":"cl0i63w7c006xu4gbeve97yy4"},{"name":"树链剖分","_id":"cl0i63w7d0071u4gb79nd2xpu"},{"name":"点分治","_id":"cl0i63w7d0074u4gbgbrs5pe5"},{"name":"边分治","_id":"cl0i63w7d0077u4gb1yeya4pv"},{"name":"Lucas","_id":"cl0i63w7e007hu4gb2zrt4n6a"},{"name":"exLucas","_id":"cl0i63w7e007iu4gb9erxcs0z"},{"name":"Euler","_id":"cl0i63w7f007ju4gbh04e1ian"},{"name":"exEuler","_id":"cl0i63w7f007ku4gb0zzqesgi"},{"name":"BSGS","_id":"cl0i63w7f007lu4gbbh9xb7fy"},{"name":"exBSGS","_id":"cl0i63w7f007mu4gbe2nvc3l1"},{"name":"任意模数NTT","_id":"cl0i63w7f007ou4gb97yh69pn"},{"name":"网络流","_id":"cl0i63w7f007pu4gb9xqb3mdl"},{"name":"费用流","_id":"cl0i63w7g007su4gb3v3r4l9v"},{"name":"线性筛","_id":"cl0i63w7h007yu4gbanfz6grz"},{"name":"莫比乌斯反演","_id":"cl0i63w7h0081u4gb00jf31hs"},{"name":"杜教筛","_id":"cl0i63w7h0085u4gbfqes4dfb"},{"name":"群论","_id":"cl0i63w7i008bu4gb3919bun6"},{"name":"KMP","_id":"cl0i63w7i008eu4gb429x3j64"},{"name":"AC自动机","_id":"cl0i63w7j008hu4gbahwt36go"},{"name":"Manachar","_id":"cl0i63w7j008lu4gb75y4h4rp"}]}}